
App_009_Example_4.6_Combine_Blocking_and_Non_Blocking_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006904  08006904  00008020  2**0
                  CONTENTS
  4 .ARM          00000008  08006904  08006904  00007904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800690c  0800690c  00008020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08006914  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008020  2**0
                  CONTENTS
 10 .bss          000198b8  20000020  20000020  00008020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200198d8  200198d8  00008020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179a0  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311b  00000000  00000000  0001f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a8  00000000  00000000  00022b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d2  00000000  00000000  000240b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024447  00000000  00000000  0002518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001952a  00000000  00000000  000495d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea7de  00000000  00000000  00062afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d2d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b14  00000000  00000000  0014d31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  00152e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800675c 	.word	0x0800675c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	0800675c 	.word	0x0800675c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e60 	.word	0x20012e60

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb27 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f849 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8db 	bl	800071c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8af 	bl	80006c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056a:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <main+0x7c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a18      	ldr	r2, [pc, #96]	@ (80005d0 <main+0x7c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000576:	f004 fbcf 	bl	8004d18 <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057a:	f005 f925 	bl	80057c8 <SEGGER_SYSVIEW_Start>

  /* create the first continuous task with a priority of 1 */
  xTaskCreate( vContinuousProcessingTask,          /* pointer to the function that implements the task */
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <main+0x80>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800058e:	4912      	ldr	r1, [pc, #72]	@ (80005d8 <main+0x84>)
 8000590:	4812      	ldr	r0, [pc, #72]	@ (80005dc <main+0x88>)
 8000592:	f002 fd4a 	bl	800302a <xTaskCreate>
               ( void* ) pcTextForContinuousTask1, /* pass the text to be printed into the task using the task parameter */
               1,                                  /* this task will run at priority 1 */
               NULL );                             /* this example does not use the task handle */

  /* create the second continuous task also with priority 1 */
  xTaskCreate( vContinuousProcessingTask, "Cont. Task 2", 1000, ( void* ) pcTextForContinuousTask2, 1, NULL );
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <main+0x8c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a6:	490f      	ldr	r1, [pc, #60]	@ (80005e4 <main+0x90>)
 80005a8:	480c      	ldr	r0, [pc, #48]	@ (80005dc <main+0x88>)
 80005aa:	f002 fd3e 	bl	800302a <xTaskCreate>

  /* create the periodic task with a priority of 2 (higher than the other tasks) */
  xTaskCreate( vPeriodicTask, "Per. Task", 1000, ( void* ) pcTextForPeriodicTask, 2, NULL );
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <main+0x94>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2200      	movs	r2, #0
 80005b4:	9201      	str	r2, [sp, #4]
 80005b6:	2202      	movs	r2, #2
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005be:	490b      	ldr	r1, [pc, #44]	@ (80005ec <main+0x98>)
 80005c0:	480b      	ldr	r0, [pc, #44]	@ (80005f0 <main+0x9c>)
 80005c2:	f002 fd32 	bl	800302a <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 80005c6:	f002 ff6f 	bl	80034a8 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x76>
 80005ce:	bf00      	nop
 80005d0:	e0001000 	.word	0xe0001000
 80005d4:	20000000 	.word	0x20000000
 80005d8:	080067d0 	.word	0x080067d0
 80005dc:	0800087d 	.word	0x0800087d
 80005e0:	20000004 	.word	0x20000004
 80005e4:	080067e0 	.word	0x080067e0
 80005e8:	20000008 	.word	0x20000008
 80005ec:	080067f0 	.word	0x080067f0
 80005f0:	080008ad 	.word	0x080008ad

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	@ 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 f86f 	bl	80066e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	@ 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000668:	2332      	movs	r3, #50	@ 0x32
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066c:	2304      	movs	r3, #4
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fd71 	bl	8001160 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 f93e 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 ffd2 	bl	8001650 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f927 	bl	8000904 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	@ 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f001 fc9a 	bl	8002038 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8fb 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000003c 	.word	0x2000003c
 8000718:	40004400 	.word	0x40004400

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b3c      	ldr	r3, [pc, #240]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a3b      	ldr	r2, [pc, #236]	@ (8000828 <MX_GPIO_Init+0x10c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b39      	ldr	r3, [pc, #228]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a34      	ldr	r2, [pc, #208]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a2d      	ldr	r2, [pc, #180]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000774:	f043 0308 	orr.w	r3, r3, #8
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_GPIO_Init+0x10c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0308 	and.w	r3, r3, #8
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_GPIO_Init+0x10c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a26      	ldr	r2, [pc, #152]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_GPIO_Init+0x10c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007a8:	4820      	ldr	r0, [pc, #128]	@ (800082c <MX_GPIO_Init+0x110>)
 80007aa:	f000 fcbf 	bl	800112c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	481b      	ldr	r0, [pc, #108]	@ (8000830 <MX_GPIO_Init+0x114>)
 80007c4:	f000 fb16 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c8:	2304      	movs	r3, #4
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4816      	ldr	r0, [pc, #88]	@ (8000834 <MX_GPIO_Init+0x118>)
 80007dc:	f000 fb0a 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007e0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_GPIO_Init+0x110>)
 80007fa:	f000 fafb 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800080e:	2306      	movs	r3, #6
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_GPIO_Init+0x11c>)
 800081a:	f000 faeb 	bl	8000df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400
 8000838:	40020800 	.word	0x40020800

0800083c <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string untill null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e00b      	b.n	8000864 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	18d1      	adds	r1, r2, r3
 8000852:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000856:	2201      	movs	r2, #1
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f001 fc3d 	bl	80020d8 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	3301      	adds	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	7bfb      	ldrb	r3, [r7, #15]
 8000866:	683a      	ldr	r2, [r7, #0]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1ed      	bne.n	800084c <UART2_Print_Text+0x10>
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <vContinuousProcessingTask>:

void vContinuousProcessingTask( void *pvParameters )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* String to print out is passed in via the parameter.
     Cast this to a character pointer to obtain the string the task should print out */
  const char *pcTaskName   = ( const char* ) pvParameters;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	60fb      	str	r3, [r7, #12]
  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* Print out the name of the current task.
       The task just does this repeatedly without ever blocking */
    UART2_Print_Text( &huart2, pcTaskName );
 8000888:	68f9      	ldr	r1, [r7, #12]
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <vContinuousProcessingTask+0x2c>)
 800088c:	f7ff ffd6 	bl	800083c <UART2_Print_Text>

    /* crude busy loop */
    for ( ulCount = 0; ulCount < mainDELAY_LOOP_COUNT; ulCount++ )
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	e002      	b.n	800089c <vContinuousProcessingTask+0x20>
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	3301      	adds	r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008a2:	d3f8      	bcc.n	8000896 <vContinuousProcessingTask+0x1a>
    UART2_Print_Text( &huart2, pcTaskName );
 80008a4:	e7f0      	b.n	8000888 <vContinuousProcessingTask+0xc>
 80008a6:	bf00      	nop
 80008a8:	2000003c 	.word	0x2000003c

080008ac <vPeriodicTask>:
    }
  }
}

void vPeriodicTask( void *pvParameters )
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* String to print out is passed in via the parameter.
     Cast this to a character pointer to obtain the string the task should print out */
  const char *pcTaskName = ( const char* ) pvParameters;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	617b      	str	r3, [r7, #20]

  /* The xLastWakeTime variable needs to be initialized with the current tick count.
     Note that this is the only time the variable is written to explicitly.
     After this, xLastWakeTime is automatically updated within xTaskDelayUntil() */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80008b8:	f002 ff70 	bl	800379c <xTaskGetTickCount>
 80008bc:	4603      	mov	r3, r0
 80008be:	60fb      	str	r3, [r7, #12]

  /* get 3 milliseconds equivalent in ticks */
  const TickType_t xDelay5ms = pdMS_TO_TICKS( 5 );
 80008c0:	2305      	movs	r3, #5
 80008c2:	613b      	str	r3, [r7, #16]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* print out the name of the current task */
    UART2_Print_Text( &huart2, pcTaskName );
 80008c4:	6979      	ldr	r1, [r7, #20]
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <vPeriodicTask+0x30>)
 80008c8:	f7ff ffb8 	bl	800083c <UART2_Print_Text>
    /* This task should execute every 3 milliseconds exactly (see the declaration of xDelay5ms above).
       As per the vTaskDelay() function, time is measured in ticks and
       the pdMS_TO_TICKS() macro is used to convert milliseconds into ticks.
       xLastWakeTime is automatically updated within xTaskDelayUntil(),
       so is not explicitly updated by the task */
    xTaskDelayUntil( &xLastWakeTime, xDelay5ms );
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	6939      	ldr	r1, [r7, #16]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f002 fd18 	bl	8003308 <xTaskDelayUntil>
    UART2_Print_Text( &huart2, pcTaskName );
 80008d8:	bf00      	nop
 80008da:	e7f3      	b.n	80008c4 <vPeriodicTask+0x18>
 80008dc:	2000003c 	.word	0x2000003c

080008e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d101      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f2:	f000 f97d 	bl	8000bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40001000 	.word	0x40001000

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fa1b 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	@ (80009e4 <HAL_UART_MspInit+0x84>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12b      	bne.n	80009da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	230c      	movs	r3, #12
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <HAL_UART_MspInit+0x8c>)
 80009d6:	f000 fa0d 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	@ 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	@ 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <HAL_InitTick+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	4a32      	ldr	r2, [pc, #200]	@ (8000ad4 <HAL_InitTick+0xe4>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a10:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f832 	bl	8001a90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a36:	f001 f803 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8000a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3e:	f000 ffff 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8000a42:	4603      	mov	r3, r0
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xe8>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xec>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_InitTick+0xf0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <HAL_InitTick+0xec>)
 8000a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <HAL_InitTick+0xec>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_InitTick+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <HAL_InitTick+0xec>)
 8000a7e:	f001 f839 	bl	8001af4 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_InitTick+0xec>)
 8000a92:	f001 f889 	bl	8001ba8 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa4:	2036      	movs	r0, #54	@ 0x36
 8000aa6:	f000 f997 	bl	8000dd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2036      	movs	r0, #54	@ 0x36
 8000ab6:	f000 f973 	bl	8000da0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xf4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	@ 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000084 	.word	0x20000084
 8000ae0:	40001000 	.word	0x40001000
 8000ae4:	20000010 	.word	0x20000010

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM6_DAC_IRQHandler+0x10>)
 8000b26:	f001 f8af 	bl	8001c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000084 	.word	0x20000084

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <SystemInit+0x20>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <SystemInit+0x20>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b5c:	f7ff ffea 	bl	8000b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	@ (8000b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f005 fdb7 	bl	80066f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8a:	f7ff fce3 	bl	8000554 <main>
  bx  lr    
 8000b8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000b9c:	08006914 	.word	0x08006914
  ldr r2, =_sbss
 8000ba0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000ba4:	200198d8 	.word	0x200198d8

08000ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <HAL_Init+0x40>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_Init+0x40>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_Init+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <HAL_Init+0x40>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f8d8 	bl	8000d8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ff08 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe96 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023c00 	.word	0x40023c00

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000014 	.word	0x20000014
 8000c14:	200000cc 	.word	0x200000cc

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000cc 	.word	0x200000cc

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	@ (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	@ (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	@ (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	@ (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	@ 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	@ 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff ff4c 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db2:	f7ff ff61 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	6978      	ldr	r0, [r7, #20]
 8000dbe:	f7ff ffb1 	bl	8000d24 <NVIC_EncodePriority>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff80 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff ff54 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	@ 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e16b      	b.n	80010e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 815a 	bne.w	80010e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80b4 	beq.w	80010e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b60      	ldr	r3, [pc, #384]	@ (8001100 <HAL_GPIO_Init+0x30c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	4a5f      	ldr	r2, [pc, #380]	@ (8001100 <HAL_GPIO_Init+0x30c>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001100 <HAL_GPIO_Init+0x30c>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a5b      	ldr	r2, [pc, #364]	@ (8001104 <HAL_GPIO_Init+0x310>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	@ (8001108 <HAL_GPIO_Init+0x314>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d02b      	beq.n	800101a <HAL_GPIO_Init+0x226>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	@ (800110c <HAL_GPIO_Init+0x318>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d025      	beq.n	8001016 <HAL_GPIO_Init+0x222>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a50      	ldr	r2, [pc, #320]	@ (8001110 <HAL_GPIO_Init+0x31c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d01f      	beq.n	8001012 <HAL_GPIO_Init+0x21e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8001114 <HAL_GPIO_Init+0x320>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d019      	beq.n	800100e <HAL_GPIO_Init+0x21a>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8001118 <HAL_GPIO_Init+0x324>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d013      	beq.n	800100a <HAL_GPIO_Init+0x216>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800111c <HAL_GPIO_Init+0x328>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d00d      	beq.n	8001006 <HAL_GPIO_Init+0x212>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4c      	ldr	r2, [pc, #304]	@ (8001120 <HAL_GPIO_Init+0x32c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d007      	beq.n	8001002 <HAL_GPIO_Init+0x20e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8001124 <HAL_GPIO_Init+0x330>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_Init+0x20a>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00e      	b.n	800101c <HAL_GPIO_Init+0x228>
 8000ffe:	2308      	movs	r3, #8
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x228>
 8001002:	2306      	movs	r3, #6
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x228>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x228>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x228>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x228>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x228>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x228>
 800101a:	2300      	movs	r3, #0
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800102c:	4935      	ldr	r1, [pc, #212]	@ (8001104 <HAL_GPIO_Init+0x310>)
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103a:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <HAL_GPIO_Init+0x334>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105e:	4a32      	ldr	r2, [pc, #200]	@ (8001128 <HAL_GPIO_Init+0x334>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001064:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_GPIO_Init+0x334>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <HAL_GPIO_Init+0x334>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <HAL_GPIO_Init+0x334>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_GPIO_Init+0x334>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_GPIO_Init+0x334>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <HAL_GPIO_Init+0x334>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3301      	adds	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b0f      	cmp	r3, #15
 80010ec:	f67f ae90 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3724      	adds	r7, #36	@ 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40013800 	.word	0x40013800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40021000 	.word	0x40021000
 800111c:	40021400 	.word	0x40021400
 8001120:	40021800 	.word	0x40021800
 8001124:	40021c00 	.word	0x40021c00
 8001128:	40013c00 	.word	0x40013c00

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e267      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d075      	beq.n	800126a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117e:	4b88      	ldr	r3, [pc, #544]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4b85      	ldr	r3, [pc, #532]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4b82      	ldr	r3, [pc, #520]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800119e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b7e      	ldr	r3, [pc, #504]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d05b      	beq.n	8001268 <HAL_RCC_OscConfig+0x108>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d157      	bne.n	8001268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e242      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x74>
 80011c6:	4b76      	ldr	r3, [pc, #472]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a75      	ldr	r2, [pc, #468]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b70      	ldr	r3, [pc, #448]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a6f      	ldr	r2, [pc, #444]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a6c      	ldr	r2, [pc, #432]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011f8:	4b69      	ldr	r3, [pc, #420]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a68      	ldr	r2, [pc, #416]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b66      	ldr	r3, [pc, #408]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a65      	ldr	r2, [pc, #404]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800120e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fcfe 	bl	8000c18 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fcfa 	bl	8000c18 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	@ 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e207      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b5b      	ldr	r3, [pc, #364]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xc0>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fcea 	bl	8000c18 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fce6 	bl	8000c18 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	@ 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1f3      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b51      	ldr	r3, [pc, #324]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0xe8>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	4b4a      	ldr	r3, [pc, #296]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b47      	ldr	r3, [pc, #284]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b44      	ldr	r3, [pc, #272]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b41      	ldr	r3, [pc, #260]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1c7      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4937      	ldr	r1, [pc, #220]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_RCC_OscConfig+0x244>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fc9f 	bl	8000c18 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fc9b 	bl	8000c18 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e1a8      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b2b      	ldr	r3, [pc, #172]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b28      	ldr	r3, [pc, #160]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4925      	ldr	r1, [pc, #148]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b24      	ldr	r3, [pc, #144]	@ (80013a4 <HAL_RCC_OscConfig+0x244>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc7e 	bl	8000c18 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fc7a 	bl	8000c18 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e187      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d036      	beq.n	80013b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_RCC_OscConfig+0x248>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fc5e 	bl	8000c18 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fc5a 	bl	8000c18 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e167      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <HAL_RCC_OscConfig+0x240>)
 8001374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x200>
 800137e:	e01b      	b.n	80013b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HAL_RCC_OscConfig+0x248>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fc47 	bl	8000c18 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	e00e      	b.n	80013ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fc43 	bl	8000c18 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d907      	bls.n	80013ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e150      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470000 	.word	0x42470000
 80013a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80013ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1ea      	bne.n	800138e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8097 	beq.w	80014f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b81      	ldr	r3, [pc, #516]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10f      	bne.n	80013f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b7d      	ldr	r3, [pc, #500]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a7c      	ldr	r2, [pc, #496]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b7a      	ldr	r3, [pc, #488]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b77      	ldr	r3, [pc, #476]	@ (80015d4 <HAL_RCC_OscConfig+0x474>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d118      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b74      	ldr	r3, [pc, #464]	@ (80015d4 <HAL_RCC_OscConfig+0x474>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a73      	ldr	r2, [pc, #460]	@ (80015d4 <HAL_RCC_OscConfig+0x474>)
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140e:	f7ff fc03 	bl	8000c18 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff fbff 	bl	8000c18 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e10c      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	4b6a      	ldr	r3, [pc, #424]	@ (80015d4 <HAL_RCC_OscConfig+0x474>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x2ea>
 800143c:	4b64      	ldr	r3, [pc, #400]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001440:	4a63      	ldr	r2, [pc, #396]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6713      	str	r3, [r2, #112]	@ 0x70
 8001448:	e01c      	b.n	8001484 <HAL_RCC_OscConfig+0x324>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x30c>
 8001452:	4b5f      	ldr	r3, [pc, #380]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001456:	4a5e      	ldr	r2, [pc, #376]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6713      	str	r3, [r2, #112]	@ 0x70
 800145e:	4b5c      	ldr	r3, [pc, #368]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001462:	4a5b      	ldr	r2, [pc, #364]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6713      	str	r3, [r2, #112]	@ 0x70
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x324>
 800146c:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001470:	4a57      	ldr	r2, [pc, #348]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6713      	str	r3, [r2, #112]	@ 0x70
 8001478:	4b55      	ldr	r3, [pc, #340]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800147c:	4a54      	ldr	r2, [pc, #336]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d015      	beq.n	80014b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800148c:	f7ff fbc4 	bl	8000c18 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001492:	e00a      	b.n	80014aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001494:	f7ff fbc0 	bl	8000c18 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0cb      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014aa:	4b49      	ldr	r3, [pc, #292]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ee      	beq.n	8001494 <HAL_RCC_OscConfig+0x334>
 80014b6:	e014      	b.n	80014e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbae 	bl	8000c18 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbaa 	bl	8000c18 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0b5      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d6:	4b3e      	ldr	r3, [pc, #248]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ee      	bne.n	80014c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e8:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ec:	4a38      	ldr	r2, [pc, #224]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a1 	beq.w	8001640 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014fe:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b08      	cmp	r3, #8
 8001508:	d05c      	beq.n	80015c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d141      	bne.n	8001596 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001512:	4b31      	ldr	r3, [pc, #196]	@ (80015d8 <HAL_RCC_OscConfig+0x478>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fb7e 	bl	8000c18 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fb7a 	bl	8000c18 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e087      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	491b      	ldr	r1, [pc, #108]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_RCC_OscConfig+0x478>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fb53 	bl	8000c18 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fb4f 	bl	8000c18 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e05c      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x416>
 8001594:	e054      	b.n	8001640 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <HAL_RCC_OscConfig+0x478>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fb3c 	bl	8000c18 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a4:	f7ff fb38 	bl	8000c18 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e045      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
 80015c2:	e03d      	b.n	8001640 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e038      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000
 80015d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_RCC_OscConfig+0x4ec>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d028      	beq.n	800163c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d121      	bne.n	800163c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d11a      	bne.n	800163c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800160c:	4013      	ands	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001612:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001614:	4293      	cmp	r3, r2
 8001616:	d111      	bne.n	800163c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	3b01      	subs	r3, #1
 8001626:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d107      	bne.n	800163c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001636:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800

08001650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0cc      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001664:	4b68      	ldr	r3, [pc, #416]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d90c      	bls.n	800168c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001672:	4b65      	ldr	r3, [pc, #404]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b63      	ldr	r3, [pc, #396]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b8      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a4:	4b59      	ldr	r3, [pc, #356]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4a58      	ldr	r2, [pc, #352]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016bc:	4b53      	ldr	r3, [pc, #332]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4a52      	ldr	r2, [pc, #328]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c8:	4b50      	ldr	r3, [pc, #320]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	494d      	ldr	r1, [pc, #308]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d044      	beq.n	8001770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b47      	ldr	r3, [pc, #284]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d119      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e07f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d003      	beq.n	800170e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800170a:	2b03      	cmp	r3, #3
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	4b3f      	ldr	r3, [pc, #252]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e067      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0203 	bic.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4934      	ldr	r1, [pc, #208]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001740:	f7ff fa6a 	bl	8000c18 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	e00a      	b.n	800175e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7ff fa66 	bl	8000c18 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e04f      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 020c 	and.w	r2, r3, #12
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	429a      	cmp	r2, r3
 800176e:	d1eb      	bne.n	8001748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20c      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e032      	b.n	80017fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4916      	ldr	r1, [pc, #88]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490e      	ldr	r1, [pc, #56]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f821 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017da:	4602      	mov	r2, r0
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	490a      	ldr	r1, [pc, #40]	@ (8001810 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	5ccb      	ldrb	r3, [r1, r3]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f8fa 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023c00 	.word	0x40023c00
 800180c:	40023800 	.word	0x40023800
 8001810:	080068c4 	.word	0x080068c4
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000010 	.word	0x20000010

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001820:	b094      	sub	sp, #80	@ 0x50
 8001822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	647b      	str	r3, [r7, #68]	@ 0x44
 8001828:	2300      	movs	r3, #0
 800182a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800182c:	2300      	movs	r3, #0
 800182e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001834:	4b79      	ldr	r3, [pc, #484]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d00d      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x40>
 8001840:	2b08      	cmp	r3, #8
 8001842:	f200 80e1 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x34>
 800184a:	2b04      	cmp	r3, #4
 800184c:	d003      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x3a>
 800184e:	e0db      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b73      	ldr	r3, [pc, #460]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001854:	e0db      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b73      	ldr	r3, [pc, #460]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0x208>)
 8001858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800185a:	e0d8      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185c:	4b6f      	ldr	r3, [pc, #444]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d063      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b6a      	ldr	r3, [pc, #424]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	2200      	movs	r2, #0
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800187c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800187e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001884:	633b      	str	r3, [r7, #48]	@ 0x30
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	@ 0x34
 800188a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800188e:	4622      	mov	r2, r4
 8001890:	462b      	mov	r3, r5
 8001892:	f04f 0000 	mov.w	r0, #0
 8001896:	f04f 0100 	mov.w	r1, #0
 800189a:	0159      	lsls	r1, r3, #5
 800189c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a0:	0150      	lsls	r0, r2, #5
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4621      	mov	r1, r4
 80018a8:	1a51      	subs	r1, r2, r1
 80018aa:	6139      	str	r1, [r7, #16]
 80018ac:	4629      	mov	r1, r5
 80018ae:	eb63 0301 	sbc.w	r3, r3, r1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018c0:	4659      	mov	r1, fp
 80018c2:	018b      	lsls	r3, r1, #6
 80018c4:	4651      	mov	r1, sl
 80018c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ca:	4651      	mov	r1, sl
 80018cc:	018a      	lsls	r2, r1, #6
 80018ce:	4651      	mov	r1, sl
 80018d0:	ebb2 0801 	subs.w	r8, r2, r1
 80018d4:	4659      	mov	r1, fp
 80018d6:	eb63 0901 	sbc.w	r9, r3, r1
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ee:	4690      	mov	r8, r2
 80018f0:	4699      	mov	r9, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	eb18 0303 	adds.w	r3, r8, r3
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	462b      	mov	r3, r5
 80018fc:	eb49 0303 	adc.w	r3, r9, r3
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800190e:	4629      	mov	r1, r5
 8001910:	024b      	lsls	r3, r1, #9
 8001912:	4621      	mov	r1, r4
 8001914:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001918:	4621      	mov	r1, r4
 800191a:	024a      	lsls	r2, r1, #9
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001922:	2200      	movs	r2, #0
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001926:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001928:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800192c:	f7fe fc9a 	bl	8000264 <__aeabi_uldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4613      	mov	r3, r2
 8001936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001938:	e058      	b.n	80019ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800193a:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	2200      	movs	r2, #0
 8001942:	4618      	mov	r0, r3
 8001944:	4611      	mov	r1, r2
 8001946:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001950:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001954:	4642      	mov	r2, r8
 8001956:	464b      	mov	r3, r9
 8001958:	f04f 0000 	mov.w	r0, #0
 800195c:	f04f 0100 	mov.w	r1, #0
 8001960:	0159      	lsls	r1, r3, #5
 8001962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001966:	0150      	lsls	r0, r2, #5
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4641      	mov	r1, r8
 800196e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001972:	4649      	mov	r1, r9
 8001974:	eb63 0b01 	sbc.w	fp, r3, r1
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001984:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001988:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800198c:	ebb2 040a 	subs.w	r4, r2, sl
 8001990:	eb63 050b 	sbc.w	r5, r3, fp
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	00eb      	lsls	r3, r5, #3
 800199e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a2:	00e2      	lsls	r2, r4, #3
 80019a4:	4614      	mov	r4, r2
 80019a6:	461d      	mov	r5, r3
 80019a8:	4643      	mov	r3, r8
 80019aa:	18e3      	adds	r3, r4, r3
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	464b      	mov	r3, r9
 80019b0:	eb45 0303 	adc.w	r3, r5, r3
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c2:	4629      	mov	r1, r5
 80019c4:	028b      	lsls	r3, r1, #10
 80019c6:	4621      	mov	r1, r4
 80019c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019cc:	4621      	mov	r1, r4
 80019ce:	028a      	lsls	r2, r1, #10
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019d6:	2200      	movs	r2, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	61fa      	str	r2, [r7, #28]
 80019dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019e0:	f7fe fc40 	bl	8000264 <__aeabi_uldivmod>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4613      	mov	r3, r2
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019ec:	4b0b      	ldr	r3, [pc, #44]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	0c1b      	lsrs	r3, r3, #16
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	3301      	adds	r3, #1
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3750      	adds	r7, #80	@ 0x50
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c

08001a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	0a9b      	lsrs	r3, r3, #10
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	4903      	ldr	r1, [pc, #12]	@ (8001a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	080068d4 	.word	0x080068d4

08001a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a6c:	f7ff ffdc 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b05      	ldr	r3, [pc, #20]	@ (8001a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0b5b      	lsrs	r3, r3, #13
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4903      	ldr	r1, [pc, #12]	@ (8001a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	080068d4 	.word	0x080068d4

08001a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0203 	and.w	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	08db      	lsrs	r3, r3, #3
 8001aca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <HAL_RCC_GetClockConfig+0x60>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0207 	and.w	r2, r3, #7
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40023c00 	.word	0x40023c00

08001af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e041      	b.n	8001b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f839 	bl	8001b92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	4619      	mov	r1, r3
 8001b32:	4610      	mov	r0, r2
 8001b34:	f000 f9c0 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d001      	beq.n	8001bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e04e      	b.n	8001c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a23      	ldr	r2, [pc, #140]	@ (8001c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d022      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bea:	d01d      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d018      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d013      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	@ (8001c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00e      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d010      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4a:	e007      	b.n	8001c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40000800 	.word	0x40000800
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	40010400 	.word	0x40010400
 8001c80:	40014000 	.word	0x40014000
 8001c84:	40001800 	.word	0x40001800

08001c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01b      	beq.n	8001cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0202 	mvn.w	r2, #2
 8001cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8d2 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8c4 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8d5 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d020      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0204 	mvn.w	r2, #4
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8ac 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f89e 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8af 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d020      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0208 	mvn.w	r2, #8
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2204      	movs	r2, #4
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f886 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f878 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f889 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0210 	mvn.w	r2, #16
 8001da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2208      	movs	r2, #8
 8001da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f860 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f852 	bl	8001e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f863 	bl	8001e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00c      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fd76 	bl	80008e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00c      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f906 	bl	8002024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f834 	bl	8001ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00c      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0220 	mvn.w	r2, #32
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8d8 	bl	8002010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a46      	ldr	r2, [pc, #280]	@ (8001fe4 <TIM_Base_SetConfig+0x12c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d013      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed6:	d00f      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a43      	ldr	r2, [pc, #268]	@ (8001fe8 <TIM_Base_SetConfig+0x130>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d00b      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a42      	ldr	r2, [pc, #264]	@ (8001fec <TIM_Base_SetConfig+0x134>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d007      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a41      	ldr	r2, [pc, #260]	@ (8001ff0 <TIM_Base_SetConfig+0x138>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d003      	beq.n	8001ef8 <TIM_Base_SetConfig+0x40>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	@ (8001ff4 <TIM_Base_SetConfig+0x13c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d108      	bne.n	8001f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a35      	ldr	r2, [pc, #212]	@ (8001fe4 <TIM_Base_SetConfig+0x12c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f18:	d027      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <TIM_Base_SetConfig+0x130>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d023      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a31      	ldr	r2, [pc, #196]	@ (8001fec <TIM_Base_SetConfig+0x134>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a30      	ldr	r2, [pc, #192]	@ (8001ff0 <TIM_Base_SetConfig+0x138>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d01b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff4 <TIM_Base_SetConfig+0x13c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d017      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ff8 <TIM_Base_SetConfig+0x140>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d013      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a2d      	ldr	r2, [pc, #180]	@ (8001ffc <TIM_Base_SetConfig+0x144>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00f      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002000 <TIM_Base_SetConfig+0x148>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2b      	ldr	r2, [pc, #172]	@ (8002004 <TIM_Base_SetConfig+0x14c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <TIM_Base_SetConfig+0x150>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a29      	ldr	r2, [pc, #164]	@ (800200c <TIM_Base_SetConfig+0x154>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <TIM_Base_SetConfig+0x12c>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d003      	beq.n	8001fb0 <TIM_Base_SetConfig+0xf8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <TIM_Base_SetConfig+0x13c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d103      	bne.n	8001fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	691a      	ldr	r2, [r3, #16]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f023 0201 	bic.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	611a      	str	r2, [r3, #16]
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40010400 	.word	0x40010400
 8001ff8:	40014000 	.word	0x40014000
 8001ffc:	40014400 	.word	0x40014400
 8002000:	40014800 	.word	0x40014800
 8002004:	40001800 	.word	0x40001800
 8002008:	40001c00 	.word	0x40001c00
 800200c:	40002000 	.word	0x40002000

08002010 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e042      	b.n	80020d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fc7e 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	@ 0x24
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800207a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f973 	bl	8002368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002090:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	@ 0x28
 80020dc:	af02      	add	r7, sp, #8
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d175      	bne.n	80021e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_UART_Transmit+0x2c>
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e06e      	b.n	80021e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2221      	movs	r2, #33	@ 0x21
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002116:	f7fe fd7f 	bl	8000c18 <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	88fa      	ldrh	r2, [r7, #6]
 8002126:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002130:	d108      	bne.n	8002144 <HAL_UART_Transmit+0x6c>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	e003      	b.n	800214c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800214c:	e02e      	b.n	80021ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 f848 	bl	80021ee <UART_WaitOnFlagUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e03a      	b.n	80021e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10b      	bne.n	800218e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	3302      	adds	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e007      	b.n	800219e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1cb      	bne.n	800214e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2200      	movs	r2, #0
 80021be:	2140      	movs	r1, #64	@ 0x40
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f814 	bl	80021ee <UART_WaitOnFlagUntilTimeout>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e006      	b.n	80021e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fe:	e03b      	b.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d037      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002208:	f7fe fd06 	bl	8000c18 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	6a3a      	ldr	r2, [r7, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d302      	bcc.n	800221e <UART_WaitOnFlagUntilTimeout+0x30>
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e03a      	b.n	8002298 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d023      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b80      	cmp	r3, #128	@ 0x80
 8002234:	d020      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b40      	cmp	r3, #64	@ 0x40
 800223a:	d01d      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b08      	cmp	r3, #8
 8002248:	d116      	bne.n	8002278 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f81d 	bl	80022a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2208      	movs	r2, #8
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00f      	b.n	8002298 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	429a      	cmp	r2, r3
 8002294:	d0b4      	beq.n	8002200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b095      	sub	sp, #84	@ 0x54
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	330c      	adds	r3, #12
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b2:	e853 3f00 	ldrex	r3, [r3]
 80022b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022d0:	e841 2300 	strex	r3, r2, [r1]
 80022d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e5      	bne.n	80022a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3314      	adds	r3, #20
 80022e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	e853 3f00 	ldrex	r3, [r3]
 80022ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f023 0301 	bic.w	r3, r3, #1
 80022f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3314      	adds	r3, #20
 80022fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	2b01      	cmp	r3, #1
 8002316:	d119      	bne.n	800234c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	330c      	adds	r3, #12
 800231e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	e853 3f00 	ldrex	r3, [r3]
 8002326:	60bb      	str	r3, [r7, #8]
   return(result);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f023 0310 	bic.w	r3, r3, #16
 800232e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002338:	61ba      	str	r2, [r7, #24]
 800233a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233c:	6979      	ldr	r1, [r7, #20]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	e841 2300 	strex	r3, r2, [r1]
 8002344:	613b      	str	r3, [r7, #16]
   return(result);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e5      	bne.n	8002318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800235a:	bf00      	nop
 800235c:	3754      	adds	r7, #84	@ 0x54
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800236c:	b0c0      	sub	sp, #256	@ 0x100
 800236e:	af00      	add	r7, sp, #0
 8002370:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	68d9      	ldr	r1, [r3, #12]
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	ea40 0301 	orr.w	r3, r0, r1
 8002390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	431a      	orrs	r2, r3
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023c0:	f021 010c 	bic.w	r1, r1, #12
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ce:	430b      	orrs	r3, r1
 80023d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e2:	6999      	ldr	r1, [r3, #24]
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	ea40 0301 	orr.w	r3, r0, r1
 80023ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002634 <UART_SetConfig+0x2cc>)
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d005      	beq.n	8002408 <UART_SetConfig+0xa0>
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4b8d      	ldr	r3, [pc, #564]	@ (8002638 <UART_SetConfig+0x2d0>)
 8002404:	429a      	cmp	r2, r3
 8002406:	d104      	bne.n	8002412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002408:	f7ff fb2e 	bl	8001a68 <HAL_RCC_GetPCLK2Freq>
 800240c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002410:	e003      	b.n	800241a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002412:	f7ff fb15 	bl	8001a40 <HAL_RCC_GetPCLK1Freq>
 8002416:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002424:	f040 810c 	bne.w	8002640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800242c:	2200      	movs	r2, #0
 800242e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002432:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800243a:	4622      	mov	r2, r4
 800243c:	462b      	mov	r3, r5
 800243e:	1891      	adds	r1, r2, r2
 8002440:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002442:	415b      	adcs	r3, r3
 8002444:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800244a:	4621      	mov	r1, r4
 800244c:	eb12 0801 	adds.w	r8, r2, r1
 8002450:	4629      	mov	r1, r5
 8002452:	eb43 0901 	adc.w	r9, r3, r1
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800246a:	4690      	mov	r8, r2
 800246c:	4699      	mov	r9, r3
 800246e:	4623      	mov	r3, r4
 8002470:	eb18 0303 	adds.w	r3, r8, r3
 8002474:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002478:	462b      	mov	r3, r5
 800247a:	eb49 0303 	adc.w	r3, r9, r3
 800247e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800248e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002496:	460b      	mov	r3, r1
 8002498:	18db      	adds	r3, r3, r3
 800249a:	653b      	str	r3, [r7, #80]	@ 0x50
 800249c:	4613      	mov	r3, r2
 800249e:	eb42 0303 	adc.w	r3, r2, r3
 80024a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80024a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024ac:	f7fd feda 	bl	8000264 <__aeabi_uldivmod>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4b61      	ldr	r3, [pc, #388]	@ (800263c <UART_SetConfig+0x2d4>)
 80024b6:	fba3 2302 	umull	r2, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	011c      	lsls	r4, r3, #4
 80024be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024d0:	4642      	mov	r2, r8
 80024d2:	464b      	mov	r3, r9
 80024d4:	1891      	adds	r1, r2, r2
 80024d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024d8:	415b      	adcs	r3, r3
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024e0:	4641      	mov	r1, r8
 80024e2:	eb12 0a01 	adds.w	sl, r2, r1
 80024e6:	4649      	mov	r1, r9
 80024e8:	eb43 0b01 	adc.w	fp, r3, r1
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002500:	4692      	mov	sl, r2
 8002502:	469b      	mov	fp, r3
 8002504:	4643      	mov	r3, r8
 8002506:	eb1a 0303 	adds.w	r3, sl, r3
 800250a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800250e:	464b      	mov	r3, r9
 8002510:	eb4b 0303 	adc.w	r3, fp, r3
 8002514:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002524:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800252c:	460b      	mov	r3, r1
 800252e:	18db      	adds	r3, r3, r3
 8002530:	643b      	str	r3, [r7, #64]	@ 0x40
 8002532:	4613      	mov	r3, r2
 8002534:	eb42 0303 	adc.w	r3, r2, r3
 8002538:	647b      	str	r3, [r7, #68]	@ 0x44
 800253a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800253e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002542:	f7fd fe8f 	bl	8000264 <__aeabi_uldivmod>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4611      	mov	r1, r2
 800254c:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <UART_SetConfig+0x2d4>)
 800254e:	fba3 2301 	umull	r2, r3, r3, r1
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2264      	movs	r2, #100	@ 0x64
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	1acb      	subs	r3, r1, r3
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002562:	4b36      	ldr	r3, [pc, #216]	@ (800263c <UART_SetConfig+0x2d4>)
 8002564:	fba3 2302 	umull	r2, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002570:	441c      	add	r4, r3
 8002572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002576:	2200      	movs	r2, #0
 8002578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800257c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002584:	4642      	mov	r2, r8
 8002586:	464b      	mov	r3, r9
 8002588:	1891      	adds	r1, r2, r2
 800258a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800258c:	415b      	adcs	r3, r3
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002594:	4641      	mov	r1, r8
 8002596:	1851      	adds	r1, r2, r1
 8002598:	6339      	str	r1, [r7, #48]	@ 0x30
 800259a:	4649      	mov	r1, r9
 800259c:	414b      	adcs	r3, r1
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025ac:	4659      	mov	r1, fp
 80025ae:	00cb      	lsls	r3, r1, #3
 80025b0:	4651      	mov	r1, sl
 80025b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b6:	4651      	mov	r1, sl
 80025b8:	00ca      	lsls	r2, r1, #3
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	4642      	mov	r2, r8
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025c8:	464b      	mov	r3, r9
 80025ca:	460a      	mov	r2, r1
 80025cc:	eb42 0303 	adc.w	r3, r2, r3
 80025d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80025e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80025e8:	460b      	mov	r3, r1
 80025ea:	18db      	adds	r3, r3, r3
 80025ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ee:	4613      	mov	r3, r2
 80025f0:	eb42 0303 	adc.w	r3, r2, r3
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025fe:	f7fd fe31 	bl	8000264 <__aeabi_uldivmod>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <UART_SetConfig+0x2d4>)
 8002608:	fba3 1302 	umull	r1, r3, r3, r2
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	2164      	movs	r1, #100	@ 0x64
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	3332      	adds	r3, #50	@ 0x32
 800261a:	4a08      	ldr	r2, [pc, #32]	@ (800263c <UART_SetConfig+0x2d4>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	f003 0207 	and.w	r2, r3, #7
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4422      	add	r2, r4
 800262e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002630:	e106      	b.n	8002840 <UART_SetConfig+0x4d8>
 8002632:	bf00      	nop
 8002634:	40011000 	.word	0x40011000
 8002638:	40011400 	.word	0x40011400
 800263c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002644:	2200      	movs	r2, #0
 8002646:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800264a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800264e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002652:	4642      	mov	r2, r8
 8002654:	464b      	mov	r3, r9
 8002656:	1891      	adds	r1, r2, r2
 8002658:	6239      	str	r1, [r7, #32]
 800265a:	415b      	adcs	r3, r3
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
 800265e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002662:	4641      	mov	r1, r8
 8002664:	1854      	adds	r4, r2, r1
 8002666:	4649      	mov	r1, r9
 8002668:	eb43 0501 	adc.w	r5, r3, r1
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	00eb      	lsls	r3, r5, #3
 8002676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800267a:	00e2      	lsls	r2, r4, #3
 800267c:	4614      	mov	r4, r2
 800267e:	461d      	mov	r5, r3
 8002680:	4643      	mov	r3, r8
 8002682:	18e3      	adds	r3, r4, r3
 8002684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002688:	464b      	mov	r3, r9
 800268a:	eb45 0303 	adc.w	r3, r5, r3
 800268e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800269e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026ae:	4629      	mov	r1, r5
 80026b0:	008b      	lsls	r3, r1, #2
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b8:	4621      	mov	r1, r4
 80026ba:	008a      	lsls	r2, r1, #2
 80026bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026c0:	f7fd fdd0 	bl	8000264 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4b60      	ldr	r3, [pc, #384]	@ (800284c <UART_SetConfig+0x4e4>)
 80026ca:	fba3 2302 	umull	r2, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	011c      	lsls	r4, r3, #4
 80026d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80026e4:	4642      	mov	r2, r8
 80026e6:	464b      	mov	r3, r9
 80026e8:	1891      	adds	r1, r2, r2
 80026ea:	61b9      	str	r1, [r7, #24]
 80026ec:	415b      	adcs	r3, r3
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026f4:	4641      	mov	r1, r8
 80026f6:	1851      	adds	r1, r2, r1
 80026f8:	6139      	str	r1, [r7, #16]
 80026fa:	4649      	mov	r1, r9
 80026fc:	414b      	adcs	r3, r1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800270c:	4659      	mov	r1, fp
 800270e:	00cb      	lsls	r3, r1, #3
 8002710:	4651      	mov	r1, sl
 8002712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002716:	4651      	mov	r1, sl
 8002718:	00ca      	lsls	r2, r1, #3
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	4603      	mov	r3, r0
 8002720:	4642      	mov	r2, r8
 8002722:	189b      	adds	r3, r3, r2
 8002724:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002728:	464b      	mov	r3, r9
 800272a:	460a      	mov	r2, r1
 800272c:	eb42 0303 	adc.w	r3, r2, r3
 8002730:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800273e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800274c:	4649      	mov	r1, r9
 800274e:	008b      	lsls	r3, r1, #2
 8002750:	4641      	mov	r1, r8
 8002752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002756:	4641      	mov	r1, r8
 8002758:	008a      	lsls	r2, r1, #2
 800275a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800275e:	f7fd fd81 	bl	8000264 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4611      	mov	r1, r2
 8002768:	4b38      	ldr	r3, [pc, #224]	@ (800284c <UART_SetConfig+0x4e4>)
 800276a:	fba3 2301 	umull	r2, r3, r3, r1
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2264      	movs	r2, #100	@ 0x64
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	1acb      	subs	r3, r1, r3
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	3332      	adds	r3, #50	@ 0x32
 800277c:	4a33      	ldr	r2, [pc, #204]	@ (800284c <UART_SetConfig+0x4e4>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002788:	441c      	add	r4, r3
 800278a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800278e:	2200      	movs	r2, #0
 8002790:	673b      	str	r3, [r7, #112]	@ 0x70
 8002792:	677a      	str	r2, [r7, #116]	@ 0x74
 8002794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002798:	4642      	mov	r2, r8
 800279a:	464b      	mov	r3, r9
 800279c:	1891      	adds	r1, r2, r2
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	415b      	adcs	r3, r3
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027a8:	4641      	mov	r1, r8
 80027aa:	1851      	adds	r1, r2, r1
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	4649      	mov	r1, r9
 80027b0:	414b      	adcs	r3, r1
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027c0:	4659      	mov	r1, fp
 80027c2:	00cb      	lsls	r3, r1, #3
 80027c4:	4651      	mov	r1, sl
 80027c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ca:	4651      	mov	r1, sl
 80027cc:	00ca      	lsls	r2, r1, #3
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	4642      	mov	r2, r8
 80027d6:	189b      	adds	r3, r3, r2
 80027d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027da:	464b      	mov	r3, r9
 80027dc:	460a      	mov	r2, r1
 80027de:	eb42 0303 	adc.w	r3, r2, r3
 80027e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80027ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027fc:	4649      	mov	r1, r9
 80027fe:	008b      	lsls	r3, r1, #2
 8002800:	4641      	mov	r1, r8
 8002802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002806:	4641      	mov	r1, r8
 8002808:	008a      	lsls	r2, r1, #2
 800280a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800280e:	f7fd fd29 	bl	8000264 <__aeabi_uldivmod>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <UART_SetConfig+0x4e4>)
 8002818:	fba3 1302 	umull	r1, r3, r3, r2
 800281c:	095b      	lsrs	r3, r3, #5
 800281e:	2164      	movs	r1, #100	@ 0x64
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	3332      	adds	r3, #50	@ 0x32
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <UART_SetConfig+0x4e4>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	095b      	lsrs	r3, r3, #5
 8002832:	f003 020f 	and.w	r2, r3, #15
 8002836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4422      	add	r2, r4
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002846:	46bd      	mov	sp, r7
 8002848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284c:	51eb851f 	.word	0x51eb851f

08002850 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0208 	add.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f04f 32ff 	mov.w	r2, #4294967295
 8002868:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f103 0208 	add.w	r2, r3, #8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 0208 	add.w	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002884:	f240 1019 	movw	r0, #281	@ 0x119
 8002888:	f003 fae0 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80028a2:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80028a6:	f003 fad1 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d103      	bne.n	80028d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e00c      	b.n	80028ec <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3308      	adds	r3, #8
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e002      	b.n	80028e0 <vListInsert+0x2e>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d2f6      	bcs.n	80028da <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002918:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 800291c:	f003 fa96 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6892      	ldr	r2, [r2, #8]
 800293e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6852      	ldr	r2, [r2, #4]
 8002948:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d103      	bne.n	800295c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	f240 101d 	movw	r0, #285	@ 0x11d
 8002976:	f003 faa5 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002992:	2301      	movs	r3, #1
 8002994:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d05d      	beq.n	8002a7a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d059      	beq.n	8002a7a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	2100      	movs	r1, #0
 80029d0:	fba3 2302 	umull	r2, r3, r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d000      	beq.n	80029da <xQueueGenericReset+0x52>
 80029d8:	2101      	movs	r1, #1
 80029da:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d14c      	bne.n	8002a7a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80029e0:	f001 fff0 	bl	80049c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	441a      	add	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2200      	movs	r2, #0
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	3b01      	subs	r3, #1
 8002a12:	6939      	ldr	r1, [r7, #16]
 8002a14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	22ff      	movs	r2, #255	@ 0xff
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d114      	bne.n	8002a60 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01a      	beq.n	8002a74 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	3310      	adds	r3, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f8d2 	bl	8003bec <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <xQueueGenericReset+0x128>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
 8002a5e:	e009      	b.n	8002a74 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	3310      	adds	r3, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fef3 	bl	8002850 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	3324      	adds	r3, #36	@ 0x24
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff feee 	bl	8002850 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a74:	f001 ffd8 	bl	8004a28 <vPortExitCritical>
 8002a78:	e001      	b.n	8002a7e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10b      	bne.n	8002a9c <xQueueGenericReset+0x114>
    __asm volatile
 8002a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a88:	f383 8811 	msr	BASEPRI, r3
 8002a8c:	f3bf 8f6f 	isb	sy
 8002a90:	f3bf 8f4f 	dsb	sy
 8002a94:	60bb      	str	r3, [r7, #8]
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	e7fd      	b.n	8002a98 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	2096      	movs	r0, #150	@ 0x96
 8002aa2:	f003 fa0f 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002aa6:	697b      	ldr	r3, [r7, #20]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02e      	beq.n	8002b2a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002acc:	2100      	movs	r1, #0
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d000      	beq.n	8002adc <xQueueGenericCreate+0x28>
 8002ada:	2101      	movs	r1, #1
 8002adc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d123      	bne.n	8002b2a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002aea:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002aee:	d81c      	bhi.n	8002b2a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	3350      	adds	r3, #80	@ 0x50
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 f88e 	bl	8004c20 <pvPortMalloc>
 8002b04:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01d      	beq.n	8002b48 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3350      	adds	r3, #80	@ 0x50
 8002b14:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f81e 	bl	8002b64 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002b28:	e00e      	b.n	8002b48 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10b      	bne.n	8002b48 <xQueueGenericCreate+0x94>
    __asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	613b      	str	r3, [r7, #16]
}
 8002b42:	bf00      	nop
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fb54 	bl	80061f8 <SEGGER_SYSVIEW_ShrinkId>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	2098      	movs	r0, #152	@ 0x98
 8002b56:	f003 f9b5 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
    }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e002      	b.n	8002b86 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b92:	2101      	movs	r1, #1
 8002b94:	69b8      	ldr	r0, [r7, #24]
 8002b96:	f7ff fef7 	bl	8002988 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	@ 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <xQueueReceive+0x32>
    __asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	623b      	str	r3, [r7, #32]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d103      	bne.n	8002bec <xQueueReceive+0x40>
 8002be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <xQueueReceive+0x44>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <xQueueReceive+0x46>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <xQueueReceive+0x62>
    __asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	61fb      	str	r3, [r7, #28]
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	e7fd      	b.n	8002c0a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c0e:	f001 fa0f 	bl	8004030 <xTaskGetSchedulerState>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <xQueueReceive+0x72>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <xQueueReceive+0x76>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueReceive+0x78>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <xQueueReceive+0x94>
    __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	61bb      	str	r3, [r7, #24]
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c40:	f001 fec0 	bl	80049c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d023      	beq.n	8002c98 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c54:	f000 f898 	bl	8002d88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00f      	beq.n	8002c88 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 ffbd 	bl	8003bec <xTaskRemoveFromEventList>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c78:	4b42      	ldr	r3, [pc, #264]	@ (8002d84 <xQueueReceive+0x1d8>)
 8002c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c88:	f001 fece 	bl	8004a28 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	20a4      	movs	r0, #164	@ 0xa4
 8002c90:	f003 f918 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e071      	b.n	8002d7c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d107      	bne.n	8002cae <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c9e:	f001 fec3 	bl	8004a28 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	20a4      	movs	r0, #164	@ 0xa4
 8002ca6:	f003 f90d 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e066      	b.n	8002d7c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f001 f877 	bl	8003dac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cc2:	f001 feb1 	bl	8004a28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cc6:	f000 fc49 	bl	800355c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cca:	f001 fe7b 	bl	80049c4 <vPortEnterCritical>
 8002cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d103      	bne.n	8002ce4 <xQueueReceive+0x138>
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d103      	bne.n	8002cfa <xQueueReceive+0x14e>
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cfa:	f001 fe95 	bl	8004a28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cfe:	1d3a      	adds	r2, r7, #4
 8002d00:	f107 0310 	add.w	r3, r7, #16
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f001 f868 	bl	8003ddc <xTaskCheckForTimeOut>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d123      	bne.n	8002d5a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d14:	f000 f8b0 	bl	8002e78 <prvIsQueueEmpty>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	3324      	adds	r3, #36	@ 0x24
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 feee 	bl	8003b08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d2e:	f000 f851 	bl	8002dd4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d32:	f000 fc21 	bl	8003578 <xTaskResumeAll>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d181      	bne.n	8002c40 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <xQueueReceive+0x1d8>)
 8002d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	e778      	b.n	8002c40 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d50:	f000 f840 	bl	8002dd4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d54:	f000 fc10 	bl	8003578 <xTaskResumeAll>
 8002d58:	e772      	b.n	8002c40 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d5c:	f000 f83a 	bl	8002dd4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d60:	f000 fc0a 	bl	8003578 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d66:	f000 f887 	bl	8002e78 <prvIsQueueEmpty>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f43f af67 	beq.w	8002c40 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002d72:	2100      	movs	r1, #0
 8002d74:	20a4      	movs	r0, #164	@ 0xa4
 8002d76:	f003 f8a5 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002d7a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3730      	adds	r7, #48	@ 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	e000ed04 	.word	0xe000ed04

08002d88 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	441a      	add	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d303      	bcc.n	8002dbc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6838      	ldr	r0, [r7, #0]
 8002dc8:	f003 fcba 	bl	8006740 <memcpy>
    }
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ddc:	f001 fdf2 	bl	80049c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002de6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002de8:	e011      	b.n	8002e0e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d012      	beq.n	8002e18 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3324      	adds	r3, #36	@ 0x24
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fef8 	bl	8003bec <xTaskRemoveFromEventList>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002e02:	f001 f857 	bl	8003eb4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	dce9      	bgt.n	8002dea <prvUnlockQueue+0x16>
 8002e16:	e000      	b.n	8002e1a <prvUnlockQueue+0x46>
                    break;
 8002e18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	22ff      	movs	r2, #255	@ 0xff
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002e22:	f001 fe01 	bl	8004a28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e26:	f001 fdcd 	bl	80049c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e32:	e011      	b.n	8002e58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3310      	adds	r3, #16
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fed3 	bl	8003bec <xTaskRemoveFromEventList>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e4c:	f001 f832 	bl	8003eb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dce9      	bgt.n	8002e34 <prvUnlockQueue+0x60>
 8002e60:	e000      	b.n	8002e64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	22ff      	movs	r2, #255	@ 0xff
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002e6c:	f001 fddc 	bl	8004a28 <vPortExitCritical>
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e80:	f001 fda0 	bl	80049c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e001      	b.n	8002e96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e96:	f001 fdc7 	bl	8004a28 <vPortExitCritical>

    return xReturn;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	60fb      	str	r3, [r7, #12]
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d024      	beq.n	8002f20 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e01e      	b.n	8002f1a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002edc:	4a18      	ldr	r2, [pc, #96]	@ (8002f40 <vQueueAddToRegistry+0x9c>)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d105      	bne.n	8002ef8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4a13      	ldr	r2, [pc, #76]	@ (8002f40 <vQueueAddToRegistry+0x9c>)
 8002ef2:	4413      	add	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
                    break;
 8002ef6:	e013      	b.n	8002f20 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10a      	bne.n	8002f14 <vQueueAddToRegistry+0x70>
 8002efe:	4a10      	ldr	r2, [pc, #64]	@ (8002f40 <vQueueAddToRegistry+0x9c>)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f40 <vQueueAddToRegistry+0x9c>)
 8002f10:	4413      	add	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b07      	cmp	r3, #7
 8002f1e:	d9dd      	bls.n	8002edc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002f32:	20b6      	movs	r0, #182	@ 0xb6
 8002f34:	f002 ff8a 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200000d0 	.word	0x200000d0

08002f44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f54:	f001 fd36 	bl	80049c4 <vPortEnterCritical>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d103      	bne.n	8002f6e <vQueueWaitForMessageRestricted+0x2a>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d103      	bne.n	8002f84 <vQueueWaitForMessageRestricted+0x40>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f84:	f001 fd50 	bl	8004a28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3324      	adds	r3, #36	@ 0x24
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fddd 	bl	8003b58 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff18 	bl	8002dd4 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002fa4:	20b9      	movs	r0, #185	@ 0xb9
 8002fa6:	f002 ff51 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08a      	sub	sp, #40	@ 0x28
 8002fb6:	af04      	add	r7, sp, #16
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 fe2b 	bl	8004c20 <pvPortMalloc>
 8002fca:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d013      	beq.n	8002ffa <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002fd2:	205c      	movs	r0, #92	@ 0x5c
 8002fd4:	f001 fe24 	bl	8004c20 <pvPortMalloc>
 8002fd8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002fe0:	225c      	movs	r2, #92	@ 0x5c
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	f003 fb7e 	bl	80066e6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ff0:	e005      	b.n	8002ffe <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002ff2:	6938      	ldr	r0, [r7, #16]
 8002ff4:	f001 fe68 	bl	8004cc8 <vPortFree>
 8002ff8:	e001      	b.n	8002ffe <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003004:	2300      	movs	r3, #0
 8003006:	9303      	str	r3, [sp, #12]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f82d 	bl	800307a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003020:	697b      	ldr	r3, [r7, #20]
    }
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800302a:	b580      	push	{r7, lr}
 800302c:	b088      	sub	sp, #32
 800302e:	af02      	add	r7, sp, #8
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff ffb3 	bl	8002fb2 <prvCreateTask>
 800304c:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003054:	6938      	ldr	r0, [r7, #16]
 8003056:	f000 f8a1 	bl	800319c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800305a:	2301      	movs	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e002      	b.n	8003066 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	4619      	mov	r1, r3
 800306a:	20c2      	movs	r0, #194	@ 0xc2
 800306c:	f002 ff2a 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003070:	697b      	ldr	r3, [r7, #20]
    }
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b088      	sub	sp, #32
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	461a      	mov	r2, r3
 8003092:	21a5      	movs	r1, #165	@ 0xa5
 8003094:	f003 fb27 	bl	80066e6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030a2:	3b01      	subs	r3, #1
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f023 0307 	bic.w	r3, r3, #7
 80030b0:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	617b      	str	r3, [r7, #20]
}
 80030ce:	bf00      	nop
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01e      	beq.n	8003118 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e012      	b.n	8003106 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	7819      	ldrb	r1, [r3, #0]
 80030e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	3334      	adds	r3, #52	@ 0x34
 80030f0:	460a      	mov	r2, r1
 80030f2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	3301      	adds	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b0c      	cmp	r3, #12
 800310a:	d9e9      	bls.n	80030e0 <prvInitialiseNewTask+0x66>
 800310c:	e000      	b.n	8003110 <prvInitialiseNewTask+0x96>
            {
                break;
 800310e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311a:	2b04      	cmp	r3, #4
 800311c:	d90b      	bls.n	8003136 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	613b      	str	r3, [r7, #16]
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	e7fd      	b.n	8003132 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003138:	2b04      	cmp	r3, #4
 800313a:	d901      	bls.n	8003140 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800313c:	2304      	movs	r3, #4
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003144:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003148:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800314a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	3304      	adds	r3, #4
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fb9f 	bl	8002894 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003158:	3318      	adds	r3, #24
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fb9a 	bl	8002894 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003164:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	f1c3 0205 	rsb	r2, r3, #5
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	68f9      	ldr	r1, [r7, #12]
 800317a:	69b8      	ldr	r0, [r7, #24]
 800317c:	f001 faa0 	bl	80046c0 <pxPortInitialiseStack>
 8003180:	4602      	mov	r2, r0
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800318c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003190:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003192:	bf00      	nop
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80031a4:	f001 fc0e 	bl	80049c4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80031a8:	4b50      	ldr	r3, [pc, #320]	@ (80032ec <prvAddNewTaskToReadyList+0x150>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	4a4f      	ldr	r2, [pc, #316]	@ (80032ec <prvAddNewTaskToReadyList+0x150>)
 80031b0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80031b2:	4b4f      	ldr	r3, [pc, #316]	@ (80032f0 <prvAddNewTaskToReadyList+0x154>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80031ba:	4a4d      	ldr	r2, [pc, #308]	@ (80032f0 <prvAddNewTaskToReadyList+0x154>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031c0:	4b4a      	ldr	r3, [pc, #296]	@ (80032ec <prvAddNewTaskToReadyList+0x150>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d110      	bne.n	80031ea <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80031c8:	f000 fe98 	bl	8003efc <prvInitialiseTaskLists>
 80031cc:	e00d      	b.n	80031ea <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80031ce:	4b49      	ldr	r3, [pc, #292]	@ (80032f4 <prvAddNewTaskToReadyList+0x158>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031d6:	4b46      	ldr	r3, [pc, #280]	@ (80032f0 <prvAddNewTaskToReadyList+0x154>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d802      	bhi.n	80031ea <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80031e4:	4a42      	ldr	r2, [pc, #264]	@ (80032f0 <prvAddNewTaskToReadyList+0x154>)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80031ea:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <prvAddNewTaskToReadyList+0x15c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a41      	ldr	r2, [pc, #260]	@ (80032f8 <prvAddNewTaskToReadyList+0x15c>)
 80031f2:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f4:	4b40      	ldr	r3, [pc, #256]	@ (80032f8 <prvAddNewTaskToReadyList+0x15c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <prvAddNewTaskToReadyList+0x94>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fed1 	bl	8005fac <SEGGER_SYSVIEW_OnTaskCreate>
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	461d      	mov	r5, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461c      	mov	r4, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	1ae3      	subs	r3, r4, r3
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	462b      	mov	r3, r5
 800322c:	f003 f9c2 	bl	80065b4 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f002 ff3e 	bl	80060b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	2201      	movs	r2, #1
 800323e:	409a      	lsls	r2, r3
 8003240:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <prvAddNewTaskToReadyList+0x160>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <prvAddNewTaskToReadyList+0x160>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	492c      	ldr	r1, [pc, #176]	@ (8003300 <prvAddNewTaskToReadyList+0x164>)
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3304      	adds	r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	3204      	adds	r2, #4
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <prvAddNewTaskToReadyList+0x164>)
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	615a      	str	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003298:	4919      	ldr	r1, [pc, #100]	@ (8003300 <prvAddNewTaskToReadyList+0x164>)
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	4814      	ldr	r0, [pc, #80]	@ (8003300 <prvAddNewTaskToReadyList+0x164>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4403      	add	r3, r0
 80032b8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80032ba:	f001 fbb5 	bl	8004a28 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <prvAddNewTaskToReadyList+0x158>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00e      	beq.n	80032e4 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <prvAddNewTaskToReadyList+0x154>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d207      	bcs.n	80032e4 <prvAddNewTaskToReadyList+0x148>
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <prvAddNewTaskToReadyList+0x168>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bdb0      	pop	{r4, r5, r7, pc}
 80032ec:	200001e8 	.word	0x200001e8
 80032f0:	20000110 	.word	0x20000110
 80032f4:	200001f4 	.word	0x200001f4
 80032f8:	20000204 	.word	0x20000204
 80032fc:	200001f0 	.word	0x200001f0
 8003300:	20000114 	.word	0x20000114
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <xTaskDelayUntil+0x2c>
    __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	617b      	str	r3, [r7, #20]
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10b      	bne.n	8003352 <xTaskDelayUntil+0x4a>
    __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	613b      	str	r3, [r7, #16]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <xTaskDelayUntil+0x46>

        vTaskSuspendAll();
 8003352:	f000 f903 	bl	800355c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003356:	4b2c      	ldr	r3, [pc, #176]	@ (8003408 <xTaskDelayUntil+0x100>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 800335c:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <xTaskDelayUntil+0x104>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d00b      	beq.n	800337c <xTaskDelayUntil+0x74>
    __asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <xTaskDelayUntil+0x70>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	4413      	add	r3, r2
 8003384:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a3a      	ldr	r2, [r7, #32]
 800338c:	429a      	cmp	r2, r3
 800338e:	d20b      	bcs.n	80033a8 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d211      	bcs.n	80033be <xTaskDelayUntil+0xb6>
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d90d      	bls.n	80033be <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a6:	e00a      	b.n	80033be <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d303      	bcc.n	80033ba <xTaskDelayUntil+0xb2>
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d901      	bls.n	80033be <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fe4e 	bl	8004074 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80033d8:	f000 f8ce 	bl	8003578 <xTaskResumeAll>
 80033dc:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <xTaskDelayUntil+0xec>
        {
            taskYIELD_WITHIN_API();
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <xTaskDelayUntil+0x108>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	4619      	mov	r1, r3
 80033f8:	20c4      	movs	r0, #196	@ 0xc4
 80033fa:	f002 fd63 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xShouldDelay;
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003400:	4618      	mov	r0, r3
 8003402:	3728      	adds	r7, #40	@ 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	200001ec 	.word	0x200001ec
 800340c:	20000210 	.word	0x20000210
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e011      	b.n	800344c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003428:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <prvCreateIdleTasks+0x88>)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	4413      	add	r3, r2
 800342e:	7819      	ldrb	r1, [r3, #0]
 8003430:	463a      	mov	r2, r7
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4413      	add	r3, r2
 8003436:	460a      	mov	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800343a:	463a      	mov	r2, r7
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	4413      	add	r3, r2
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	3301      	adds	r3, #1
 800344a:	617b      	str	r3, [r7, #20]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b0c      	cmp	r3, #12
 8003450:	ddea      	ble.n	8003428 <prvCreateIdleTasks+0x14>
 8003452:	e000      	b.n	8003456 <prvCreateIdleTasks+0x42>
        {
            break;
 8003454:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	e015      	b.n	8003488 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <prvCreateIdleTasks+0x8c>)
 800345e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a0f      	ldr	r2, [pc, #60]	@ (80034a4 <prvCreateIdleTasks+0x90>)
 8003466:	4413      	add	r3, r2
 8003468:	4639      	mov	r1, r7
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2300      	movs	r3, #0
 8003472:	2282      	movs	r2, #130	@ 0x82
 8003474:	6938      	ldr	r0, [r7, #16]
 8003476:	f7ff fdd8 	bl	800302a <xTaskCreate>
 800347a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3301      	adds	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	dde6      	ble.n	800345c <prvCreateIdleTasks+0x48>
 800348e:	e000      	b.n	8003492 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003490:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003492:	69fb      	ldr	r3, [r7, #28]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	080067fc 	.word	0x080067fc
 80034a0:	08003ecd 	.word	0x08003ecd
 80034a4:	2000020c 	.word	0x2000020c

080034a8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80034ae:	f7ff ffb1 	bl	8003414 <prvCreateIdleTasks>
 80034b2:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d102      	bne.n	80034c0 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80034ba:	f000 fe69 	bl	8004190 <xTimerCreateTimerTask>
 80034be:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d124      	bne.n	8003510 <vTaskStartScheduler+0x68>
    __asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	60bb      	str	r3, [r7, #8]
}
 80034d8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80034da:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <vTaskStartScheduler+0x9c>)
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80034e2:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <vTaskStartScheduler+0xa0>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034e8:	4b18      	ldr	r3, [pc, #96]	@ (800354c <vTaskStartScheduler+0xa4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <vTaskStartScheduler+0xa8>)
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b18      	ldr	r3, [pc, #96]	@ (8003554 <vTaskStartScheduler+0xac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d102      	bne.n	8003500 <vTaskStartScheduler+0x58>
 80034fa:	f002 fd3b 	bl	8005f74 <SEGGER_SYSVIEW_OnIdle>
 80034fe:	e004      	b.n	800350a <vTaskStartScheduler+0x62>
 8003500:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <vTaskStartScheduler+0xac>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fd93 	bl	8006030 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800350a:	f001 f96b 	bl	80047e4 <xPortStartScheduler>
 800350e:	e00f      	b.n	8003530 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d10b      	bne.n	8003530 <vTaskStartScheduler+0x88>
    __asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	607b      	str	r3, [r7, #4]
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003530:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <vTaskStartScheduler+0xb0>)
 8003532:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003534:	20cd      	movs	r0, #205	@ 0xcd
 8003536:	f002 fc89 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000208 	.word	0x20000208
 8003548:	200001f4 	.word	0x200001f4
 800354c:	200001ec 	.word	0x200001ec
 8003550:	2000020c 	.word	0x2000020c
 8003554:	20000110 	.word	0x20000110
 8003558:	20000018 	.word	0x20000018

0800355c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <vTaskSuspendAll+0x18>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	4a03      	ldr	r2, [pc, #12]	@ (8003574 <vTaskSuspendAll+0x18>)
 8003568:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800356a:	20cf      	movs	r0, #207	@ 0xcf
 800356c:	f002 fc6e 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003570:	bf00      	nop
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000210 	.word	0x20000210

08003578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003586:	f001 fa1d 	bl	80049c4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800358e:	4b7a      	ldr	r3, [pc, #488]	@ (8003778 <xTaskResumeAll+0x200>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <xTaskResumeAll+0x36>
    __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	603b      	str	r3, [r7, #0]
}
 80035a8:	bf00      	nop
 80035aa:	bf00      	nop
 80035ac:	e7fd      	b.n	80035aa <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80035ae:	4b72      	ldr	r3, [pc, #456]	@ (8003778 <xTaskResumeAll+0x200>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	4a70      	ldr	r2, [pc, #448]	@ (8003778 <xTaskResumeAll+0x200>)
 80035b6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003778 <xTaskResumeAll+0x200>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f040 80ce 	bne.w	800375e <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035c2:	4b6e      	ldr	r3, [pc, #440]	@ (800377c <xTaskResumeAll+0x204>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80c9 	beq.w	800375e <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035cc:	e092      	b.n	80036f4 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80035ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003780 <xTaskResumeAll+0x208>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	6a12      	ldr	r2, [r2, #32]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	69d2      	ldr	r2, [r2, #28]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3318      	adds	r3, #24
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d103      	bne.n	8003604 <xTaskResumeAll+0x8c>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	6a1a      	ldr	r2, [r3, #32]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2200      	movs	r2, #0
 8003608:	629a      	str	r2, [r3, #40]	@ 0x28
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	1e5a      	subs	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	68d2      	ldr	r2, [r2, #12]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	6892      	ldr	r2, [r2, #8]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3304      	adds	r3, #4
 8003636:	429a      	cmp	r2, r3
 8003638:	d103      	bne.n	8003642 <xTaskResumeAll+0xca>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2200      	movs	r2, #0
 8003646:	615a      	str	r2, [r3, #20]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4618      	mov	r0, r3
 8003656:	f002 fd2d 	bl	80060b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	2201      	movs	r2, #1
 8003660:	409a      	lsls	r2, r3
 8003662:	4b48      	ldr	r3, [pc, #288]	@ (8003784 <xTaskResumeAll+0x20c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4313      	orrs	r3, r2
 8003668:	4a46      	ldr	r2, [pc, #280]	@ (8003784 <xTaskResumeAll+0x20c>)
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	4945      	ldr	r1, [pc, #276]	@ (8003788 <xTaskResumeAll+0x210>)
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3304      	adds	r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	60da      	str	r2, [r3, #12]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	3204      	adds	r2, #4
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4a36      	ldr	r2, [pc, #216]	@ (8003788 <xTaskResumeAll+0x210>)
 80036b0:	441a      	add	r2, r3
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	615a      	str	r2, [r3, #20]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ba:	4933      	ldr	r1, [pc, #204]	@ (8003788 <xTaskResumeAll+0x210>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036cc:	1c59      	adds	r1, r3, #1
 80036ce:	482e      	ldr	r0, [pc, #184]	@ (8003788 <xTaskResumeAll+0x210>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	4b2a      	ldr	r3, [pc, #168]	@ (800378c <xTaskResumeAll+0x214>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d904      	bls.n	80036f4 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80036ea:	4a29      	ldr	r2, [pc, #164]	@ (8003790 <xTaskResumeAll+0x218>)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	2101      	movs	r1, #1
 80036f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f4:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <xTaskResumeAll+0x208>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f af68 	bne.w	80035ce <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003704:	f000 fc78 	bl	8003ff8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003708:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <xTaskResumeAll+0x21c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d012      	beq.n	800373a <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003714:	f000 f86a 	bl	80037ec <xTaskIncrementTick>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d004      	beq.n	8003728 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800371e:	4a1c      	ldr	r2, [pc, #112]	@ (8003790 <xTaskResumeAll+0x218>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2101      	movs	r1, #1
 8003724:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3b01      	subs	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003734:	4b17      	ldr	r3, [pc, #92]	@ (8003794 <xTaskResumeAll+0x21c>)
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800373a:	4a15      	ldr	r2, [pc, #84]	@ (8003790 <xTaskResumeAll+0x218>)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800374a:	4b10      	ldr	r3, [pc, #64]	@ (800378c <xTaskResumeAll+0x214>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <xTaskResumeAll+0x220>)
 8003750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800375e:	f001 f963 	bl	8004a28 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4619      	mov	r1, r3
 8003766:	20d0      	movs	r0, #208	@ 0xd0
 8003768:	f002 fbac 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800376c:	69bb      	ldr	r3, [r7, #24]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000210 	.word	0x20000210
 800377c:	200001e8 	.word	0x200001e8
 8003780:	200001a8 	.word	0x200001a8
 8003784:	200001f0 	.word	0x200001f0
 8003788:	20000114 	.word	0x20000114
 800378c:	20000110 	.word	0x20000110
 8003790:	200001fc 	.word	0x200001fc
 8003794:	200001f8 	.word	0x200001f8
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <xTaskGetTickCount+0x20>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	20d1      	movs	r0, #209	@ 0xd1
 80037ac:	f002 fb8a 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	200001ec 	.word	0x200001ec

080037c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037c6:	f001 f9e9 	bl	8004b9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80037ce:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <xTaskGetTickCountFromISR+0x28>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80037d4:	6839      	ldr	r1, [r7, #0]
 80037d6:	20d2      	movs	r0, #210	@ 0xd2
 80037d8:	f002 fb74 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80037dc:	683b      	ldr	r3, [r7, #0]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001ec 	.word	0x200001ec

080037ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	@ 0x28
 80037f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80037f6:	4b83      	ldr	r3, [pc, #524]	@ (8003a04 <xTaskIncrementTick+0x218>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 80f3 	bne.w	80039e6 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003800:	4b81      	ldr	r3, [pc, #516]	@ (8003a08 <xTaskIncrementTick+0x21c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003808:	4a7f      	ldr	r2, [pc, #508]	@ (8003a08 <xTaskIncrementTick+0x21c>)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d121      	bne.n	8003858 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003814:	4b7d      	ldr	r3, [pc, #500]	@ (8003a0c <xTaskIncrementTick+0x220>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <xTaskIncrementTick+0x4a>
    __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	607b      	str	r3, [r7, #4]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <xTaskIncrementTick+0x46>
 8003836:	4b75      	ldr	r3, [pc, #468]	@ (8003a0c <xTaskIncrementTick+0x220>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	4b74      	ldr	r3, [pc, #464]	@ (8003a10 <xTaskIncrementTick+0x224>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a72      	ldr	r2, [pc, #456]	@ (8003a0c <xTaskIncrementTick+0x220>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4a72      	ldr	r2, [pc, #456]	@ (8003a10 <xTaskIncrementTick+0x224>)
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b72      	ldr	r3, [pc, #456]	@ (8003a14 <xTaskIncrementTick+0x228>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	4a70      	ldr	r2, [pc, #448]	@ (8003a14 <xTaskIncrementTick+0x228>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	f000 fbd0 	bl	8003ff8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003858:	4b6f      	ldr	r3, [pc, #444]	@ (8003a18 <xTaskIncrementTick+0x22c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	429a      	cmp	r2, r3
 8003860:	f0c0 80ac 	bcc.w	80039bc <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003864:	4b69      	ldr	r3, [pc, #420]	@ (8003a0c <xTaskIncrementTick+0x220>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800386e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a18 <xTaskIncrementTick+0x22c>)
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	601a      	str	r2, [r3, #0]
                    break;
 8003876:	e0a1      	b.n	80039bc <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003878:	4b64      	ldr	r3, [pc, #400]	@ (8003a0c <xTaskIncrementTick+0x220>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	d203      	bcs.n	8003898 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003890:	4a61      	ldr	r2, [pc, #388]	@ (8003a18 <xTaskIncrementTick+0x22c>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	6013      	str	r3, [r2, #0]
                        break;
 8003896:	e091      	b.n	80039bc <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	6892      	ldr	r2, [r2, #8]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3304      	adds	r3, #4
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d103      	bne.n	80038c6 <xTaskIncrementTick+0xda>
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	2200      	movs	r2, #0
 80038ca:	615a      	str	r2, [r3, #20]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1e5a      	subs	r2, r3, #1
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d01e      	beq.n	800391c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	6a12      	ldr	r2, [r2, #32]
 80038ec:	609a      	str	r2, [r3, #8]
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	69d2      	ldr	r2, [r2, #28]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3318      	adds	r3, #24
 8003900:	429a      	cmp	r2, r3
 8003902:	d103      	bne.n	800390c <xTaskIncrementTick+0x120>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2200      	movs	r2, #0
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1e5a      	subs	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4618      	mov	r0, r3
 8003920:	f002 fbc8 	bl	80060b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	2201      	movs	r2, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <xTaskIncrementTick+0x230>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	4a3a      	ldr	r2, [pc, #232]	@ (8003a1c <xTaskIncrementTick+0x230>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	4939      	ldr	r1, [pc, #228]	@ (8003a20 <xTaskIncrementTick+0x234>)
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	3304      	adds	r3, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	3204      	adds	r2, #4
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1d1a      	adds	r2, r3, #4
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4a29      	ldr	r2, [pc, #164]	@ (8003a20 <xTaskIncrementTick+0x234>)
 800397a:	441a      	add	r2, r3
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	615a      	str	r2, [r3, #20]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003984:	4926      	ldr	r1, [pc, #152]	@ (8003a20 <xTaskIncrementTick+0x234>)
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	4821      	ldr	r0, [pc, #132]	@ (8003a20 <xTaskIncrementTick+0x234>)
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4403      	add	r3, r0
 80039a4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a24 <xTaskIncrementTick+0x238>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f67f af57 	bls.w	8003864 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ba:	e753      	b.n	8003864 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <xTaskIncrementTick+0x238>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c2:	4917      	ldr	r1, [pc, #92]	@ (8003a20 <xTaskIncrementTick+0x234>)
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d901      	bls.n	80039d8 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80039d8:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <xTaskIncrementTick+0x23c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039e4:	e004      	b.n	80039f0 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80039e6:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <xTaskIncrementTick+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	4a0f      	ldr	r2, [pc, #60]	@ (8003a2c <xTaskIncrementTick+0x240>)
 80039ee:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	4619      	mov	r1, r3
 80039f4:	20db      	movs	r0, #219	@ 0xdb
 80039f6:	f002 fa65 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	@ 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000210 	.word	0x20000210
 8003a08:	200001ec 	.word	0x200001ec
 8003a0c:	200001a0 	.word	0x200001a0
 8003a10:	200001a4 	.word	0x200001a4
 8003a14:	20000200 	.word	0x20000200
 8003a18:	20000208 	.word	0x20000208
 8003a1c:	200001f0 	.word	0x200001f0
 8003a20:	20000114 	.word	0x20000114
 8003a24:	20000110 	.word	0x20000110
 8003a28:	200001fc 	.word	0x200001fc
 8003a2c:	200001f8 	.word	0x200001f8

08003a30 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003a36:	4b2e      	ldr	r3, [pc, #184]	@ (8003af0 <vTaskSwitchContext+0xc0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003af4 <vTaskSwitchContext+0xc4>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003a44:	e04f      	b.n	8003ae6 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003a46:	4b2b      	ldr	r3, [pc, #172]	@ (8003af4 <vTaskSwitchContext+0xc4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <vTaskSwitchContext+0xc8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f1c3 031f 	rsb	r3, r3, #31
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4926      	ldr	r1, [pc, #152]	@ (8003afc <vTaskSwitchContext+0xcc>)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <vTaskSwitchContext+0x5e>
    __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	e7fd      	b.n	8003a8a <vTaskSwitchContext+0x5a>
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <vTaskSwitchContext+0xcc>)
 8003a9a:	4413      	add	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d103      	bne.n	8003abc <vTaskSwitchContext+0x8c>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8003b00 <vTaskSwitchContext+0xd0>)
 8003ac4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <vTaskSwitchContext+0xd4>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <vTaskSwitchContext+0xd0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d102      	bne.n	8003ad8 <vTaskSwitchContext+0xa8>
 8003ad2:	f002 fa4f 	bl	8005f74 <SEGGER_SYSVIEW_OnIdle>
 8003ad6:	e004      	b.n	8003ae2 <vTaskSwitchContext+0xb2>
 8003ad8:	4b09      	ldr	r3, [pc, #36]	@ (8003b00 <vTaskSwitchContext+0xd0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 faa7 	bl	8006030 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003ae2:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <vTaskSwitchContext+0xd0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
    }
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000210 	.word	0x20000210
 8003af4:	200001fc 	.word	0x200001fc
 8003af8:	200001f0 	.word	0x200001f0
 8003afc:	20000114 	.word	0x20000114
 8003b00:	20000110 	.word	0x20000110
 8003b04:	2000020c 	.word	0x2000020c

08003b08 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60fb      	str	r3, [r7, #12]
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b30:	4b08      	ldr	r3, [pc, #32]	@ (8003b54 <vTaskPlaceOnEventList+0x4c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3318      	adds	r3, #24
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fe feba 	bl	80028b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b3e:	2101      	movs	r1, #1
 8003b40:	6838      	ldr	r0, [r7, #0]
 8003b42:	f000 fa97 	bl	8004074 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003b46:	20e1      	movs	r0, #225	@ 0xe1
 8003b48:	f002 f980 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000110 	.word	0x20000110

08003b58 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	613b      	str	r3, [r7, #16]
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	e7fd      	b.n	8003b7e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	61da      	str	r2, [r3, #28]
 8003b90:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	621a      	str	r2, [r3, #32]
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	3218      	adds	r2, #24
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f103 0218 	add.w	r2, r3, #24
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
 8003bce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	68b8      	ldr	r0, [r7, #8]
 8003bd4:	f000 fa4e 	bl	8004074 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003bd8:	20e3      	movs	r0, #227	@ 0xe3
 8003bda:	f002 f937 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000110 	.word	0x20000110

08003bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	60fb      	str	r3, [r7, #12]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	6a12      	ldr	r2, [r2, #32]
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	6a3a      	ldr	r2, [r7, #32]
 8003c30:	69d2      	ldr	r2, [r2, #28]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d103      	bne.n	8003c48 <xTaskRemoveFromEventList+0x5c>
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c58:	4b4e      	ldr	r3, [pc, #312]	@ (8003d94 <xTaskRemoveFromEventList+0x1a8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d164      	bne.n	8003d2a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	6a3a      	ldr	r2, [r7, #32]
 8003c6c:	68d2      	ldr	r2, [r2, #12]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	3304      	adds	r3, #4
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d103      	bne.n	8003c8e <xTaskRemoveFromEventList+0xa2>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f002 fa07 	bl	80060b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	2201      	movs	r2, #1
 8003cac:	409a      	lsls	r2, r3
 8003cae:	4b3a      	ldr	r3, [pc, #232]	@ (8003d98 <xTaskRemoveFromEventList+0x1ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	4a38      	ldr	r2, [pc, #224]	@ (8003d98 <xTaskRemoveFromEventList+0x1ac>)
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbc:	4937      	ldr	r1, [pc, #220]	@ (8003d9c <xTaskRemoveFromEventList+0x1b0>)
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3304      	adds	r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	6a3a      	ldr	r2, [r7, #32]
 8003ce2:	3204      	adds	r2, #4
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	1d1a      	adds	r2, r3, #4
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4a28      	ldr	r2, [pc, #160]	@ (8003d9c <xTaskRemoveFromEventList+0x1b0>)
 8003cfc:	441a      	add	r2, r3
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	615a      	str	r2, [r3, #20]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4925      	ldr	r1, [pc, #148]	@ (8003d9c <xTaskRemoveFromEventList+0x1b0>)
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d18:	1c59      	adds	r1, r3, #1
 8003d1a:	4820      	ldr	r0, [pc, #128]	@ (8003d9c <xTaskRemoveFromEventList+0x1b0>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4403      	add	r3, r0
 8003d26:	6019      	str	r1, [r3, #0]
 8003d28:	e01b      	b.n	8003d62 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003da0 <xTaskRemoveFromEventList+0x1b4>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	61da      	str	r2, [r3, #28]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	621a      	str	r2, [r3, #32]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	6a3a      	ldr	r2, [r7, #32]
 8003d44:	3218      	adds	r2, #24
 8003d46:	605a      	str	r2, [r3, #4]
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f103 0218 	add.w	r2, r3, #24
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	4a12      	ldr	r2, [pc, #72]	@ (8003da0 <xTaskRemoveFromEventList+0x1b4>)
 8003d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d58:	4b11      	ldr	r3, [pc, #68]	@ (8003da0 <xTaskRemoveFromEventList+0x1b4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a10      	ldr	r2, [pc, #64]	@ (8003da0 <xTaskRemoveFromEventList+0x1b4>)
 8003d60:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d66:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <xTaskRemoveFromEventList+0x1b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d905      	bls.n	8003d7c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	@ (8003da8 <xTaskRemoveFromEventList+0x1bc>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e001      	b.n	8003d80 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	4619      	mov	r1, r3
 8003d84:	20e4      	movs	r0, #228	@ 0xe4
 8003d86:	f002 f89d 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3728      	adds	r7, #40	@ 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000210 	.word	0x20000210
 8003d98:	200001f0 	.word	0x200001f0
 8003d9c:	20000114 	.word	0x20000114
 8003da0:	200001a8 	.word	0x200001a8
 8003da4:	20000110 	.word	0x20000110
 8003da8:	200001fc 	.word	0x200001fc

08003dac <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003db4:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <vTaskInternalSetTimeOutState+0x28>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <vTaskInternalSetTimeOutState+0x2c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003dc4:	20e7      	movs	r0, #231	@ 0xe7
 8003dc6:	f002 f841 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000200 	.word	0x20000200
 8003dd8:	200001ec 	.word	0x200001ec

08003ddc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10b      	bne.n	8003e04 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	613b      	str	r3, [r7, #16]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0e:	f383 8811 	msr	BASEPRI, r3
 8003e12:	f3bf 8f6f 	isb	sy
 8003e16:	f3bf 8f4f 	dsb	sy
 8003e1a:	60fb      	str	r3, [r7, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	e7fd      	b.n	8003e1e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003e22:	f000 fdcf 	bl	80049c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e26:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <xTaskCheckForTimeOut+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d102      	bne.n	8003e46 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e026      	b.n	8003e94 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b19      	ldr	r3, [pc, #100]	@ (8003eb0 <xTaskCheckForTimeOut+0xd4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d00a      	beq.n	8003e68 <xTaskCheckForTimeOut+0x8c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d305      	bcc.n	8003e68 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e015      	b.n	8003e94 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d20b      	bcs.n	8003e8a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	1ad2      	subs	r2, r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff94 	bl	8003dac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	e004      	b.n	8003e94 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e94:	f000 fdc8 	bl	8004a28 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	20e8      	movs	r0, #232	@ 0xe8
 8003e9e:	f002 f811 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200001ec 	.word	0x200001ec
 8003eb0:	20000200 	.word	0x20000200

08003eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	@ (8003ec8 <vTaskMissedYield+0x14>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003ebe:	20e9      	movs	r0, #233	@ 0xe9
 8003ec0:	f001 ffc4 	bl	8005e4c <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200001fc 	.word	0x200001fc

08003ecc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ed4:	f000 f852 	bl	8003f7c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003ed8:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <prvIdleTask+0x28>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d9f9      	bls.n	8003ed4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003ee0:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <prvIdleTask+0x2c>)
 8003ee2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ef0:	e7f0      	b.n	8003ed4 <prvIdleTask+0x8>
 8003ef2:	bf00      	nop
 8003ef4:	20000114 	.word	0x20000114
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
 8003f06:	e00c      	b.n	8003f22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <prvInitialiseTaskLists+0x60>)
 8003f14:	4413      	add	r3, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fc9a 	bl	8002850 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d9ef      	bls.n	8003f08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003f28:	480d      	ldr	r0, [pc, #52]	@ (8003f60 <prvInitialiseTaskLists+0x64>)
 8003f2a:	f7fe fc91 	bl	8002850 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f2e:	480d      	ldr	r0, [pc, #52]	@ (8003f64 <prvInitialiseTaskLists+0x68>)
 8003f30:	f7fe fc8e 	bl	8002850 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f34:	480c      	ldr	r0, [pc, #48]	@ (8003f68 <prvInitialiseTaskLists+0x6c>)
 8003f36:	f7fe fc8b 	bl	8002850 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003f3a:	480c      	ldr	r0, [pc, #48]	@ (8003f6c <prvInitialiseTaskLists+0x70>)
 8003f3c:	f7fe fc88 	bl	8002850 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003f40:	480b      	ldr	r0, [pc, #44]	@ (8003f70 <prvInitialiseTaskLists+0x74>)
 8003f42:	f7fe fc85 	bl	8002850 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <prvInitialiseTaskLists+0x78>)
 8003f48:	4a05      	ldr	r2, [pc, #20]	@ (8003f60 <prvInitialiseTaskLists+0x64>)
 8003f4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <prvInitialiseTaskLists+0x7c>)
 8003f4e:	4a05      	ldr	r2, [pc, #20]	@ (8003f64 <prvInitialiseTaskLists+0x68>)
 8003f50:	601a      	str	r2, [r3, #0]
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000114 	.word	0x20000114
 8003f60:	20000178 	.word	0x20000178
 8003f64:	2000018c 	.word	0x2000018c
 8003f68:	200001a8 	.word	0x200001a8
 8003f6c:	200001bc 	.word	0x200001bc
 8003f70:	200001d4 	.word	0x200001d4
 8003f74:	200001a0 	.word	0x200001a0
 8003f78:	200001a4 	.word	0x200001a4

08003f7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f82:	e019      	b.n	8003fb8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003f84:	f000 fd1e 	bl	80049c4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f88:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <prvCheckTasksWaitingTermination+0x50>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fcc7 	bl	8002928 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd0 <prvCheckTasksWaitingTermination+0x54>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd0 <prvCheckTasksWaitingTermination+0x54>)
 8003fa2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <prvCheckTasksWaitingTermination+0x58>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd4 <prvCheckTasksWaitingTermination+0x58>)
 8003fac:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003fae:	f000 fd3b 	bl	8004a28 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f810 	bl	8003fd8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fb8:	4b06      	ldr	r3, [pc, #24]	@ (8003fd4 <prvCheckTasksWaitingTermination+0x58>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e1      	bne.n	8003f84 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003fc0:	bf00      	nop
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	200001bc 	.word	0x200001bc
 8003fd0:	200001e8 	.word	0x200001e8
 8003fd4:	200001d0 	.word	0x200001d0

08003fd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fe6f 	bl	8004cc8 <vPortFree>
            vPortFree( pxTCB );
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fe6c 	bl	8004cc8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ff0:	bf00      	nop
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8004028 <prvResetNextTaskUnblockTime+0x30>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004006:	4b09      	ldr	r3, [pc, #36]	@ (800402c <prvResetNextTaskUnblockTime+0x34>)
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800400e:	e005      	b.n	800401c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004010:	4b05      	ldr	r3, [pc, #20]	@ (8004028 <prvResetNextTaskUnblockTime+0x30>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <prvResetNextTaskUnblockTime+0x34>)
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200001a0 	.word	0x200001a0
 800402c:	20000208 	.word	0x20000208

08004030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <xTaskGetSchedulerState+0x3c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d102      	bne.n	8004044 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800403e:	2301      	movs	r3, #1
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e008      	b.n	8004056 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004044:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <xTaskGetSchedulerState+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800404c:	2302      	movs	r3, #2
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	e001      	b.n	8004056 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	20f5      	movs	r0, #245	@ 0xf5
 800405c:	f001 ff32 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004060:	687b      	ldr	r3, [r7, #4]
    }
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	200001f4 	.word	0x200001f4
 8004070:	20000210 	.word	0x20000210

08004074 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800407e:	4b3d      	ldr	r3, [pc, #244]	@ (8004174 <prvAddCurrentTaskToDelayedList+0x100>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004084:	4b3c      	ldr	r3, [pc, #240]	@ (8004178 <prvAddCurrentTaskToDelayedList+0x104>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800408a:	4b3c      	ldr	r3, [pc, #240]	@ (800417c <prvAddCurrentTaskToDelayedList+0x108>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004090:	4b3b      	ldr	r3, [pc, #236]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3304      	adds	r3, #4
 8004096:	4618      	mov	r0, r3
 8004098:	f7fe fc46 	bl	8002928 <uxListRemove>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80040a2:	4b37      	ldr	r3, [pc, #220]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	2201      	movs	r2, #1
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43da      	mvns	r2, r3
 80040b0:	4b34      	ldr	r3, [pc, #208]	@ (8004184 <prvAddCurrentTaskToDelayedList+0x110>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4013      	ands	r3, r2
 80040b6:	4a33      	ldr	r2, [pc, #204]	@ (8004184 <prvAddCurrentTaskToDelayedList+0x110>)
 80040b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d124      	bne.n	800410c <prvAddCurrentTaskToDelayedList+0x98>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d021      	beq.n	800410c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004188 <prvAddCurrentTaskToDelayedList+0x114>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	4b27      	ldr	r3, [pc, #156]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	3204      	adds	r2, #4
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	4b24      	ldr	r3, [pc, #144]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1d1a      	adds	r2, r3, #4
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a23      	ldr	r2, [pc, #140]	@ (8004188 <prvAddCurrentTaskToDelayedList+0x114>)
 80040fc:	615a      	str	r2, [r3, #20]
 80040fe:	4b22      	ldr	r3, [pc, #136]	@ (8004188 <prvAddCurrentTaskToDelayedList+0x114>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <prvAddCurrentTaskToDelayedList+0x114>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800410a:	e02e      	b.n	800416a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004114:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d20d      	bcs.n	8004140 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004124:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2104      	movs	r1, #4
 800412a:	4618      	mov	r0, r3
 800412c:	f002 f804 	bl	8006138 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	6978      	ldr	r0, [r7, #20]
 800413a:	f7fe fbba 	bl	80028b2 <vListInsert>
}
 800413e:	e014      	b.n	800416a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2104      	movs	r1, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fff6 	bl	8006138 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <prvAddCurrentTaskToDelayedList+0x10c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3304      	adds	r3, #4
 8004152:	4619      	mov	r1, r3
 8004154:	69b8      	ldr	r0, [r7, #24]
 8004156:	f7fe fbac 	bl	80028b2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800415a:	4b0c      	ldr	r3, [pc, #48]	@ (800418c <prvAddCurrentTaskToDelayedList+0x118>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	429a      	cmp	r2, r3
 8004162:	d202      	bcs.n	800416a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004164:	4a09      	ldr	r2, [pc, #36]	@ (800418c <prvAddCurrentTaskToDelayedList+0x118>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6013      	str	r3, [r2, #0]
}
 800416a:	bf00      	nop
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	200001ec 	.word	0x200001ec
 8004178:	200001a0 	.word	0x200001a0
 800417c:	200001a4 	.word	0x200001a4
 8004180:	20000110 	.word	0x20000110
 8004184:	200001f0 	.word	0x200001f0
 8004188:	200001d4 	.word	0x200001d4
 800418c:	20000208 	.word	0x20000208

08004190 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800419a:	f000 fa5b 	bl	8004654 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <xTimerCreateTimerTask+0x64>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80041a6:	4b14      	ldr	r3, [pc, #80]	@ (80041f8 <xTimerCreateTimerTask+0x68>)
 80041a8:	9301      	str	r3, [sp, #4]
 80041aa:	2302      	movs	r3, #2
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	2300      	movs	r3, #0
 80041b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80041b4:	4911      	ldr	r1, [pc, #68]	@ (80041fc <xTimerCreateTimerTask+0x6c>)
 80041b6:	4812      	ldr	r0, [pc, #72]	@ (8004200 <xTimerCreateTimerTask+0x70>)
 80041b8:	f7fe ff37 	bl	800302a <xTaskCreate>
 80041bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10b      	bne.n	80041dc <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	603b      	str	r3, [r7, #0]
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	e7fd      	b.n	80041d8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80041e4:	f001 fe6e 	bl	8005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80041e8:	687b      	ldr	r3, [r7, #4]
    }
 80041ea:	4618      	mov	r0, r3
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000244 	.word	0x20000244
 80041f8:	20000248 	.word	0x20000248
 80041fc:	08006804 	.word	0x08006804
 8004200:	080042a9 	.word	0x080042a9

08004204 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004210:	e008      	b.n	8004224 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4413      	add	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	18d1      	adds	r1, r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8df 	bl	80043f4 <prvInsertTimerInActiveList>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ea      	bne.n	8004212 <prvReloadTimer+0xe>
        }
    }
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004252:	4b14      	ldr	r3, [pc, #80]	@ (80042a4 <prvProcessExpiredTimer+0x5c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe fb61 	bl	8002928 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ffc3 	bl	8004204 <prvReloadTimer>
 800427e:	e008      	b.n	8004292 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	4798      	blx	r3
    }
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	2000023c 	.word	0x2000023c

080042a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 f859 	bl	800436c <prvGetNextExpireTime>
 80042ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4619      	mov	r1, r3
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f805 	bl	80042d0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80042c6:	f000 f8d7 	bl	8004478 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ca:	bf00      	nop
 80042cc:	e7f0      	b.n	80042b0 <prvTimerTask+0x8>
	...

080042d0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80042da:	f7ff f93f 	bl	800355c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f866 	bl	80043b4 <prvSampleTimeNow>
 80042e8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d130      	bne.n	8004352 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <prvProcessTimerOrBlockTask+0x3c>
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d806      	bhi.n	800430c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80042fe:	f7ff f93b 	bl	8003578 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff9f 	bl	8004248 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800430a:	e024      	b.n	8004356 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004312:	4b13      	ldr	r3, [pc, #76]	@ (8004360 <prvProcessTimerOrBlockTask+0x90>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <prvProcessTimerOrBlockTask+0x50>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <prvProcessTimerOrBlockTask+0x52>
 8004320:	2300      	movs	r3, #0
 8004322:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004324:	4b0f      	ldr	r3, [pc, #60]	@ (8004364 <prvProcessTimerOrBlockTask+0x94>)
 8004326:	6818      	ldr	r0, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f7fe fe07 	bl	8002f44 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004336:	f7ff f91f 	bl	8003578 <xTaskResumeAll>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <prvProcessTimerOrBlockTask+0x98>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
    }
 8004350:	e001      	b.n	8004356 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004352:	f7ff f911 	bl	8003578 <xTaskResumeAll>
    }
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000240 	.word	0x20000240
 8004364:	20000244 	.word	0x20000244
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004374:	4b0e      	ldr	r3, [pc, #56]	@ (80043b0 <prvGetNextExpireTime+0x44>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <prvGetNextExpireTime+0x16>
 800437e:	2201      	movs	r2, #1
 8004380:	e000      	b.n	8004384 <prvGetNextExpireTime+0x18>
 8004382:	2200      	movs	r2, #0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <prvGetNextExpireTime+0x44>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	e001      	b.n	80043a0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80043a0:	68fb      	ldr	r3, [r7, #12]
    }
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	2000023c 	.word	0x2000023c

080043b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80043bc:	f7ff f9ee 	bl	800379c <xTaskGetTickCount>
 80043c0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80043c2:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <prvSampleTimeNow+0x3c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d205      	bcs.n	80043d8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80043cc:	f000 f91c 	bl	8004608 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	e002      	b.n	80043de <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80043de:	4a04      	ldr	r2, [pc, #16]	@ (80043f0 <prvSampleTimeNow+0x3c>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80043e4:	68fb      	ldr	r3, [r7, #12]
    }
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2000024c 	.word	0x2000024c

080043f4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d812      	bhi.n	8004440 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	1ad2      	subs	r2, r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004428:	2301      	movs	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e01b      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800442e:	4b10      	ldr	r3, [pc, #64]	@ (8004470 <prvInsertTimerInActiveList+0x7c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fe fa3a 	bl	80028b2 <vListInsert>
 800443e:	e012      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d206      	bcs.n	8004456 <prvInsertTimerInActiveList+0x62>
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d302      	bcc.n	8004456 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e007      	b.n	8004466 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004456:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <prvInsertTimerInActiveList+0x80>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f7fe fa26 	bl	80028b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004466:	697b      	ldr	r3, [r7, #20]
    }
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000240 	.word	0x20000240
 8004474:	2000023c 	.word	0x2000023c

08004478 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800447e:	f107 0308 	add.w	r3, r7, #8
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800448a:	e0a9      	b.n	80045e0 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f2c0 80a6 	blt.w	80045e0 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d004      	beq.n	80044aa <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fa3f 	bl	8002928 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff81 	bl	80043b4 <prvSampleTimeNow>
 80044b2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	f200 808e 	bhi.w	80045da <prvProcessReceivedCommands+0x162>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <prvProcessReceivedCommands+0x4c>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044e9 	.word	0x080044e9
 80044c8:	080044e9 	.word	0x080044e9
 80044cc:	08004551 	.word	0x08004551
 80044d0:	08004565 	.word	0x08004565
 80044d4:	080045b1 	.word	0x080045b1
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044e9 	.word	0x080044e9
 80044e0:	08004551 	.word	0x08004551
 80044e4:	08004565 	.word	0x08004565
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	18d1      	adds	r1, r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	69f8      	ldr	r0, [r7, #28]
 8004508:	f7ff ff74 	bl	80043f4 <prvInsertTimerInActiveList>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d065      	beq.n	80045de <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	4413      	add	r3, r2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4619      	mov	r1, r3
 800452c:	69f8      	ldr	r0, [r7, #28]
 800452e:	f7ff fe69 	bl	8004204 <prvReloadTimer>
 8004532:	e008      	b.n	8004546 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	b2da      	uxtb	r2, r3
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	69f8      	ldr	r0, [r7, #28]
 800454c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800454e:	e046      	b.n	80045de <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004562:	e03d      	b.n	80045e0 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	b2da      	uxtb	r2, r3
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	617b      	str	r3, [r7, #20]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	18d1      	adds	r1, r2, r3
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	69f8      	ldr	r0, [r7, #28]
 80045aa:	f7ff ff23 	bl	80043f4 <prvInsertTimerInActiveList>
                        break;
 80045ae:	e017      	b.n	80045e0 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d103      	bne.n	80045c6 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 80045be:	69f8      	ldr	r0, [r7, #28]
 80045c0:	f000 fb82 	bl	8004cc8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80045c4:	e00c      	b.n	80045e0 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80045d8:	e002      	b.n	80045e0 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <prvProcessReceivedCommands+0x168>
                        break;
 80045de:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80045e0:	4b08      	ldr	r3, [pc, #32]	@ (8004604 <prvProcessReceivedCommands+0x18c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f107 0108 	add.w	r1, r7, #8
 80045e8:	2200      	movs	r2, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fe fade 	bl	8002bac <xQueueReceive>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f47f af4a 	bne.w	800448c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000244 	.word	0x20000244

08004608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800460e:	e009      	b.n	8004624 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <prvSwitchTimerLists+0x44>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800461a:	f04f 31ff 	mov.w	r1, #4294967295
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	f7ff fe12 	bl	8004248 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004624:	4b09      	ldr	r3, [pc, #36]	@ (800464c <prvSwitchTimerLists+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800462e:	4b07      	ldr	r3, [pc, #28]	@ (800464c <prvSwitchTimerLists+0x44>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <prvSwitchTimerLists+0x48>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a04      	ldr	r2, [pc, #16]	@ (800464c <prvSwitchTimerLists+0x44>)
 800463a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <prvSwitchTimerLists+0x48>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6013      	str	r3, [r2, #0]
    }
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2000023c 	.word	0x2000023c
 8004650:	20000240 	.word	0x20000240

08004654 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004658:	f000 f9b4 	bl	80049c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800465c:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <prvCheckForValidListAndQueue+0x54>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d11d      	bne.n	80046a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004664:	4811      	ldr	r0, [pc, #68]	@ (80046ac <prvCheckForValidListAndQueue+0x58>)
 8004666:	f7fe f8f3 	bl	8002850 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800466a:	4811      	ldr	r0, [pc, #68]	@ (80046b0 <prvCheckForValidListAndQueue+0x5c>)
 800466c:	f7fe f8f0 	bl	8002850 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004670:	4b10      	ldr	r3, [pc, #64]	@ (80046b4 <prvCheckForValidListAndQueue+0x60>)
 8004672:	4a0e      	ldr	r2, [pc, #56]	@ (80046ac <prvCheckForValidListAndQueue+0x58>)
 8004674:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <prvCheckForValidListAndQueue+0x64>)
 8004678:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <prvCheckForValidListAndQueue+0x5c>)
 800467a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 800467c:	2200      	movs	r2, #0
 800467e:	210c      	movs	r1, #12
 8004680:	200a      	movs	r0, #10
 8004682:	f7fe fa17 	bl	8002ab4 <xQueueGenericCreate>
 8004686:	4603      	mov	r3, r0
 8004688:	4a07      	ldr	r2, [pc, #28]	@ (80046a8 <prvCheckForValidListAndQueue+0x54>)
 800468a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <prvCheckForValidListAndQueue+0x54>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <prvCheckForValidListAndQueue+0x54>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4908      	ldr	r1, [pc, #32]	@ (80046bc <prvCheckForValidListAndQueue+0x68>)
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fc02 	bl	8002ea4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80046a0:	f000 f9c2 	bl	8004a28 <vPortExitCritical>
    }
 80046a4:	bf00      	nop
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000244 	.word	0x20000244
 80046ac:	20000214 	.word	0x20000214
 80046b0:	20000228 	.word	0x20000228
 80046b4:	2000023c 	.word	0x2000023c
 80046b8:	20000240 	.word	0x20000240
 80046bc:	0800680c 	.word	0x0800680c

080046c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	3b04      	subs	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80046d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3b04      	subs	r3, #4
 80046de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3b04      	subs	r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80046f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004724 <pxPortInitialiseStack+0x64>)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3b14      	subs	r3, #20
 80046fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	3b04      	subs	r3, #4
 8004706:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f06f 0202 	mvn.w	r2, #2
 800470e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3b20      	subs	r3, #32
 8004714:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004716:	68fb      	ldr	r3, [r7, #12]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	08004729 	.word	0x08004729

08004728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004732:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <prvTaskExitError+0x58>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d00b      	beq.n	8004754 <prvTaskExitError+0x2c>
    __asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60fb      	str	r3, [r7, #12]
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <prvTaskExitError+0x28>
    __asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	60bb      	str	r3, [r7, #8]
}
 8004766:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004768:	bf00      	nop
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0fc      	beq.n	800476a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	2000001c 	.word	0x2000001c
	...

08004790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <pxCurrentTCBConst2>)
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	f380 8809 	msr	PSP, r0
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	4770      	bx	lr
 80047ac:	f3af 8000 	nop.w

080047b0 <pxCurrentTCBConst2>:
 80047b0:	20000110 	.word	0x20000110
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80047b8:	4808      	ldr	r0, [pc, #32]	@ (80047dc <prvPortStartFirstTask+0x24>)
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	6800      	ldr	r0, [r0, #0]
 80047be:	f380 8808 	msr	MSP, r0
 80047c2:	f04f 0000 	mov.w	r0, #0
 80047c6:	f380 8814 	msr	CONTROL, r0
 80047ca:	b662      	cpsie	i
 80047cc:	b661      	cpsie	f
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	df00      	svc	0
 80047d8:	bf00      	nop
 80047da:	0000      	.short	0x0000
 80047dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop

080047e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	@ 0x30
 80047e8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047ea:	4b69      	ldr	r3, [pc, #420]	@ (8004990 <xPortStartScheduler+0x1ac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a69      	ldr	r2, [pc, #420]	@ (8004994 <xPortStartScheduler+0x1b0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d10b      	bne.n	800480c <xPortStartScheduler+0x28>
    __asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800480c:	4b60      	ldr	r3, [pc, #384]	@ (8004990 <xPortStartScheduler+0x1ac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a61      	ldr	r2, [pc, #388]	@ (8004998 <xPortStartScheduler+0x1b4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10b      	bne.n	800482e <xPortStartScheduler+0x4a>
    __asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	623b      	str	r3, [r7, #32]
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	e7fd      	b.n	800482a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800482e:	4b5b      	ldr	r3, [pc, #364]	@ (800499c <xPortStartScheduler+0x1b8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	332c      	adds	r3, #44	@ 0x2c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a59      	ldr	r2, [pc, #356]	@ (80049a0 <xPortStartScheduler+0x1bc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <xPortStartScheduler+0x74>
    __asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	61fb      	str	r3, [r7, #28]
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485a:	3338      	adds	r3, #56	@ 0x38
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a51      	ldr	r2, [pc, #324]	@ (80049a4 <xPortStartScheduler+0x1c0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00b      	beq.n	800487c <xPortStartScheduler+0x98>
    __asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	61bb      	str	r3, [r7, #24]
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004880:	4b49      	ldr	r3, [pc, #292]	@ (80049a8 <xPortStartScheduler+0x1c4>)
 8004882:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	22ff      	movs	r2, #255	@ 0xff
 8004890:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	4b41      	ldr	r3, [pc, #260]	@ (80049ac <xPortStartScheduler+0x1c8>)
 80048a6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80048a8:	4b40      	ldr	r3, [pc, #256]	@ (80049ac <xPortStartScheduler+0x1c8>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <xPortStartScheduler+0xe4>
    __asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	617b      	str	r3, [r7, #20]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d013      	beq.n	80048fe <xPortStartScheduler+0x11a>
    __asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	613b      	str	r3, [r7, #16]
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	e7fd      	b.n	80048ea <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004906:	2b80      	cmp	r3, #128	@ 0x80
 8004908:	d0f1      	beq.n	80048ee <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d103      	bne.n	8004918 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004910:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e004      	b.n	8004922 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f1c3 0307 	rsb	r3, r3, #7
 800491e:	4a24      	ldr	r2, [pc, #144]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 8004920:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004922:	4b23      	ldr	r3, [pc, #140]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	4a21      	ldr	r2, [pc, #132]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 800492a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800492c:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004934:	4a1e      	ldr	r2, [pc, #120]	@ (80049b0 <xPortStartScheduler+0x1cc>)
 8004936:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	b2da      	uxtb	r2, r3
 800493c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800493e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004940:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <xPortStartScheduler+0x1d0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1b      	ldr	r2, [pc, #108]	@ (80049b4 <xPortStartScheduler+0x1d0>)
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800494c:	4b19      	ldr	r3, [pc, #100]	@ (80049b4 <xPortStartScheduler+0x1d0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	@ (80049b4 <xPortStartScheduler+0x1d0>)
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004956:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004958:	4b17      	ldr	r3, [pc, #92]	@ (80049b8 <xPortStartScheduler+0x1d4>)
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800495e:	f000 f8ed 	bl	8004b3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004962:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <xPortStartScheduler+0x1d8>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004968:	f000 f90c 	bl	8004b84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800496c:	4b14      	ldr	r3, [pc, #80]	@ (80049c0 <xPortStartScheduler+0x1dc>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a13      	ldr	r2, [pc, #76]	@ (80049c0 <xPortStartScheduler+0x1dc>)
 8004972:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004976:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004978:	f7ff ff1e 	bl	80047b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800497c:	f7ff f858 	bl	8003a30 <vTaskSwitchContext>
    prvTaskExitError();
 8004980:	f7ff fed2 	bl	8004728 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3730      	adds	r7, #48	@ 0x30
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00
 8004994:	410fc271 	.word	0x410fc271
 8004998:	410fc270 	.word	0x410fc270
 800499c:	e000ed08 	.word	0xe000ed08
 80049a0:	08004791 	.word	0x08004791
 80049a4:	08004a81 	.word	0x08004a81
 80049a8:	e000e400 	.word	0xe000e400
 80049ac:	20000250 	.word	0x20000250
 80049b0:	20000254 	.word	0x20000254
 80049b4:	e000ed20 	.word	0xe000ed20
 80049b8:	e000ed1c 	.word	0xe000ed1c
 80049bc:	2000001c 	.word	0x2000001c
 80049c0:	e000ef34 	.word	0xe000ef34

080049c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
    __asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	607b      	str	r3, [r7, #4]
}
 80049dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80049de:	4b10      	ldr	r3, [pc, #64]	@ (8004a20 <vPortEnterCritical+0x5c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004a20 <vPortEnterCritical+0x5c>)
 80049e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80049e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a20 <vPortEnterCritical+0x5c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d110      	bne.n	8004a12 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80049f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004a24 <vPortEnterCritical+0x60>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <vPortEnterCritical+0x4e>
    __asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	603b      	str	r3, [r7, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <vPortEnterCritical+0x4a>
    }
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000001c 	.word	0x2000001c
 8004a24:	e000ed04 	.word	0xe000ed04

08004a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a2e:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <vPortExitCritical+0x50>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <vPortExitCritical+0x26>
    __asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	607b      	str	r3, [r7, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <vPortExitCritical+0x50>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4a08      	ldr	r2, [pc, #32]	@ (8004a78 <vPortExitCritical+0x50>)
 8004a56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a58:	4b07      	ldr	r3, [pc, #28]	@ (8004a78 <vPortExitCritical+0x50>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <vPortExitCritical+0x44>
 8004a60:	2300      	movs	r3, #0
 8004a62:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004a6a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	2000001c 	.word	0x2000001c
 8004a7c:	00000000 	.word	0x00000000

08004a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a80:	f3ef 8009 	mrs	r0, PSP
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	4b15      	ldr	r3, [pc, #84]	@ (8004ae0 <pxCurrentTCBConst>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f01e 0f10 	tst.w	lr, #16
 8004a90:	bf08      	it	eq
 8004a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9a:	6010      	str	r0, [r2, #0]
 8004a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004aa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004aa4:	f380 8811 	msr	BASEPRI, r0
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f7fe ffbe 	bl	8003a30 <vTaskSwitchContext>
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f380 8811 	msr	BASEPRI, r0
 8004abc:	bc09      	pop	{r0, r3}
 8004abe:	6819      	ldr	r1, [r3, #0]
 8004ac0:	6808      	ldr	r0, [r1, #0]
 8004ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac6:	f01e 0f10 	tst.w	lr, #16
 8004aca:	bf08      	it	eq
 8004acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ad0:	f380 8809 	msr	PSP, r0
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst>:
 8004ae0:	20000110 	.word	0x20000110
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
    __asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	607b      	str	r3, [r7, #4]
}
 8004b00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004b02:	f001 f929 	bl	8005d58 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b06:	f7fe fe71 	bl	80037ec <xTaskIncrementTick>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d006      	beq.n	8004b1e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004b10:	f001 f980 	bl	8005e14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <SysTick_Handler+0x50>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e001      	b.n	8004b22 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004b1e:	f001 f95d 	bl	8005ddc <SEGGER_SYSVIEW_RecordExitISR>
 8004b22:	2300      	movs	r3, #0
 8004b24:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f383 8811 	msr	BASEPRI, r3
}
 8004b2c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	e000ed04 	.word	0xe000ed04

08004b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b46:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <vPortSetupTimerInterrupt+0x38>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <vPortSetupTimerInterrupt+0x3c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a0a      	ldr	r2, [pc, #40]	@ (8004b7c <vPortSetupTimerInterrupt+0x40>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	4a09      	ldr	r2, [pc, #36]	@ (8004b80 <vPortSetupTimerInterrupt+0x44>)
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5e:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <vPortSetupTimerInterrupt+0x34>)
 8004b60:	2207      	movs	r2, #7
 8004b62:	601a      	str	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	e000e010 	.word	0xe000e010
 8004b74:	e000e018 	.word	0xe000e018
 8004b78:	2000000c 	.word	0x2000000c
 8004b7c:	10624dd3 	.word	0x10624dd3
 8004b80:	e000e014 	.word	0xe000e014

08004b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b94 <vPortEnableVFP+0x10>
 8004b88:	6801      	ldr	r1, [r0, #0]
 8004b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b8e:	6001      	str	r1, [r0, #0]
 8004b90:	4770      	bx	lr
 8004b92:	0000      	.short	0x0000
 8004b94:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop

08004b9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ba2:	f3ef 8305 	mrs	r3, IPSR
 8004ba6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d915      	bls.n	8004bda <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bae:	4a18      	ldr	r2, [pc, #96]	@ (8004c10 <vPortValidateInterruptPriority+0x74>)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bb8:	4b16      	ldr	r3, [pc, #88]	@ (8004c14 <vPortValidateInterruptPriority+0x78>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	7afa      	ldrb	r2, [r7, #11]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d20b      	bcs.n	8004bda <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bda:	4b0f      	ldr	r3, [pc, #60]	@ (8004c18 <vPortValidateInterruptPriority+0x7c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004be2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c1c <vPortValidateInterruptPriority+0x80>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d90b      	bls.n	8004c02 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	603b      	str	r3, [r7, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	bf00      	nop
 8004c00:	e7fd      	b.n	8004bfe <vPortValidateInterruptPriority+0x62>
    }
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	e000e3f0 	.word	0xe000e3f0
 8004c14:	20000250 	.word	0x20000250
 8004c18:	e000ed0c 	.word	0xe000ed0c
 8004c1c:	20000254 	.word	0x20000254

08004c20 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00e      	beq.n	8004c54 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f023 0307 	bic.w	r3, r3, #7
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d205      	bcs.n	8004c50 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	e001      	b.n	8004c54 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8004c54:	f7fe fc82 	bl	800355c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8004c58:	4b17      	ldr	r3, [pc, #92]	@ (8004cb8 <pvPortMalloc+0x98>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004c60:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <pvPortMalloc+0x9c>)
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	461a      	mov	r2, r3
 8004c68:	4b13      	ldr	r3, [pc, #76]	@ (8004cb8 <pvPortMalloc+0x98>)
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01a      	beq.n	8004ca8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c72:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c7a:	4a12      	ldr	r2, [pc, #72]	@ (8004cc4 <pvPortMalloc+0xa4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d813      	bhi.n	8004ca8 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8004c80:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	441a      	add	r2, r3
 8004c88:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d90b      	bls.n	8004ca8 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8004c90:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <pvPortMalloc+0x98>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004c9c:	4b08      	ldr	r3, [pc, #32]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	4a06      	ldr	r2, [pc, #24]	@ (8004cc0 <pvPortMalloc+0xa0>)
 8004ca6:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ca8:	f7fe fc66 	bl	8003578 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20012e5c 	.word	0x20012e5c
 8004cbc:	2000025f 	.word	0x2000025f
 8004cc0:	20012e58 	.word	0x20012e58
 8004cc4:	00012bf7 	.word	0x00012bf7

08004cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <vPortFree+0x26>
    __asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60fb      	str	r3, [r7, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <vPortFree+0x22>
}
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d00:	4803      	ldr	r0, [pc, #12]	@ (8004d10 <_cbSendSystemDesc+0x14>)
 8004d02:	f000 ffd3 	bl	8005cac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d06:	4803      	ldr	r0, [pc, #12]	@ (8004d14 <_cbSendSystemDesc+0x18>)
 8004d08:	f000 ffd0 	bl	8005cac <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08006814 	.word	0x08006814
 8004d14:	08006840 	.word	0x08006840

08004d18 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	4b05      	ldr	r3, [pc, #20]	@ (8004d3c <SEGGER_SYSVIEW_Conf+0x24>)
 8004d26:	4a06      	ldr	r2, [pc, #24]	@ (8004d40 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d28:	f000 fc46 	bl	80055b8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d2c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004d30:	f000 fc86 	bl	8005640 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d34:	bf00      	nop
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	080068fc 	.word	0x080068fc

08004d44 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d4a:	4b26      	ldr	r3, [pc, #152]	@ (8004de4 <_DoInit+0xa0>)
 8004d4c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d4e:	22a8      	movs	r2, #168	@ 0xa8
 8004d50:	2100      	movs	r1, #0
 8004d52:	6838      	ldr	r0, [r7, #0]
 8004d54:	f001 fcc7 	bl	80066e6 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2203      	movs	r2, #3
 8004d62:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	4a20      	ldr	r2, [pc, #128]	@ (8004de8 <_DoInit+0xa4>)
 8004d68:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8004dec <_DoInit+0xa8>)
 8004d6e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d76:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2200      	movs	r2, #0
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	4a16      	ldr	r2, [pc, #88]	@ (8004de8 <_DoInit+0xa4>)
 8004d8e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4a17      	ldr	r2, [pc, #92]	@ (8004df0 <_DoInit+0xac>)
 8004d94:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2210      	movs	r2, #16
 8004d9a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2200      	movs	r2, #0
 8004da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e00c      	b.n	8004dd2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f1c3 030f 	rsb	r3, r3, #15
 8004dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004df4 <_DoInit+0xb0>)
 8004dc0:	5cd1      	ldrb	r1, [r2, r3]
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	460a      	mov	r2, r1
 8004dca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b0f      	cmp	r3, #15
 8004dd6:	d9ef      	bls.n	8004db8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004dd8:	f3bf 8f5f 	dmb	sy
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20012e60 	.word	0x20012e60
 8004de8:	08006850 	.word	0x08006850
 8004dec:	20012f08 	.word	0x20012f08
 8004df0:	20013308 	.word	0x20013308
 8004df4:	080068dc 	.word	0x080068dc

08004df8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b08c      	sub	sp, #48	@ 0x30
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e04:	4b3e      	ldr	r3, [pc, #248]	@ (8004f00 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b53      	cmp	r3, #83	@ 0x53
 8004e10:	d001      	beq.n	8004e16 <SEGGER_RTT_ReadNoLock+0x1e>
 8004e12:	f7ff ff97 	bl	8004d44 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	3360      	adds	r3, #96	@ 0x60
 8004e22:	4a37      	ldr	r2, [pc, #220]	@ (8004f00 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e24:	4413      	add	r3, r2
 8004e26:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d92b      	bls.n	8004e9c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf28      	it	cs
 8004e56:	4613      	movcs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e60:	4413      	add	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6939      	ldr	r1, [r7, #16]
 8004e68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e6a:	f001 fc69 	bl	8006740 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4413      	add	r3, r2
 8004e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d101      	bne.n	8004e9c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bf28      	it	cs
 8004eac:	4613      	movcs	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d019      	beq.n	8004eea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebc:	4413      	add	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	6939      	ldr	r1, [r7, #16]
 8004ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ec6:	f001 fc3b 	bl	8006740 <memcpy>
    NumBytesRead += NumBytesRem;
 8004eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ef4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3730      	adds	r7, #48	@ 0x30
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20012e60 	.word	0x20012e60

08004f04 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f12:	4b3d      	ldr	r3, [pc, #244]	@ (8005008 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b53      	cmp	r3, #83	@ 0x53
 8004f1e:	d001      	beq.n	8004f24 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f20:	f7ff ff10 	bl	8004d44 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f24:	f3ef 8311 	mrs	r3, BASEPRI
 8004f28:	f04f 0120 	mov.w	r1, #32
 8004f2c:	f381 8811 	msr	BASEPRI, r1
 8004f30:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f32:	4b35      	ldr	r3, [pc, #212]	@ (8005008 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f34:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d008      	beq.n	8004f64 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	3301      	adds	r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	dbeb      	blt.n	8004f3a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f62:	e000      	b.n	8004f66 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f64:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	da3f      	bge.n	8004ff0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f84:	6939      	ldr	r1, [r7, #16]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	3304      	adds	r3, #4
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f9a:	6939      	ldr	r1, [r7, #16]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3320      	adds	r3, #32
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004fae:	6939      	ldr	r1, [r7, #16]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	3328      	adds	r3, #40	@ 0x28
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	440b      	add	r3, r1
 8004fd0:	3324      	adds	r3, #36	@ 0x24
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	69fa      	ldr	r2, [r7, #28]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	4413      	add	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	440b      	add	r3, r1
 8004fe4:	332c      	adds	r3, #44	@ 0x2c
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fea:	f3bf 8f5f 	dmb	sy
 8004fee:	e002      	b.n	8004ff6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ffc:	69fb      	ldr	r3, [r7, #28]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3720      	adds	r7, #32
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	20012e60 	.word	0x20012e60

0800500c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	@ 0x28
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800501a:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b53      	cmp	r3, #83	@ 0x53
 8005026:	d001      	beq.n	800502c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005028:	f7ff fe8c 	bl	8004d44 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800502c:	4b1c      	ldr	r3, [pc, #112]	@ (80050a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800502e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d82c      	bhi.n	8005090 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005036:	f3ef 8311 	mrs	r3, BASEPRI
 800503a:	f04f 0120 	mov.w	r1, #32
 800503e:	f381 8811 	msr	BASEPRI, r1
 8005042:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	3360      	adds	r3, #96	@ 0x60
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00e      	beq.n	800507a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005080:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
 800508e:	e002      	b.n	8005096 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005090:	f04f 33ff 	mov.w	r3, #4294967295
 8005094:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005098:	4618      	mov	r0, r3
 800509a:	3728      	adds	r7, #40	@ 0x28
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20012e60 	.word	0x20012e60

080050a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60fa      	str	r2, [r7, #12]
 80050ba:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d90a      	bls.n	80050d8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80050c6:	e007      	b.n	80050d8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	1c53      	adds	r3, r2, #1
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1c59      	adds	r1, r3, #1
 80050d2:	60f9      	str	r1, [r7, #12]
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <_EncodeStr+0x46>
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1ee      	bne.n	80050c8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3307      	adds	r3, #7
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005122:	4b34      	ldr	r3, [pc, #208]	@ (80051f4 <_HandleIncomingPacket+0xd8>)
 8005124:	7e1b      	ldrb	r3, [r3, #24]
 8005126:	4618      	mov	r0, r3
 8005128:	1cfb      	adds	r3, r7, #3
 800512a:	2201      	movs	r2, #1
 800512c:	4619      	mov	r1, r3
 800512e:	f7ff fe63 	bl	8004df8 <SEGGER_RTT_ReadNoLock>
 8005132:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d057      	beq.n	80051ea <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	2b80      	cmp	r3, #128	@ 0x80
 800513e:	d031      	beq.n	80051a4 <_HandleIncomingPacket+0x88>
 8005140:	2b80      	cmp	r3, #128	@ 0x80
 8005142:	dc40      	bgt.n	80051c6 <_HandleIncomingPacket+0xaa>
 8005144:	2b07      	cmp	r3, #7
 8005146:	dc15      	bgt.n	8005174 <_HandleIncomingPacket+0x58>
 8005148:	2b00      	cmp	r3, #0
 800514a:	dd3c      	ble.n	80051c6 <_HandleIncomingPacket+0xaa>
 800514c:	3b01      	subs	r3, #1
 800514e:	2b06      	cmp	r3, #6
 8005150:	d839      	bhi.n	80051c6 <_HandleIncomingPacket+0xaa>
 8005152:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <_HandleIncomingPacket+0x3c>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800517b 	.word	0x0800517b
 800515c:	08005181 	.word	0x08005181
 8005160:	08005187 	.word	0x08005187
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005193 	.word	0x08005193
 800516c:	08005199 	.word	0x08005199
 8005170:	0800519f 	.word	0x0800519f
 8005174:	2b7f      	cmp	r3, #127	@ 0x7f
 8005176:	d033      	beq.n	80051e0 <_HandleIncomingPacket+0xc4>
 8005178:	e025      	b.n	80051c6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800517a:	f000 fb25 	bl	80057c8 <SEGGER_SYSVIEW_Start>
      break;
 800517e:	e034      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005180:	f000 fbdc 	bl	800593c <SEGGER_SYSVIEW_Stop>
      break;
 8005184:	e031      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005186:	f000 fdb5 	bl	8005cf4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800518a:	e02e      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800518c:	f000 fd7a 	bl	8005c84 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005190:	e02b      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005192:	f000 fbf9 	bl	8005988 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005196:	e028      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005198:	f001 f8e6 	bl	8006368 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800519c:	e025      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800519e:	f001 f8c5 	bl	800632c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80051a2:	e022      	b.n	80051ea <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051a4:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <_HandleIncomingPacket+0xd8>)
 80051a6:	7e1b      	ldrb	r3, [r3, #24]
 80051a8:	4618      	mov	r0, r3
 80051aa:	1cfb      	adds	r3, r7, #3
 80051ac:	2201      	movs	r2, #1
 80051ae:	4619      	mov	r1, r3
 80051b0:	f7ff fe22 	bl	8004df8 <SEGGER_RTT_ReadNoLock>
 80051b4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d013      	beq.n	80051e4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f82a 	bl	8006218 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80051c4:	e00e      	b.n	80051e4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da0c      	bge.n	80051e8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051ce:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <_HandleIncomingPacket+0xd8>)
 80051d0:	7e1b      	ldrb	r3, [r3, #24]
 80051d2:	4618      	mov	r0, r3
 80051d4:	1cfb      	adds	r3, r7, #3
 80051d6:	2201      	movs	r2, #1
 80051d8:	4619      	mov	r1, r3
 80051da:	f7ff fe0d 	bl	8004df8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80051de:	e003      	b.n	80051e8 <_HandleIncomingPacket+0xcc>
      break;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <_HandleIncomingPacket+0xce>
      break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <_HandleIncomingPacket+0xce>
      break;
 80051e8:	bf00      	nop
    }
  }
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20019720 	.word	0x20019720

080051f8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	@ 0x30
 80051fc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051fe:	2301      	movs	r3, #1
 8005200:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	4b31      	ldr	r3, [pc, #196]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	e00b      	b.n	800522c <_TrySendOverflowPacket+0x34>
 8005214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005216:	b2da      	uxtb	r2, r3
 8005218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800521e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005228:	09db      	lsrs	r3, r3, #7
 800522a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005230:	d8f0      	bhi.n	8005214 <_TrySendOverflowPacket+0x1c>
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005242:	4b25      	ldr	r3, [pc, #148]	@ (80052d8 <_TrySendOverflowPacket+0xe0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005248:	4b22      	ldr	r3, [pc, #136]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	e00b      	b.n	8005274 <_TrySendOverflowPacket+0x7c>
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	6279      	str	r1, [r7, #36]	@ 0x24
 8005266:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b7f      	cmp	r3, #127	@ 0x7f
 8005278:	d8f0      	bhi.n	800525c <_TrySendOverflowPacket+0x64>
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800528a:	4b12      	ldr	r3, [pc, #72]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	4618      	mov	r0, r3
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	461a      	mov	r2, r3
 8005298:	1d3b      	adds	r3, r7, #4
 800529a:	4619      	mov	r1, r3
 800529c:	f7fa ff98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80052a0:	4603      	mov	r3, r0
 80052a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80052aa:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80052b0:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e004      	b.n	80052c8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a03      	ldr	r2, [pc, #12]	@ (80052d4 <_TrySendOverflowPacket+0xdc>)
 80052c6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80052c8:	693b      	ldr	r3, [r7, #16]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3730      	adds	r7, #48	@ 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20019720 	.word	0x20019720
 80052d8:	e0001004 	.word	0xe0001004

080052dc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80052e8:	4b98      	ldr	r3, [pc, #608]	@ (800554c <_SendPacket+0x270>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d010      	beq.n	8005312 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80052f0:	4b96      	ldr	r3, [pc, #600]	@ (800554c <_SendPacket+0x270>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 812d 	beq.w	8005554 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052fa:	4b94      	ldr	r3, [pc, #592]	@ (800554c <_SendPacket+0x270>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d109      	bne.n	8005316 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005302:	f7ff ff79 	bl	80051f8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005306:	4b91      	ldr	r3, [pc, #580]	@ (800554c <_SendPacket+0x270>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	f040 8124 	bne.w	8005558 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005310:	e001      	b.n	8005316 <_SendPacket+0x3a>
    goto Send;
 8005312:	bf00      	nop
 8005314:	e000      	b.n	8005318 <_SendPacket+0x3c>
Send:
 8005316:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b1f      	cmp	r3, #31
 800531c:	d809      	bhi.n	8005332 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800531e:	4b8b      	ldr	r3, [pc, #556]	@ (800554c <_SendPacket+0x270>)
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	f040 8115 	bne.w	800555c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b17      	cmp	r3, #23
 8005336:	d807      	bhi.n	8005348 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	701a      	strb	r2, [r3, #0]
 8005346:	e0c4      	b.n	80054d2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	2b7f      	cmp	r3, #127	@ 0x7f
 8005354:	d912      	bls.n	800537c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	09da      	lsrs	r2, r3, #7
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3b01      	subs	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	3a01      	subs	r2, #1
 800536e:	60fa      	str	r2, [r7, #12]
 8005370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e006      	b.n	800538a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b01      	subs	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b7e      	cmp	r3, #126	@ 0x7e
 800538e:	d807      	bhi.n	80053a0 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	e098      	b.n	80054d2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053a6:	d212      	bcs.n	80053ce <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	09da      	lsrs	r2, r3, #7
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	3a01      	subs	r2, #1
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e081      	b.n	80054d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053d4:	d21d      	bcs.n	8005412 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	0b9a      	lsrs	r2, r3, #14
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3b01      	subs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	09db      	lsrs	r3, r3, #7
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	3a01      	subs	r2, #1
 80053f0:	60fa      	str	r2, [r7, #12]
 80053f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	3a01      	subs	r2, #1
 8005404:	60fa      	str	r2, [r7, #12]
 8005406:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800540a:	b2da      	uxtb	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e05f      	b.n	80054d2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005418:	d228      	bcs.n	800546c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0d5a      	lsrs	r2, r3, #21
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3b01      	subs	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	0b9b      	lsrs	r3, r3, #14
 800542e:	b2db      	uxtb	r3, r3
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	3a01      	subs	r2, #1
 8005434:	60fa      	str	r2, [r7, #12]
 8005436:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	09db      	lsrs	r3, r3, #7
 8005444:	b2db      	uxtb	r3, r3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	3a01      	subs	r2, #1
 800544a:	60fa      	str	r2, [r7, #12]
 800544c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	b2db      	uxtb	r3, r3
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	3a01      	subs	r2, #1
 800545e:	60fa      	str	r2, [r7, #12]
 8005460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005464:	b2da      	uxtb	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e032      	b.n	80054d2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	0f1a      	lsrs	r2, r3, #28
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0d5b      	lsrs	r3, r3, #21
 8005480:	b2db      	uxtb	r3, r3
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	3a01      	subs	r2, #1
 8005486:	60fa      	str	r2, [r7, #12]
 8005488:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0b9b      	lsrs	r3, r3, #14
 8005496:	b2db      	uxtb	r3, r3
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	3a01      	subs	r2, #1
 800549c:	60fa      	str	r2, [r7, #12]
 800549e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	09db      	lsrs	r3, r3, #7
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	3a01      	subs	r2, #1
 80054b2:	60fa      	str	r2, [r7, #12]
 80054b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	3a01      	subs	r2, #1
 80054c6:	60fa      	str	r2, [r7, #12]
 80054c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <_SendPacket+0x274>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054d8:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <_SendPacket+0x270>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	623b      	str	r3, [r7, #32]
 80054ea:	e00b      	b.n	8005504 <_SendPacket+0x228>
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	1c59      	adds	r1, r3, #1
 80054f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80054f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	09db      	lsrs	r3, r3, #7
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b7f      	cmp	r3, #127	@ 0x7f
 8005508:	d8f0      	bhi.n	80054ec <_SendPacket+0x210>
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005510:	6a3a      	ldr	r2, [r7, #32]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800551a:	4b0c      	ldr	r3, [pc, #48]	@ (800554c <_SendPacket+0x270>)
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	4618      	mov	r0, r3
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	461a      	mov	r2, r3
 8005528:	68f9      	ldr	r1, [r7, #12]
 800552a:	f7fa fe51 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800552e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005536:	4a05      	ldr	r2, [pc, #20]	@ (800554c <_SendPacket+0x270>)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	60d3      	str	r3, [r2, #12]
 800553c:	e00f      	b.n	800555e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800553e:	4b03      	ldr	r3, [pc, #12]	@ (800554c <_SendPacket+0x270>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	b2da      	uxtb	r2, r3
 8005546:	4b01      	ldr	r3, [pc, #4]	@ (800554c <_SendPacket+0x270>)
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	e008      	b.n	800555e <_SendPacket+0x282>
 800554c:	20019720 	.word	0x20019720
 8005550:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005554:	bf00      	nop
 8005556:	e002      	b.n	800555e <_SendPacket+0x282>
      goto SendDone;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <_SendPacket+0x282>
      goto SendDone;
 800555c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <_SendPacket+0x2d4>)
 8005560:	7e1b      	ldrb	r3, [r3, #24]
 8005562:	4619      	mov	r1, r3
 8005564:	4a13      	ldr	r2, [pc, #76]	@ (80055b4 <_SendPacket+0x2d8>)
 8005566:	460b      	mov	r3, r1
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	440b      	add	r3, r1
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	336c      	adds	r3, #108	@ 0x6c
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <_SendPacket+0x2d4>)
 8005576:	7e1b      	ldrb	r3, [r3, #24]
 8005578:	4618      	mov	r0, r3
 800557a:	490e      	ldr	r1, [pc, #56]	@ (80055b4 <_SendPacket+0x2d8>)
 800557c:	4603      	mov	r3, r0
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4403      	add	r3, r0
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	3370      	adds	r3, #112	@ 0x70
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d00b      	beq.n	80055a6 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <_SendPacket+0x2d4>)
 8005590:	789b      	ldrb	r3, [r3, #2]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <_SendPacket+0x2d4>)
 8005598:	2201      	movs	r2, #1
 800559a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800559c:	f7ff fdbe 	bl	800511c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80055a0:	4b03      	ldr	r3, [pc, #12]	@ (80055b0 <_SendPacket+0x2d4>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80055a6:	bf00      	nop
 80055a8:	3728      	adds	r7, #40	@ 0x28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20019720 	.word	0x20019720
 80055b4:	20012e60 	.word	0x20012e60

080055b8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af02      	add	r7, sp, #8
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
 80055c4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055c6:	2300      	movs	r3, #0
 80055c8:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80055cc:	4917      	ldr	r1, [pc, #92]	@ (800562c <SEGGER_SYSVIEW_Init+0x74>)
 80055ce:	4818      	ldr	r0, [pc, #96]	@ (8005630 <SEGGER_SYSVIEW_Init+0x78>)
 80055d0:	f7ff fc98 	bl	8004f04 <SEGGER_RTT_AllocUpBuffer>
 80055d4:	4603      	mov	r3, r0
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 80055da:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80055dc:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 80055de:	785a      	ldrb	r2, [r3, #1]
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 80055e2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80055e4:	4b13      	ldr	r3, [pc, #76]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 80055e6:	7e1b      	ldrb	r3, [r3, #24]
 80055e8:	4618      	mov	r0, r3
 80055ea:	2300      	movs	r3, #0
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	2308      	movs	r3, #8
 80055f0:	4a11      	ldr	r2, [pc, #68]	@ (8005638 <SEGGER_SYSVIEW_Init+0x80>)
 80055f2:	490f      	ldr	r1, [pc, #60]	@ (8005630 <SEGGER_SYSVIEW_Init+0x78>)
 80055f4:	f7ff fd0a 	bl	800500c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80055f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055fe:	4b0f      	ldr	r3, [pc, #60]	@ (800563c <SEGGER_SYSVIEW_Init+0x84>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a0c      	ldr	r2, [pc, #48]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 8005604:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005606:	4a0b      	ldr	r2, [pc, #44]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800560c:	4a09      	ldr	r2, [pc, #36]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005612:	4a08      	ldr	r2, [pc, #32]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005618:	4a06      	ldr	r2, [pc, #24]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800561e:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <SEGGER_SYSVIEW_Init+0x7c>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20013318 	.word	0x20013318
 8005630:	08006864 	.word	0x08006864
 8005634:	20019720 	.word	0x20019720
 8005638:	20019718 	.word	0x20019718
 800563c:	e0001004 	.word	0xe0001004

08005640 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005648:	4a04      	ldr	r2, [pc, #16]	@ (800565c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6113      	str	r3, [r2, #16]
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20019720 	.word	0x20019720

08005660 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005668:	f3ef 8311 	mrs	r3, BASEPRI
 800566c:	f04f 0120 	mov.w	r1, #32
 8005670:	f381 8811 	msr	BASEPRI, r1
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	4808      	ldr	r0, [pc, #32]	@ (8005698 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005678:	f7ff fd44 	bl	8005104 <_PreparePacket>
 800567c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68b8      	ldr	r0, [r7, #8]
 8005684:	f7ff fe2a 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20019750 	.word	0x20019750

0800569c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056a6:	f3ef 8311 	mrs	r3, BASEPRI
 80056aa:	f04f 0120 	mov.w	r1, #32
 80056ae:	f381 8811 	msr	BASEPRI, r1
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	4816      	ldr	r0, [pc, #88]	@ (8005710 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80056b6:	f7ff fd25 	bl	8005104 <_PreparePacket>
 80056ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	61fb      	str	r3, [r7, #28]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	e00b      	b.n	80056e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	61f9      	str	r1, [r7, #28]
 80056d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e6:	d8f0      	bhi.n	80056ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	61fa      	str	r2, [r7, #28]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	6938      	ldr	r0, [r7, #16]
 80056fe:	f7ff fded 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f383 8811 	msr	BASEPRI, r3
}
 8005708:	bf00      	nop
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20019750 	.word	0x20019750

08005714 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08c      	sub	sp, #48	@ 0x30
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005720:	f3ef 8311 	mrs	r3, BASEPRI
 8005724:	f04f 0120 	mov.w	r1, #32
 8005728:	f381 8811 	msr	BASEPRI, r1
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	4825      	ldr	r0, [pc, #148]	@ (80057c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005730:	f7ff fce8 	bl	8005104 <_PreparePacket>
 8005734:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005742:	e00b      	b.n	800575c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	b2da      	uxtb	r2, r3
 8005748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574a:	1c59      	adds	r1, r3, #1
 800574c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800574e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	09db      	lsrs	r3, r3, #7
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005760:	d8f0      	bhi.n	8005744 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005770:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e00b      	b.n	8005794 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	6279      	str	r1, [r7, #36]	@ 0x24
 8005786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	09db      	lsrs	r3, r3, #7
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b7f      	cmp	r3, #127	@ 0x7f
 8005798:	d8f0      	bhi.n	800577c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	627a      	str	r2, [r7, #36]	@ 0x24
 80057a0:	6a3a      	ldr	r2, [r7, #32]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	6979      	ldr	r1, [r7, #20]
 80057ae:	69b8      	ldr	r0, [r7, #24]
 80057b0:	f7ff fd94 	bl	80052dc <_SendPacket>
  RECORD_END();
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f383 8811 	msr	BASEPRI, r3
}
 80057ba:	bf00      	nop
 80057bc:	3730      	adds	r7, #48	@ 0x30
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20019750 	.word	0x20019750

080057c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	@ 0x30
 80057cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80057ce:	4b58      	ldr	r3, [pc, #352]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80057d4:	f3ef 8311 	mrs	r3, BASEPRI
 80057d8:	f04f 0120 	mov.w	r1, #32
 80057dc:	f381 8811 	msr	BASEPRI, r1
 80057e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80057e2:	4b53      	ldr	r3, [pc, #332]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	220a      	movs	r2, #10
 80057e8:	4952      	ldr	r1, [pc, #328]	@ (8005934 <SEGGER_SYSVIEW_Start+0x16c>)
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fa fcf0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80057f6:	200a      	movs	r0, #10
 80057f8:	f7ff ff32 	bl	8005660 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80057fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005800:	f04f 0120 	mov.w	r1, #32
 8005804:	f381 8811 	msr	BASEPRI, r1
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	484b      	ldr	r0, [pc, #300]	@ (8005938 <SEGGER_SYSVIEW_Start+0x170>)
 800580c:	f7ff fc7a 	bl	8005104 <_PreparePacket>
 8005810:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581a:	4b45      	ldr	r3, [pc, #276]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005820:	e00b      	b.n	800583a <SEGGER_SYSVIEW_Start+0x72>
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	b2da      	uxtb	r2, r3
 8005826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005828:	1c59      	adds	r1, r3, #1
 800582a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800582c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	09db      	lsrs	r3, r3, #7
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	2b7f      	cmp	r3, #127	@ 0x7f
 800583e:	d8f0      	bhi.n	8005822 <SEGGER_SYSVIEW_Start+0x5a>
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
 8005854:	4b36      	ldr	r3, [pc, #216]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	623b      	str	r3, [r7, #32]
 800585a:	e00b      	b.n	8005874 <SEGGER_SYSVIEW_Start+0xac>
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	b2da      	uxtb	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	1c59      	adds	r1, r3, #1
 8005864:	6279      	str	r1, [r7, #36]	@ 0x24
 8005866:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800586a:	b2d2      	uxtb	r2, r2
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	09db      	lsrs	r3, r3, #7
 8005872:	623b      	str	r3, [r7, #32]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	2b7f      	cmp	r3, #127	@ 0x7f
 8005878:	d8f0      	bhi.n	800585c <SEGGER_SYSVIEW_Start+0x94>
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005880:	6a3a      	ldr	r2, [r7, #32]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	4b28      	ldr	r3, [pc, #160]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	e00b      	b.n	80058ae <SEGGER_SYSVIEW_Start+0xe6>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	1c59      	adds	r1, r3, #1
 800589e:	61f9      	str	r1, [r7, #28]
 80058a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	09db      	lsrs	r3, r3, #7
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b2:	d8f0      	bhi.n	8005896 <SEGGER_SYSVIEW_Start+0xce>
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	61fa      	str	r2, [r7, #28]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e00b      	b.n	80058e6 <SEGGER_SYSVIEW_Start+0x11e>
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	6179      	str	r1, [r7, #20]
 80058d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	09db      	lsrs	r3, r3, #7
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058ea:	d8f0      	bhi.n	80058ce <SEGGER_SYSVIEW_Start+0x106>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	617a      	str	r2, [r7, #20]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80058fc:	2218      	movs	r2, #24
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7ff fceb 	bl	80052dc <_SendPacket>
      RECORD_END();
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800590c:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <SEGGER_SYSVIEW_Start+0x168>)
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800591a:	f000 f9eb 	bl	8005cf4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800591e:	f000 f9b1 	bl	8005c84 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005922:	f000 fd21 	bl	8006368 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005926:	bf00      	nop
 8005928:	3730      	adds	r7, #48	@ 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20019720 	.word	0x20019720
 8005934:	080068f0 	.word	0x080068f0
 8005938:	20019750 	.word	0x20019750

0800593c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	480b      	ldr	r0, [pc, #44]	@ (8005980 <SEGGER_SYSVIEW_Stop+0x44>)
 8005952:	f7ff fbd7 	bl	8005104 <_PreparePacket>
 8005956:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005958:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <SEGGER_SYSVIEW_Stop+0x48>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d007      	beq.n	8005970 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005960:	220b      	movs	r2, #11
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6838      	ldr	r0, [r7, #0]
 8005966:	f7ff fcb9 	bl	80052dc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800596a:	4b06      	ldr	r3, [pc, #24]	@ (8005984 <SEGGER_SYSVIEW_Stop+0x48>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f383 8811 	msr	BASEPRI, r3
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20019750 	.word	0x20019750
 8005984:	20019720 	.word	0x20019720

08005988 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	@ 0x30
 800598c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800598e:	f3ef 8311 	mrs	r3, BASEPRI
 8005992:	f04f 0120 	mov.w	r1, #32
 8005996:	f381 8811 	msr	BASEPRI, r1
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	4845      	ldr	r0, [pc, #276]	@ (8005ab4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800599e:	f7ff fbb1 	bl	8005104 <_PreparePacket>
 80059a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ac:	4b42      	ldr	r3, [pc, #264]	@ (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	e00b      	b.n	80059cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	1c59      	adds	r1, r3, #1
 80059bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	09db      	lsrs	r3, r3, #7
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80059d0:	d8f0      	bhi.n	80059b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80059d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e6:	4b34      	ldr	r3, [pc, #208]	@ (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	e00b      	b.n	8005a06 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80059f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	09db      	lsrs	r3, r3, #7
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a0a:	d8f0      	bhi.n	80059ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	4b25      	ldr	r3, [pc, #148]	@ (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e00b      	b.n	8005a40 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	1c59      	adds	r1, r3, #1
 8005a30:	61f9      	str	r1, [r7, #28]
 8005a32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	09db      	lsrs	r3, r3, #7
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a44:	d8f0      	bhi.n	8005a28 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	61fa      	str	r2, [r7, #28]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]
 8005a5e:	e00b      	b.n	8005a78 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	6179      	str	r1, [r7, #20]
 8005a6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7c:	d8f0      	bhi.n	8005a60 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	617a      	str	r2, [r7, #20]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a8e:	2218      	movs	r2, #24
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	68b8      	ldr	r0, [r7, #8]
 8005a94:	f7ff fc22 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005aa6:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	4798      	blx	r3
  }
}
 8005aac:	bf00      	nop
 8005aae:	3730      	adds	r7, #48	@ 0x30
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20019750 	.word	0x20019750
 8005ab8:	20019720 	.word	0x20019720

08005abc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b092      	sub	sp, #72	@ 0x48
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac8:	f04f 0120 	mov.w	r1, #32
 8005acc:	f381 8811 	msr	BASEPRI, r1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	486a      	ldr	r0, [pc, #424]	@ (8005c7c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005ad4:	f7ff fb16 	bl	8005104 <_PreparePacket>
 8005ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b66      	ldr	r3, [pc, #408]	@ (8005c80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	6479      	str	r1, [r7, #68]	@ 0x44
 8005afa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b28:	e00b      	b.n	8005b42 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b46:	d8f0      	bhi.n	8005b2a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b56:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	4619      	mov	r1, r3
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff fa9f 	bl	80050a4 <_EncodeStr>
 8005b66:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b68:	2209      	movs	r2, #9
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	6938      	ldr	r0, [r7, #16]
 8005b6e:	f7ff fbb5 	bl	80052dc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b40      	ldr	r3, [pc, #256]	@ (8005c80 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b86:	e00b      	b.n	8005ba0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	09db      	lsrs	r3, r3, #7
 8005b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba4:	d8f0      	bhi.n	8005b88 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc0:	e00b      	b.n	8005bda <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bde:	d8f0      	bhi.n	8005bc2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	e00b      	b.n	8005c14 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	1c59      	adds	r1, r3, #1
 8005c04:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	09db      	lsrs	r3, r3, #7
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c18:	d8f0      	bhi.n	8005bfc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c20:	6a3a      	ldr	r2, [r7, #32]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	e00b      	b.n	8005c4c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	61f9      	str	r1, [r7, #28]
 8005c3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	09db      	lsrs	r3, r3, #7
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c50:	d8f0      	bhi.n	8005c34 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c62:	2215      	movs	r2, #21
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f7ff fb38 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f383 8811 	msr	BASEPRI, r3
}
 8005c72:	bf00      	nop
 8005c74:	3748      	adds	r7, #72	@ 0x48
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20019750 	.word	0x20019750
 8005c80:	20019720 	.word	0x20019720

08005c84 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c88:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c90:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ca8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4798      	blx	r3
  }
}
 8005ca2:	bf00      	nop
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20019720 	.word	0x20019720

08005cac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb8:	f04f 0120 	mov.w	r1, #32
 8005cbc:	f381 8811 	msr	BASEPRI, r1
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	480b      	ldr	r0, [pc, #44]	@ (8005cf0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005cc4:	f7ff fa1e 	bl	8005104 <_PreparePacket>
 8005cc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cca:	2280      	movs	r2, #128	@ 0x80
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	6938      	ldr	r0, [r7, #16]
 8005cd0:	f7ff f9e8 	bl	80050a4 <_EncodeStr>
 8005cd4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005cd6:	220e      	movs	r2, #14
 8005cd8:	68f9      	ldr	r1, [r7, #12]
 8005cda:	6938      	ldr	r0, [r7, #16]
 8005cdc:	f7ff fafe 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f383 8811 	msr	BASEPRI, r3
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20019750 	.word	0x20019750

08005cf4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005cfa:	4b15      	ldr	r3, [pc, #84]	@ (8005d50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01a      	beq.n	8005d38 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d02:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d0c:	4b10      	ldr	r3, [pc, #64]	@ (8005d50 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4798      	blx	r3
 8005d14:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d18:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	f04f 0300 	mov.w	r3, #0
 8005d26:	000a      	movs	r2, r1
 8005d28:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4621      	mov	r1, r4
 8005d30:	200d      	movs	r0, #13
 8005d32:	f7ff fcef 	bl	8005714 <SEGGER_SYSVIEW_RecordU32x2>
 8005d36:	e006      	b.n	8005d46 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	200c      	movs	r0, #12
 8005d40:	f7ff fcac 	bl	800569c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20019720 	.word	0x20019720
 8005d54:	e0001004 	.word	0xe0001004

08005d58 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d62:	f04f 0120 	mov.w	r1, #32
 8005d66:	f381 8811 	msr	BASEPRI, r1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	4819      	ldr	r0, [pc, #100]	@ (8005dd4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d6e:	f7ff f9c9 	bl	8005104 <_PreparePacket>
 8005d72:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d78:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d80:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e00b      	b.n	8005da4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1c59      	adds	r1, r3, #1
 8005d94:	6179      	str	r1, [r7, #20]
 8005d96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	09db      	lsrs	r3, r3, #7
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005da8:	d8f0      	bhi.n	8005d8c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	617a      	str	r2, [r7, #20]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005dba:	2202      	movs	r2, #2
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	68b8      	ldr	r0, [r7, #8]
 8005dc0:	f7ff fa8c 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f383 8811 	msr	BASEPRI, r3
}
 8005dca:	bf00      	nop
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20019750 	.word	0x20019750
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005de2:	f3ef 8311 	mrs	r3, BASEPRI
 8005de6:	f04f 0120 	mov.w	r1, #32
 8005dea:	f381 8811 	msr	BASEPRI, r1
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	4807      	ldr	r0, [pc, #28]	@ (8005e10 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005df2:	f7ff f987 	bl	8005104 <_PreparePacket>
 8005df6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005df8:	2203      	movs	r2, #3
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6838      	ldr	r0, [r7, #0]
 8005dfe:	f7ff fa6d 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f383 8811 	msr	BASEPRI, r3
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20019750 	.word	0x20019750

08005e14 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1e:	f04f 0120 	mov.w	r1, #32
 8005e22:	f381 8811 	msr	BASEPRI, r1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	4807      	ldr	r0, [pc, #28]	@ (8005e48 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e2a:	f7ff f96b 	bl	8005104 <_PreparePacket>
 8005e2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e30:	2212      	movs	r2, #18
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6838      	ldr	r0, [r7, #0]
 8005e36:	f7ff fa51 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f383 8811 	msr	BASEPRI, r3
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20019750 	.word	0x20019750

08005e4c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005e54:	f3ef 8311 	mrs	r3, BASEPRI
 8005e58:	f04f 0120 	mov.w	r1, #32
 8005e5c:	f381 8811 	msr	BASEPRI, r1
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	4817      	ldr	r0, [pc, #92]	@ (8005ec0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005e64:	f7ff f94e 	bl	8005104 <_PreparePacket>
 8005e68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	e00b      	b.n	8005e90 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	1c59      	adds	r1, r3, #1
 8005e80:	61f9      	str	r1, [r7, #28]
 8005e82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	09db      	lsrs	r3, r3, #7
 8005e8e:	61bb      	str	r3, [r7, #24]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e94:	d8f0      	bhi.n	8005e78 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005ea6:	221c      	movs	r2, #28
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f7ff fa16 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f383 8811 	msr	BASEPRI, r3
}
 8005eb6:	bf00      	nop
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20019750 	.word	0x20019750

08005ec4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	@ 0x28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ece:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed2:	f04f 0120 	mov.w	r1, #32
 8005ed6:	f381 8811 	msr	BASEPRI, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	4824      	ldr	r0, [pc, #144]	@ (8005f70 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005ede:	f7ff f911 	bl	8005104 <_PreparePacket>
 8005ee2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	623b      	str	r3, [r7, #32]
 8005ef0:	e00b      	b.n	8005f0a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	1c59      	adds	r1, r3, #1
 8005efa:	6279      	str	r1, [r7, #36]	@ 0x24
 8005efc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	09db      	lsrs	r3, r3, #7
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f0e:	d8f0      	bhi.n	8005ef2 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f16:	6a3a      	ldr	r2, [r7, #32]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	e00b      	b.n	8005f42 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1c59      	adds	r1, r3, #1
 8005f32:	61f9      	str	r1, [r7, #28]
 8005f34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f46:	d8f0      	bhi.n	8005f2a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	61fa      	str	r2, [r7, #28]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005f58:	221c      	movs	r2, #28
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	6938      	ldr	r0, [r7, #16]
 8005f5e:	f7ff f9bd 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f383 8811 	msr	BASEPRI, r3
}
 8005f68:	bf00      	nop
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20019750 	.word	0x20019750

08005f74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7e:	f04f 0120 	mov.w	r1, #32
 8005f82:	f381 8811 	msr	BASEPRI, r1
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	4807      	ldr	r0, [pc, #28]	@ (8005fa8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f8a:	f7ff f8bb 	bl	8005104 <_PreparePacket>
 8005f8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005f90:	2211      	movs	r2, #17
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6838      	ldr	r0, [r7, #0]
 8005f96:	f7ff f9a1 	bl	80052dc <_SendPacket>
  RECORD_END();
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f383 8811 	msr	BASEPRI, r3
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20019750 	.word	0x20019750

08005fac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb8:	f04f 0120 	mov.w	r1, #32
 8005fbc:	f381 8811 	msr	BASEPRI, r1
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	4819      	ldr	r0, [pc, #100]	@ (8006028 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005fc4:	f7ff f89e 	bl	8005104 <_PreparePacket>
 8005fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005fce:	4b17      	ldr	r3, [pc, #92]	@ (800602c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	61fb      	str	r3, [r7, #28]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	61f9      	str	r1, [r7, #28]
 8005fec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006010:	2208      	movs	r2, #8
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	6938      	ldr	r0, [r7, #16]
 8006016:	f7ff f961 	bl	80052dc <_SendPacket>
  RECORD_END();
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f383 8811 	msr	BASEPRI, r3
}
 8006020:	bf00      	nop
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	20019750 	.word	0x20019750
 800602c:	20019720 	.word	0x20019720

08006030 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006038:	f3ef 8311 	mrs	r3, BASEPRI
 800603c:	f04f 0120 	mov.w	r1, #32
 8006040:	f381 8811 	msr	BASEPRI, r1
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	4819      	ldr	r0, [pc, #100]	@ (80060ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006048:	f7ff f85c 	bl	8005104 <_PreparePacket>
 800604c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006052:	4b17      	ldr	r3, [pc, #92]	@ (80060b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	61fb      	str	r3, [r7, #28]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e00b      	b.n	800607e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1c59      	adds	r1, r3, #1
 800606e:	61f9      	str	r1, [r7, #28]
 8006070:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	09db      	lsrs	r3, r3, #7
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b7f      	cmp	r3, #127	@ 0x7f
 8006082:	d8f0      	bhi.n	8006066 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	61fa      	str	r2, [r7, #28]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006094:	2204      	movs	r2, #4
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6938      	ldr	r0, [r7, #16]
 800609a:	f7ff f91f 	bl	80052dc <_SendPacket>
  RECORD_END();
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f383 8811 	msr	BASEPRI, r3
}
 80060a4:	bf00      	nop
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20019750 	.word	0x20019750
 80060b0:	20019720 	.word	0x20019720

080060b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060bc:	f3ef 8311 	mrs	r3, BASEPRI
 80060c0:	f04f 0120 	mov.w	r1, #32
 80060c4:	f381 8811 	msr	BASEPRI, r1
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	4819      	ldr	r0, [pc, #100]	@ (8006130 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80060cc:	f7ff f81a 	bl	8005104 <_PreparePacket>
 80060d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060d6:	4b17      	ldr	r3, [pc, #92]	@ (8006134 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e00b      	b.n	8006102 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	61f9      	str	r1, [r7, #28]
 80060f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	09db      	lsrs	r3, r3, #7
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b7f      	cmp	r3, #127	@ 0x7f
 8006106:	d8f0      	bhi.n	80060ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006118:	2206      	movs	r2, #6
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	6938      	ldr	r0, [r7, #16]
 800611e:	f7ff f8dd 	bl	80052dc <_SendPacket>
  RECORD_END();
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f383 8811 	msr	BASEPRI, r3
}
 8006128:	bf00      	nop
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20019750 	.word	0x20019750
 8006134:	20019720 	.word	0x20019720

08006138 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006142:	f3ef 8311 	mrs	r3, BASEPRI
 8006146:	f04f 0120 	mov.w	r1, #32
 800614a:	f381 8811 	msr	BASEPRI, r1
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	4827      	ldr	r0, [pc, #156]	@ (80061f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006152:	f7fe ffd7 	bl	8005104 <_PreparePacket>
 8006156:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800615c:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e00b      	b.n	8006188 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	1c59      	adds	r1, r3, #1
 8006178:	6279      	str	r1, [r7, #36]	@ 0x24
 800617a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800617e:	b2d2      	uxtb	r2, r2
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	09db      	lsrs	r3, r3, #7
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	2b7f      	cmp	r3, #127	@ 0x7f
 800618c:	d8f0      	bhi.n	8006170 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	627a      	str	r2, [r7, #36]	@ 0x24
 8006194:	6a3a      	ldr	r2, [r7, #32]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e00b      	b.n	80061c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	1c59      	adds	r1, r3, #1
 80061b0:	61f9      	str	r1, [r7, #28]
 80061b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	09db      	lsrs	r3, r3, #7
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c4:	d8f0      	bhi.n	80061a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	61fa      	str	r2, [r7, #28]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80061d6:	2207      	movs	r2, #7
 80061d8:	68f9      	ldr	r1, [r7, #12]
 80061da:	6938      	ldr	r0, [r7, #16]
 80061dc:	f7ff f87e 	bl	80052dc <_SendPacket>
  RECORD_END();
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f383 8811 	msr	BASEPRI, r3
}
 80061e6:	bf00      	nop
 80061e8:	3728      	adds	r7, #40	@ 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20019750 	.word	0x20019750
 80061f4:	20019720 	.word	0x20019720

080061f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006200:	4b04      	ldr	r3, [pc, #16]	@ (8006214 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	1ad3      	subs	r3, r2, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20019720 	.word	0x20019720

08006218 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	@ 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006222:	4b40      	ldr	r3, [pc, #256]	@ (8006324 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d077      	beq.n	800631a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800622a:	4b3e      	ldr	r3, [pc, #248]	@ (8006324 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006230:	2300      	movs	r3, #0
 8006232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006234:	e008      	b.n	8006248 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	3301      	adds	r3, #1
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800624c:	429a      	cmp	r2, r3
 800624e:	d3f2      	bcc.n	8006236 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006250:	e000      	b.n	8006254 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006252:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d055      	beq.n	8006306 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800625a:	f3ef 8311 	mrs	r3, BASEPRI
 800625e:	f04f 0120 	mov.w	r1, #32
 8006262:	f381 8811 	msr	BASEPRI, r1
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	482f      	ldr	r0, [pc, #188]	@ (8006328 <SEGGER_SYSVIEW_SendModule+0x110>)
 800626a:	f7fe ff4b 	bl	8005104 <_PreparePacket>
 800626e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	623b      	str	r3, [r7, #32]
 800627c:	e00b      	b.n	8006296 <SEGGER_SYSVIEW_SendModule+0x7e>
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	1c59      	adds	r1, r3, #1
 8006286:	6279      	str	r1, [r7, #36]	@ 0x24
 8006288:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	09db      	lsrs	r3, r3, #7
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2b7f      	cmp	r3, #127	@ 0x7f
 800629a:	d8f0      	bhi.n	800627e <SEGGER_SYSVIEW_SendModule+0x66>
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80062a2:	6a3a      	ldr	r2, [r7, #32]
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e00b      	b.n	80062d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	61f9      	str	r1, [r7, #28]
 80062c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	61fa      	str	r2, [r7, #28]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80062e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2280      	movs	r2, #128	@ 0x80
 80062ec:	4619      	mov	r1, r3
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7fe fed8 	bl	80050a4 <_EncodeStr>
 80062f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80062f6:	2216      	movs	r2, #22
 80062f8:	68f9      	ldr	r1, [r7, #12]
 80062fa:	6938      	ldr	r0, [r7, #16]
 80062fc:	f7fe ffee 	bl	80052dc <_SendPacket>
      RECORD_END();
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <SEGGER_SYSVIEW_SendModule+0x102>
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4798      	blx	r3
    }
  }
}
 800631a:	bf00      	nop
 800631c:	3730      	adds	r7, #48	@ 0x30
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20019748 	.word	0x20019748
 8006328:	20019750 	.word	0x20019750

0800632c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006332:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f2      	bne.n	8006340 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20019748 	.word	0x20019748

08006368 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800636e:	f3ef 8311 	mrs	r3, BASEPRI
 8006372:	f04f 0120 	mov.w	r1, #32
 8006376:	f381 8811 	msr	BASEPRI, r1
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	4817      	ldr	r0, [pc, #92]	@ (80063dc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800637e:	f7fe fec1 	bl	8005104 <_PreparePacket>
 8006382:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	4b14      	ldr	r3, [pc, #80]	@ (80063e0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	e00b      	b.n	80063ac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	6179      	str	r1, [r7, #20]
 800639e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	09db      	lsrs	r3, r3, #7
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80063b0:	d8f0      	bhi.n	8006394 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	617a      	str	r2, [r7, #20]
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80063c2:	221b      	movs	r2, #27
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f7fe ff88 	bl	80052dc <_SendPacket>
  RECORD_END();
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f383 8811 	msr	BASEPRI, r3
}
 80063d2:	bf00      	nop
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20019750 	.word	0x20019750
 80063e0:	2001974c 	.word	0x2001974c

080063e4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063ec:	f3ef 8311 	mrs	r3, BASEPRI
 80063f0:	f04f 0120 	mov.w	r1, #32
 80063f4:	f381 8811 	msr	BASEPRI, r1
 80063f8:	617b      	str	r3, [r7, #20]
 80063fa:	4827      	ldr	r0, [pc, #156]	@ (8006498 <SEGGER_SYSVIEW_Warn+0xb4>)
 80063fc:	f7fe fe82 	bl	8005104 <_PreparePacket>
 8006400:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006402:	2280      	movs	r2, #128	@ 0x80
 8006404:	6879      	ldr	r1, [r7, #4]
 8006406:	6938      	ldr	r0, [r7, #16]
 8006408:	f7fe fe4c 	bl	80050a4 <_EncodeStr>
 800640c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
 8006412:	2301      	movs	r3, #1
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	e00b      	b.n	8006430 <SEGGER_SYSVIEW_Warn+0x4c>
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641e:	1c59      	adds	r1, r3, #1
 8006420:	6279      	str	r1, [r7, #36]	@ 0x24
 8006422:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	09db      	lsrs	r3, r3, #7
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b7f      	cmp	r3, #127	@ 0x7f
 8006434:	d8f0      	bhi.n	8006418 <SEGGER_SYSVIEW_Warn+0x34>
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	627a      	str	r2, [r7, #36]	@ 0x24
 800643c:	6a3a      	ldr	r2, [r7, #32]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_Warn+0x84>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	61f9      	str	r1, [r7, #28]
 800645a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b7f      	cmp	r3, #127	@ 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_Warn+0x6c>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800647e:	221a      	movs	r2, #26
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	f7fe ff2a 	bl	80052dc <_SendPacket>
  RECORD_END();
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3728      	adds	r7, #40	@ 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20019750 	.word	0x20019750

0800649c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800649e:	b085      	sub	sp, #20
 80064a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	e033      	b.n	8006510 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80064a8:	491e      	ldr	r1, [pc, #120]	@ (8006524 <_cbSendTaskList+0x88>)
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	440b      	add	r3, r1
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	491a      	ldr	r1, [pc, #104]	@ (8006524 <_cbSendTaskList+0x88>)
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	3304      	adds	r3, #4
 80064c8:	6819      	ldr	r1, [r3, #0]
 80064ca:	4c16      	ldr	r4, [pc, #88]	@ (8006524 <_cbSendTaskList+0x88>)
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4423      	add	r3, r4
 80064d8:	3308      	adds	r3, #8
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	4d11      	ldr	r5, [pc, #68]	@ (8006524 <_cbSendTaskList+0x88>)
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	442b      	add	r3, r5
 80064ea:	330c      	adds	r3, #12
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	4e0d      	ldr	r6, [pc, #52]	@ (8006524 <_cbSendTaskList+0x88>)
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4433      	add	r3, r6
 80064fc:	3310      	adds	r3, #16
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	462b      	mov	r3, r5
 8006504:	4622      	mov	r2, r4
 8006506:	f000 f8bd 	bl	8006684 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3301      	adds	r3, #1
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <_cbSendTaskList+0x8c>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3c6      	bcc.n	80064a8 <_cbSendTaskList+0xc>
  }
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006524:	20019834 	.word	0x20019834
 8006528:	200198d4 	.word	0x200198d4

0800652c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800652c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006534:	f7fd f944 	bl	80037c0 <xTaskGetTickCountFromISR>
 8006538:	4603      	mov	r3, r0
 800653a:	2200      	movs	r2, #0
 800653c:	469a      	mov	sl, r3
 800653e:	4693      	mov	fp, r2
 8006540:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	f04f 0a00 	mov.w	sl, #0
 8006550:	f04f 0b00 	mov.w	fp, #0
 8006554:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006558:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800655c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006560:	4652      	mov	r2, sl
 8006562:	465b      	mov	r3, fp
 8006564:	1a14      	subs	r4, r2, r0
 8006566:	eb63 0501 	sbc.w	r5, r3, r1
 800656a:	f04f 0200 	mov.w	r2, #0
 800656e:	f04f 0300 	mov.w	r3, #0
 8006572:	00ab      	lsls	r3, r5, #2
 8006574:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006578:	00a2      	lsls	r2, r4, #2
 800657a:	4614      	mov	r4, r2
 800657c:	461d      	mov	r5, r3
 800657e:	eb14 0800 	adds.w	r8, r4, r0
 8006582:	eb45 0901 	adc.w	r9, r5, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659a:	4690      	mov	r8, r2
 800659c:	4699      	mov	r9, r3
 800659e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80065a2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080065b4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80065c2:	2205      	movs	r2, #5
 80065c4:	492b      	ldr	r1, [pc, #172]	@ (8006674 <SYSVIEW_AddTask+0xc0>)
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f000 f87d 	bl	80066c6 <memcmp>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04b      	beq.n	800666a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80065d2:	4b29      	ldr	r3, [pc, #164]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b07      	cmp	r3, #7
 80065d8:	d903      	bls.n	80065e2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80065da:	4828      	ldr	r0, [pc, #160]	@ (800667c <SYSVIEW_AddTask+0xc8>)
 80065dc:	f7ff ff02 	bl	80063e4 <SEGGER_SYSVIEW_Warn>
    return;
 80065e0:	e044      	b.n	800666c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80065e2:	4b25      	ldr	r3, [pc, #148]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4926      	ldr	r1, [pc, #152]	@ (8006680 <SYSVIEW_AddTask+0xcc>)
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80065f6:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4921      	ldr	r1, [pc, #132]	@ (8006680 <SYSVIEW_AddTask+0xcc>)
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	3304      	adds	r3, #4
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800660c:	4b1a      	ldr	r3, [pc, #104]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	491b      	ldr	r1, [pc, #108]	@ (8006680 <SYSVIEW_AddTask+0xcc>)
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3308      	adds	r3, #8
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006622:	4b15      	ldr	r3, [pc, #84]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4916      	ldr	r1, [pc, #88]	@ (8006680 <SYSVIEW_AddTask+0xcc>)
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	440b      	add	r3, r1
 8006632:	330c      	adds	r3, #12
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006638:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	4910      	ldr	r1, [pc, #64]	@ (8006680 <SYSVIEW_AddTask+0xcc>)
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	3310      	adds	r3, #16
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800664e:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	4a08      	ldr	r2, [pc, #32]	@ (8006678 <SYSVIEW_AddTask+0xc4>)
 8006656:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f80e 	bl	8006684 <SYSVIEW_SendTaskInfo>
 8006668:	e000      	b.n	800666c <SYSVIEW_AddTask+0xb8>
    return;
 800666a:	bf00      	nop

}
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	0800686c 	.word	0x0800686c
 8006678:	200198d4 	.word	0x200198d4
 800667c:	08006874 	.word	0x08006874
 8006680:	20019834 	.word	0x20019834

08006684 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	@ 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006692:	f107 0314 	add.w	r3, r7, #20
 8006696:	2214      	movs	r2, #20
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f823 	bl	80066e6 <memset>
  TaskInfo.TaskID     = TaskID;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80066b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80066b4:	f107 0314 	add.w	r3, r7, #20
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff f9ff 	bl	8005abc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80066be:	bf00      	nop
 80066c0:	3728      	adds	r7, #40	@ 0x28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <memcmp>:
 80066c6:	b510      	push	{r4, lr}
 80066c8:	3901      	subs	r1, #1
 80066ca:	4402      	add	r2, r0
 80066cc:	4290      	cmp	r0, r2
 80066ce:	d101      	bne.n	80066d4 <memcmp+0xe>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e005      	b.n	80066e0 <memcmp+0x1a>
 80066d4:	7803      	ldrb	r3, [r0, #0]
 80066d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066da:	42a3      	cmp	r3, r4
 80066dc:	d001      	beq.n	80066e2 <memcmp+0x1c>
 80066de:	1b18      	subs	r0, r3, r4
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	3001      	adds	r0, #1
 80066e4:	e7f2      	b.n	80066cc <memcmp+0x6>

080066e6 <memset>:
 80066e6:	4402      	add	r2, r0
 80066e8:	4603      	mov	r3, r0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d100      	bne.n	80066f0 <memset+0xa>
 80066ee:	4770      	bx	lr
 80066f0:	f803 1b01 	strb.w	r1, [r3], #1
 80066f4:	e7f9      	b.n	80066ea <memset+0x4>
	...

080066f8 <__libc_init_array>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006730 <__libc_init_array+0x38>)
 80066fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006734 <__libc_init_array+0x3c>)
 80066fe:	1b64      	subs	r4, r4, r5
 8006700:	10a4      	asrs	r4, r4, #2
 8006702:	2600      	movs	r6, #0
 8006704:	42a6      	cmp	r6, r4
 8006706:	d109      	bne.n	800671c <__libc_init_array+0x24>
 8006708:	4d0b      	ldr	r5, [pc, #44]	@ (8006738 <__libc_init_array+0x40>)
 800670a:	4c0c      	ldr	r4, [pc, #48]	@ (800673c <__libc_init_array+0x44>)
 800670c:	f000 f826 	bl	800675c <_init>
 8006710:	1b64      	subs	r4, r4, r5
 8006712:	10a4      	asrs	r4, r4, #2
 8006714:	2600      	movs	r6, #0
 8006716:	42a6      	cmp	r6, r4
 8006718:	d105      	bne.n	8006726 <__libc_init_array+0x2e>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006720:	4798      	blx	r3
 8006722:	3601      	adds	r6, #1
 8006724:	e7ee      	b.n	8006704 <__libc_init_array+0xc>
 8006726:	f855 3b04 	ldr.w	r3, [r5], #4
 800672a:	4798      	blx	r3
 800672c:	3601      	adds	r6, #1
 800672e:	e7f2      	b.n	8006716 <__libc_init_array+0x1e>
 8006730:	0800690c 	.word	0x0800690c
 8006734:	0800690c 	.word	0x0800690c
 8006738:	0800690c 	.word	0x0800690c
 800673c:	08006910 	.word	0x08006910

08006740 <memcpy>:
 8006740:	440a      	add	r2, r1
 8006742:	4291      	cmp	r1, r2
 8006744:	f100 33ff 	add.w	r3, r0, #4294967295
 8006748:	d100      	bne.n	800674c <memcpy+0xc>
 800674a:	4770      	bx	lr
 800674c:	b510      	push	{r4, lr}
 800674e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006756:	4291      	cmp	r1, r2
 8006758:	d1f9      	bne.n	800674e <memcpy+0xe>
 800675a:	bd10      	pop	{r4, pc}

0800675c <_init>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	bf00      	nop
 8006760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006762:	bc08      	pop	{r3}
 8006764:	469e      	mov	lr, r3
 8006766:	4770      	bx	lr

08006768 <_fini>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	bf00      	nop
 800676c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676e:	bc08      	pop	{r3}
 8006770:	469e      	mov	lr, r3
 8006772:	4770      	bx	lr
