
App_016_Example_5.X_Pointer_To_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800796c  0800796c  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00008b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00008b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b40  08007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007b44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00019a1c  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019a80  20019a80  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f7e  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f7  00000000  00000000  00021012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  00024310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001107  00000000  00000000  00025900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251c8  00000000  00000000  00026a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ac8  00000000  00000000  0004bbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb6f8  00000000  00000000  00065697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150d8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006120  00000000  00000000  00150dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c0  00000000  00000000  00156ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007954 	.word	0x08007954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007954 	.word	0x08007954

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ec0 	.word	0x20012ec0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb87 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f83d 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8cf 	bl	80007b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8a3 	bl	800075c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <main+0x70>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <main+0x70>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f004 fffb 	bl	800561c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f005 fd51 	bl	80060cc <SEGGER_SYSVIEW_Start>

  /* create a queue that can hold a maximum of 5 pointers, in this case
   character pointers (i.e. 5 strings) */
  xQueueOfPointers = xQueueCreate( 5, sizeof ( char * ) );
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	2005      	movs	r0, #5
 8000630:	f002 faf6 	bl	8002c20 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <main+0x74>)
 8000638:	6013      	str	r3, [r2, #0]

  /* Create the task that will write to the queue.
     The task is created with priority 1, so below the priority of the receiver task */
  xTaskCreate( vStringSendingTask, "Sending Task", 1000, NULL, 1, NULL );
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000648:	490b      	ldr	r1, [pc, #44]	@ (8000678 <main+0x78>)
 800064a:	480c      	ldr	r0, [pc, #48]	@ (800067c <main+0x7c>)
 800064c:	f002 ff33 	bl	80034b6 <xTaskCreate>

  /* Create the task that will read from the queue.
     The task is created with priority 2, so above the priority of the sender task */
  xTaskCreate( vStringReceivingTask, "Receiving Task", 1000, NULL, 2, NULL );
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065e:	4908      	ldr	r1, [pc, #32]	@ (8000680 <main+0x80>)
 8000660:	4808      	ldr	r0, [pc, #32]	@ (8000684 <main+0x84>)
 8000662:	f002 ff28 	bl	80034b6 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 8000666:	f003 f8df 	bl	8003828 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800066a:	bf00      	nop
 800066c:	e7fd      	b.n	800066a <main+0x6a>
 800066e:	bf00      	nop
 8000670:	e0001000 	.word	0xe0001000
 8000674:	200000c8 	.word	0x200000c8
 8000678:	0800796c 	.word	0x0800796c
 800067c:	08000911 	.word	0x08000911
 8000680:	0800797c 	.word	0x0800797c
 8000684:	08000989 	.word	0x08000989

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	@ 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fcdc 	bl	8007054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006fc:	2332      	movs	r3, #50	@ 0x32
 80006fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000700:	2304      	movs	r3, #4
 8000702:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fddd 	bl	80012cc <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f974 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f83e 	bl	80017bc <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f95d 	bl	8000a04 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	@ 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f001 fd06 	bl	80021a4 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f931 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000080 	.word	0x20000080
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	@ 0x28
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a3b      	ldr	r2, [pc, #236]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b39      	ldr	r3, [pc, #228]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a34      	ldr	r2, [pc, #208]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <MX_GPIO_Init+0x10c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_GPIO_Init+0x10c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a2d      	ldr	r2, [pc, #180]	@ (80008bc <MX_GPIO_Init+0x10c>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_GPIO_Init+0x10c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_GPIO_Init+0x10c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a26      	ldr	r2, [pc, #152]	@ (80008bc <MX_GPIO_Init+0x10c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_GPIO_Init+0x10c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800083c:	4820      	ldr	r0, [pc, #128]	@ (80008c0 <MX_GPIO_Init+0x110>)
 800083e:	f000 fd2b 	bl	8001298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	481b      	ldr	r0, [pc, #108]	@ (80008c4 <MX_GPIO_Init+0x114>)
 8000858:	f000 fb82 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800085c:	2304      	movs	r3, #4
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	4816      	ldr	r0, [pc, #88]	@ (80008c8 <MX_GPIO_Init+0x118>)
 8000870:	f000 fb76 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000874:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <MX_GPIO_Init+0x110>)
 800088e:	f000 fb67 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008a2:	2306      	movs	r3, #6
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <MX_GPIO_Init+0x11c>)
 80008ae:	f000 fb57 	bl	8000f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800

080008d0 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	e00b      	b.n	80008f8 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	18d1      	adds	r1, r2, r3
 80008e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008ea:	2201      	movs	r2, #1
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f001 fca9 	bl	8002244 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008f2:	7bfb      	ldrb	r3, [r7, #15]
 80008f4:	3301      	adds	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1ed      	bne.n	80008e0 <UART2_Print_Text+0x10>
  }
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <vStringSendingTask>:

/* a task that obtains a buffer, writes a string to the buffer, then
   sends the address of the buffer to the globally created queue of pointers */
static void vStringSendingTask( void *pvParameters )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  /* declare the variable that will hold the status of xQueueSendToBack() */
  BaseType_t xStatus;

  /* declare the variable that contains the maximum amount of characters the string can hold */
  const size_t xMaxStringLength = 50;
 8000918:	2332      	movs	r3, #50	@ 0x32
 800091a:	613b      	str	r3, [r7, #16]

  /* declare the string counter, used to indicate the string number that was sent */
  uint8_t xStringNumber = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	75fb      	strb	r3, [r7, #23]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* obtain (dynamically) a buffer that is at least xMaxStringLength (50) characters big */
    pcStringToSend = ( char * ) pvPortMalloc( xMaxStringLength );
 8000920:	6938      	ldr	r0, [r7, #16]
 8000922:	f004 fbed 	bl	8005100 <pvPortMalloc>
 8000926:	4603      	mov	r3, r0
 8000928:	60bb      	str	r3, [r7, #8]

    /* write a string into the buffer */
    ( void ) snprintf( pcStringToSend, xMaxStringLength, "String number = %d\n\r", xStringNumber );
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	4a11      	ldr	r2, [pc, #68]	@ (8000974 <vStringSendingTask+0x64>)
 8000930:	6939      	ldr	r1, [r7, #16]
 8000932:	f006 fb4b 	bl	8006fcc <sniprintf>

    /* increment the counter so the string is different on each iteration of this task */
    xStringNumber++;
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	3301      	adds	r3, #1
 800093a:	75fb      	strb	r3, [r7, #23]
       The third parameter is the Block time - the maximum amount of time
       the task should be kept in the Blocked state to wait for space to become available on
       the queue if it is already full.
       In this case the block time will cause the task to wait indefinitely since portMAX_DELAY
       is used and INCLUDE_vTaskSuspend is set to 1 */
    xStatus = xQueueSendToBack( xQueueOfPointers, &pcStringToSend, portMAX_DELAY );
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <vStringSendingTask+0x68>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	f107 0108 	add.w	r1, r7, #8
 8000944:	2300      	movs	r3, #0
 8000946:	f04f 32ff 	mov.w	r2, #4294967295
 800094a:	f002 f9e5 	bl	8002d18 <xQueueGenericSend>
 800094e:	60f8      	str	r0, [r7, #12]

    if ( xStatus == pdPASS )
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d109      	bne.n	800096a <vStringSendingTask+0x5a>
    {
      /* data (pointer) was successfully sent to the queue,
         print out the string it points to */
      UART2_Print_Text( &huart2, "Sent:     " );
 8000956:	4909      	ldr	r1, [pc, #36]	@ (800097c <vStringSendingTask+0x6c>)
 8000958:	4809      	ldr	r0, [pc, #36]	@ (8000980 <vStringSendingTask+0x70>)
 800095a:	f7ff ffb9 	bl	80008d0 <UART2_Print_Text>
      UART2_Print_Text( &huart2, ( const char * ) pcStringToSend );
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	@ (8000980 <vStringSendingTask+0x70>)
 8000964:	f7ff ffb4 	bl	80008d0 <UART2_Print_Text>
 8000968:	e7da      	b.n	8000920 <vStringSendingTask+0x10>
    }
    else
    {
      /* data (pointer) could not be sent to the queue,
         print error message */
      UART2_Print_Text( &huart2, "Write to queue error!\n\r" );
 800096a:	4906      	ldr	r1, [pc, #24]	@ (8000984 <vStringSendingTask+0x74>)
 800096c:	4804      	ldr	r0, [pc, #16]	@ (8000980 <vStringSendingTask+0x70>)
 800096e:	f7ff ffaf 	bl	80008d0 <UART2_Print_Text>
    pcStringToSend = ( char * ) pvPortMalloc( xMaxStringLength );
 8000972:	e7d5      	b.n	8000920 <vStringSendingTask+0x10>
 8000974:	0800798c 	.word	0x0800798c
 8000978:	200000c8 	.word	0x200000c8
 800097c:	080079a4 	.word	0x080079a4
 8000980:	20000080 	.word	0x20000080
 8000984:	080079b0 	.word	0x080079b0

08000988 <vStringReceivingTask>:
}

/* A task that receives the address of a buffer from the globally created queue.
   The buffer contains a string, which is printed out */
static void vStringReceivingTask( void *pvParameters )
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
       that the task should be kept in the Blocked state to wait for data to
       be available if it is already empty.
       
       In this case the block time will cause the task to wait indefinitely since portMAX_DELAY
       is used and INCLUDE_vTaskSuspend is set to 1 */
    xStatus = xQueueReceive( xQueueOfPointers, &pcReceivedString, portMAX_DELAY );
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <vStringReceivingTask+0x48>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f107 0108 	add.w	r1, r7, #8
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	4618      	mov	r0, r3
 800099e:	f002 fac9 	bl	8002f34 <xQueueReceive>
 80009a2:	60f8      	str	r0, [r7, #12]

    if ( xStatus == pdPASS )
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10d      	bne.n	80009c6 <vStringReceivingTask+0x3e>
    {
      /* data (pointer) was successfully received from the queue,
         print out the string it points to */
      UART2_Print_Text( &huart2, "Received: " );
 80009aa:	490a      	ldr	r1, [pc, #40]	@ (80009d4 <vStringReceivingTask+0x4c>)
 80009ac:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <vStringReceivingTask+0x50>)
 80009ae:	f7ff ff8f 	bl	80008d0 <UART2_Print_Text>
      UART2_Print_Text( &huart2, ( const char * ) pcReceivedString );
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <vStringReceivingTask+0x50>)
 80009b8:	f7ff ff8a 	bl	80008d0 <UART2_Print_Text>

      vPortFree( pcReceivedString );
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4618      	mov	r0, r3
 80009c0:	f004 fcd0 	bl	8005364 <vPortFree>
 80009c4:	e7e4      	b.n	8000990 <vStringReceivingTask+0x8>
    else
    {
      /* Data was not received from the queue even after waiting indefinitely.
        This must be an error as the sending task is free running and will
        be continuously writing to the queue */
      UART2_Print_Text( &huart2, "Could not receive from the queue\n\r" );
 80009c6:	4905      	ldr	r1, [pc, #20]	@ (80009dc <vStringReceivingTask+0x54>)
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <vStringReceivingTask+0x50>)
 80009ca:	f7ff ff81 	bl	80008d0 <UART2_Print_Text>
    xStatus = xQueueReceive( xQueueOfPointers, &pcReceivedString, portMAX_DELAY );
 80009ce:	e7df      	b.n	8000990 <vStringReceivingTask+0x8>
 80009d0:	200000c8 	.word	0x200000c8
 80009d4:	080079c8 	.word	0x080079c8
 80009d8:	20000080 	.word	0x20000080
 80009dc:	080079d4 	.word	0x080079d4

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 f9b3 	bl	8000d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40001000 	.word	0x40001000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fa51 	bl	8000ef6 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a19      	ldr	r2, [pc, #100]	@ (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d12b      	bne.n	8000ada <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a92:	4b15      	ldr	r3, [pc, #84]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a10      	ldr	r2, [pc, #64]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <HAL_UART_MspInit+0x88>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	@ (8000aec <HAL_UART_MspInit+0x8c>)
 8000ad6:	f000 fa43 	bl	8000f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3728      	adds	r7, #40	@ 0x28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020000 	.word	0x40020000

08000af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	@ 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a32      	ldr	r2, [pc, #200]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b30      	ldr	r3, [pc, #192]	@ (8000bd4 <HAL_InitTick+0xe4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 f868 	bl	8001bfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d103      	bne.n	8000b3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 f839 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8000b3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b3c:	e004      	b.n	8000b48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b3e:	f001 f835 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8000b42:	4603      	mov	r3, r0
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <HAL_InitTick+0xe8>)
 8000b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b50:	0c9b      	lsrs	r3, r3, #18
 8000b52:	3b01      	subs	r3, #1
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	@ (8000be0 <HAL_InitTick+0xf0>)
 8000b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b64:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b7c:	4817      	ldr	r0, [pc, #92]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b7e:	f001 f86f 	bl	8001c60 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d11b      	bne.n	8000bc8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b90:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <HAL_InitTick+0xec>)
 8000b92:	f001 f8bf 	bl	8001d14 <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d111      	bne.n	8000bc8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba4:	2036      	movs	r0, #54	@ 0x36
 8000ba6:	f000 f9cd 	bl	8000f44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d808      	bhi.n	8000bc2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2036      	movs	r0, #54	@ 0x36
 8000bb6:	f000 f9a9 	bl	8000f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_InitTick+0xf4>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	e002      	b.n	8000bc8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3738      	adds	r7, #56	@ 0x38
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	431bde83 	.word	0x431bde83
 8000bdc:	200000cc 	.word	0x200000cc
 8000be0:	40001000 	.word	0x40001000
 8000be4:	20000004 	.word	0x20000004

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <NMI_Handler+0x4>

08000bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <MemManage_Handler+0x4>

08000c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 f8e5 	bl	8001df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200000cc 	.word	0x200000cc

08000c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <_sbrk+0x5c>)
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <_sbrk+0x60>)
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c48:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c50:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <_sbrk+0x64>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	@ (8000c9c <_sbrk+0x68>)
 8000c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d207      	bcs.n	8000c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c64:	f006 f9fe 	bl	8007064 <__errno>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a05      	ldr	r2, [pc, #20]	@ (8000c98 <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3718      	adds	r7, #24
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20020000 	.word	0x20020000
 8000c94:	00000400 	.word	0x00000400
 8000c98:	20000114 	.word	0x20000114
 8000c9c:	20019a80 	.word	0x20019a80

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 f9bd 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fc83 	bl	8000600 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d08:	08007b44 	.word	0x08007b44
  ldr r2, =_sbss
 8000d0c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d10:	20019a80 	.word	0x20019a80

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f8d8 	bl	8000ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f7ff fed2 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe60 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000118 	.word	0x20000118

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000118 	.word	0x20000118

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	@ (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff4c 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1e:	f7ff ff61 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff ffb1 	bl	8000e90 <NVIC_EncodePriority>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff80 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff54 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e16b      	b.n	8001254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 815a 	bne.w	800124e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80b4 	beq.w	800124e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b60      	ldr	r3, [pc, #384]	@ (800126c <HAL_GPIO_Init+0x30c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a5f      	ldr	r2, [pc, #380]	@ (800126c <HAL_GPIO_Init+0x30c>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b5d      	ldr	r3, [pc, #372]	@ (800126c <HAL_GPIO_Init+0x30c>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a5b      	ldr	r2, [pc, #364]	@ (8001270 <HAL_GPIO_Init+0x310>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <HAL_GPIO_Init+0x314>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d02b      	beq.n	8001186 <HAL_GPIO_Init+0x226>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a51      	ldr	r2, [pc, #324]	@ (8001278 <HAL_GPIO_Init+0x318>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x222>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a50      	ldr	r2, [pc, #320]	@ (800127c <HAL_GPIO_Init+0x31c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x21e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	@ (8001280 <HAL_GPIO_Init+0x320>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4e      	ldr	r2, [pc, #312]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4d      	ldr	r2, [pc, #308]	@ (8001288 <HAL_GPIO_Init+0x328>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4c      	ldr	r2, [pc, #304]	@ (800128c <HAL_GPIO_Init+0x32c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4b      	ldr	r2, [pc, #300]	@ (8001290 <HAL_GPIO_Init+0x330>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x20a>
 8001166:	2307      	movs	r3, #7
 8001168:	e00e      	b.n	8001188 <HAL_GPIO_Init+0x228>
 800116a:	2308      	movs	r3, #8
 800116c:	e00c      	b.n	8001188 <HAL_GPIO_Init+0x228>
 800116e:	2306      	movs	r3, #6
 8001170:	e00a      	b.n	8001188 <HAL_GPIO_Init+0x228>
 8001172:	2305      	movs	r3, #5
 8001174:	e008      	b.n	8001188 <HAL_GPIO_Init+0x228>
 8001176:	2304      	movs	r3, #4
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x228>
 800117a:	2303      	movs	r3, #3
 800117c:	e004      	b.n	8001188 <HAL_GPIO_Init+0x228>
 800117e:	2302      	movs	r3, #2
 8001180:	e002      	b.n	8001188 <HAL_GPIO_Init+0x228>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <HAL_GPIO_Init+0x228>
 8001186:	2300      	movs	r3, #0
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	f002 0203 	and.w	r2, r2, #3
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	4093      	lsls	r3, r2
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001198:	4935      	ldr	r1, [pc, #212]	@ (8001270 <HAL_GPIO_Init+0x310>)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ca:	4a32      	ldr	r2, [pc, #200]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d0:	4b30      	ldr	r3, [pc, #192]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f4:	4a27      	ldr	r2, [pc, #156]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fa:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <HAL_GPIO_Init+0x334>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121e:	4a1d      	ldr	r2, [pc, #116]	@ (8001294 <HAL_GPIO_Init+0x334>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <HAL_GPIO_Init+0x334>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <HAL_GPIO_Init+0x334>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3301      	adds	r3, #1
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	f67f ae90 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40013800 	.word	0x40013800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800
 8001280:	40020c00 	.word	0x40020c00
 8001284:	40021000 	.word	0x40021000
 8001288:	40021400 	.word	0x40021400
 800128c:	40021800 	.word	0x40021800
 8001290:	40021c00 	.word	0x40021c00
 8001294:	40013c00 	.word	0x40013c00

08001298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
 80012a4:	4613      	mov	r3, r2
 80012a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a8:	787b      	ldrb	r3, [r7, #1]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b4:	e003      	b.n	80012be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012b6:	887b      	ldrh	r3, [r7, #2]
 80012b8:	041a      	lsls	r2, r3, #16
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e267      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d075      	beq.n	80013d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	4b88      	ldr	r3, [pc, #544]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d00c      	beq.n	8001310 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f6:	4b85      	ldr	r3, [pc, #532]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d112      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001302:	4b82      	ldr	r3, [pc, #520]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800130a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800130e:	d10b      	bne.n	8001328 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001310:	4b7e      	ldr	r3, [pc, #504]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <HAL_RCC_OscConfig+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d157      	bne.n	80013d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e242      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x74>
 8001332:	4b76      	ldr	r3, [pc, #472]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a75      	ldr	r2, [pc, #468]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0x98>
 800134a:	4b70      	ldr	r3, [pc, #448]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a6f      	ldr	r2, [pc, #444]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6c      	ldr	r2, [pc, #432]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xb0>
 8001364:	4b69      	ldr	r3, [pc, #420]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a68      	ldr	r2, [pc, #416]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b66      	ldr	r3, [pc, #408]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a65      	ldr	r2, [pc, #404]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fcfe 	bl	8000d84 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fcfa 	bl	8000d84 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e207      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b5b      	ldr	r3, [pc, #364]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xc0>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fcea 	bl	8000d84 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fce6 	bl	8000d84 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1f3      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b51      	ldr	r3, [pc, #324]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0xe8>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ee:	4b47      	ldr	r3, [pc, #284]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fa:	4b44      	ldr	r3, [pc, #272]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b41      	ldr	r3, [pc, #260]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c7      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4937      	ldr	r1, [pc, #220]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_RCC_OscConfig+0x244>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fc9f 	bl	8000d84 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fc9b 	bl	8000d84 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a8      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4925      	ldr	r1, [pc, #148]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <HAL_RCC_OscConfig+0x244>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc7e 	bl	8000d84 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fc7a 	bl	8000d84 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e187      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d036      	beq.n	8001524 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d016      	beq.n	80014ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_RCC_OscConfig+0x248>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc5e 	bl	8000d84 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc5a 	bl	8000d84 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e167      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_RCC_OscConfig+0x240>)
 80014e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x200>
 80014ea:	e01b      	b.n	8001524 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <HAL_RCC_OscConfig+0x248>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fc47 	bl	8000d84 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	e00e      	b.n	8001518 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc43 	bl	8000d84 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d907      	bls.n	8001518 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e150      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
 800150c:	40023800 	.word	0x40023800
 8001510:	42470000 	.word	0x42470000
 8001514:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b88      	ldr	r3, [pc, #544]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 800151a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1ea      	bne.n	80014fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8097 	beq.w	8001660 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b81      	ldr	r3, [pc, #516]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b7d      	ldr	r3, [pc, #500]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a7c      	ldr	r2, [pc, #496]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b7a      	ldr	r3, [pc, #488]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001562:	4b77      	ldr	r3, [pc, #476]	@ (8001740 <HAL_RCC_OscConfig+0x474>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156e:	4b74      	ldr	r3, [pc, #464]	@ (8001740 <HAL_RCC_OscConfig+0x474>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a73      	ldr	r2, [pc, #460]	@ (8001740 <HAL_RCC_OscConfig+0x474>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff fc03 	bl	8000d84 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff fbff 	bl	8000d84 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e10c      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <HAL_RCC_OscConfig+0x474>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x2ea>
 80015a8:	4b64      	ldr	r3, [pc, #400]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ac:	4a63      	ldr	r2, [pc, #396]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b4:	e01c      	b.n	80015f0 <HAL_RCC_OscConfig+0x324>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b05      	cmp	r3, #5
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x30c>
 80015be:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c2:	4a5e      	ldr	r2, [pc, #376]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ca:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ce:	4a5b      	ldr	r2, [pc, #364]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0x324>
 80015d8:	4b58      	ldr	r3, [pc, #352]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015dc:	4a57      	ldr	r2, [pc, #348]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e4:	4b55      	ldr	r3, [pc, #340]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e8:	4a54      	ldr	r2, [pc, #336]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80015ea:	f023 0304 	bic.w	r3, r3, #4
 80015ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d015      	beq.n	8001624 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f8:	f7ff fbc4 	bl	8000d84 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fbc0 	bl	8000d84 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0cb      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001616:	4b49      	ldr	r3, [pc, #292]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0ee      	beq.n	8001600 <HAL_RCC_OscConfig+0x334>
 8001622:	e014      	b.n	800164e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fbae 	bl	8000d84 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fbaa 	bl	8000d84 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e0b5      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001642:	4b3e      	ldr	r3, [pc, #248]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1ee      	bne.n	800162c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001654:	4b39      	ldr	r3, [pc, #228]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a38      	ldr	r2, [pc, #224]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80a1 	beq.w	80017ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166a:	4b34      	ldr	r3, [pc, #208]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b08      	cmp	r3, #8
 8001674:	d05c      	beq.n	8001730 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d141      	bne.n	8001702 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_RCC_OscConfig+0x478>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fb7e 	bl	8000d84 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7ff fb7a 	bl	8000d84 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e087      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169e:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	3b01      	subs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	491b      	ldr	r1, [pc, #108]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_RCC_OscConfig+0x478>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fb53 	bl	8000d84 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fb4f 	bl	8000d84 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e05c      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f4:	4b11      	ldr	r3, [pc, #68]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x416>
 8001700:	e054      	b.n	80017ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_RCC_OscConfig+0x478>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fb3c 	bl	8000d84 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fb38 	bl	8000d84 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e045      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_RCC_OscConfig+0x470>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x444>
 800172e:	e03d      	b.n	80017ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e038      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000
 8001744:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4ec>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d028      	beq.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d121      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d11a      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800177e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	4293      	cmp	r3, r2
 8001782:	d111      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
 8001792:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d001      	beq.n	80017ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800

080017bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0cc      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d0:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d90c      	bls.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e6:	4b63      	ldr	r3, [pc, #396]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0b8      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001810:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800181a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001828:	4b53      	ldr	r3, [pc, #332]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001834:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	494d      	ldr	r1, [pc, #308]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d044      	beq.n	80018dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b47      	ldr	r3, [pc, #284]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e07f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d003      	beq.n	800187a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001876:	2b03      	cmp	r3, #3
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	4b3f      	ldr	r3, [pc, #252]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188a:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e067      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b37      	ldr	r3, [pc, #220]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4934      	ldr	r1, [pc, #208]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ac:	f7ff fa6a 	bl	8000d84 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff fa66 	bl	8000d84 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e04f      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	4b25      	ldr	r3, [pc, #148]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20c      	bcs.n	8001904 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ea:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCC_ClockConfig+0x1b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e032      	b.n	800196a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4916      	ldr	r1, [pc, #88]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800192e:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	490e      	ldr	r1, [pc, #56]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	4313      	orrs	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001942:	f000 f821 	bl	8001988 <HAL_RCC_GetSysClockFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	490a      	ldr	r1, [pc, #40]	@ (800197c <HAL_RCC_ClockConfig+0x1c0>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	fa22 f303 	lsr.w	r3, r2, r3
 800195a:	4a09      	ldr	r2, [pc, #36]	@ (8001980 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f8c4 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00
 8001978:	40023800 	.word	0x40023800
 800197c:	08007ac0 	.word	0x08007ac0
 8001980:	20000000 	.word	0x20000000
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800198c:	b094      	sub	sp, #80	@ 0x50
 800198e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	647b      	str	r3, [r7, #68]	@ 0x44
 8001994:	2300      	movs	r3, #0
 8001996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001998:	2300      	movs	r3, #0
 800199a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a0:	4b79      	ldr	r3, [pc, #484]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d00d      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x40>
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	f200 80e1 	bhi.w	8001b74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x34>
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ba:	e0db      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019bc:	4b73      	ldr	r3, [pc, #460]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x204>)
 80019be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019c0:	e0db      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c2:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019c6:	e0d8      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d063      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	4b6a      	ldr	r3, [pc, #424]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	099b      	lsrs	r3, r3, #6
 80019e4:	2200      	movs	r2, #0
 80019e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019fa:	4622      	mov	r2, r4
 80019fc:	462b      	mov	r3, r5
 80019fe:	f04f 0000 	mov.w	r0, #0
 8001a02:	f04f 0100 	mov.w	r1, #0
 8001a06:	0159      	lsls	r1, r3, #5
 8001a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a0c:	0150      	lsls	r0, r2, #5
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4621      	mov	r1, r4
 8001a14:	1a51      	subs	r1, r2, r1
 8001a16:	6139      	str	r1, [r7, #16]
 8001a18:	4629      	mov	r1, r5
 8001a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	018b      	lsls	r3, r1, #6
 8001a30:	4651      	mov	r1, sl
 8001a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a36:	4651      	mov	r1, sl
 8001a38:	018a      	lsls	r2, r1, #6
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a40:	4659      	mov	r1, fp
 8001a42:	eb63 0901 	sbc.w	r9, r3, r1
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5a:	4690      	mov	r8, r2
 8001a5c:	4699      	mov	r9, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	eb18 0303 	adds.w	r3, r8, r3
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	462b      	mov	r3, r5
 8001a68:	eb49 0303 	adc.w	r3, r9, r3
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	024b      	lsls	r3, r1, #9
 8001a7e:	4621      	mov	r1, r4
 8001a80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a84:	4621      	mov	r1, r4
 8001a86:	024a      	lsls	r2, r1, #9
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a8e:	2200      	movs	r2, #0
 8001a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a98:	f7fe fc3a 	bl	8000310 <__aeabi_uldivmod>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001aa4:	e058      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa6:	4b38      	ldr	r3, [pc, #224]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	099b      	lsrs	r3, r3, #6
 8001aac:	2200      	movs	r2, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8001abc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac0:	4642      	mov	r2, r8
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	0159      	lsls	r1, r3, #5
 8001ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad2:	0150      	lsls	r0, r2, #5
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4641      	mov	r1, r8
 8001ada:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ade:	4649      	mov	r1, r9
 8001ae0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae4:	f04f 0200 	mov.w	r2, #0
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af8:	ebb2 040a 	subs.w	r4, r2, sl
 8001afc:	eb63 050b 	sbc.w	r5, r3, fp
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	00eb      	lsls	r3, r5, #3
 8001b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b0e:	00e2      	lsls	r2, r4, #3
 8001b10:	4614      	mov	r4, r2
 8001b12:	461d      	mov	r5, r3
 8001b14:	4643      	mov	r3, r8
 8001b16:	18e3      	adds	r3, r4, r3
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	464b      	mov	r3, r9
 8001b1c:	eb45 0303 	adc.w	r3, r5, r3
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b2e:	4629      	mov	r1, r5
 8001b30:	028b      	lsls	r3, r1, #10
 8001b32:	4621      	mov	r1, r4
 8001b34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b38:	4621      	mov	r1, r4
 8001b3a:	028a      	lsls	r2, r1, #10
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b42:	2200      	movs	r2, #0
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	61fa      	str	r2, [r7, #28]
 8001b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4c:	f7fe fbe0 	bl	8000310 <__aeabi_uldivmod>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4613      	mov	r3, r2
 8001b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b72:	e002      	b.n	8001b7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3750      	adds	r7, #80	@ 0x50
 8001b80:	46bd      	mov	sp, r7
 8001b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	00f42400 	.word	0x00f42400
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b03      	ldr	r3, [pc, #12]	@ (8001ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb0:	f7ff fff0 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	4903      	ldr	r1, [pc, #12]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc2:	5ccb      	ldrb	r3, [r1, r3]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	08007ad0 	.word	0x08007ad0

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd8:	f7ff ffdc 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	@ (8001bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0b5b      	lsrs	r3, r3, #13
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	@ (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08007ad0 	.word	0x08007ad0

08001bfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	220f      	movs	r2, #15
 8001c0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c24:	4b0c      	ldr	r3, [pc, #48]	@ (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_RCC_GetClockConfig+0x60>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0207 	and.w	r2, r3, #7
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	601a      	str	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e041      	b.n	8001cf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f839 	bl	8001cfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	f000 f9c0 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d001      	beq.n	8001d2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e04e      	b.n	8001dca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a23      	ldr	r2, [pc, #140]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d022      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d56:	d01d      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xc8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d018      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00e      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d009      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <HAL_TIM_Base_Start_IT+0xd8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x80>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a18      	ldr	r2, [pc, #96]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d010      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db6:	e007      	b.n	8001dc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40010400 	.word	0x40010400
 8001dec:	40014000 	.word	0x40014000
 8001df0:	40001800 	.word	0x40001800

08001df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0202 	mvn.w	r2, #2
 8001e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8d2 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8c4 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f8d5 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01b      	beq.n	8001ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0204 	mvn.w	r2, #4
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8ac 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f89e 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f8af 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d020      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f886 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f878 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f889 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0210 	mvn.w	r2, #16
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2208      	movs	r2, #8
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f860 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f852 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f863 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0201 	mvn.w	r2, #1
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fd40 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f906 	bl	8002190 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f834 	bl	8002010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0220 	mvn.w	r2, #32
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8d8 	bl	800217c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a46      	ldr	r2, [pc, #280]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a43      	ldr	r2, [pc, #268]	@ (8002154 <TIM_Base_SetConfig+0x130>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a42      	ldr	r2, [pc, #264]	@ (8002158 <TIM_Base_SetConfig+0x134>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a41      	ldr	r2, [pc, #260]	@ (800215c <TIM_Base_SetConfig+0x138>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a40      	ldr	r2, [pc, #256]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a35      	ldr	r2, [pc, #212]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d027      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <TIM_Base_SetConfig+0x130>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d023      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a31      	ldr	r2, [pc, #196]	@ (8002158 <TIM_Base_SetConfig+0x134>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a30      	ldr	r2, [pc, #192]	@ (800215c <TIM_Base_SetConfig+0x138>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2f      	ldr	r2, [pc, #188]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002164 <TIM_Base_SetConfig+0x140>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002168 <TIM_Base_SetConfig+0x144>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2c      	ldr	r2, [pc, #176]	@ (800216c <TIM_Base_SetConfig+0x148>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002170 <TIM_Base_SetConfig+0x14c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002174 <TIM_Base_SetConfig+0x150>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a29      	ldr	r2, [pc, #164]	@ (8002178 <TIM_Base_SetConfig+0x154>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <TIM_Base_SetConfig+0x12c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0xf8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <TIM_Base_SetConfig+0x13c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 0201 	bic.w	r2, r3, #1
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]
  }
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40010400 	.word	0x40010400
 8002164:	40014000 	.word	0x40014000
 8002168:	40014400 	.word	0x40014400
 800216c:	40014800 	.word	0x40014800
 8002170:	40001800 	.word	0x40001800
 8002174:	40001c00 	.word	0x40001c00
 8002178:	40002000 	.word	0x40002000

0800217c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e042      	b.n	800223c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7fe fc48 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f973 	bl	80024d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800220c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800221c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b20      	cmp	r3, #32
 8002262:	d175      	bne.n	8002350 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_UART_Transmit+0x2c>
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e06e      	b.n	8002352 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2221      	movs	r2, #33	@ 0x21
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002282:	f7fe fd7f 	bl	8000d84 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	88fa      	ldrh	r2, [r7, #6]
 800228c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	88fa      	ldrh	r2, [r7, #6]
 8002292:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800229c:	d108      	bne.n	80022b0 <HAL_UART_Transmit+0x6c>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d104      	bne.n	80022b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e003      	b.n	80022b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022b8:	e02e      	b.n	8002318 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f848 	bl	800235a <UART_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03a      	b.n	8002352 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	3302      	adds	r3, #2
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e007      	b.n	800230a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	3301      	adds	r3, #1
 8002308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1cb      	bne.n	80022ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2200      	movs	r2, #0
 800232a:	2140      	movs	r1, #64	@ 0x40
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f814 	bl	800235a <UART_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e006      	b.n	8002352 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800236a:	e03b      	b.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d037      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7fe fd06 	bl	8000d84 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	6a3a      	ldr	r2, [r7, #32]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <UART_WaitOnFlagUntilTimeout+0x30>
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e03a      	b.n	8002404 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b80      	cmp	r3, #128	@ 0x80
 80023a0:	d020      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b40      	cmp	r3, #64	@ 0x40
 80023a6:	d01d      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d116      	bne.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f81d 	bl	800240c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2208      	movs	r2, #8
 80023d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e00f      	b.n	8002404 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d0b4      	beq.n	800236c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800240c:	b480      	push	{r7}
 800240e:	b095      	sub	sp, #84	@ 0x54
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241e:	e853 3f00 	ldrex	r3, [r3]
 8002422:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800242a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002434:	643a      	str	r2, [r7, #64]	@ 0x40
 8002436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002438:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800243a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800243c:	e841 2300 	strex	r3, r2, [r1]
 8002440:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e5      	bne.n	8002414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3314      	adds	r3, #20
 800244e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	e853 3f00 	ldrex	r3, [r3]
 8002456:	61fb      	str	r3, [r7, #28]
   return(result);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002468:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800246a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800246e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002470:	e841 2300 	strex	r3, r2, [r1]
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e5      	bne.n	8002448 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002480:	2b01      	cmp	r3, #1
 8002482:	d119      	bne.n	80024b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	330c      	adds	r3, #12
 800248a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	e853 3f00 	ldrex	r3, [r3]
 8002492:	60bb      	str	r3, [r7, #8]
   return(result);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f023 0310 	bic.w	r3, r3, #16
 800249a:	647b      	str	r3, [r7, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024a4:	61ba      	str	r2, [r7, #24]
 80024a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a8:	6979      	ldr	r1, [r7, #20]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	e841 2300 	strex	r3, r2, [r1]
 80024b0:	613b      	str	r3, [r7, #16]
   return(result);
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1e5      	bne.n	8002484 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024c6:	bf00      	nop
 80024c8:	3754      	adds	r7, #84	@ 0x54
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d8:	b0c0      	sub	sp, #256	@ 0x100
 80024da:	af00      	add	r7, sp, #0
 80024dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f0:	68d9      	ldr	r1, [r3, #12]
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	ea40 0301 	orr.w	r3, r0, r1
 80024fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	431a      	orrs	r2, r3
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800252c:	f021 010c 	bic.w	r1, r1, #12
 8002530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800253a:	430b      	orrs	r3, r1
 800253c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800253e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800254a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254e:	6999      	ldr	r1, [r3, #24]
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	ea40 0301 	orr.w	r3, r0, r1
 800255a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800255c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	4b8f      	ldr	r3, [pc, #572]	@ (80027a0 <UART_SetConfig+0x2cc>)
 8002564:	429a      	cmp	r2, r3
 8002566:	d005      	beq.n	8002574 <UART_SetConfig+0xa0>
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b8d      	ldr	r3, [pc, #564]	@ (80027a4 <UART_SetConfig+0x2d0>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d104      	bne.n	800257e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002574:	f7ff fb2e 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800257c:	e003      	b.n	8002586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800257e:	f7ff fb15 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8002582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002590:	f040 810c 	bne.w	80027ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002598:	2200      	movs	r2, #0
 800259a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800259e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025a6:	4622      	mov	r2, r4
 80025a8:	462b      	mov	r3, r5
 80025aa:	1891      	adds	r1, r2, r2
 80025ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025ae:	415b      	adcs	r3, r3
 80025b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025b6:	4621      	mov	r1, r4
 80025b8:	eb12 0801 	adds.w	r8, r2, r1
 80025bc:	4629      	mov	r1, r5
 80025be:	eb43 0901 	adc.w	r9, r3, r1
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025d6:	4690      	mov	r8, r2
 80025d8:	4699      	mov	r9, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	eb18 0303 	adds.w	r3, r8, r3
 80025e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025e4:	462b      	mov	r3, r5
 80025e6:	eb49 0303 	adc.w	r3, r9, r3
 80025ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002602:	460b      	mov	r3, r1
 8002604:	18db      	adds	r3, r3, r3
 8002606:	653b      	str	r3, [r7, #80]	@ 0x50
 8002608:	4613      	mov	r3, r2
 800260a:	eb42 0303 	adc.w	r3, r2, r3
 800260e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002618:	f7fd fe7a 	bl	8000310 <__aeabi_uldivmod>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4b61      	ldr	r3, [pc, #388]	@ (80027a8 <UART_SetConfig+0x2d4>)
 8002622:	fba3 2302 	umull	r2, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	011c      	lsls	r4, r3, #4
 800262a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	1891      	adds	r1, r2, r2
 8002642:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002644:	415b      	adcs	r3, r3
 8002646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800264c:	4641      	mov	r1, r8
 800264e:	eb12 0a01 	adds.w	sl, r2, r1
 8002652:	4649      	mov	r1, r9
 8002654:	eb43 0b01 	adc.w	fp, r3, r1
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800266c:	4692      	mov	sl, r2
 800266e:	469b      	mov	fp, r3
 8002670:	4643      	mov	r3, r8
 8002672:	eb1a 0303 	adds.w	r3, sl, r3
 8002676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800267a:	464b      	mov	r3, r9
 800267c:	eb4b 0303 	adc.w	r3, fp, r3
 8002680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002698:	460b      	mov	r3, r1
 800269a:	18db      	adds	r3, r3, r3
 800269c:	643b      	str	r3, [r7, #64]	@ 0x40
 800269e:	4613      	mov	r3, r2
 80026a0:	eb42 0303 	adc.w	r3, r2, r3
 80026a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026ae:	f7fd fe2f 	bl	8000310 <__aeabi_uldivmod>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4611      	mov	r1, r2
 80026b8:	4b3b      	ldr	r3, [pc, #236]	@ (80027a8 <UART_SetConfig+0x2d4>)
 80026ba:	fba3 2301 	umull	r2, r3, r3, r1
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2264      	movs	r2, #100	@ 0x64
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	1acb      	subs	r3, r1, r3
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026ce:	4b36      	ldr	r3, [pc, #216]	@ (80027a8 <UART_SetConfig+0x2d4>)
 80026d0:	fba3 2302 	umull	r2, r3, r3, r2
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026dc:	441c      	add	r4, r3
 80026de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026f0:	4642      	mov	r2, r8
 80026f2:	464b      	mov	r3, r9
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026f8:	415b      	adcs	r3, r3
 80026fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002700:	4641      	mov	r1, r8
 8002702:	1851      	adds	r1, r2, r1
 8002704:	6339      	str	r1, [r7, #48]	@ 0x30
 8002706:	4649      	mov	r1, r9
 8002708:	414b      	adcs	r3, r1
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002718:	4659      	mov	r1, fp
 800271a:	00cb      	lsls	r3, r1, #3
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002722:	4651      	mov	r1, sl
 8002724:	00ca      	lsls	r2, r1, #3
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	4603      	mov	r3, r0
 800272c:	4642      	mov	r2, r8
 800272e:	189b      	adds	r3, r3, r2
 8002730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002734:	464b      	mov	r3, r9
 8002736:	460a      	mov	r2, r1
 8002738:	eb42 0303 	adc.w	r3, r2, r3
 800273c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800274c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002754:	460b      	mov	r3, r1
 8002756:	18db      	adds	r3, r3, r3
 8002758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800275a:	4613      	mov	r3, r2
 800275c:	eb42 0303 	adc.w	r3, r2, r3
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800276a:	f7fd fdd1 	bl	8000310 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <UART_SetConfig+0x2d4>)
 8002774:	fba3 1302 	umull	r1, r3, r3, r2
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	2164      	movs	r1, #100	@ 0x64
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	3332      	adds	r3, #50	@ 0x32
 8002786:	4a08      	ldr	r2, [pc, #32]	@ (80027a8 <UART_SetConfig+0x2d4>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	095b      	lsrs	r3, r3, #5
 800278e:	f003 0207 	and.w	r2, r3, #7
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4422      	add	r2, r4
 800279a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800279c:	e106      	b.n	80029ac <UART_SetConfig+0x4d8>
 800279e:	bf00      	nop
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b0:	2200      	movs	r2, #0
 80027b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027be:	4642      	mov	r2, r8
 80027c0:	464b      	mov	r3, r9
 80027c2:	1891      	adds	r1, r2, r2
 80027c4:	6239      	str	r1, [r7, #32]
 80027c6:	415b      	adcs	r3, r3
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027ce:	4641      	mov	r1, r8
 80027d0:	1854      	adds	r4, r2, r1
 80027d2:	4649      	mov	r1, r9
 80027d4:	eb43 0501 	adc.w	r5, r3, r1
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	00eb      	lsls	r3, r5, #3
 80027e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e6:	00e2      	lsls	r2, r4, #3
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	4643      	mov	r3, r8
 80027ee:	18e3      	adds	r3, r4, r3
 80027f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027f4:	464b      	mov	r3, r9
 80027f6:	eb45 0303 	adc.w	r3, r5, r3
 80027fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800280a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800281a:	4629      	mov	r1, r5
 800281c:	008b      	lsls	r3, r1, #2
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002824:	4621      	mov	r1, r4
 8002826:	008a      	lsls	r2, r1, #2
 8002828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800282c:	f7fd fd70 	bl	8000310 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4b60      	ldr	r3, [pc, #384]	@ (80029b8 <UART_SetConfig+0x4e4>)
 8002836:	fba3 2302 	umull	r2, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	011c      	lsls	r4, r3, #4
 800283e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800284c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	1891      	adds	r1, r2, r2
 8002856:	61b9      	str	r1, [r7, #24]
 8002858:	415b      	adcs	r3, r3
 800285a:	61fb      	str	r3, [r7, #28]
 800285c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002860:	4641      	mov	r1, r8
 8002862:	1851      	adds	r1, r2, r1
 8002864:	6139      	str	r1, [r7, #16]
 8002866:	4649      	mov	r1, r9
 8002868:	414b      	adcs	r3, r1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002878:	4659      	mov	r1, fp
 800287a:	00cb      	lsls	r3, r1, #3
 800287c:	4651      	mov	r1, sl
 800287e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002882:	4651      	mov	r1, sl
 8002884:	00ca      	lsls	r2, r1, #3
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	4603      	mov	r3, r0
 800288c:	4642      	mov	r2, r8
 800288e:	189b      	adds	r3, r3, r2
 8002890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002894:	464b      	mov	r3, r9
 8002896:	460a      	mov	r2, r1
 8002898:	eb42 0303 	adc.w	r3, r2, r3
 800289c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028b8:	4649      	mov	r1, r9
 80028ba:	008b      	lsls	r3, r1, #2
 80028bc:	4641      	mov	r1, r8
 80028be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028c2:	4641      	mov	r1, r8
 80028c4:	008a      	lsls	r2, r1, #2
 80028c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028ca:	f7fd fd21 	bl	8000310 <__aeabi_uldivmod>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4611      	mov	r1, r2
 80028d4:	4b38      	ldr	r3, [pc, #224]	@ (80029b8 <UART_SetConfig+0x4e4>)
 80028d6:	fba3 2301 	umull	r2, r3, r3, r1
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2264      	movs	r2, #100	@ 0x64
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	1acb      	subs	r3, r1, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	@ 0x32
 80028e8:	4a33      	ldr	r2, [pc, #204]	@ (80029b8 <UART_SetConfig+0x4e4>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028f4:	441c      	add	r4, r3
 80028f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fa:	2200      	movs	r2, #0
 80028fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80028fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	415b      	adcs	r3, r3
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002914:	4641      	mov	r1, r8
 8002916:	1851      	adds	r1, r2, r1
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	4649      	mov	r1, r9
 800291c:	414b      	adcs	r3, r1
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800292c:	4659      	mov	r1, fp
 800292e:	00cb      	lsls	r3, r1, #3
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002936:	4651      	mov	r1, sl
 8002938:	00ca      	lsls	r2, r1, #3
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	4603      	mov	r3, r0
 8002940:	4642      	mov	r2, r8
 8002942:	189b      	adds	r3, r3, r2
 8002944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002946:	464b      	mov	r3, r9
 8002948:	460a      	mov	r2, r1
 800294a:	eb42 0303 	adc.w	r3, r2, r3
 800294e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	663b      	str	r3, [r7, #96]	@ 0x60
 800295a:	667a      	str	r2, [r7, #100]	@ 0x64
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002968:	4649      	mov	r1, r9
 800296a:	008b      	lsls	r3, r1, #2
 800296c:	4641      	mov	r1, r8
 800296e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002972:	4641      	mov	r1, r8
 8002974:	008a      	lsls	r2, r1, #2
 8002976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800297a:	f7fd fcc9 	bl	8000310 <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4b0d      	ldr	r3, [pc, #52]	@ (80029b8 <UART_SetConfig+0x4e4>)
 8002984:	fba3 1302 	umull	r1, r3, r3, r2
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	2164      	movs	r1, #100	@ 0x64
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	3332      	adds	r3, #50	@ 0x32
 8002996:	4a08      	ldr	r2, [pc, #32]	@ (80029b8 <UART_SetConfig+0x4e4>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	095b      	lsrs	r3, r3, #5
 800299e:	f003 020f 	and.w	r2, r3, #15
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4422      	add	r2, r4
 80029aa:	609a      	str	r2, [r3, #8]
}
 80029ac:	bf00      	nop
 80029ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029b2:	46bd      	mov	sp, r7
 80029b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b8:	51eb851f 	.word	0x51eb851f

080029bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 0208 	add.w	r2, r3, #8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80029f0:	f240 1019 	movw	r0, #281	@ 0x119
 80029f4:	f003 feac 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002a0e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002a12:	f003 fe9d 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d103      	bne.n	8002a3e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e00c      	b.n	8002a58 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3308      	adds	r3, #8
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	e002      	b.n	8002a4c <vListInsert+0x2e>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d2f6      	bcs.n	8002a46 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002a84:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002a88:	f003 fe62 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6892      	ldr	r2, [r2, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6852      	ldr	r2, [r2, #4]
 8002ab4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d103      	bne.n	8002ac8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	f240 101d 	movw	r0, #285	@ 0x11d
 8002ae2:	f003 fe71 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002afe:	2301      	movs	r3, #1
 8002b00:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d05d      	beq.n	8002be6 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d059      	beq.n	8002be6 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d000      	beq.n	8002b46 <xQueueGenericReset+0x52>
 8002b44:	2101      	movs	r1, #1
 8002b46:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d14c      	bne.n	8002be6 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002b4c:	f002 f9aa 	bl	8004ea4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	441a      	add	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	6939      	ldr	r1, [r7, #16]
 8002b80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	22ff      	movs	r2, #255	@ 0xff
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d114      	bne.n	8002bcc <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f9dc 	bl	8003f6c <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <xQueueGenericReset+0x128>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	e009      	b.n	8002be0 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fef3 	bl	80029bc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	3324      	adds	r3, #36	@ 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff feee 	bl	80029bc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002be0:	f002 f992 	bl	8004f08 <vPortExitCritical>
 8002be4:	e001      	b.n	8002bea <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10b      	bne.n	8002c08 <xQueueGenericReset+0x114>
    __asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	60bb      	str	r3, [r7, #8]
}
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
 8002c06:	e7fd      	b.n	8002c04 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	2096      	movs	r0, #150	@ 0x96
 8002c0e:	f003 fddb 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002c12:	697b      	ldr	r3, [r7, #20]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02e      	beq.n	8002c96 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c38:	2100      	movs	r1, #0
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d000      	beq.n	8002c48 <xQueueGenericCreate+0x28>
 8002c46:	2101      	movs	r1, #1
 8002c48:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d123      	bne.n	8002c96 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c56:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c5a:	d81c      	bhi.n	8002c96 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	3350      	adds	r3, #80	@ 0x50
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fa48 	bl	8005100 <pvPortMalloc>
 8002c70:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01d      	beq.n	8002cb4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3350      	adds	r3, #80	@ 0x50
 8002c80:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c82:	79fa      	ldrb	r2, [r7, #7]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f81e 	bl	8002cd0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c94:	e00e      	b.n	8002cb4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <xQueueGenericCreate+0x94>
    __asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	613b      	str	r3, [r7, #16]
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 ff20 	bl	8006afc <SEGGER_SYSVIEW_ShrinkId>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	2098      	movs	r0, #152	@ 0x98
 8002cc2:	f003 fd81 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
    }
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e002      	b.n	8002cf2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfe:	2101      	movs	r1, #1
 8002d00:	69b8      	ldr	r0, [r7, #24]
 8002d02:	f7ff fef7 	bl	8002af4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08e      	sub	sp, #56	@ 0x38
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
 8002d24:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <xQueueGenericSend+0x34>
    __asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d103      	bne.n	8002d5a <xQueueGenericSend+0x42>
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <xQueueGenericSend+0x46>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueGenericSend+0x48>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <xQueueGenericSend+0x64>
    __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d103      	bne.n	8002d8a <xQueueGenericSend+0x72>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericSend+0x76>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericSend+0x78>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <xQueueGenericSend+0x94>
    __asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
}
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dac:	f001 fb00 	bl	80043b0 <xTaskGetSchedulerState>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <xQueueGenericSend+0xa4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <xQueueGenericSend+0xa8>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <xQueueGenericSend+0xaa>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <xQueueGenericSend+0xc6>
    __asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	61fb      	str	r3, [r7, #28]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dde:	f002 f861 	bl	8004ea4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSend+0xdc>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d12d      	bne.n	8002e50 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	68b9      	ldr	r1, [r7, #8]
 8002df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfa:	f000 f989 	bl	8003110 <prvCopyDataToQueue>
 8002dfe:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	3324      	adds	r3, #36	@ 0x24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f001 f8ad 	bl	8003f6c <xTaskRemoveFromEventList>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e18:	4b45      	ldr	r3, [pc, #276]	@ (8002f30 <xQueueGenericSend+0x218>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e00a      	b.n	8002e40 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b3f      	ldr	r3, [pc, #252]	@ (8002f30 <xQueueGenericSend+0x218>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e40:	f002 f862 	bl	8004f08 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002e44:	2101      	movs	r1, #1
 8002e46:	20a1      	movs	r0, #161	@ 0xa1
 8002e48:	f003 fcbe 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e06b      	b.n	8002f28 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e56:	f002 f857 	bl	8004f08 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	20a1      	movs	r0, #161	@ 0xa1
 8002e5e:	f003 fcb3 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e060      	b.n	8002f28 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d106      	bne.n	8002e7a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f95b 	bl	800412c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e7a:	f002 f845 	bl	8004f08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e7e:	f000 fd2d 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e82:	f002 f80f 	bl	8004ea4 <vPortEnterCritical>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e92:	d103      	bne.n	8002e9c <xQueueGenericSend+0x184>
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ea2:	b25b      	sxtb	r3, r3
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSend+0x19a>
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eb2:	f002 f829 	bl	8004f08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eb6:	1d3a      	adds	r2, r7, #4
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 f94c 	bl	800415c <xTaskCheckForTimeOut>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d124      	bne.n	8002f14 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ecc:	f000 fa18 	bl	8003300 <prvIsQueueFull>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	3310      	adds	r3, #16
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 ffd2 	bl	8003e88 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002ee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ee6:	f000 f9a3 	bl	8003230 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002eea:	f000 fd05 	bl	80038f8 <xTaskResumeAll>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f af74 	bne.w	8002dde <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <xQueueGenericSend+0x218>)
 8002ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	e76a      	b.n	8002dde <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0a:	f000 f991 	bl	8003230 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f0e:	f000 fcf3 	bl	80038f8 <xTaskResumeAll>
 8002f12:	e764      	b.n	8002dde <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f16:	f000 f98b 	bl	8003230 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f1a:	f000 fced 	bl	80038f8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002f1e:	2100      	movs	r1, #0
 8002f20:	20a1      	movs	r0, #161	@ 0xa1
 8002f22:	f003 fc51 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8002f26:	2300      	movs	r3, #0
        }
    }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3738      	adds	r7, #56	@ 0x38
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08c      	sub	sp, #48	@ 0x30
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10b      	bne.n	8002f66 <xQueueReceive+0x32>
    __asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	623b      	str	r3, [r7, #32]
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	e7fd      	b.n	8002f62 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <xQueueReceive+0x40>
 8002f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <xQueueReceive+0x44>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <xQueueReceive+0x46>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <xQueueReceive+0x62>
    __asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	61fb      	str	r3, [r7, #28]
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e7fd      	b.n	8002f92 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f96:	f001 fa0b 	bl	80043b0 <xTaskGetSchedulerState>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <xQueueReceive+0x72>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <xQueueReceive+0x76>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <xQueueReceive+0x78>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <xQueueReceive+0x94>
    __asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	61bb      	str	r3, [r7, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fc8:	f001 ff6c 	bl	8004ea4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d023      	beq.n	8003020 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fdc:	f000 f902 	bl	80031e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00f      	beq.n	8003010 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 ffb9 	bl	8003f6c <xTaskRemoveFromEventList>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003000:	4b42      	ldr	r3, [pc, #264]	@ (800310c <xQueueReceive+0x1d8>)
 8003002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003010:	f001 ff7a 	bl	8004f08 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8003014:	2101      	movs	r1, #1
 8003016:	20a4      	movs	r0, #164	@ 0xa4
 8003018:	f003 fbd6 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800301c:	2301      	movs	r3, #1
 800301e:	e071      	b.n	8003104 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d107      	bne.n	8003036 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003026:	f001 ff6f 	bl	8004f08 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800302a:	2100      	movs	r1, #0
 800302c:	20a4      	movs	r0, #164	@ 0xa4
 800302e:	f003 fbcb 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8003032:	2300      	movs	r3, #0
 8003034:	e066      	b.n	8003104 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4618      	mov	r0, r3
 8003042:	f001 f873 	bl	800412c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003046:	2301      	movs	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800304a:	f001 ff5d 	bl	8004f08 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800304e:	f000 fc45 	bl	80038dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003052:	f001 ff27 	bl	8004ea4 <vPortEnterCritical>
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800305c:	b25b      	sxtb	r3, r3
 800305e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003062:	d103      	bne.n	800306c <xQueueReceive+0x138>
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003072:	b25b      	sxtb	r3, r3
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d103      	bne.n	8003082 <xQueueReceive+0x14e>
 800307a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003082:	f001 ff41 	bl	8004f08 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003086:	1d3a      	adds	r2, r7, #4
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f001 f864 	bl	800415c <xTaskCheckForTimeOut>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d123      	bne.n	80030e2 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800309a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800309c:	f000 f91a 	bl	80032d4 <prvIsQueueEmpty>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d017      	beq.n	80030d6 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a8:	3324      	adds	r3, #36	@ 0x24
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 feea 	bl	8003e88 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030b6:	f000 f8bb 	bl	8003230 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030ba:	f000 fc1d 	bl	80038f8 <xTaskResumeAll>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d181      	bne.n	8002fc8 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80030c4:	4b11      	ldr	r3, [pc, #68]	@ (800310c <xQueueReceive+0x1d8>)
 80030c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	e778      	b.n	8002fc8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d8:	f000 f8aa 	bl	8003230 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030dc:	f000 fc0c 	bl	80038f8 <xTaskResumeAll>
 80030e0:	e772      	b.n	8002fc8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e4:	f000 f8a4 	bl	8003230 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030e8:	f000 fc06 	bl	80038f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ee:	f000 f8f1 	bl	80032d4 <prvIsQueueEmpty>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f43f af67 	beq.w	8002fc8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80030fa:	2100      	movs	r1, #0
 80030fc:	20a4      	movs	r0, #164	@ 0xa4
 80030fe:	f003 fb63 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8003102:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003104:	4618      	mov	r0, r3
 8003106:	3730      	adds	r7, #48	@ 0x30
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10d      	bne.n	800314a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d14d      	bne.n	80031d2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	4618      	mov	r0, r3
 800313c:	f001 f95a 	bl	80043f4 <xTaskPriorityDisinherit>
 8003140:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e043      	b.n	80031d2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d119      	bne.n	8003184 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6858      	ldr	r0, [r3, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	461a      	mov	r2, r3
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	f003 ffae 	bl	80070bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	429a      	cmp	r2, r3
 8003178:	d32b      	bcc.n	80031d2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e026      	b.n	80031d2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68d8      	ldr	r0, [r3, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	461a      	mov	r2, r3
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	f003 ff94 	bl	80070bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	425b      	negs	r3, r3
 800319e:	441a      	add	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d207      	bcs.n	80031c0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	425b      	negs	r3, r3
 80031ba:	441a      	add	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d105      	bne.n	80031d2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80031da:	697b      	ldr	r3, [r7, #20]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d303      	bcc.n	8003218 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68d9      	ldr	r1, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	461a      	mov	r2, r3
 8003222:	6838      	ldr	r0, [r7, #0]
 8003224:	f003 ff4a 	bl	80070bc <memcpy>
    }
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003238:	f001 fe34 	bl	8004ea4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003242:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003244:	e011      	b.n	800326a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3324      	adds	r3, #36	@ 0x24
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fe8a 	bl	8003f6c <xTaskRemoveFromEventList>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800325e:	f000 ffe9 	bl	8004234 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	3b01      	subs	r3, #1
 8003266:	b2db      	uxtb	r3, r3
 8003268:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	dce9      	bgt.n	8003246 <prvUnlockQueue+0x16>
 8003272:	e000      	b.n	8003276 <prvUnlockQueue+0x46>
                    break;
 8003274:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	22ff      	movs	r2, #255	@ 0xff
 800327a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800327e:	f001 fe43 	bl	8004f08 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003282:	f001 fe0f 	bl	8004ea4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800328c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800328e:	e011      	b.n	80032b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3310      	adds	r3, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fe65 	bl	8003f6c <xTaskRemoveFromEventList>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032a8:	f000 ffc4 	bl	8004234 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032ac:	7bbb      	ldrb	r3, [r7, #14]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	dce9      	bgt.n	8003290 <prvUnlockQueue+0x60>
 80032bc:	e000      	b.n	80032c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	22ff      	movs	r2, #255	@ 0xff
 80032c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80032c8:	f001 fe1e 	bl	8004f08 <vPortExitCritical>
}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032dc:	f001 fde2 	bl	8004ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e001      	b.n	80032f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032f2:	f001 fe09 	bl	8004f08 <vPortExitCritical>

    return xReturn;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003308:	f001 fdcc 	bl	8004ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	429a      	cmp	r2, r3
 8003316:	d102      	bne.n	800331e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003318:	2301      	movs	r3, #1
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	e001      	b.n	8003322 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003322:	f001 fdf1 	bl	8004f08 <vPortExitCritical>

    return xReturn;
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10b      	bne.n	800335c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	60fb      	str	r3, [r7, #12]
}
 8003356:	bf00      	nop
 8003358:	bf00      	nop
 800335a:	e7fd      	b.n	8003358 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d024      	beq.n	80033ac <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e01e      	b.n	80033a6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <vQueueAddToRegistry+0x9c>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d105      	bne.n	8003384 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4a13      	ldr	r2, [pc, #76]	@ (80033cc <vQueueAddToRegistry+0x9c>)
 800337e:	4413      	add	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
                    break;
 8003382:	e013      	b.n	80033ac <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <vQueueAddToRegistry+0x70>
 800338a:	4a10      	ldr	r2, [pc, #64]	@ (80033cc <vQueueAddToRegistry+0x9c>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d104      	bne.n	80033a0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4a0c      	ldr	r2, [pc, #48]	@ (80033cc <vQueueAddToRegistry+0x9c>)
 800339c:	4413      	add	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b07      	cmp	r3, #7
 80033aa:	d9dd      	bls.n	8003368 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d005      	beq.n	80033be <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80033be:	20b6      	movs	r0, #182	@ 0xb6
 80033c0:	f003 f9c6 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	2000011c 	.word	0x2000011c

080033d0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80033e0:	f001 fd60 	bl	8004ea4 <vPortEnterCritical>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d103      	bne.n	80033fa <vQueueWaitForMessageRestricted+0x2a>
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003400:	b25b      	sxtb	r3, r3
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d103      	bne.n	8003410 <vQueueWaitForMessageRestricted+0x40>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003410:	f001 fd7a 	bl	8004f08 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d106      	bne.n	800342a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3324      	adds	r3, #36	@ 0x24
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fd57 	bl	8003ed8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff00 	bl	8003230 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003430:	20b9      	movs	r0, #185	@ 0xb9
 8003432:	f003 f98d 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800343e:	b580      	push	{r7, lr}
 8003440:	b08a      	sub	sp, #40	@ 0x28
 8003442:	af04      	add	r7, sp, #16
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fe55 	bl	8005100 <pvPortMalloc>
 8003456:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d013      	beq.n	8003486 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800345e:	205c      	movs	r0, #92	@ 0x5c
 8003460:	f001 fe4e 	bl	8005100 <pvPortMalloc>
 8003464:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800346c:	225c      	movs	r2, #92	@ 0x5c
 800346e:	2100      	movs	r1, #0
 8003470:	6978      	ldr	r0, [r7, #20]
 8003472:	f003 fdef 	bl	8007054 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
 800347c:	e005      	b.n	800348a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800347e:	6938      	ldr	r0, [r7, #16]
 8003480:	f001 ff70 	bl	8005364 <vPortFree>
 8003484:	e001      	b.n	800348a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00d      	beq.n	80034ac <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003490:	2300      	movs	r3, #0
 8003492:	9303      	str	r3, [sp, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f82d 	bl	8003506 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80034ac:	697b      	ldr	r3, [r7, #20]
    }
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b088      	sub	sp, #32
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff ffb3 	bl	800343e <prvCreateTask>
 80034d8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80034e0:	6938      	ldr	r0, [r7, #16]
 80034e2:	f000 f8a1 	bl	8003628 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034e6:	2301      	movs	r3, #1
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e002      	b.n	80034f2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295
 80034f0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4619      	mov	r1, r3
 80034f6:	20c2      	movs	r0, #194	@ 0xc2
 80034f8:	f003 f966 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80034fc:	697b      	ldr	r3, [r7, #20]
    }
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b088      	sub	sp, #32
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	461a      	mov	r2, r3
 800351e:	21a5      	movs	r1, #165	@ 0xa5
 8003520:	f003 fd98 	bl	8007054 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800352e:	3b01      	subs	r3, #1
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f023 0307 	bic.w	r3, r3, #7
 800353c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00b      	beq.n	8003560 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	617b      	str	r3, [r7, #20]
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01e      	beq.n	80035a4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e012      	b.n	8003592 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	4413      	add	r3, r2
 8003572:	7819      	ldrb	r1, [r3, #0]
 8003574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	3334      	adds	r3, #52	@ 0x34
 800357c:	460a      	mov	r2, r1
 800357e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	3301      	adds	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b0e      	cmp	r3, #14
 8003596:	d9e9      	bls.n	800356c <prvInitialiseNewTask+0x66>
 8003598:	e000      	b.n	800359c <prvInitialiseNewTask+0x96>
            {
                break;
 800359a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80035a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d90b      	bls.n	80035c2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	613b      	str	r3, [r7, #16]
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	e7fd      	b.n	80035be <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d901      	bls.n	80035cc <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035c8:	2304      	movs	r3, #4
 80035ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80035d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fa0f 	bl	8002a00 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	3318      	adds	r3, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fa0a 	bl	8002a00 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80035f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f4:	f1c3 0205 	rsb	r2, r3, #5
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003600:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	69b8      	ldr	r0, [r7, #24]
 8003608:	f001 faca 	bl	8004ba0 <pxPortInitialiseStack>
 800360c:	4602      	mov	r2, r0
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800361c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800361e:	bf00      	nop
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003630:	f001 fc38 	bl	8004ea4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003634:	4b50      	ldr	r3, [pc, #320]	@ (8003778 <prvAddNewTaskToReadyList+0x150>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	4a4f      	ldr	r2, [pc, #316]	@ (8003778 <prvAddNewTaskToReadyList+0x150>)
 800363c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800363e:	4b4f      	ldr	r3, [pc, #316]	@ (800377c <prvAddNewTaskToReadyList+0x154>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d109      	bne.n	800365a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003646:	4a4d      	ldr	r2, [pc, #308]	@ (800377c <prvAddNewTaskToReadyList+0x154>)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800364c:	4b4a      	ldr	r3, [pc, #296]	@ (8003778 <prvAddNewTaskToReadyList+0x150>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d110      	bne.n	8003676 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003654:	f000 fe12 	bl	800427c <prvInitialiseTaskLists>
 8003658:	e00d      	b.n	8003676 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800365a:	4b49      	ldr	r3, [pc, #292]	@ (8003780 <prvAddNewTaskToReadyList+0x158>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003662:	4b46      	ldr	r3, [pc, #280]	@ (800377c <prvAddNewTaskToReadyList+0x154>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	429a      	cmp	r2, r3
 800366e:	d802      	bhi.n	8003676 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003670:	4a42      	ldr	r2, [pc, #264]	@ (800377c <prvAddNewTaskToReadyList+0x154>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003676:	4b43      	ldr	r3, [pc, #268]	@ (8003784 <prvAddNewTaskToReadyList+0x15c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	4a41      	ldr	r2, [pc, #260]	@ (8003784 <prvAddNewTaskToReadyList+0x15c>)
 800367e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003680:	4b40      	ldr	r3, [pc, #256]	@ (8003784 <prvAddNewTaskToReadyList+0x15c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d016      	beq.n	80036bc <prvAddNewTaskToReadyList+0x94>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	f003 f90d 	bl	80068b0 <SEGGER_SYSVIEW_OnTaskCreate>
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	461d      	mov	r5, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461c      	mov	r4, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	1ae3      	subs	r3, r4, r3
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	462b      	mov	r3, r5
 80036b8:	f003 fbfe 	bl	8006eb8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 f97a 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	2201      	movs	r2, #1
 80036ca:	409a      	lsls	r2, r3
 80036cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003788 <prvAddNewTaskToReadyList+0x160>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003788 <prvAddNewTaskToReadyList+0x160>)
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036da:	492c      	ldr	r1, [pc, #176]	@ (800378c <prvAddNewTaskToReadyList+0x164>)
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3304      	adds	r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	3204      	adds	r2, #4
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	1d1a      	adds	r2, r3, #4
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4a1c      	ldr	r2, [pc, #112]	@ (800378c <prvAddNewTaskToReadyList+0x164>)
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	615a      	str	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003724:	4919      	ldr	r1, [pc, #100]	@ (800378c <prvAddNewTaskToReadyList+0x164>)
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	440b      	add	r3, r1
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003736:	1c59      	adds	r1, r3, #1
 8003738:	4814      	ldr	r0, [pc, #80]	@ (800378c <prvAddNewTaskToReadyList+0x164>)
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4403      	add	r3, r0
 8003744:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003746:	f001 fbdf 	bl	8004f08 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800374a:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <prvAddNewTaskToReadyList+0x158>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00e      	beq.n	8003770 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <prvAddNewTaskToReadyList+0x154>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	429a      	cmp	r2, r3
 800375e:	d207      	bcs.n	8003770 <prvAddNewTaskToReadyList+0x148>
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <prvAddNewTaskToReadyList+0x168>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bdb0      	pop	{r4, r5, r7, pc}
 8003778:	20000234 	.word	0x20000234
 800377c:	2000015c 	.word	0x2000015c
 8003780:	20000240 	.word	0x20000240
 8003784:	20000250 	.word	0x20000250
 8003788:	2000023c 	.word	0x2000023c
 800378c:	20000160 	.word	0x20000160
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800379a:	2301      	movs	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e011      	b.n	80037cc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <prvCreateIdleTasks+0x88>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4413      	add	r3, r2
 80037ae:	7819      	ldrb	r1, [r3, #0]
 80037b0:	463a      	mov	r2, r7
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4413      	add	r3, r2
 80037b6:	460a      	mov	r2, r1
 80037b8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80037ba:	463a      	mov	r2, r7
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d006      	beq.n	80037d4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b0e      	cmp	r3, #14
 80037d0:	ddea      	ble.n	80037a8 <prvCreateIdleTasks+0x14>
 80037d2:	e000      	b.n	80037d6 <prvCreateIdleTasks+0x42>
        {
            break;
 80037d4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e015      	b.n	8003808 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <prvCreateIdleTasks+0x8c>)
 80037de:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003824 <prvCreateIdleTasks+0x90>)
 80037e6:	4413      	add	r3, r2
 80037e8:	4639      	mov	r1, r7
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2300      	movs	r3, #0
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	2282      	movs	r2, #130	@ 0x82
 80037f4:	6938      	ldr	r0, [r7, #16]
 80037f6:	f7ff fe5e 	bl	80034b6 <xTaskCreate>
 80037fa:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	3301      	adds	r3, #1
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	dde6      	ble.n	80037dc <prvCreateIdleTasks+0x48>
 800380e:	e000      	b.n	8003812 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003810:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003812:	69fb      	ldr	r3, [r7, #28]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3720      	adds	r7, #32
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	080079f8 	.word	0x080079f8
 8003820:	0800424d 	.word	0x0800424d
 8003824:	20000258 	.word	0x20000258

08003828 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800382e:	f7ff ffb1 	bl	8003794 <prvCreateIdleTasks>
 8003832:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800383a:	f000 ff19 	bl	8004670 <xTimerCreateTimerTask>
 800383e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d124      	bne.n	8003890 <vTaskStartScheduler+0x68>
    __asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60bb      	str	r3, [r7, #8]
}
 8003858:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800385a:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <vTaskStartScheduler+0x9c>)
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003862:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <vTaskStartScheduler+0xa0>)
 8003864:	2201      	movs	r2, #1
 8003866:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <vTaskStartScheduler+0xa4>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800386e:	4b18      	ldr	r3, [pc, #96]	@ (80038d0 <vTaskStartScheduler+0xa8>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <vTaskStartScheduler+0xac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d102      	bne.n	8003880 <vTaskStartScheduler+0x58>
 800387a:	f002 fffd 	bl	8006878 <SEGGER_SYSVIEW_OnIdle>
 800387e:	e004      	b.n	800388a <vTaskStartScheduler+0x62>
 8003880:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <vTaskStartScheduler+0xac>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f003 f855 	bl	8006934 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800388a:	f001 fa1b 	bl	8004cc4 <xPortStartScheduler>
 800388e:	e00f      	b.n	80038b0 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d10b      	bne.n	80038b0 <vTaskStartScheduler+0x88>
    __asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	607b      	str	r3, [r7, #4]
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <vTaskStartScheduler+0xb0>)
 80038b2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80038b4:	20cd      	movs	r0, #205	@ 0xcd
 80038b6:	f002 ff4b 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000254 	.word	0x20000254
 80038c8:	20000240 	.word	0x20000240
 80038cc:	20000238 	.word	0x20000238
 80038d0:	20000258 	.word	0x20000258
 80038d4:	2000015c 	.word	0x2000015c
 80038d8:	2000000c 	.word	0x2000000c

080038dc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <vTaskSuspendAll+0x18>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	4a03      	ldr	r2, [pc, #12]	@ (80038f4 <vTaskSuspendAll+0x18>)
 80038e8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80038ea:	20cf      	movs	r0, #207	@ 0xcf
 80038ec:	f002 ff30 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	2000025c 	.word	0x2000025c

080038f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003906:	f001 facd 	bl	8004ea4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800390e:	4b7a      	ldr	r3, [pc, #488]	@ (8003af8 <xTaskResumeAll+0x200>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10b      	bne.n	800392e <xTaskResumeAll+0x36>
    __asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	603b      	str	r3, [r7, #0]
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800392e:	4b72      	ldr	r3, [pc, #456]	@ (8003af8 <xTaskResumeAll+0x200>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a70      	ldr	r2, [pc, #448]	@ (8003af8 <xTaskResumeAll+0x200>)
 8003936:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003938:	4b6f      	ldr	r3, [pc, #444]	@ (8003af8 <xTaskResumeAll+0x200>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 80ce 	bne.w	8003ade <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003942:	4b6e      	ldr	r3, [pc, #440]	@ (8003afc <xTaskResumeAll+0x204>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80c9 	beq.w	8003ade <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800394c:	e092      	b.n	8003a74 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800394e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b00 <xTaskResumeAll+0x208>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	6a12      	ldr	r2, [r2, #32]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	69d2      	ldr	r2, [r2, #28]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	3318      	adds	r3, #24
 8003978:	429a      	cmp	r2, r3
 800397a:	d103      	bne.n	8003984 <xTaskResumeAll+0x8c>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	@ 0x28
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	1e5a      	subs	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	68d2      	ldr	r2, [r2, #12]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d103      	bne.n	80039c2 <xTaskResumeAll+0xca>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1e5a      	subs	r2, r3, #1
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f002 ffef 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	2201      	movs	r2, #1
 80039e0:	409a      	lsls	r2, r3
 80039e2:	4b48      	ldr	r3, [pc, #288]	@ (8003b04 <xTaskResumeAll+0x20c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	4a46      	ldr	r2, [pc, #280]	@ (8003b04 <xTaskResumeAll+0x20c>)
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f0:	4945      	ldr	r1, [pc, #276]	@ (8003b08 <xTaskResumeAll+0x210>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	607b      	str	r3, [r7, #4]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	69fa      	ldr	r2, [r7, #28]
 8003a16:	3204      	adds	r2, #4
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	1d1a      	adds	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a36      	ldr	r2, [pc, #216]	@ (8003b08 <xTaskResumeAll+0x210>)
 8003a30:	441a      	add	r2, r3
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	615a      	str	r2, [r3, #20]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a3a:	4933      	ldr	r1, [pc, #204]	@ (8003b08 <xTaskResumeAll+0x210>)
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a4c:	1c59      	adds	r1, r3, #1
 8003a4e:	482e      	ldr	r0, [pc, #184]	@ (8003b08 <xTaskResumeAll+0x210>)
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4403      	add	r3, r0
 8003a5a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <xTaskResumeAll+0x214>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d904      	bls.n	8003a74 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003a6a:	4a29      	ldr	r2, [pc, #164]	@ (8003b10 <xTaskResumeAll+0x218>)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2101      	movs	r1, #1
 8003a70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a74:	4b22      	ldr	r3, [pc, #136]	@ (8003b00 <xTaskResumeAll+0x208>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f af68 	bne.w	800394e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003a84:	f000 fc78 	bl	8004378 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <xTaskResumeAll+0x21c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003a94:	f000 f86a 	bl	8003b6c <xTaskIncrementTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <xTaskResumeAll+0x218>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ef      	bne.n	8003a94 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003ab4:	4b17      	ldr	r3, [pc, #92]	@ (8003b14 <xTaskResumeAll+0x21c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003aba:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <xTaskResumeAll+0x218>)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003aca:	4b10      	ldr	r3, [pc, #64]	@ (8003b0c <xTaskResumeAll+0x214>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4b12      	ldr	r3, [pc, #72]	@ (8003b18 <xTaskResumeAll+0x220>)
 8003ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ade:	f001 fa13 	bl	8004f08 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	20d0      	movs	r0, #208	@ 0xd0
 8003ae8:	f002 fe6e 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003aec:	69bb      	ldr	r3, [r7, #24]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000025c 	.word	0x2000025c
 8003afc:	20000234 	.word	0x20000234
 8003b00:	200001f4 	.word	0x200001f4
 8003b04:	2000023c 	.word	0x2000023c
 8003b08:	20000160 	.word	0x20000160
 8003b0c:	2000015c 	.word	0x2000015c
 8003b10:	20000248 	.word	0x20000248
 8003b14:	20000244 	.word	0x20000244
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <xTaskGetTickCount+0x20>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	20d1      	movs	r0, #209	@ 0xd1
 8003b2c:	f002 fe4c 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003b30:	687b      	ldr	r3, [r7, #4]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000238 	.word	0x20000238

08003b40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b46:	f001 fa99 	bl	800507c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003b4e:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <xTaskGetTickCountFromISR+0x28>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	20d2      	movs	r0, #210	@ 0xd2
 8003b58:	f002 fe36 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003b5c:	683b      	ldr	r3, [r7, #0]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000238 	.word	0x20000238

08003b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b76:	4b83      	ldr	r3, [pc, #524]	@ (8003d84 <xTaskIncrementTick+0x218>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 80f3 	bne.w	8003d66 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b80:	4b81      	ldr	r3, [pc, #516]	@ (8003d88 <xTaskIncrementTick+0x21c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003b88:	4a7f      	ldr	r2, [pc, #508]	@ (8003d88 <xTaskIncrementTick+0x21c>)
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d121      	bne.n	8003bd8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003b94:	4b7d      	ldr	r3, [pc, #500]	@ (8003d8c <xTaskIncrementTick+0x220>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <xTaskIncrementTick+0x4a>
    __asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	607b      	str	r3, [r7, #4]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xTaskIncrementTick+0x46>
 8003bb6:	4b75      	ldr	r3, [pc, #468]	@ (8003d8c <xTaskIncrementTick+0x220>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	4b74      	ldr	r3, [pc, #464]	@ (8003d90 <xTaskIncrementTick+0x224>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a72      	ldr	r2, [pc, #456]	@ (8003d8c <xTaskIncrementTick+0x220>)
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4a72      	ldr	r2, [pc, #456]	@ (8003d90 <xTaskIncrementTick+0x224>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b72      	ldr	r3, [pc, #456]	@ (8003d94 <xTaskIncrementTick+0x228>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a70      	ldr	r2, [pc, #448]	@ (8003d94 <xTaskIncrementTick+0x228>)
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	f000 fbd0 	bl	8004378 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d98 <xTaskIncrementTick+0x22c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a3a      	ldr	r2, [r7, #32]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f0c0 80ac 	bcc.w	8003d3c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003be4:	4b69      	ldr	r3, [pc, #420]	@ (8003d8c <xTaskIncrementTick+0x220>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003bee:	4b6a      	ldr	r3, [pc, #424]	@ (8003d98 <xTaskIncrementTick+0x22c>)
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	601a      	str	r2, [r3, #0]
                    break;
 8003bf6:	e0a1      	b.n	8003d3c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bf8:	4b64      	ldr	r3, [pc, #400]	@ (8003d8c <xTaskIncrementTick+0x220>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d203      	bcs.n	8003c18 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003c10:	4a61      	ldr	r2, [pc, #388]	@ (8003d98 <xTaskIncrementTick+0x22c>)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6013      	str	r3, [r2, #0]
                        break;
 8003c16:	e091      	b.n	8003d3c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	6892      	ldr	r2, [r2, #8]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d103      	bne.n	8003c46 <xTaskIncrementTick+0xda>
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	615a      	str	r2, [r3, #20]
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1e5a      	subs	r2, r3, #1
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	6a12      	ldr	r2, [r2, #32]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	69d2      	ldr	r2, [r2, #28]
 8003c76:	605a      	str	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d103      	bne.n	8003c8c <xTaskIncrementTick+0x120>
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	1e5a      	subs	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f002 fe8a 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	409a      	lsls	r2, r3
 8003cac:	4b3b      	ldr	r3, [pc, #236]	@ (8003d9c <xTaskIncrementTick+0x230>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8003d9c <xTaskIncrementTick+0x230>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	4939      	ldr	r1, [pc, #228]	@ (8003da0 <xTaskIncrementTick+0x234>)
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	3204      	adds	r2, #4
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a29      	ldr	r2, [pc, #164]	@ (8003da0 <xTaskIncrementTick+0x234>)
 8003cfa:	441a      	add	r2, r3
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	615a      	str	r2, [r3, #20]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d04:	4926      	ldr	r1, [pc, #152]	@ (8003da0 <xTaskIncrementTick+0x234>)
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d16:	1c59      	adds	r1, r3, #1
 8003d18:	4821      	ldr	r0, [pc, #132]	@ (8003da0 <xTaskIncrementTick+0x234>)
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4403      	add	r3, r0
 8003d24:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003da4 <xTaskIncrementTick+0x238>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f67f af57 	bls.w	8003be4 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3a:	e753      	b.n	8003be4 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003d3c:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <xTaskIncrementTick+0x238>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d42:	4917      	ldr	r1, [pc, #92]	@ (8003da0 <xTaskIncrementTick+0x234>)
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d901      	bls.n	8003d58 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003d58:	4b13      	ldr	r3, [pc, #76]	@ (8003da8 <xTaskIncrementTick+0x23c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	e004      	b.n	8003d70 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003d66:	4b11      	ldr	r3, [pc, #68]	@ (8003dac <xTaskIncrementTick+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003dac <xTaskIncrementTick+0x240>)
 8003d6e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d72:	4619      	mov	r1, r3
 8003d74:	20db      	movs	r0, #219	@ 0xdb
 8003d76:	f002 fd27 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	@ 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	2000025c 	.word	0x2000025c
 8003d88:	20000238 	.word	0x20000238
 8003d8c:	200001ec 	.word	0x200001ec
 8003d90:	200001f0 	.word	0x200001f0
 8003d94:	2000024c 	.word	0x2000024c
 8003d98:	20000254 	.word	0x20000254
 8003d9c:	2000023c 	.word	0x2000023c
 8003da0:	20000160 	.word	0x20000160
 8003da4:	2000015c 	.word	0x2000015c
 8003da8:	20000248 	.word	0x20000248
 8003dac:	20000244 	.word	0x20000244

08003db0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003db6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <vTaskSwitchContext+0xc0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8003e74 <vTaskSwitchContext+0xc4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003dc4:	e04f      	b.n	8003e66 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <vTaskSwitchContext+0xc4>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8003e78 <vTaskSwitchContext+0xc8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003dda:	7afb      	ldrb	r3, [r7, #11]
 8003ddc:	f1c3 031f 	rsb	r3, r3, #31
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	4926      	ldr	r1, [pc, #152]	@ (8003e7c <vTaskSwitchContext+0xcc>)
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <vTaskSwitchContext+0x5e>
    __asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	607b      	str	r3, [r7, #4]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <vTaskSwitchContext+0x5a>
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4a18      	ldr	r2, [pc, #96]	@ (8003e7c <vTaskSwitchContext+0xcc>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d103      	bne.n	8003e3c <vTaskSwitchContext+0x8c>
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a0f      	ldr	r2, [pc, #60]	@ (8003e80 <vTaskSwitchContext+0xd0>)
 8003e44:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003e46:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <vTaskSwitchContext+0xd4>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <vTaskSwitchContext+0xd0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d102      	bne.n	8003e58 <vTaskSwitchContext+0xa8>
 8003e52:	f002 fd11 	bl	8006878 <SEGGER_SYSVIEW_OnIdle>
 8003e56:	e004      	b.n	8003e62 <vTaskSwitchContext+0xb2>
 8003e58:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <vTaskSwitchContext+0xd0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fd69 	bl	8006934 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <vTaskSwitchContext+0xd0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
    }
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	2000025c 	.word	0x2000025c
 8003e74:	20000248 	.word	0x20000248
 8003e78:	2000023c 	.word	0x2000023c
 8003e7c:	20000160 	.word	0x20000160
 8003e80:	2000015c 	.word	0x2000015c
 8003e84:	20000258 	.word	0x20000258

08003e88 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	60fb      	str	r3, [r7, #12]
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003eb0:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <vTaskPlaceOnEventList+0x4c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fe fdb0 	bl	8002a1e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f000 fb47 	bl	8004554 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003ec6:	20e1      	movs	r0, #225	@ 0xe1
 8003ec8:	f002 fc42 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	2000015c 	.word	0x2000015c

08003ed8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	613b      	str	r3, [r7, #16]
}
 8003efc:	bf00      	nop
 8003efe:	bf00      	nop
 8003f00:	e7fd      	b.n	8003efe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	61da      	str	r2, [r3, #28]
 8003f10:	4b15      	ldr	r3, [pc, #84]	@ (8003f68 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	621a      	str	r2, [r3, #32]
 8003f1a:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	3218      	adds	r2, #24
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f103 0218 	add.w	r2, r3, #24
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	68b8      	ldr	r0, [r7, #8]
 8003f54:	f000 fafe 	bl	8004554 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003f58:	20e3      	movs	r0, #227	@ 0xe3
 8003f5a:	f002 fbf9 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003f5e:	bf00      	nop
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	2000015c 	.word	0x2000015c

08003f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	@ 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	60fb      	str	r3, [r7, #12]
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	e7fd      	b.n	8003f96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	6a3a      	ldr	r2, [r7, #32]
 8003fa6:	6a12      	ldr	r2, [r2, #32]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	69d2      	ldr	r2, [r2, #28]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d103      	bne.n	8003fc8 <xTaskRemoveFromEventList+0x5c>
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8004114 <xTaskRemoveFromEventList+0x1a8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d164      	bne.n	80040aa <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	6a3a      	ldr	r2, [r7, #32]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	3304      	adds	r3, #4
 8004002:	429a      	cmp	r2, r3
 8004004:	d103      	bne.n	800400e <xTaskRemoveFromEventList+0xa2>
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	4618      	mov	r0, r3
 8004022:	f002 fcc9 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	2201      	movs	r2, #1
 800402c:	409a      	lsls	r2, r3
 800402e:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <xTaskRemoveFromEventList+0x1ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	4a38      	ldr	r2, [pc, #224]	@ (8004118 <xTaskRemoveFromEventList+0x1ac>)
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403c:	4937      	ldr	r1, [pc, #220]	@ (800411c <xTaskRemoveFromEventList+0x1b0>)
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3304      	adds	r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	3204      	adds	r2, #4
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	1d1a      	adds	r2, r3, #4
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4a28      	ldr	r2, [pc, #160]	@ (800411c <xTaskRemoveFromEventList+0x1b0>)
 800407c:	441a      	add	r2, r3
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	615a      	str	r2, [r3, #20]
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	4925      	ldr	r1, [pc, #148]	@ (800411c <xTaskRemoveFromEventList+0x1b0>)
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	4820      	ldr	r0, [pc, #128]	@ (800411c <xTaskRemoveFromEventList+0x1b0>)
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4403      	add	r3, r0
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	e01b      	b.n	80040e2 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <xTaskRemoveFromEventList+0x1b4>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	61da      	str	r2, [r3, #28]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	621a      	str	r2, [r3, #32]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	6a3a      	ldr	r2, [r7, #32]
 80040c4:	3218      	adds	r2, #24
 80040c6:	605a      	str	r2, [r3, #4]
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f103 0218 	add.w	r2, r3, #24
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <xTaskRemoveFromEventList+0x1b4>)
 80040d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <xTaskRemoveFromEventList+0x1b4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <xTaskRemoveFromEventList+0x1b4>)
 80040e0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <xTaskRemoveFromEventList+0x1b8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d905      	bls.n	80040fc <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <xTaskRemoveFromEventList+0x1bc>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	e001      	b.n	8004100 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	4619      	mov	r1, r3
 8004104:	20e4      	movs	r0, #228	@ 0xe4
 8004106:	f002 fb5f 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	@ 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	2000025c 	.word	0x2000025c
 8004118:	2000023c 	.word	0x2000023c
 800411c:	20000160 	.word	0x20000160
 8004120:	200001f4 	.word	0x200001f4
 8004124:	2000015c 	.word	0x2000015c
 8004128:	20000248 	.word	0x20000248

0800412c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004134:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <vTaskInternalSetTimeOutState+0x28>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <vTaskInternalSetTimeOutState+0x2c>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004144:	20e7      	movs	r0, #231	@ 0xe7
 8004146:	f002 fb03 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	2000024c 	.word	0x2000024c
 8004158:	20000238 	.word	0x20000238

0800415c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	613b      	str	r3, [r7, #16]
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10b      	bne.n	80041a2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	60fb      	str	r3, [r7, #12]
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	e7fd      	b.n	800419e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80041a2:	f000 fe7f 	bl	8004ea4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80041a6:	4b21      	ldr	r3, [pc, #132]	@ (800422c <xTaskCheckForTimeOut+0xd0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d102      	bne.n	80041c6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80041c0:	2300      	movs	r3, #0
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e026      	b.n	8004214 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <xTaskCheckForTimeOut+0xd4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d00a      	beq.n	80041e8 <xTaskCheckForTimeOut+0x8c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d305      	bcc.n	80041e8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e015      	b.n	8004214 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20b      	bcs.n	800420a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1ad2      	subs	r2, r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff94 	bl	800412c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	e004      	b.n	8004214 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004214:	f000 fe78 	bl	8004f08 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4619      	mov	r1, r3
 800421c:	20e8      	movs	r0, #232	@ 0xe8
 800421e:	f002 fad3 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004222:	69fb      	ldr	r3, [r7, #28]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000238 	.word	0x20000238
 8004230:	2000024c 	.word	0x2000024c

08004234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <vTaskMissedYield+0x14>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800423e:	20e9      	movs	r0, #233	@ 0xe9
 8004240:	f002 fa86 	bl	8006750 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004244:	bf00      	nop
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000248 	.word	0x20000248

0800424c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004254:	f000 f852 	bl	80042fc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <prvIdleTask+0x28>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d9f9      	bls.n	8004254 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <prvIdleTask+0x2c>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004270:	e7f0      	b.n	8004254 <prvIdleTask+0x8>
 8004272:	bf00      	nop
 8004274:	20000160 	.word	0x20000160
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	e00c      	b.n	80042a2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <prvInitialiseTaskLists+0x60>)
 8004294:	4413      	add	r3, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fb90 	bl	80029bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d9ef      	bls.n	8004288 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80042a8:	480d      	ldr	r0, [pc, #52]	@ (80042e0 <prvInitialiseTaskLists+0x64>)
 80042aa:	f7fe fb87 	bl	80029bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80042ae:	480d      	ldr	r0, [pc, #52]	@ (80042e4 <prvInitialiseTaskLists+0x68>)
 80042b0:	f7fe fb84 	bl	80029bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80042b4:	480c      	ldr	r0, [pc, #48]	@ (80042e8 <prvInitialiseTaskLists+0x6c>)
 80042b6:	f7fe fb81 	bl	80029bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80042ba:	480c      	ldr	r0, [pc, #48]	@ (80042ec <prvInitialiseTaskLists+0x70>)
 80042bc:	f7fe fb7e 	bl	80029bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80042c0:	480b      	ldr	r0, [pc, #44]	@ (80042f0 <prvInitialiseTaskLists+0x74>)
 80042c2:	f7fe fb7b 	bl	80029bc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	@ (80042f4 <prvInitialiseTaskLists+0x78>)
 80042c8:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <prvInitialiseTaskLists+0x64>)
 80042ca:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042cc:	4b0a      	ldr	r3, [pc, #40]	@ (80042f8 <prvInitialiseTaskLists+0x7c>)
 80042ce:	4a05      	ldr	r2, [pc, #20]	@ (80042e4 <prvInitialiseTaskLists+0x68>)
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000160 	.word	0x20000160
 80042e0:	200001c4 	.word	0x200001c4
 80042e4:	200001d8 	.word	0x200001d8
 80042e8:	200001f4 	.word	0x200001f4
 80042ec:	20000208 	.word	0x20000208
 80042f0:	20000220 	.word	0x20000220
 80042f4:	200001ec 	.word	0x200001ec
 80042f8:	200001f0 	.word	0x200001f0

080042fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004302:	e019      	b.n	8004338 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004304:	f000 fdce 	bl	8004ea4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004308:	4b10      	ldr	r3, [pc, #64]	@ (800434c <prvCheckTasksWaitingTermination+0x50>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe fbbd 	bl	8002a94 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <prvCheckTasksWaitingTermination+0x54>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	4a0b      	ldr	r2, [pc, #44]	@ (8004350 <prvCheckTasksWaitingTermination+0x54>)
 8004322:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <prvCheckTasksWaitingTermination+0x58>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3b01      	subs	r3, #1
 800432a:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <prvCheckTasksWaitingTermination+0x58>)
 800432c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800432e:	f000 fdeb 	bl	8004f08 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f810 	bl	8004358 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <prvCheckTasksWaitingTermination+0x58>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e1      	bne.n	8004304 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000208 	.word	0x20000208
 8004350:	20000234 	.word	0x20000234
 8004354:	2000021c 	.word	0x2000021c

08004358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fffd 	bl	8005364 <vPortFree>
            vPortFree( pxTCB );
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fffa 	bl	8005364 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004370:	bf00      	nop
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800437c:	4b0a      	ldr	r3, [pc, #40]	@ (80043a8 <prvResetNextTaskUnblockTime+0x30>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d104      	bne.n	8004390 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <prvResetNextTaskUnblockTime+0x34>)
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800438e:	e005      	b.n	800439c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004390:	4b05      	ldr	r3, [pc, #20]	@ (80043a8 <prvResetNextTaskUnblockTime+0x30>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <prvResetNextTaskUnblockTime+0x34>)
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	200001ec 	.word	0x200001ec
 80043ac:	20000254 	.word	0x20000254

080043b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <xTaskGetSchedulerState+0x3c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80043be:	2301      	movs	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	e008      	b.n	80043d6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80043c4:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <xTaskGetSchedulerState+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80043cc:	2302      	movs	r3, #2
 80043ce:	607b      	str	r3, [r7, #4]
 80043d0:	e001      	b.n	80043d6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	20f5      	movs	r0, #245	@ 0xf5
 80043dc:	f002 f9f4 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80043e0:	687b      	ldr	r3, [r7, #4]
    }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000240 	.word	0x20000240
 80043f0:	2000025c 	.word	0x2000025c

080043f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8094 	beq.w	8004534 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800440c:	4b4e      	ldr	r3, [pc, #312]	@ (8004548 <xTaskPriorityDisinherit+0x154>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	429a      	cmp	r2, r3
 8004414:	d00b      	beq.n	800442e <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	613b      	str	r3, [r7, #16]
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10b      	bne.n	800444e <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	60fb      	str	r3, [r7, #12]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004460:	429a      	cmp	r2, r3
 8004462:	d067      	beq.n	8004534 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d163      	bne.n	8004534 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe fb0f 	bl	8002a94 <uxListRemove>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	2201      	movs	r2, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43da      	mvns	r2, r3
 8004488:	4b30      	ldr	r3, [pc, #192]	@ (800454c <xTaskPriorityDisinherit+0x158>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4013      	ands	r3, r2
 800448e:	4a2f      	ldr	r2, [pc, #188]	@ (800454c <xTaskPriorityDisinherit+0x158>)
 8004490:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449e:	f1c3 0205 	rsb	r2, r3, #5
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f002 fa85 	bl	80069b8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	4b25      	ldr	r3, [pc, #148]	@ (800454c <xTaskPriorityDisinherit+0x158>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	4a23      	ldr	r2, [pc, #140]	@ (800454c <xTaskPriorityDisinherit+0x158>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	4922      	ldr	r1, [pc, #136]	@ (8004550 <xTaskPriorityDisinherit+0x15c>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	3204      	adds	r2, #4
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1d1a      	adds	r2, r3, #4
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <xTaskPriorityDisinherit+0x15c>)
 8004504:	441a      	add	r2, r3
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	4910      	ldr	r1, [pc, #64]	@ (8004550 <xTaskPriorityDisinherit+0x15c>)
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004520:	1c59      	adds	r1, r3, #1
 8004522:	480b      	ldr	r0, [pc, #44]	@ (8004550 <xTaskPriorityDisinherit+0x15c>)
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4403      	add	r3, r0
 800452e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004530:	2301      	movs	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4619      	mov	r1, r3
 8004538:	20f7      	movs	r0, #247	@ 0xf7
 800453a:	f002 f945 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800453e:	69fb      	ldr	r3, [r7, #28]
    }
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000015c 	.word	0x2000015c
 800454c:	2000023c 	.word	0x2000023c
 8004550:	20000160 	.word	0x20000160

08004554 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800455e:	4b3d      	ldr	r3, [pc, #244]	@ (8004654 <prvAddCurrentTaskToDelayedList+0x100>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004564:	4b3c      	ldr	r3, [pc, #240]	@ (8004658 <prvAddCurrentTaskToDelayedList+0x104>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800456a:	4b3c      	ldr	r3, [pc, #240]	@ (800465c <prvAddCurrentTaskToDelayedList+0x108>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fa8c 	bl	8002a94 <uxListRemove>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004582:	4b37      	ldr	r3, [pc, #220]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	4b34      	ldr	r3, [pc, #208]	@ (8004664 <prvAddCurrentTaskToDelayedList+0x110>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4013      	ands	r3, r2
 8004596:	4a33      	ldr	r2, [pc, #204]	@ (8004664 <prvAddCurrentTaskToDelayedList+0x110>)
 8004598:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d124      	bne.n	80045ec <prvAddCurrentTaskToDelayedList+0x98>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d021      	beq.n	80045ec <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x114>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	6892      	ldr	r2, [r2, #8]
 80045be:	60da      	str	r2, [r3, #12]
 80045c0:	4b27      	ldr	r3, [pc, #156]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	3204      	adds	r2, #4
 80045ca:	605a      	str	r2, [r3, #4]
 80045cc:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]
 80045d6:	4b22      	ldr	r3, [pc, #136]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a23      	ldr	r2, [pc, #140]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x114>)
 80045dc:	615a      	str	r2, [r3, #20]
 80045de:	4b22      	ldr	r3, [pc, #136]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x114>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a20      	ldr	r2, [pc, #128]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x114>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80045ea:	e02e      	b.n	800464a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	429a      	cmp	r2, r3
 8004602:	d20d      	bcs.n	8004620 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004604:	4b16      	ldr	r3, [pc, #88]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2104      	movs	r1, #4
 800460a:	4618      	mov	r0, r3
 800460c:	f002 fa16 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004610:	4b13      	ldr	r3, [pc, #76]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3304      	adds	r3, #4
 8004616:	4619      	mov	r1, r3
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f7fe fa00 	bl	8002a1e <vListInsert>
}
 800461e:	e014      	b.n	800464a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004620:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2104      	movs	r1, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f002 fa08 	bl	8006a3c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x10c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	69b8      	ldr	r0, [r7, #24]
 8004636:	f7fe f9f2 	bl	8002a1e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800463a:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <prvAddCurrentTaskToDelayedList+0x118>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	429a      	cmp	r2, r3
 8004642:	d202      	bcs.n	800464a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004644:	4a09      	ldr	r2, [pc, #36]	@ (800466c <prvAddCurrentTaskToDelayedList+0x118>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6013      	str	r3, [r2, #0]
}
 800464a:	bf00      	nop
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000238 	.word	0x20000238
 8004658:	200001ec 	.word	0x200001ec
 800465c:	200001f0 	.word	0x200001f0
 8004660:	2000015c 	.word	0x2000015c
 8004664:	2000023c 	.word	0x2000023c
 8004668:	20000220 	.word	0x20000220
 800466c:	20000254 	.word	0x20000254

08004670 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800467a:	f000 fa5b 	bl	8004b34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <xTimerCreateTimerTask+0x64>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004686:	4b14      	ldr	r3, [pc, #80]	@ (80046d8 <xTimerCreateTimerTask+0x68>)
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	2302      	movs	r3, #2
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004694:	4911      	ldr	r1, [pc, #68]	@ (80046dc <xTimerCreateTimerTask+0x6c>)
 8004696:	4812      	ldr	r0, [pc, #72]	@ (80046e0 <xTimerCreateTimerTask+0x70>)
 8004698:	f7fe ff0d 	bl	80034b6 <xTaskCreate>
 800469c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	603b      	str	r3, [r7, #0]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4619      	mov	r1, r3
 80046c0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80046c4:	f002 f880 	bl	80067c8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80046c8:	687b      	ldr	r3, [r7, #4]
    }
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000290 	.word	0x20000290
 80046d8:	20000294 	.word	0x20000294
 80046dc:	08007a00 	.word	0x08007a00
 80046e0:	08004789 	.word	0x08004789

080046e4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80046f0:	e008      	b.n	8004704 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4413      	add	r3, r2
 80046fa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	18d1      	adds	r1, r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f8df 	bl	80048d4 <prvInsertTimerInActiveList>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ea      	bne.n	80046f2 <prvReloadTimer+0xe>
        }
    }
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004732:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <prvProcessExpiredTimer+0x5c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7fe f9a7 	bl	8002a94 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff ffc3 	bl	80046e4 <prvReloadTimer>
 800475e:	e008      	b.n	8004772 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	4798      	blx	r3
    }
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000288 	.word	0x20000288

08004788 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f859 	bl	800484c <prvGetNextExpireTime>
 800479a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4619      	mov	r1, r3
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f805 	bl	80047b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80047a6:	f000 f8d7 	bl	8004958 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047aa:	bf00      	nop
 80047ac:	e7f0      	b.n	8004790 <prvTimerTask+0x8>
	...

080047b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80047ba:	f7ff f88f 	bl	80038dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047be:	f107 0308 	add.w	r3, r7, #8
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 f866 	bl	8004894 <prvSampleTimeNow>
 80047c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d130      	bne.n	8004832 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10a      	bne.n	80047ec <prvProcessTimerOrBlockTask+0x3c>
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d806      	bhi.n	80047ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80047de:	f7ff f88b 	bl	80038f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047e2:	68f9      	ldr	r1, [r7, #12]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ff9f 	bl	8004728 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80047ea:	e024      	b.n	8004836 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d008      	beq.n	8004804 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047f2:	4b13      	ldr	r3, [pc, #76]	@ (8004840 <prvProcessTimerOrBlockTask+0x90>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <prvProcessTimerOrBlockTask+0x50>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <prvProcessTimerOrBlockTask+0x52>
 8004800:	2300      	movs	r3, #0
 8004802:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004804:	4b0f      	ldr	r3, [pc, #60]	@ (8004844 <prvProcessTimerOrBlockTask+0x94>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4619      	mov	r1, r3
 8004812:	f7fe fddd 	bl	80033d0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004816:	f7ff f86f 	bl	80038f8 <xTaskResumeAll>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004820:	4b09      	ldr	r3, [pc, #36]	@ (8004848 <prvProcessTimerOrBlockTask+0x98>)
 8004822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
    }
 8004830:	e001      	b.n	8004836 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004832:	f7ff f861 	bl	80038f8 <xTaskResumeAll>
    }
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	2000028c 	.word	0x2000028c
 8004844:	20000290 	.word	0x20000290
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004854:	4b0e      	ldr	r3, [pc, #56]	@ (8004890 <prvGetNextExpireTime+0x44>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <prvGetNextExpireTime+0x16>
 800485e:	2201      	movs	r2, #1
 8004860:	e000      	b.n	8004864 <prvGetNextExpireTime+0x18>
 8004862:	2200      	movs	r2, #0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <prvGetNextExpireTime+0x44>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e001      	b.n	8004880 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004880:	68fb      	ldr	r3, [r7, #12]
    }
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000288 	.word	0x20000288

08004894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800489c:	f7ff f93e 	bl	8003b1c <xTaskGetTickCount>
 80048a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <prvSampleTimeNow+0x3c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d205      	bcs.n	80048b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80048ac:	f000 f91c 	bl	8004ae8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e002      	b.n	80048be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80048be:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <prvSampleTimeNow+0x3c>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80048c4:	68fb      	ldr	r3, [r7, #12]
    }
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000298 	.word	0x20000298

080048d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d812      	bhi.n	8004920 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e01b      	b.n	8004946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <prvInsertTimerInActiveList+0x7c>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3304      	adds	r3, #4
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f7fe f880 	bl	8002a1e <vListInsert>
 800491e:	e012      	b.n	8004946 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d206      	bcs.n	8004936 <prvInsertTimerInActiveList+0x62>
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e007      	b.n	8004946 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004936:	4b07      	ldr	r3, [pc, #28]	@ (8004954 <prvInsertTimerInActiveList+0x80>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3304      	adds	r3, #4
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fe f86c 	bl	8002a1e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004946:	697b      	ldr	r3, [r7, #20]
    }
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	2000028c 	.word	0x2000028c
 8004954:	20000288 	.word	0x20000288

08004958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004958:	b580      	push	{r7, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800495e:	f107 0308 	add.w	r3, r7, #8
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800496a:	e0a9      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f2c0 80a6 	blt.w	8004ac0 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe f885 	bl	8002a94 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800498a:	1d3b      	adds	r3, r7, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff ff81 	bl	8004894 <prvSampleTimeNow>
 8004992:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3b01      	subs	r3, #1
 8004998:	2b08      	cmp	r3, #8
 800499a:	f200 808e 	bhi.w	8004aba <prvProcessReceivedCommands+0x162>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <prvProcessReceivedCommands+0x4c>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049c9 	.word	0x080049c9
 80049ac:	08004a31 	.word	0x08004a31
 80049b0:	08004a45 	.word	0x08004a45
 80049b4:	08004a91 	.word	0x08004a91
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049c9 	.word	0x080049c9
 80049c0:	08004a31 	.word	0x08004a31
 80049c4:	08004a45 	.word	0x08004a45
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	18d1      	adds	r1, r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	69f8      	ldr	r0, [r7, #28]
 80049e8:	f7ff ff74 	bl	80048d4 <prvInsertTimerInActiveList>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d065      	beq.n	8004abe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	4413      	add	r3, r2
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	69f8      	ldr	r0, [r7, #28]
 8004a0e:	f7ff fe69 	bl	80046e4 <prvReloadTimer>
 8004a12:	e008      	b.n	8004a26 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	69f8      	ldr	r0, [r7, #28]
 8004a2c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004a2e:	e046      	b.n	8004abe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004a42:	e03d      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	617b      	str	r3, [r7, #20]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	18d1      	adds	r1, r2, r3
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	69f8      	ldr	r0, [r7, #28]
 8004a8a:	f7ff ff23 	bl	80048d4 <prvInsertTimerInActiveList>
                        break;
 8004a8e:	e017      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004a9e:	69f8      	ldr	r0, [r7, #28]
 8004aa0:	f000 fc60 	bl	8005364 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004aa4:	e00c      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004ab8:	e002      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004aba:	bf00      	nop
 8004abc:	e000      	b.n	8004ac0 <prvProcessReceivedCommands+0x168>
                        break;
 8004abe:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004ac0:	4b08      	ldr	r3, [pc, #32]	@ (8004ae4 <prvProcessReceivedCommands+0x18c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f107 0108 	add.w	r1, r7, #8
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fa32 	bl	8002f34 <xQueueReceive>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f47f af4a 	bne.w	800496c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3720      	adds	r7, #32
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000290 	.word	0x20000290

08004ae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aee:	e009      	b.n	8004b04 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af0:	4b0e      	ldr	r3, [pc, #56]	@ (8004b2c <prvSwitchTimerLists+0x44>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004afa:	f04f 31ff 	mov.w	r1, #4294967295
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f7ff fe12 	bl	8004728 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <prvSwitchTimerLists+0x44>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <prvSwitchTimerLists+0x44>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004b14:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <prvSwitchTimerLists+0x48>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a04      	ldr	r2, [pc, #16]	@ (8004b2c <prvSwitchTimerLists+0x44>)
 8004b1a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004b1c:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <prvSwitchTimerLists+0x48>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6013      	str	r3, [r2, #0]
    }
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000288 	.word	0x20000288
 8004b30:	2000028c 	.word	0x2000028c

08004b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004b38:	f000 f9b4 	bl	8004ea4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004b3c:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <prvCheckForValidListAndQueue+0x54>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11d      	bne.n	8004b80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004b44:	4811      	ldr	r0, [pc, #68]	@ (8004b8c <prvCheckForValidListAndQueue+0x58>)
 8004b46:	f7fd ff39 	bl	80029bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004b4a:	4811      	ldr	r0, [pc, #68]	@ (8004b90 <prvCheckForValidListAndQueue+0x5c>)
 8004b4c:	f7fd ff36 	bl	80029bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b50:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <prvCheckForValidListAndQueue+0x60>)
 8004b52:	4a0e      	ldr	r2, [pc, #56]	@ (8004b8c <prvCheckForValidListAndQueue+0x58>)
 8004b54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b56:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <prvCheckForValidListAndQueue+0x64>)
 8004b58:	4a0d      	ldr	r2, [pc, #52]	@ (8004b90 <prvCheckForValidListAndQueue+0x5c>)
 8004b5a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	210c      	movs	r1, #12
 8004b60:	200a      	movs	r0, #10
 8004b62:	f7fe f85d 	bl	8002c20 <xQueueGenericCreate>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <prvCheckForValidListAndQueue+0x54>)
 8004b6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004b6c:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <prvCheckForValidListAndQueue+0x54>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <prvCheckForValidListAndQueue+0x54>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4908      	ldr	r1, [pc, #32]	@ (8004b9c <prvCheckForValidListAndQueue+0x68>)
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fbd8 	bl	8003330 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b80:	f000 f9c2 	bl	8004f08 <vPortExitCritical>
    }
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000290 	.word	0x20000290
 8004b8c:	20000260 	.word	0x20000260
 8004b90:	20000274 	.word	0x20000274
 8004b94:	20000288 	.word	0x20000288
 8004b98:	2000028c 	.word	0x2000028c
 8004b9c:	08007a08 	.word	0x08007a08

08004ba0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b04      	subs	r3, #4
 8004bbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f023 0201 	bic.w	r2, r3, #1
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b04      	subs	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <pxPortInitialiseStack+0x64>)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b14      	subs	r3, #20
 8004bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3b04      	subs	r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f06f 0202 	mvn.w	r2, #2
 8004bee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3b20      	subs	r3, #32
 8004bf4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	08004c09 	.word	0x08004c09

08004c08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004c12:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <prvTaskExitError+0x58>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d00b      	beq.n	8004c34 <prvTaskExitError+0x2c>
    __asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60fb      	str	r3, [r7, #12]
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	e7fd      	b.n	8004c30 <prvTaskExitError+0x28>
    __asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60bb      	str	r3, [r7, #8]
}
 8004c46:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004c48:	bf00      	nop
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0fc      	beq.n	8004c4a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000010 	.word	0x20000010
	...

08004c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c70:	4b07      	ldr	r3, [pc, #28]	@ (8004c90 <pxCurrentTCBConst2>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	f380 8809 	msr	PSP, r0
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8811 	msr	BASEPRI, r0
 8004c8a:	4770      	bx	lr
 8004c8c:	f3af 8000 	nop.w

08004c90 <pxCurrentTCBConst2>:
 8004c90:	2000015c 	.word	0x2000015c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c98:	4808      	ldr	r0, [pc, #32]	@ (8004cbc <prvPortStartFirstTask+0x24>)
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f380 8808 	msr	MSP, r0
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8814 	msr	CONTROL, r0
 8004caa:	b662      	cpsie	i
 8004cac:	b661      	cpsie	f
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	df00      	svc	0
 8004cb8:	bf00      	nop
 8004cba:	0000      	.short	0x0000
 8004cbc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop

08004cc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08c      	sub	sp, #48	@ 0x30
 8004cc8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cca:	4b69      	ldr	r3, [pc, #420]	@ (8004e70 <xPortStartScheduler+0x1ac>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a69      	ldr	r2, [pc, #420]	@ (8004e74 <xPortStartScheduler+0x1b0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d10b      	bne.n	8004cec <xPortStartScheduler+0x28>
    __asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ce6:	bf00      	nop
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cec:	4b60      	ldr	r3, [pc, #384]	@ (8004e70 <xPortStartScheduler+0x1ac>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a61      	ldr	r2, [pc, #388]	@ (8004e78 <xPortStartScheduler+0x1b4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d10b      	bne.n	8004d0e <xPortStartScheduler+0x4a>
    __asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	623b      	str	r3, [r7, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e7c <xPortStartScheduler+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d16:	332c      	adds	r3, #44	@ 0x2c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a59      	ldr	r2, [pc, #356]	@ (8004e80 <xPortStartScheduler+0x1bc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00b      	beq.n	8004d38 <xPortStartScheduler+0x74>
    __asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	61fb      	str	r3, [r7, #28]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d3a:	3338      	adds	r3, #56	@ 0x38
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a51      	ldr	r2, [pc, #324]	@ (8004e84 <xPortStartScheduler+0x1c0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <xPortStartScheduler+0x98>
    __asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	61bb      	str	r3, [r7, #24]
}
 8004d56:	bf00      	nop
 8004d58:	bf00      	nop
 8004d5a:	e7fd      	b.n	8004d58 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d60:	4b49      	ldr	r3, [pc, #292]	@ (8004e88 <xPortStartScheduler+0x1c4>)
 8004d62:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	22ff      	movs	r2, #255	@ 0xff
 8004d70:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <xPortStartScheduler+0x1c8>)
 8004d86:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004d88:	4b40      	ldr	r3, [pc, #256]	@ (8004e8c <xPortStartScheduler+0x1c8>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xPortStartScheduler+0xe4>
    __asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	617b      	str	r3, [r7, #20]
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <xPortStartScheduler+0x11a>
    __asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	613b      	str	r3, [r7, #16]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d0f1      	beq.n	8004dce <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d103      	bne.n	8004df8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004df0:	4b27      	ldr	r3, [pc, #156]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e004      	b.n	8004e02 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f1c3 0307 	rsb	r3, r3, #7
 8004dfe:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004e00:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e02:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	4a21      	ldr	r2, [pc, #132]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004e0a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e0c:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e14:	4a1e      	ldr	r2, [pc, #120]	@ (8004e90 <xPortStartScheduler+0x1cc>)
 8004e16:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e20:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <xPortStartScheduler+0x1d0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <xPortStartScheduler+0x1d0>)
 8004e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e2a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e2c:	4b19      	ldr	r3, [pc, #100]	@ (8004e94 <xPortStartScheduler+0x1d0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a18      	ldr	r2, [pc, #96]	@ (8004e94 <xPortStartScheduler+0x1d0>)
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e36:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004e38:	4b17      	ldr	r3, [pc, #92]	@ (8004e98 <xPortStartScheduler+0x1d4>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e3e:	f000 f8ed 	bl	800501c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e42:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <xPortStartScheduler+0x1d8>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004e48:	f000 f90c 	bl	8005064 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e4c:	4b14      	ldr	r3, [pc, #80]	@ (8004ea0 <xPortStartScheduler+0x1dc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a13      	ldr	r2, [pc, #76]	@ (8004ea0 <xPortStartScheduler+0x1dc>)
 8004e52:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004e58:	f7ff ff1e 	bl	8004c98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e5c:	f7fe ffa8 	bl	8003db0 <vTaskSwitchContext>
    prvTaskExitError();
 8004e60:	f7ff fed2 	bl	8004c08 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3730      	adds	r7, #48	@ 0x30
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	e000ed00 	.word	0xe000ed00
 8004e74:	410fc271 	.word	0x410fc271
 8004e78:	410fc270 	.word	0x410fc270
 8004e7c:	e000ed08 	.word	0xe000ed08
 8004e80:	08004c71 	.word	0x08004c71
 8004e84:	08004f61 	.word	0x08004f61
 8004e88:	e000e400 	.word	0xe000e400
 8004e8c:	2000029c 	.word	0x2000029c
 8004e90:	200002a0 	.word	0x200002a0
 8004e94:	e000ed20 	.word	0xe000ed20
 8004e98:	e000ed1c 	.word	0xe000ed1c
 8004e9c:	20000010 	.word	0x20000010
 8004ea0:	e000ef34 	.word	0xe000ef34

08004ea4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
    __asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
}
 8004ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <vPortEnterCritical+0x5c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f00 <vPortEnterCritical+0x5c>)
 8004ec6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f00 <vPortEnterCritical+0x5c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d110      	bne.n	8004ef2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f04 <vPortEnterCritical+0x60>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00b      	beq.n	8004ef2 <vPortEnterCritical+0x4e>
    __asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <vPortEnterCritical+0x4a>
    }
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000010 	.word	0x20000010
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f0e:	4b12      	ldr	r3, [pc, #72]	@ (8004f58 <vPortExitCritical+0x50>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <vPortExitCritical+0x26>
    __asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	607b      	str	r3, [r7, #4]
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	e7fd      	b.n	8004f2a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f58 <vPortExitCritical+0x50>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <vPortExitCritical+0x50>)
 8004f36:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f38:	4b07      	ldr	r3, [pc, #28]	@ (8004f58 <vPortExitCritical+0x50>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <vPortExitCritical+0x44>
 8004f40:	2300      	movs	r3, #0
 8004f42:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004f4a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	20000010 	.word	0x20000010
 8004f5c:	00000000 	.word	0x00000000

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4b15      	ldr	r3, [pc, #84]	@ (8004fc0 <pxCurrentTCBConst>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f01e 0f10 	tst.w	lr, #16
 8004f70:	bf08      	it	eq
 8004f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f84:	f380 8811 	msr	BASEPRI, r0
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f7fe ff0e 	bl	8003db0 <vTaskSwitchContext>
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f380 8811 	msr	BASEPRI, r0
 8004f9c:	bc09      	pop	{r0, r3}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa6:	f01e 0f10 	tst.w	lr, #16
 8004faa:	bf08      	it	eq
 8004fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fb0:	f380 8809 	msr	PSP, r0
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	2000015c 	.word	0x2000015c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
    __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
}
 8004fe0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004fe2:	f001 fb3b 	bl	800665c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004fe6:	f7fe fdc1 	bl	8003b6c <xTaskIncrementTick>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d006      	beq.n	8004ffe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004ff0:	f001 fb92 	bl	8006718 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ff4:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <SysTick_Handler+0x50>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e001      	b.n	8005002 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004ffe:	f001 fb6f 	bl	80066e0 <SEGGER_SYSVIEW_RecordExitISR>
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f383 8811 	msr	BASEPRI, r3
}
 800500c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <vPortSetupTimerInterrupt+0x38>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <vPortSetupTimerInterrupt+0x3c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <vPortSetupTimerInterrupt+0x40>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vPortSetupTimerInterrupt+0x44>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e010 	.word	0xe000e010
 8005054:	e000e018 	.word	0xe000e018
 8005058:	20000000 	.word	0x20000000
 800505c:	10624dd3 	.word	0x10624dd3
 8005060:	e000e014 	.word	0xe000e014

08005064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005074 <vPortEnableVFP+0x10>
 8005068:	6801      	ldr	r1, [r0, #0]
 800506a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800506e:	6001      	str	r1, [r0, #0]
 8005070:	4770      	bx	lr
 8005072:	0000      	.short	0x0000
 8005074:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop

0800507c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005082:	f3ef 8305 	mrs	r3, IPSR
 8005086:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b0f      	cmp	r3, #15
 800508c:	d915      	bls.n	80050ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <vPortValidateInterruptPriority+0x74>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005098:	4b16      	ldr	r3, [pc, #88]	@ (80050f4 <vPortValidateInterruptPriority+0x78>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	7afa      	ldrb	r2, [r7, #11]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d20b      	bcs.n	80050ba <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop
 80050b8:	e7fd      	b.n	80050b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050ba:	4b0f      	ldr	r3, [pc, #60]	@ (80050f8 <vPortValidateInterruptPriority+0x7c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050c2:	4b0e      	ldr	r3, [pc, #56]	@ (80050fc <vPortValidateInterruptPriority+0x80>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d90b      	bls.n	80050e2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	603b      	str	r3, [r7, #0]
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	e7fd      	b.n	80050de <vPortValidateInterruptPriority+0x62>
    }
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000e3f0 	.word	0xe000e3f0
 80050f4:	2000029c 	.word	0x2000029c
 80050f8:	e000ed0c 	.word	0xe000ed0c
 80050fc:	200002a0 	.word	0x200002a0

08005100 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	@ 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d022      	beq.n	8005158 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005112:	2308      	movs	r3, #8
 8005114:	43db      	mvns	r3, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	d81b      	bhi.n	8005154 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800511c:	2208      	movs	r2, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	2b00      	cmp	r3, #0
 800512c:	d014      	beq.n	8005158 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	f1c3 0308 	rsb	r3, r3, #8
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	43db      	mvns	r3, r3
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d804      	bhi.n	800514e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	4413      	add	r3, r2
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	e004      	b.n	8005158 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	e001      	b.n	8005158 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005158:	f7fe fbc0 	bl	80038dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800515c:	4b7a      	ldr	r3, [pc, #488]	@ (8005348 <pvPortMalloc+0x248>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005164:	f000 f978 	bl	8005458 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f2c0 80d3 	blt.w	8005316 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80cf 	beq.w	8005316 <pvPortMalloc+0x216>
 8005178:	4b74      	ldr	r3, [pc, #464]	@ (800534c <pvPortMalloc+0x24c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	f200 80c9 	bhi.w	8005316 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005184:	4b72      	ldr	r3, [pc, #456]	@ (8005350 <pvPortMalloc+0x250>)
 8005186:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005188:	4b71      	ldr	r3, [pc, #452]	@ (8005350 <pvPortMalloc+0x250>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	4a70      	ldr	r2, [pc, #448]	@ (8005354 <pvPortMalloc+0x254>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d305      	bcc.n	80051a2 <pvPortMalloc+0xa2>
 8005196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005198:	4a6f      	ldr	r2, [pc, #444]	@ (8005358 <pvPortMalloc+0x258>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d801      	bhi.n	80051a2 <pvPortMalloc+0xa2>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <pvPortMalloc+0xa4>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d129      	bne.n	80051fc <pvPortMalloc+0xfc>
    __asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	623b      	str	r3, [r7, #32]
}
 80051ba:	bf00      	nop
 80051bc:	bf00      	nop
 80051be:	e7fd      	b.n	80051bc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80051c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80051ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051cc:	4a61      	ldr	r2, [pc, #388]	@ (8005354 <pvPortMalloc+0x254>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d305      	bcc.n	80051de <pvPortMalloc+0xde>
 80051d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d4:	4a60      	ldr	r2, [pc, #384]	@ (8005358 <pvPortMalloc+0x258>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d801      	bhi.n	80051de <pvPortMalloc+0xde>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <pvPortMalloc+0xe0>
 80051de:	2300      	movs	r3, #0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10b      	bne.n	80051fc <pvPortMalloc+0xfc>
    __asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80051fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	429a      	cmp	r2, r3
 8005204:	d903      	bls.n	800520e <pvPortMalloc+0x10e>
 8005206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d8      	bne.n	80051c0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800520e:	4b4e      	ldr	r3, [pc, #312]	@ (8005348 <pvPortMalloc+0x248>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005214:	429a      	cmp	r2, r3
 8005216:	d07e      	beq.n	8005316 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2208      	movs	r2, #8
 800521e:	4413      	add	r3, r2
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	4a4b      	ldr	r2, [pc, #300]	@ (8005354 <pvPortMalloc+0x254>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d305      	bcc.n	8005236 <pvPortMalloc+0x136>
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	4a4a      	ldr	r2, [pc, #296]	@ (8005358 <pvPortMalloc+0x258>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d801      	bhi.n	8005236 <pvPortMalloc+0x136>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <pvPortMalloc+0x138>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <pvPortMalloc+0x154>
    __asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	61bb      	str	r3, [r7, #24]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d90b      	bls.n	800527e <pvPortMalloc+0x17e>
    __asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	617b      	str	r3, [r7, #20]
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800527e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	1ad2      	subs	r2, r2, r3
 8005286:	2308      	movs	r3, #8
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	429a      	cmp	r2, r3
 800528c:	d924      	bls.n	80052d8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800528e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00b      	beq.n	80052b8 <pvPortMalloc+0x1b8>
    __asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	613b      	str	r3, [r7, #16]
}
 80052b2:	bf00      	nop
 80052b4:	bf00      	nop
 80052b6:	e7fd      	b.n	80052b4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80052c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052d8:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <pvPortMalloc+0x24c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <pvPortMalloc+0x24c>)
 80052e4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <pvPortMalloc+0x24c>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b1c      	ldr	r3, [pc, #112]	@ (800535c <pvPortMalloc+0x25c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d203      	bcs.n	80052fa <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052f2:	4b16      	ldr	r3, [pc, #88]	@ (800534c <pvPortMalloc+0x24c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a19      	ldr	r2, [pc, #100]	@ (800535c <pvPortMalloc+0x25c>)
 80052f8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80052fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005304:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800530c:	4b14      	ldr	r3, [pc, #80]	@ (8005360 <pvPortMalloc+0x260>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4a13      	ldr	r2, [pc, #76]	@ (8005360 <pvPortMalloc+0x260>)
 8005314:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005316:	f7fe faef 	bl	80038f8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <pvPortMalloc+0x23c>
    __asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60fb      	str	r3, [r7, #12]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <pvPortMalloc+0x238>
    return pvReturn;
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800533e:	4618      	mov	r0, r3
 8005340:	3738      	adds	r7, #56	@ 0x38
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20012eac 	.word	0x20012eac
 800534c:	20012eb0 	.word	0x20012eb0
 8005350:	20012ea4 	.word	0x20012ea4
 8005354:	200002a4 	.word	0x200002a4
 8005358:	20012ea3 	.word	0x20012ea3
 800535c:	20012eb4 	.word	0x20012eb4
 8005360:	20012eb8 	.word	0x20012eb8

08005364 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d064      	beq.n	8005440 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005376:	2308      	movs	r3, #8
 8005378:	425b      	negs	r3, r3
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	4a30      	ldr	r2, [pc, #192]	@ (8005448 <vPortFree+0xe4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d305      	bcc.n	8005398 <vPortFree+0x34>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	4a2f      	ldr	r2, [pc, #188]	@ (800544c <vPortFree+0xe8>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d801      	bhi.n	8005398 <vPortFree+0x34>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <vPortFree+0x36>
 8005398:	2300      	movs	r3, #0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10b      	bne.n	80053b6 <vPortFree+0x52>
    __asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	617b      	str	r3, [r7, #20]
}
 80053b0:	bf00      	nop
 80053b2:	bf00      	nop
 80053b4:	e7fd      	b.n	80053b2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db0b      	blt.n	80053d6 <vPortFree+0x72>
    __asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	613b      	str	r3, [r7, #16]
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	e7fd      	b.n	80053d2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <vPortFree+0x92>
    __asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60fb      	str	r3, [r7, #12]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0fdb      	lsrs	r3, r3, #31
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01c      	beq.n	8005440 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d118      	bne.n	8005440 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800541a:	f7fe fa5f 	bl	80038dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <vPortFree+0xec>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4413      	add	r3, r2
 8005428:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <vPortFree+0xec>)
 800542a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800542c:	69b8      	ldr	r0, [r7, #24]
 800542e:	f000 f86d 	bl	800550c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <vPortFree+0xf0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a06      	ldr	r2, [pc, #24]	@ (8005454 <vPortFree+0xf0>)
 800543a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800543c:	f7fe fa5c 	bl	80038f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005440:	bf00      	nop
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200002a4 	.word	0x200002a4
 800544c:	20012ea3 	.word	0x20012ea3
 8005450:	20012eb0 	.word	0x20012eb0
 8005454:	20012ebc 	.word	0x20012ebc

08005458 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800545e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005462:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005464:	4b24      	ldr	r3, [pc, #144]	@ (80054f8 <prvHeapInit+0xa0>)
 8005466:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00c      	beq.n	800548c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3307      	adds	r3, #7
 8005476:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <prvHeapInit+0xa0>)
 8005488:	4413      	add	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <prvHeapInit+0xa4>)
 8005490:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005492:	4b1a      	ldr	r3, [pc, #104]	@ (80054fc <prvHeapInit+0xa4>)
 8005494:	2200      	movs	r2, #0
 8005496:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4413      	add	r3, r2
 800549e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80054a0:	2208      	movs	r2, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a13      	ldr	r2, [pc, #76]	@ (8005500 <prvHeapInit+0xa8>)
 80054b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80054b6:	4b12      	ldr	r3, [pc, #72]	@ (8005500 <prvHeapInit+0xa8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2200      	movs	r2, #0
 80054bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80054be:	4b10      	ldr	r3, [pc, #64]	@ (8005500 <prvHeapInit+0xa8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80054d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <prvHeapInit+0xa8>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a08      	ldr	r2, [pc, #32]	@ (8005504 <prvHeapInit+0xac>)
 80054e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	4a07      	ldr	r2, [pc, #28]	@ (8005508 <prvHeapInit+0xb0>)
 80054ea:	6013      	str	r3, [r2, #0]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	200002a4 	.word	0x200002a4
 80054fc:	20012ea4 	.word	0x20012ea4
 8005500:	20012eac 	.word	0x20012eac
 8005504:	20012eb4 	.word	0x20012eb4
 8005508:	20012eb0 	.word	0x20012eb0

0800550c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005514:	4b36      	ldr	r3, [pc, #216]	@ (80055f0 <prvInsertBlockIntoFreeList+0xe4>)
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e002      	b.n	8005520 <prvInsertBlockIntoFreeList+0x14>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	429a      	cmp	r2, r3
 8005528:	d8f7      	bhi.n	800551a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	4a30      	ldr	r2, [pc, #192]	@ (80055f0 <prvInsertBlockIntoFreeList+0xe4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	4a2f      	ldr	r2, [pc, #188]	@ (80055f4 <prvInsertBlockIntoFreeList+0xe8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d305      	bcc.n	8005546 <prvInsertBlockIntoFreeList+0x3a>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4a2e      	ldr	r2, [pc, #184]	@ (80055f8 <prvInsertBlockIntoFreeList+0xec>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d801      	bhi.n	8005546 <prvInsertBlockIntoFreeList+0x3a>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <prvInsertBlockIntoFreeList+0x3c>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60fb      	str	r3, [r7, #12]
}
 800555e:	bf00      	nop
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4413      	add	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d108      	bne.n	8005588 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	441a      	add	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	441a      	add	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d118      	bne.n	80055ce <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b16      	ldr	r3, [pc, #88]	@ (80055fc <prvInsertBlockIntoFreeList+0xf0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d00d      	beq.n	80055c4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e008      	b.n	80055d6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80055c4:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <prvInsertBlockIntoFreeList+0xf0>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e003      	b.n	80055d6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d002      	beq.n	80055e4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	20012ea4 	.word	0x20012ea4
 80055f4:	200002a4 	.word	0x200002a4
 80055f8:	20012ea3 	.word	0x20012ea3
 80055fc:	20012eac 	.word	0x20012eac

08005600 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005604:	4803      	ldr	r0, [pc, #12]	@ (8005614 <_cbSendSystemDesc+0x14>)
 8005606:	f000 ffd3 	bl	80065b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800560a:	4803      	ldr	r0, [pc, #12]	@ (8005618 <_cbSendSystemDesc+0x18>)
 800560c:	f000 ffd0 	bl	80065b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005610:	bf00      	nop
 8005612:	bd80      	pop	{r7, pc}
 8005614:	08007a10 	.word	0x08007a10
 8005618:	08007a3c 	.word	0x08007a3c

0800561c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005620:	4b06      	ldr	r3, [pc, #24]	@ (800563c <SEGGER_SYSVIEW_Conf+0x20>)
 8005622:	6818      	ldr	r0, [r3, #0]
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <SEGGER_SYSVIEW_Conf+0x20>)
 8005626:	6819      	ldr	r1, [r3, #0]
 8005628:	4b05      	ldr	r3, [pc, #20]	@ (8005640 <SEGGER_SYSVIEW_Conf+0x24>)
 800562a:	4a06      	ldr	r2, [pc, #24]	@ (8005644 <SEGGER_SYSVIEW_Conf+0x28>)
 800562c:	f000 fc46 	bl	8005ebc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005630:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005634:	f000 fc86 	bl	8005f44 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005638:	bf00      	nop
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000000 	.word	0x20000000
 8005640:	08005601 	.word	0x08005601
 8005644:	08007af8 	.word	0x08007af8

08005648 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800564e:	4b26      	ldr	r3, [pc, #152]	@ (80056e8 <_DoInit+0xa0>)
 8005650:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005652:	22a8      	movs	r2, #168	@ 0xa8
 8005654:	2100      	movs	r1, #0
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f001 fcfc 	bl	8007054 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2203      	movs	r2, #3
 8005660:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2203      	movs	r2, #3
 8005666:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4a20      	ldr	r2, [pc, #128]	@ (80056ec <_DoInit+0xa4>)
 800566c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	4a1f      	ldr	r2, [pc, #124]	@ (80056f0 <_DoInit+0xa8>)
 8005672:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800567a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4a16      	ldr	r2, [pc, #88]	@ (80056ec <_DoInit+0xa4>)
 8005692:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <_DoInit+0xac>)
 8005698:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2210      	movs	r2, #16
 800569e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2200      	movs	r2, #0
 80056a4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2200      	movs	r2, #0
 80056aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2200      	movs	r2, #0
 80056b0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80056b2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80056b6:	2300      	movs	r3, #0
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	e00c      	b.n	80056d6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f1c3 030f 	rsb	r3, r3, #15
 80056c2:	4a0d      	ldr	r2, [pc, #52]	@ (80056f8 <_DoInit+0xb0>)
 80056c4:	5cd1      	ldrb	r1, [r2, r3]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	460a      	mov	r2, r1
 80056ce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3301      	adds	r3, #1
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b0f      	cmp	r3, #15
 80056da:	d9ef      	bls.n	80056bc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80056dc:	f3bf 8f5f 	dmb	sy
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20012ec0 	.word	0x20012ec0
 80056ec:	08007a4c 	.word	0x08007a4c
 80056f0:	20012f68 	.word	0x20012f68
 80056f4:	20013368 	.word	0x20013368
 80056f8:	08007ad8 	.word	0x08007ad8

080056fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	@ 0x30
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005708:	4b3e      	ldr	r3, [pc, #248]	@ (8005804 <SEGGER_RTT_ReadNoLock+0x108>)
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b53      	cmp	r3, #83	@ 0x53
 8005714:	d001      	beq.n	800571a <SEGGER_RTT_ReadNoLock+0x1e>
 8005716:	f7ff ff97 	bl	8005648 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4613      	mov	r3, r2
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	4413      	add	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	3360      	adds	r3, #96	@ 0x60
 8005726:	4a37      	ldr	r2, [pc, #220]	@ (8005804 <SEGGER_RTT_ReadNoLock+0x108>)
 8005728:	4413      	add	r3, r2
 800572a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	429a      	cmp	r2, r3
 8005746:	d92b      	bls.n	80057a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4293      	cmp	r3, r2
 8005758:	bf28      	it	cs
 800575a:	4613      	movcs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005764:	4413      	add	r3, r2
 8005766:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	6939      	ldr	r1, [r7, #16]
 800576c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800576e:	f001 fca5 	bl	80070bc <memcpy>
    NumBytesRead += NumBytesRem;
 8005772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	4413      	add	r3, r2
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800577a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800578a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005798:	429a      	cmp	r2, r3
 800579a:	d101      	bne.n	80057a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800579c:	2300      	movs	r3, #0
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bf28      	it	cs
 80057b0:	4613      	movcs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d019      	beq.n	80057ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	4413      	add	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	6939      	ldr	r1, [r7, #16]
 80057c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ca:	f001 fc77 	bl	80070bc <memcpy>
    NumBytesRead += NumBytesRem;
 80057ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
 80057d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3730      	adds	r7, #48	@ 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20012ec0 	.word	0x20012ec0

08005808 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005816:	4b3d      	ldr	r3, [pc, #244]	@ (800590c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b53      	cmp	r3, #83	@ 0x53
 8005822:	d001      	beq.n	8005828 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005824:	f7ff ff10 	bl	8005648 <_DoInit>
  SEGGER_RTT_LOCK();
 8005828:	f3ef 8311 	mrs	r3, BASEPRI
 800582c:	f04f 0120 	mov.w	r1, #32
 8005830:	f381 8811 	msr	BASEPRI, r1
 8005834:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005836:	4b35      	ldr	r3, [pc, #212]	@ (800590c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005838:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800583e:	6939      	ldr	r1, [r7, #16]
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	3304      	adds	r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	429a      	cmp	r2, r3
 8005864:	dbeb      	blt.n	800583e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005866:	e000      	b.n	800586a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005868:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	429a      	cmp	r2, r3
 8005872:	da3f      	bge.n	80058f4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005888:	6939      	ldr	r1, [r7, #16]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	440b      	add	r3, r1
 8005898:	3304      	adds	r3, #4
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	3320      	adds	r3, #32
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058b2:	6939      	ldr	r1, [r7, #16]
 80058b4:	69fa      	ldr	r2, [r7, #28]
 80058b6:	4613      	mov	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	440b      	add	r3, r1
 80058c0:	3328      	adds	r3, #40	@ 0x28
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80058c6:	6939      	ldr	r1, [r7, #16]
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	4613      	mov	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	440b      	add	r3, r1
 80058d4:	3324      	adds	r3, #36	@ 0x24
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80058da:	6939      	ldr	r1, [r7, #16]
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	4613      	mov	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	332c      	adds	r3, #44	@ 0x2c
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058ee:	f3bf 8f5f 	dmb	sy
 80058f2:	e002      	b.n	80058fa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80058f4:	f04f 33ff 	mov.w	r3, #4294967295
 80058f8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005900:	69fb      	ldr	r3, [r7, #28]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20012ec0 	.word	0x20012ec0

08005910 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800591e:	4b21      	ldr	r3, [pc, #132]	@ (80059a4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b53      	cmp	r3, #83	@ 0x53
 800592a:	d001      	beq.n	8005930 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800592c:	f7ff fe8c 	bl	8005648 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005930:	4b1c      	ldr	r3, [pc, #112]	@ (80059a4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005932:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d82c      	bhi.n	8005994 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800593a:	f3ef 8311 	mrs	r3, BASEPRI
 800593e:	f04f 0120 	mov.w	r1, #32
 8005942:	f381 8811 	msr	BASEPRI, r1
 8005946:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4613      	mov	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	4413      	add	r3, r2
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	3360      	adds	r3, #96	@ 0x60
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2200      	movs	r2, #0
 800597c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005982:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005984:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
 8005992:	e002      	b.n	800599a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800599c:	4618      	mov	r0, r3
 800599e:	3728      	adds	r7, #40	@ 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20012ec0 	.word	0x20012ec0

080059a8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	60fa      	str	r2, [r7, #12]
 80059be:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b80      	cmp	r3, #128	@ 0x80
 80059c4:	d90a      	bls.n	80059dc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80059c6:	2380      	movs	r3, #128	@ 0x80
 80059c8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80059ca:	e007      	b.n	80059dc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	1c53      	adds	r3, r2, #1
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	60f9      	str	r1, [r7, #12]
 80059d8:	7812      	ldrb	r2, [r2, #0]
 80059da:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1e5a      	subs	r2, r3, #1
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <_EncodeStr+0x46>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1ee      	bne.n	80059cc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80059fa:	68fb      	ldr	r3, [r7, #12]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3307      	adds	r3, #7
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a26:	4b34      	ldr	r3, [pc, #208]	@ (8005af8 <_HandleIncomingPacket+0xd8>)
 8005a28:	7e1b      	ldrb	r3, [r3, #24]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	1cfb      	adds	r3, r7, #3
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4619      	mov	r1, r3
 8005a32:	f7ff fe63 	bl	80056fc <SEGGER_RTT_ReadNoLock>
 8005a36:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d057      	beq.n	8005aee <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	2b80      	cmp	r3, #128	@ 0x80
 8005a42:	d031      	beq.n	8005aa8 <_HandleIncomingPacket+0x88>
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	dc40      	bgt.n	8005aca <_HandleIncomingPacket+0xaa>
 8005a48:	2b07      	cmp	r3, #7
 8005a4a:	dc15      	bgt.n	8005a78 <_HandleIncomingPacket+0x58>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dd3c      	ble.n	8005aca <_HandleIncomingPacket+0xaa>
 8005a50:	3b01      	subs	r3, #1
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d839      	bhi.n	8005aca <_HandleIncomingPacket+0xaa>
 8005a56:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <_HandleIncomingPacket+0x3c>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005a7f 	.word	0x08005a7f
 8005a60:	08005a85 	.word	0x08005a85
 8005a64:	08005a8b 	.word	0x08005a8b
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a97 	.word	0x08005a97
 8005a70:	08005a9d 	.word	0x08005a9d
 8005a74:	08005aa3 	.word	0x08005aa3
 8005a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a7a:	d033      	beq.n	8005ae4 <_HandleIncomingPacket+0xc4>
 8005a7c:	e025      	b.n	8005aca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005a7e:	f000 fb25 	bl	80060cc <SEGGER_SYSVIEW_Start>
      break;
 8005a82:	e034      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005a84:	f000 fbdc 	bl	8006240 <SEGGER_SYSVIEW_Stop>
      break;
 8005a88:	e031      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005a8a:	f000 fdb5 	bl	80065f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005a8e:	e02e      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005a90:	f000 fd7a 	bl	8006588 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005a94:	e02b      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005a96:	f000 fbf9 	bl	800628c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005a9a:	e028      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005a9c:	f001 f8e6 	bl	8006c6c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005aa0:	e025      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005aa2:	f001 f8c5 	bl	8006c30 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005aa6:	e022      	b.n	8005aee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <_HandleIncomingPacket+0xd8>)
 8005aaa:	7e1b      	ldrb	r3, [r3, #24]
 8005aac:	4618      	mov	r0, r3
 8005aae:	1cfb      	adds	r3, r7, #3
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f7ff fe22 	bl	80056fc <SEGGER_RTT_ReadNoLock>
 8005ab8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f001 f82a 	bl	8006b1c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005ac8:	e00e      	b.n	8005ae8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	b25b      	sxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da0c      	bge.n	8005aec <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ad2:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <_HandleIncomingPacket+0xd8>)
 8005ad4:	7e1b      	ldrb	r3, [r3, #24]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	1cfb      	adds	r3, r7, #3
 8005ada:	2201      	movs	r2, #1
 8005adc:	4619      	mov	r1, r3
 8005ade:	f7ff fe0d 	bl	80056fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005ae2:	e003      	b.n	8005aec <_HandleIncomingPacket+0xcc>
      break;
 8005ae4:	bf00      	nop
 8005ae6:	e002      	b.n	8005aee <_HandleIncomingPacket+0xce>
      break;
 8005ae8:	bf00      	nop
 8005aea:	e000      	b.n	8005aee <_HandleIncomingPacket+0xce>
      break;
 8005aec:	bf00      	nop
    }
  }
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20019780 	.word	0x20019780

08005afc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	@ 0x30
 8005b00:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b02:	2301      	movs	r3, #1
 8005b04:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	3301      	adds	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b10:	4b31      	ldr	r3, [pc, #196]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b16:	e00b      	b.n	8005b30 <_TrySendOverflowPacket+0x34>
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	1c59      	adds	r1, r3, #1
 8005b20:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2c:	09db      	lsrs	r3, r3, #7
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b34:	d8f0      	bhi.n	8005b18 <_TrySendOverflowPacket+0x1c>
 8005b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b44:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b46:	4b25      	ldr	r3, [pc, #148]	@ (8005bdc <_TrySendOverflowPacket+0xe0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b4c:	4b22      	ldr	r3, [pc, #136]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	623b      	str	r3, [r7, #32]
 8005b5e:	e00b      	b.n	8005b78 <_TrySendOverflowPacket+0x7c>
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	623b      	str	r3, [r7, #32]
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7c:	d8f0      	bhi.n	8005b60 <_TrySendOverflowPacket+0x64>
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b84:	6a3a      	ldr	r2, [r7, #32]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005b8e:	4b12      	ldr	r3, [pc, #72]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	4618      	mov	r0, r3
 8005b94:	1d3b      	adds	r3, r7, #4
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f7fa fb16 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bae:	4a0a      	ldr	r2, [pc, #40]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005bb4:	4b08      	ldr	r3, [pc, #32]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	e004      	b.n	8005bcc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005bc2:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a03      	ldr	r2, [pc, #12]	@ (8005bd8 <_TrySendOverflowPacket+0xdc>)
 8005bca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005bcc:	693b      	ldr	r3, [r7, #16]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3730      	adds	r7, #48	@ 0x30
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20019780 	.word	0x20019780
 8005bdc:	e0001004 	.word	0xe0001004

08005be0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	@ 0x28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005bec:	4b98      	ldr	r3, [pc, #608]	@ (8005e50 <_SendPacket+0x270>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d010      	beq.n	8005c16 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005bf4:	4b96      	ldr	r3, [pc, #600]	@ (8005e50 <_SendPacket+0x270>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 812d 	beq.w	8005e58 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005bfe:	4b94      	ldr	r3, [pc, #592]	@ (8005e50 <_SendPacket+0x270>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d109      	bne.n	8005c1a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c06:	f7ff ff79 	bl	8005afc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c0a:	4b91      	ldr	r3, [pc, #580]	@ (8005e50 <_SendPacket+0x270>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	f040 8124 	bne.w	8005e5c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005c14:	e001      	b.n	8005c1a <_SendPacket+0x3a>
    goto Send;
 8005c16:	bf00      	nop
 8005c18:	e000      	b.n	8005c1c <_SendPacket+0x3c>
Send:
 8005c1a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b1f      	cmp	r3, #31
 8005c20:	d809      	bhi.n	8005c36 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c22:	4b8b      	ldr	r3, [pc, #556]	@ (8005e50 <_SendPacket+0x270>)
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 8115 	bne.w	8005e60 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b17      	cmp	r3, #23
 8005c3a:	d807      	bhi.n	8005c4c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	e0c4      	b.n	8005dd6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c58:	d912      	bls.n	8005c80 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	09da      	lsrs	r2, r3, #7
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	3a01      	subs	r2, #1
 8005c72:	60fa      	str	r2, [r7, #12]
 8005c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	e006      	b.n	8005c8e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b7e      	cmp	r3, #126	@ 0x7e
 8005c92:	d807      	bhi.n	8005ca4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e098      	b.n	8005dd6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005caa:	d212      	bcs.n	8005cd2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	09da      	lsrs	r2, r3, #7
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	3a01      	subs	r2, #1
 8005cc4:	60fa      	str	r2, [r7, #12]
 8005cc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e081      	b.n	8005dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd8:	d21d      	bcs.n	8005d16 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0b9a      	lsrs	r2, r3, #14
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	09db      	lsrs	r3, r3, #7
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	3a01      	subs	r2, #1
 8005cf4:	60fa      	str	r2, [r7, #12]
 8005cf6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	3a01      	subs	r2, #1
 8005d08:	60fa      	str	r2, [r7, #12]
 8005d0a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e05f      	b.n	8005dd6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d1c:	d228      	bcs.n	8005d70 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0d5a      	lsrs	r2, r3, #21
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3b01      	subs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	0b9b      	lsrs	r3, r3, #14
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	3a01      	subs	r2, #1
 8005d38:	60fa      	str	r2, [r7, #12]
 8005d3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	09db      	lsrs	r3, r3, #7
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	3a01      	subs	r2, #1
 8005d4e:	60fa      	str	r2, [r7, #12]
 8005d50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	3a01      	subs	r2, #1
 8005d62:	60fa      	str	r2, [r7, #12]
 8005d64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	e032      	b.n	8005dd6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0f1a      	lsrs	r2, r3, #28
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	0d5b      	lsrs	r3, r3, #21
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	3a01      	subs	r2, #1
 8005d8a:	60fa      	str	r2, [r7, #12]
 8005d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	0b9b      	lsrs	r3, r3, #14
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	60fa      	str	r2, [r7, #12]
 8005da2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	3a01      	subs	r2, #1
 8005db6:	60fa      	str	r2, [r7, #12]
 8005db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <_SendPacket+0x274>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8005e50 <_SendPacket+0x270>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	e00b      	b.n	8005e08 <_SendPacket+0x228>
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005dfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	09db      	lsrs	r3, r3, #7
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e0c:	d8f0      	bhi.n	8005df0 <_SendPacket+0x210>
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	1c5a      	adds	r2, r3, #1
 8005e12:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e14:	6a3a      	ldr	r2, [r7, #32]
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <_SendPacket+0x270>)
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	4618      	mov	r0, r3
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	f7fa f9cf 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e32:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e3a:	4a05      	ldr	r2, [pc, #20]	@ (8005e50 <_SendPacket+0x270>)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	60d3      	str	r3, [r2, #12]
 8005e40:	e00f      	b.n	8005e62 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e42:	4b03      	ldr	r3, [pc, #12]	@ (8005e50 <_SendPacket+0x270>)
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b01      	ldr	r3, [pc, #4]	@ (8005e50 <_SendPacket+0x270>)
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e008      	b.n	8005e62 <_SendPacket+0x282>
 8005e50:	20019780 	.word	0x20019780
 8005e54:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005e58:	bf00      	nop
 8005e5a:	e002      	b.n	8005e62 <_SendPacket+0x282>
      goto SendDone;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <_SendPacket+0x282>
      goto SendDone;
 8005e60:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e62:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <_SendPacket+0x2d4>)
 8005e64:	7e1b      	ldrb	r3, [r3, #24]
 8005e66:	4619      	mov	r1, r3
 8005e68:	4a13      	ldr	r2, [pc, #76]	@ (8005eb8 <_SendPacket+0x2d8>)
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	440b      	add	r3, r1
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4413      	add	r3, r2
 8005e74:	336c      	adds	r3, #108	@ 0x6c
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb4 <_SendPacket+0x2d4>)
 8005e7a:	7e1b      	ldrb	r3, [r3, #24]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	490e      	ldr	r1, [pc, #56]	@ (8005eb8 <_SendPacket+0x2d8>)
 8005e80:	4603      	mov	r3, r0
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4403      	add	r3, r0
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	440b      	add	r3, r1
 8005e8a:	3370      	adds	r3, #112	@ 0x70
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d00b      	beq.n	8005eaa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e92:	4b08      	ldr	r3, [pc, #32]	@ (8005eb4 <_SendPacket+0x2d4>)
 8005e94:	789b      	ldrb	r3, [r3, #2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	@ (8005eb4 <_SendPacket+0x2d4>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ea0:	f7ff fdbe 	bl	8005a20 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ea4:	4b03      	ldr	r3, [pc, #12]	@ (8005eb4 <_SendPacket+0x2d4>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005eaa:	bf00      	nop
 8005eac:	3728      	adds	r7, #40	@ 0x28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	20019780 	.word	0x20019780
 8005eb8:	20012ec0 	.word	0x20012ec0

08005ebc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8005ed0:	4917      	ldr	r1, [pc, #92]	@ (8005f30 <SEGGER_SYSVIEW_Init+0x74>)
 8005ed2:	4818      	ldr	r0, [pc, #96]	@ (8005f34 <SEGGER_SYSVIEW_Init+0x78>)
 8005ed4:	f7ff fc98 	bl	8005808 <SEGGER_RTT_AllocUpBuffer>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	4b16      	ldr	r3, [pc, #88]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ede:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005ee0:	4b15      	ldr	r3, [pc, #84]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ee2:	785a      	ldrb	r2, [r3, #1]
 8005ee4:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ee6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ee8:	4b13      	ldr	r3, [pc, #76]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eea:	7e1b      	ldrb	r3, [r3, #24]
 8005eec:	4618      	mov	r0, r3
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	4a11      	ldr	r2, [pc, #68]	@ (8005f3c <SEGGER_SYSVIEW_Init+0x80>)
 8005ef6:	490f      	ldr	r1, [pc, #60]	@ (8005f34 <SEGGER_SYSVIEW_Init+0x78>)
 8005ef8:	f7ff fd0a 	bl	8005910 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005efc:	4b0e      	ldr	r3, [pc, #56]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f02:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <SEGGER_SYSVIEW_Init+0x84>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a0c      	ldr	r2, [pc, #48]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f08:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f10:	4a09      	ldr	r2, [pc, #36]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f16:	4a08      	ldr	r2, [pc, #32]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f1c:	4a06      	ldr	r2, [pc, #24]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f22:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f28:	bf00      	nop
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20013378 	.word	0x20013378
 8005f34:	08007a60 	.word	0x08007a60
 8005f38:	20019780 	.word	0x20019780
 8005f3c:	20019778 	.word	0x20019778
 8005f40:	e0001004 	.word	0xe0001004

08005f44 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f4c:	4a04      	ldr	r2, [pc, #16]	@ (8005f60 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6113      	str	r3, [r2, #16]
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20019780 	.word	0x20019780

08005f64 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f70:	f04f 0120 	mov.w	r1, #32
 8005f74:	f381 8811 	msr	BASEPRI, r1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	4808      	ldr	r0, [pc, #32]	@ (8005f9c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f7c:	f7ff fd44 	bl	8005a08 <_PreparePacket>
 8005f80:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f7ff fe2a 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f383 8811 	msr	BASEPRI, r3
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200197b0 	.word	0x200197b0

08005fa0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005faa:	f3ef 8311 	mrs	r3, BASEPRI
 8005fae:	f04f 0120 	mov.w	r1, #32
 8005fb2:	f381 8811 	msr	BASEPRI, r1
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	4816      	ldr	r0, [pc, #88]	@ (8006014 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fba:	f7ff fd25 	bl	8005a08 <_PreparePacket>
 8005fbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e00b      	b.n	8005fe6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1c59      	adds	r1, r3, #1
 8005fd6:	61f9      	str	r1, [r7, #28]
 8005fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	09db      	lsrs	r3, r3, #7
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fea:	d8f0      	bhi.n	8005fce <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	61fa      	str	r2, [r7, #28]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	b2d2      	uxtb	r2, r2
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	6938      	ldr	r0, [r7, #16]
 8006002:	f7ff fded 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f383 8811 	msr	BASEPRI, r3
}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	200197b0 	.word	0x200197b0

08006018 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	@ 0x30
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006024:	f3ef 8311 	mrs	r3, BASEPRI
 8006028:	f04f 0120 	mov.w	r1, #32
 800602c:	f381 8811 	msr	BASEPRI, r1
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	4825      	ldr	r0, [pc, #148]	@ (80060c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006034:	f7ff fce8 	bl	8005a08 <_PreparePacket>
 8006038:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006046:	e00b      	b.n	8006060 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604e:	1c59      	adds	r1, r3, #1
 8006050:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006052:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	09db      	lsrs	r3, r3, #7
 800605e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006062:	2b7f      	cmp	r3, #127	@ 0x7f
 8006064:	d8f0      	bhi.n	8006048 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800606c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	e00b      	b.n	8006098 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006080:	6a3b      	ldr	r3, [r7, #32]
 8006082:	b2da      	uxtb	r2, r3
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	1c59      	adds	r1, r3, #1
 8006088:	6279      	str	r1, [r7, #36]	@ 0x24
 800608a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	09db      	lsrs	r3, r3, #7
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b7f      	cmp	r3, #127	@ 0x7f
 800609c:	d8f0      	bhi.n	8006080 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	69b8      	ldr	r0, [r7, #24]
 80060b4:	f7ff fd94 	bl	8005be0 <_SendPacket>
  RECORD_END();
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f383 8811 	msr	BASEPRI, r3
}
 80060be:	bf00      	nop
 80060c0:	3730      	adds	r7, #48	@ 0x30
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200197b0 	.word	0x200197b0

080060cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08c      	sub	sp, #48	@ 0x30
 80060d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80060d2:	4b58      	ldr	r3, [pc, #352]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80060d8:	f3ef 8311 	mrs	r3, BASEPRI
 80060dc:	f04f 0120 	mov.w	r1, #32
 80060e0:	f381 8811 	msr	BASEPRI, r1
 80060e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80060e6:	4b53      	ldr	r3, [pc, #332]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	220a      	movs	r2, #10
 80060ec:	4952      	ldr	r1, [pc, #328]	@ (8006238 <SEGGER_SYSVIEW_Start+0x16c>)
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fa f86e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060fa:	200a      	movs	r0, #10
 80060fc:	f7ff ff32 	bl	8005f64 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006100:	f3ef 8311 	mrs	r3, BASEPRI
 8006104:	f04f 0120 	mov.w	r1, #32
 8006108:	f381 8811 	msr	BASEPRI, r1
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	484b      	ldr	r0, [pc, #300]	@ (800623c <SEGGER_SYSVIEW_Start+0x170>)
 8006110:	f7ff fc7a 	bl	8005a08 <_PreparePacket>
 8006114:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800611e:	4b45      	ldr	r3, [pc, #276]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006124:	e00b      	b.n	800613e <SEGGER_SYSVIEW_Start+0x72>
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	b2da      	uxtb	r2, r3
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006130:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800613a:	09db      	lsrs	r3, r3, #7
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	2b7f      	cmp	r3, #127	@ 0x7f
 8006142:	d8f0      	bhi.n	8006126 <SEGGER_SYSVIEW_Start+0x5a>
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800614a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	627b      	str	r3, [r7, #36]	@ 0x24
 8006158:	4b36      	ldr	r3, [pc, #216]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	623b      	str	r3, [r7, #32]
 800615e:	e00b      	b.n	8006178 <SEGGER_SYSVIEW_Start+0xac>
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	1c59      	adds	r1, r3, #1
 8006168:	6279      	str	r1, [r7, #36]	@ 0x24
 800616a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	09db      	lsrs	r3, r3, #7
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2b7f      	cmp	r3, #127	@ 0x7f
 800617c:	d8f0      	bhi.n	8006160 <SEGGER_SYSVIEW_Start+0x94>
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	627a      	str	r2, [r7, #36]	@ 0x24
 8006184:	6a3a      	ldr	r2, [r7, #32]
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	61fb      	str	r3, [r7, #28]
 8006192:	4b28      	ldr	r3, [pc, #160]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_Start+0xe6>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	61f9      	str	r1, [r7, #28]
 80061a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_Start+0xce>
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	61fa      	str	r2, [r7, #28]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	2300      	movs	r3, #0
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_Start+0x11e>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	6179      	str	r1, [r7, #20]
 80061dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_Start+0x106>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	617a      	str	r2, [r7, #20]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006200:	2218      	movs	r2, #24
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fceb 	bl	8005be0 <_SendPacket>
      RECORD_END();
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006210:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 8006212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006218:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <SEGGER_SYSVIEW_Start+0x168>)
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800621e:	f000 f9eb 	bl	80065f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006222:	f000 f9b1 	bl	8006588 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006226:	f000 fd21 	bl	8006c6c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800622a:	bf00      	nop
 800622c:	3730      	adds	r7, #48	@ 0x30
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20019780 	.word	0x20019780
 8006238:	08007aec 	.word	0x08007aec
 800623c:	200197b0 	.word	0x200197b0

08006240 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006246:	f3ef 8311 	mrs	r3, BASEPRI
 800624a:	f04f 0120 	mov.w	r1, #32
 800624e:	f381 8811 	msr	BASEPRI, r1
 8006252:	607b      	str	r3, [r7, #4]
 8006254:	480b      	ldr	r0, [pc, #44]	@ (8006284 <SEGGER_SYSVIEW_Stop+0x44>)
 8006256:	f7ff fbd7 	bl	8005a08 <_PreparePacket>
 800625a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <SEGGER_SYSVIEW_Stop+0x48>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006264:	220b      	movs	r2, #11
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6838      	ldr	r0, [r7, #0]
 800626a:	f7ff fcb9 	bl	8005be0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800626e:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <SEGGER_SYSVIEW_Stop+0x48>)
 8006270:	2200      	movs	r2, #0
 8006272:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f383 8811 	msr	BASEPRI, r3
}
 800627a:	bf00      	nop
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200197b0 	.word	0x200197b0
 8006288:	20019780 	.word	0x20019780

0800628c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b08c      	sub	sp, #48	@ 0x30
 8006290:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	f04f 0120 	mov.w	r1, #32
 800629a:	f381 8811 	msr	BASEPRI, r1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	4845      	ldr	r0, [pc, #276]	@ (80063b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80062a2:	f7ff fbb1 	bl	8005a08 <_PreparePacket>
 80062a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b0:	4b42      	ldr	r3, [pc, #264]	@ (80063bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b6:	e00b      	b.n	80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80062b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ea:	4b34      	ldr	r3, [pc, #208]	@ (80063bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	623b      	str	r3, [r7, #32]
 80062f0:	e00b      	b.n	800630a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	1c59      	adds	r1, r3, #1
 80062fa:	6279      	str	r1, [r7, #36]	@ 0x24
 80062fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	09db      	lsrs	r3, r3, #7
 8006308:	623b      	str	r3, [r7, #32]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b7f      	cmp	r3, #127	@ 0x7f
 800630e:	d8f0      	bhi.n	80062f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	627a      	str	r2, [r7, #36]	@ 0x24
 8006316:	6a3a      	ldr	r2, [r7, #32]
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	61fb      	str	r3, [r7, #28]
 8006324:	4b25      	ldr	r3, [pc, #148]	@ (80063bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e00b      	b.n	8006344 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1c59      	adds	r1, r3, #1
 8006334:	61f9      	str	r1, [r7, #28]
 8006336:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	09db      	lsrs	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b7f      	cmp	r3, #127	@ 0x7f
 8006348:	d8f0      	bhi.n	800632c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	61fa      	str	r2, [r7, #28]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	e00b      	b.n	800637c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	6179      	str	r1, [r7, #20]
 800636e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	09db      	lsrs	r3, r3, #7
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006380:	d8f0      	bhi.n	8006364 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	617a      	str	r2, [r7, #20]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006392:	2218      	movs	r2, #24
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	68b8      	ldr	r0, [r7, #8]
 8006398:	f7ff fc22 	bl	8005be0 <_SendPacket>
  RECORD_END();
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063a2:	4b06      	ldr	r3, [pc, #24]	@ (80063bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80063aa:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	4798      	blx	r3
  }
}
 80063b0:	bf00      	nop
 80063b2:	3730      	adds	r7, #48	@ 0x30
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	200197b0 	.word	0x200197b0
 80063bc:	20019780 	.word	0x20019780

080063c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b092      	sub	sp, #72	@ 0x48
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80063c8:	f3ef 8311 	mrs	r3, BASEPRI
 80063cc:	f04f 0120 	mov.w	r1, #32
 80063d0:	f381 8811 	msr	BASEPRI, r1
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	486a      	ldr	r0, [pc, #424]	@ (8006580 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80063d8:	f7ff fb16 	bl	8005a08 <_PreparePacket>
 80063dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80063f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6479      	str	r1, [r7, #68]	@ 0x44
 80063fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	643b      	str	r3, [r7, #64]	@ 0x40
 800640c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800640e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006412:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	647a      	str	r2, [r7, #68]	@ 0x44
 8006418:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800642c:	e00b      	b.n	8006446 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	2b7f      	cmp	r3, #127	@ 0x7f
 800644a:	d8f0      	bhi.n	800642e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800644c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	4619      	mov	r1, r3
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff fa9f 	bl	80059a8 <_EncodeStr>
 800646a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800646c:	2209      	movs	r2, #9
 800646e:	68f9      	ldr	r1, [r7, #12]
 8006470:	6938      	ldr	r0, [r7, #16]
 8006472:	f7ff fbb5 	bl	8005be0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b40      	ldr	r3, [pc, #256]	@ (8006584 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	633b      	str	r3, [r7, #48]	@ 0x30
 800648a:	e00b      	b.n	80064a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	6379      	str	r1, [r7, #52]	@ 0x34
 8006496:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	09db      	lsrs	r3, r3, #7
 80064a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064a8:	d8f0      	bhi.n	800648c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80064b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c4:	e00b      	b.n	80064de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	1c59      	adds	r1, r3, #1
 80064ce:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80064d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064da:	09db      	lsrs	r3, r3, #7
 80064dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e2:	d8f0      	bhi.n	80064c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	e00b      	b.n	8006518 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	1c59      	adds	r1, r3, #1
 8006508:	6279      	str	r1, [r7, #36]	@ 0x24
 800650a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	09db      	lsrs	r3, r3, #7
 8006516:	623b      	str	r3, [r7, #32]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2b7f      	cmp	r3, #127	@ 0x7f
 800651c:	d8f0      	bhi.n	8006500 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	627a      	str	r2, [r7, #36]	@ 0x24
 8006524:	6a3a      	ldr	r2, [r7, #32]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	2300      	movs	r3, #0
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	e00b      	b.n	8006550 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	61f9      	str	r1, [r7, #28]
 8006542:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b7f      	cmp	r3, #127	@ 0x7f
 8006554:	d8f0      	bhi.n	8006538 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	61fa      	str	r2, [r7, #28]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006566:	2215      	movs	r2, #21
 8006568:	68f9      	ldr	r1, [r7, #12]
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f7ff fb38 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f383 8811 	msr	BASEPRI, r3
}
 8006576:	bf00      	nop
 8006578:	3748      	adds	r7, #72	@ 0x48
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200197b0 	.word	0x200197b0
 8006584:	20019780 	.word	0x20019780

08006588 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800658c:	4b07      	ldr	r3, [pc, #28]	@ (80065ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006594:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800659e:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	4798      	blx	r3
  }
}
 80065a6:	bf00      	nop
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20019780 	.word	0x20019780

080065b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065b8:	f3ef 8311 	mrs	r3, BASEPRI
 80065bc:	f04f 0120 	mov.w	r1, #32
 80065c0:	f381 8811 	msr	BASEPRI, r1
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	480b      	ldr	r0, [pc, #44]	@ (80065f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80065c8:	f7ff fa1e 	bl	8005a08 <_PreparePacket>
 80065cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ce:	2280      	movs	r2, #128	@ 0x80
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	6938      	ldr	r0, [r7, #16]
 80065d4:	f7ff f9e8 	bl	80059a8 <_EncodeStr>
 80065d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80065da:	220e      	movs	r2, #14
 80065dc:	68f9      	ldr	r1, [r7, #12]
 80065de:	6938      	ldr	r0, [r7, #16]
 80065e0:	f7ff fafe 	bl	8005be0 <_SendPacket>
  RECORD_END();
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f383 8811 	msr	BASEPRI, r3
}
 80065ea:	bf00      	nop
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200197b0 	.word	0x200197b0

080065f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065fe:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01a      	beq.n	800663c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006606:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d015      	beq.n	800663c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4798      	blx	r3
 8006618:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800661c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800661e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	000a      	movs	r2, r1
 800662c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800662e:	4613      	mov	r3, r2
 8006630:	461a      	mov	r2, r3
 8006632:	4621      	mov	r1, r4
 8006634:	200d      	movs	r0, #13
 8006636:	f7ff fcef 	bl	8006018 <SEGGER_SYSVIEW_RecordU32x2>
 800663a:	e006      	b.n	800664a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4619      	mov	r1, r3
 8006642:	200c      	movs	r0, #12
 8006644:	f7ff fcac 	bl	8005fa0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	20019780 	.word	0x20019780
 8006658:	e0001004 	.word	0xe0001004

0800665c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006662:	f3ef 8311 	mrs	r3, BASEPRI
 8006666:	f04f 0120 	mov.w	r1, #32
 800666a:	f381 8811 	msr	BASEPRI, r1
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	4819      	ldr	r0, [pc, #100]	@ (80066d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006672:	f7ff f9c9 	bl	8005a08 <_PreparePacket>
 8006676:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800667c:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006684:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	613b      	str	r3, [r7, #16]
 800668e:	e00b      	b.n	80066a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	6179      	str	r1, [r7, #20]
 800669a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	09db      	lsrs	r3, r3, #7
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ac:	d8f0      	bhi.n	8006690 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	617a      	str	r2, [r7, #20]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80066be:	2202      	movs	r2, #2
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	68b8      	ldr	r0, [r7, #8]
 80066c4:	f7ff fa8c 	bl	8005be0 <_SendPacket>
  RECORD_END();
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200197b0 	.word	0x200197b0
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066e6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ea:	f04f 0120 	mov.w	r1, #32
 80066ee:	f381 8811 	msr	BASEPRI, r1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	4807      	ldr	r0, [pc, #28]	@ (8006714 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80066f6:	f7ff f987 	bl	8005a08 <_PreparePacket>
 80066fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066fc:	2203      	movs	r2, #3
 80066fe:	6839      	ldr	r1, [r7, #0]
 8006700:	6838      	ldr	r0, [r7, #0]
 8006702:	f7ff fa6d 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f383 8811 	msr	BASEPRI, r3
}
 800670c:	bf00      	nop
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	200197b0 	.word	0x200197b0

08006718 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800671e:	f3ef 8311 	mrs	r3, BASEPRI
 8006722:	f04f 0120 	mov.w	r1, #32
 8006726:	f381 8811 	msr	BASEPRI, r1
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	4807      	ldr	r0, [pc, #28]	@ (800674c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800672e:	f7ff f96b 	bl	8005a08 <_PreparePacket>
 8006732:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006734:	2212      	movs	r2, #18
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f7ff fa51 	bl	8005be0 <_SendPacket>
  RECORD_END();
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f383 8811 	msr	BASEPRI, r3
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200197b0 	.word	0x200197b0

08006750 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006758:	f3ef 8311 	mrs	r3, BASEPRI
 800675c:	f04f 0120 	mov.w	r1, #32
 8006760:	f381 8811 	msr	BASEPRI, r1
 8006764:	617b      	str	r3, [r7, #20]
 8006766:	4817      	ldr	r0, [pc, #92]	@ (80067c4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006768:	f7ff f94e 	bl	8005a08 <_PreparePacket>
 800676c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	61fb      	str	r3, [r7, #28]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e00b      	b.n	8006794 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	61f9      	str	r1, [r7, #28]
 8006786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	2b7f      	cmp	r3, #127	@ 0x7f
 8006798:	d8f0      	bhi.n	800677c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	61fa      	str	r2, [r7, #28]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80067aa:	221c      	movs	r2, #28
 80067ac:	68f9      	ldr	r1, [r7, #12]
 80067ae:	6938      	ldr	r0, [r7, #16]
 80067b0:	f7ff fa16 	bl	8005be0 <_SendPacket>
  RECORD_END();
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f383 8811 	msr	BASEPRI, r3
}
 80067ba:	bf00      	nop
 80067bc:	3720      	adds	r7, #32
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200197b0 	.word	0x200197b0

080067c8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	@ 0x28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067d2:	f3ef 8311 	mrs	r3, BASEPRI
 80067d6:	f04f 0120 	mov.w	r1, #32
 80067da:	f381 8811 	msr	BASEPRI, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	4824      	ldr	r0, [pc, #144]	@ (8006874 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80067e2:	f7ff f911 	bl	8005a08 <_PreparePacket>
 80067e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	623b      	str	r3, [r7, #32]
 80067f4:	e00b      	b.n	800680e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	1c59      	adds	r1, r3, #1
 80067fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8006800:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	09db      	lsrs	r3, r3, #7
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	2b7f      	cmp	r3, #127	@ 0x7f
 8006812:	d8f0      	bhi.n	80067f6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	627a      	str	r2, [r7, #36]	@ 0x24
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	e00b      	b.n	8006846 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	1c59      	adds	r1, r3, #1
 8006836:	61f9      	str	r1, [r7, #28]
 8006838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	09db      	lsrs	r3, r3, #7
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b7f      	cmp	r3, #127	@ 0x7f
 800684a:	d8f0      	bhi.n	800682e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	61fa      	str	r2, [r7, #28]
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800685c:	221c      	movs	r2, #28
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	6938      	ldr	r0, [r7, #16]
 8006862:	f7ff f9bd 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f383 8811 	msr	BASEPRI, r3
}
 800686c:	bf00      	nop
 800686e:	3728      	adds	r7, #40	@ 0x28
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	200197b0 	.word	0x200197b0

08006878 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800687e:	f3ef 8311 	mrs	r3, BASEPRI
 8006882:	f04f 0120 	mov.w	r1, #32
 8006886:	f381 8811 	msr	BASEPRI, r1
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	4807      	ldr	r0, [pc, #28]	@ (80068ac <SEGGER_SYSVIEW_OnIdle+0x34>)
 800688e:	f7ff f8bb 	bl	8005a08 <_PreparePacket>
 8006892:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006894:	2211      	movs	r2, #17
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	f7ff f9a1 	bl	8005be0 <_SendPacket>
  RECORD_END();
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f383 8811 	msr	BASEPRI, r3
}
 80068a4:	bf00      	nop
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	200197b0 	.word	0x200197b0

080068b0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068b8:	f3ef 8311 	mrs	r3, BASEPRI
 80068bc:	f04f 0120 	mov.w	r1, #32
 80068c0:	f381 8811 	msr	BASEPRI, r1
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	4819      	ldr	r0, [pc, #100]	@ (800692c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068c8:	f7ff f89e 	bl	8005a08 <_PreparePacket>
 80068cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068d2:	4b17      	ldr	r3, [pc, #92]	@ (8006930 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e00b      	b.n	80068fe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	1c59      	adds	r1, r3, #1
 80068ee:	61f9      	str	r1, [r7, #28]
 80068f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f4:	b2d2      	uxtb	r2, r2
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	09db      	lsrs	r3, r3, #7
 80068fc:	61bb      	str	r3, [r7, #24]
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b7f      	cmp	r3, #127	@ 0x7f
 8006902:	d8f0      	bhi.n	80068e6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	61fa      	str	r2, [r7, #28]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006914:	2208      	movs	r2, #8
 8006916:	68f9      	ldr	r1, [r7, #12]
 8006918:	6938      	ldr	r0, [r7, #16]
 800691a:	f7ff f961 	bl	8005be0 <_SendPacket>
  RECORD_END();
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f383 8811 	msr	BASEPRI, r3
}
 8006924:	bf00      	nop
 8006926:	3720      	adds	r7, #32
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	200197b0 	.word	0x200197b0
 8006930:	20019780 	.word	0x20019780

08006934 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800693c:	f3ef 8311 	mrs	r3, BASEPRI
 8006940:	f04f 0120 	mov.w	r1, #32
 8006944:	f381 8811 	msr	BASEPRI, r1
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	4819      	ldr	r0, [pc, #100]	@ (80069b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800694c:	f7ff f85c 	bl	8005a08 <_PreparePacket>
 8006950:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006956:	4b17      	ldr	r3, [pc, #92]	@ (80069b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e00b      	b.n	8006982 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1c59      	adds	r1, r3, #1
 8006972:	61f9      	str	r1, [r7, #28]
 8006974:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	09db      	lsrs	r3, r3, #7
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b7f      	cmp	r3, #127	@ 0x7f
 8006986:	d8f0      	bhi.n	800696a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	61fa      	str	r2, [r7, #28]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006998:	2204      	movs	r2, #4
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	6938      	ldr	r0, [r7, #16]
 800699e:	f7ff f91f 	bl	8005be0 <_SendPacket>
  RECORD_END();
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f383 8811 	msr	BASEPRI, r3
}
 80069a8:	bf00      	nop
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	200197b0 	.word	0x200197b0
 80069b4:	20019780 	.word	0x20019780

080069b8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069c0:	f3ef 8311 	mrs	r3, BASEPRI
 80069c4:	f04f 0120 	mov.w	r1, #32
 80069c8:	f381 8811 	msr	BASEPRI, r1
 80069cc:	617b      	str	r3, [r7, #20]
 80069ce:	4819      	ldr	r0, [pc, #100]	@ (8006a34 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80069d0:	f7ff f81a 	bl	8005a08 <_PreparePacket>
 80069d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069da:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e00b      	b.n	8006a06 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	1c59      	adds	r1, r3, #1
 80069f6:	61f9      	str	r1, [r7, #28]
 80069f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	09db      	lsrs	r3, r3, #7
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a0a:	d8f0      	bhi.n	80069ee <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	61fa      	str	r2, [r7, #28]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f7ff f8dd 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f383 8811 	msr	BASEPRI, r3
}
 8006a2c:	bf00      	nop
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	200197b0 	.word	0x200197b0
 8006a38:	20019780 	.word	0x20019780

08006a3c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	@ 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a46:	f3ef 8311 	mrs	r3, BASEPRI
 8006a4a:	f04f 0120 	mov.w	r1, #32
 8006a4e:	f381 8811 	msr	BASEPRI, r1
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	4827      	ldr	r0, [pc, #156]	@ (8006af4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a56:	f7fe ffd7 	bl	8005a08 <_PreparePacket>
 8006a5a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a60:	4b25      	ldr	r3, [pc, #148]	@ (8006af8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	e00b      	b.n	8006a8c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	623b      	str	r3, [r7, #32]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a90:	d8f0      	bhi.n	8006a74 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	61fb      	str	r3, [r7, #28]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e00b      	b.n	8006ac4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	1c59      	adds	r1, r3, #1
 8006ab4:	61f9      	str	r1, [r7, #28]
 8006ab6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	09db      	lsrs	r3, r3, #7
 8006ac2:	61bb      	str	r3, [r7, #24]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac8:	d8f0      	bhi.n	8006aac <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	61fa      	str	r2, [r7, #28]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006ada:	2207      	movs	r2, #7
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	6938      	ldr	r0, [r7, #16]
 8006ae0:	f7ff f87e 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f383 8811 	msr	BASEPRI, r3
}
 8006aea:	bf00      	nop
 8006aec:	3728      	adds	r7, #40	@ 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200197b0 	.word	0x200197b0
 8006af8:	20019780 	.word	0x20019780

08006afc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b04:	4b04      	ldr	r3, [pc, #16]	@ (8006b18 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	1ad3      	subs	r3, r2, r3
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	20019780 	.word	0x20019780

08006b1c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	@ 0x30
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b26:	4b40      	ldr	r3, [pc, #256]	@ (8006c28 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d077      	beq.n	8006c1e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c28 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b34:	2300      	movs	r3, #0
 8006b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b38:	e008      	b.n	8006b4c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d007      	beq.n	8006b56 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b48:	3301      	adds	r3, #1
 8006b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3f2      	bcc.n	8006b3a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b54:	e000      	b.n	8006b58 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b56:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d055      	beq.n	8006c0a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	482f      	ldr	r0, [pc, #188]	@ (8006c2c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006b6e:	f7fe ff4b 	bl	8005a08 <_PreparePacket>
 8006b72:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7c:	79fb      	ldrb	r3, [r7, #7]
 8006b7e:	623b      	str	r3, [r7, #32]
 8006b80:	e00b      	b.n	8006b9a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b88:	1c59      	adds	r1, r3, #1
 8006b8a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	09db      	lsrs	r3, r3, #7
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9e:	d8f0      	bhi.n	8006b82 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ba6:	6a3a      	ldr	r2, [r7, #32]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	61fb      	str	r3, [r7, #28]
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	61bb      	str	r3, [r7, #24]
 8006bba:	e00b      	b.n	8006bd4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	b2da      	uxtb	r2, r3
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	61f9      	str	r1, [r7, #28]
 8006bc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	09db      	lsrs	r3, r3, #7
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bd8:	d8f0      	bhi.n	8006bbc <SEGGER_SYSVIEW_SendModule+0xa0>
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	61fa      	str	r2, [r7, #28]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2280      	movs	r2, #128	@ 0x80
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7fe fed8 	bl	80059a8 <_EncodeStr>
 8006bf8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006bfa:	2216      	movs	r2, #22
 8006bfc:	68f9      	ldr	r1, [r7, #12]
 8006bfe:	6938      	ldr	r0, [r7, #16]
 8006c00:	f7fe ffee 	bl	8005be0 <_SendPacket>
      RECORD_END();
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <SEGGER_SYSVIEW_SendModule+0x102>
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4798      	blx	r3
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3730      	adds	r7, #48	@ 0x30
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200197a8 	.word	0x200197a8
 8006c2c:	200197b0 	.word	0x200197b0

08006c30 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c36:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00f      	beq.n	8006c5e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d002      	beq.n	8006c52 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f2      	bne.n	8006c44 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200197a8 	.word	0x200197a8

08006c6c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006c72:	f3ef 8311 	mrs	r3, BASEPRI
 8006c76:	f04f 0120 	mov.w	r1, #32
 8006c7a:	f381 8811 	msr	BASEPRI, r1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	4817      	ldr	r0, [pc, #92]	@ (8006ce0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006c82:	f7fe fec1 	bl	8005a08 <_PreparePacket>
 8006c86:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	617b      	str	r3, [r7, #20]
 8006c90:	4b14      	ldr	r3, [pc, #80]	@ (8006ce4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	613b      	str	r3, [r7, #16]
 8006c96:	e00b      	b.n	8006cb0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	6179      	str	r1, [r7, #20]
 8006ca2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	09db      	lsrs	r3, r3, #7
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb4:	d8f0      	bhi.n	8006c98 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	617a      	str	r2, [r7, #20]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006cc6:	221b      	movs	r2, #27
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f7fe ff88 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f383 8811 	msr	BASEPRI, r3
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	200197b0 	.word	0x200197b0
 8006ce4:	200197ac 	.word	0x200197ac

08006ce8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	@ 0x28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf4:	f04f 0120 	mov.w	r1, #32
 8006cf8:	f381 8811 	msr	BASEPRI, r1
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	4827      	ldr	r0, [pc, #156]	@ (8006d9c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d00:	f7fe fe82 	bl	8005a08 <_PreparePacket>
 8006d04:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d06:	2280      	movs	r2, #128	@ 0x80
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	6938      	ldr	r0, [r7, #16]
 8006d0c:	f7fe fe4c 	bl	80059a8 <_EncodeStr>
 8006d10:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d16:	2301      	movs	r3, #1
 8006d18:	623b      	str	r3, [r7, #32]
 8006d1a:	e00b      	b.n	8006d34 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	b2da      	uxtb	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	1c59      	adds	r1, r3, #1
 8006d24:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	09db      	lsrs	r3, r3, #7
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d38:	d8f0      	bhi.n	8006d1c <SEGGER_SYSVIEW_Warn+0x34>
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	e00b      	b.n	8006d6c <SEGGER_SYSVIEW_Warn+0x84>
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	1c59      	adds	r1, r3, #1
 8006d5c:	61f9      	str	r1, [r7, #28]
 8006d5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	09db      	lsrs	r3, r3, #7
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d70:	d8f0      	bhi.n	8006d54 <SEGGER_SYSVIEW_Warn+0x6c>
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	61fa      	str	r2, [r7, #28]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006d82:	221a      	movs	r2, #26
 8006d84:	68f9      	ldr	r1, [r7, #12]
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f7fe ff2a 	bl	8005be0 <_SendPacket>
  RECORD_END();
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f383 8811 	msr	BASEPRI, r3
}
 8006d92:	bf00      	nop
 8006d94:	3728      	adds	r7, #40	@ 0x28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200197b0 	.word	0x200197b0

08006da0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006da6:	2300      	movs	r3, #0
 8006da8:	607b      	str	r3, [r7, #4]
 8006daa:	e033      	b.n	8006e14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006dac:	491e      	ldr	r1, [pc, #120]	@ (8006e28 <_cbSendTaskList+0x88>)
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	491a      	ldr	r1, [pc, #104]	@ (8006e28 <_cbSendTaskList+0x88>)
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3304      	adds	r3, #4
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	4c16      	ldr	r4, [pc, #88]	@ (8006e28 <_cbSendTaskList+0x88>)
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4423      	add	r3, r4
 8006ddc:	3308      	adds	r3, #8
 8006dde:	681c      	ldr	r4, [r3, #0]
 8006de0:	4d11      	ldr	r5, [pc, #68]	@ (8006e28 <_cbSendTaskList+0x88>)
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	442b      	add	r3, r5
 8006dee:	330c      	adds	r3, #12
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	4e0d      	ldr	r6, [pc, #52]	@ (8006e28 <_cbSendTaskList+0x88>)
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	4433      	add	r3, r6
 8006e00:	3310      	adds	r3, #16
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	462b      	mov	r3, r5
 8006e08:	4622      	mov	r2, r4
 8006e0a:	f000 f8bd 	bl	8006f88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3301      	adds	r3, #1
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	4b05      	ldr	r3, [pc, #20]	@ (8006e2c <_cbSendTaskList+0x8c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d3c6      	bcc.n	8006dac <_cbSendTaskList+0xc>
  }
}
 8006e1e:	bf00      	nop
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e28:	20019894 	.word	0x20019894
 8006e2c:	20019934 	.word	0x20019934

08006e30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006e38:	f7fc fe82 	bl	8003b40 <xTaskGetTickCountFromISR>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2200      	movs	r2, #0
 8006e40:	469a      	mov	sl, r3
 8006e42:	4693      	mov	fp, r2
 8006e44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	f04f 0a00 	mov.w	sl, #0
 8006e54:	f04f 0b00 	mov.w	fp, #0
 8006e58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006e5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006e60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006e64:	4652      	mov	r2, sl
 8006e66:	465b      	mov	r3, fp
 8006e68:	1a14      	subs	r4, r2, r0
 8006e6a:	eb63 0501 	sbc.w	r5, r3, r1
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	00ab      	lsls	r3, r5, #2
 8006e78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006e7c:	00a2      	lsls	r2, r4, #2
 8006e7e:	4614      	mov	r4, r2
 8006e80:	461d      	mov	r5, r3
 8006e82:	eb14 0800 	adds.w	r8, r4, r0
 8006e86:	eb45 0901 	adc.w	r9, r5, r1
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e9e:	4690      	mov	r8, r2
 8006ea0:	4699      	mov	r9, r3
 8006ea2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006eb8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006ec6:	2205      	movs	r2, #5
 8006ec8:	492b      	ldr	r1, [pc, #172]	@ (8006f78 <SYSVIEW_AddTask+0xc0>)
 8006eca:	68b8      	ldr	r0, [r7, #8]
 8006ecc:	f000 f8b2 	bl	8007034 <memcmp>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d04b      	beq.n	8006f6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006ed6:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b07      	cmp	r3, #7
 8006edc:	d903      	bls.n	8006ee6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006ede:	4828      	ldr	r0, [pc, #160]	@ (8006f80 <SYSVIEW_AddTask+0xc8>)
 8006ee0:	f7ff ff02 	bl	8006ce8 <SEGGER_SYSVIEW_Warn>
    return;
 8006ee4:	e044      	b.n	8006f70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006ee6:	4b25      	ldr	r3, [pc, #148]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4926      	ldr	r1, [pc, #152]	@ (8006f84 <SYSVIEW_AddTask+0xcc>)
 8006eec:	4613      	mov	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006efa:	4b20      	ldr	r3, [pc, #128]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4921      	ldr	r1, [pc, #132]	@ (8006f84 <SYSVIEW_AddTask+0xcc>)
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006f10:	4b1a      	ldr	r3, [pc, #104]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	491b      	ldr	r1, [pc, #108]	@ (8006f84 <SYSVIEW_AddTask+0xcc>)
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3308      	adds	r3, #8
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006f26:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4916      	ldr	r1, [pc, #88]	@ (8006f84 <SYSVIEW_AddTask+0xcc>)
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	330c      	adds	r3, #12
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	4910      	ldr	r1, [pc, #64]	@ (8006f84 <SYSVIEW_AddTask+0xcc>)
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	3310      	adds	r3, #16
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006f52:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3301      	adds	r3, #1
 8006f58:	4a08      	ldr	r2, [pc, #32]	@ (8006f7c <SYSVIEW_AddTask+0xc4>)
 8006f5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f80e 	bl	8006f88 <SYSVIEW_SendTaskInfo>
 8006f6c:	e000      	b.n	8006f70 <SYSVIEW_AddTask+0xb8>
    return;
 8006f6e:	bf00      	nop

}
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	08007a68 	.word	0x08007a68
 8006f7c:	20019934 	.word	0x20019934
 8006f80:	08007a70 	.word	0x08007a70
 8006f84:	20019894 	.word	0x20019894

08006f88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	@ 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	2214      	movs	r2, #20
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f858 	bl	8007054 <memset>
  TaskInfo.TaskID     = TaskID;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006fb8:	f107 0314 	add.w	r3, r7, #20
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7ff f9ff 	bl	80063c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006fc2:	bf00      	nop
 8006fc4:	3728      	adds	r7, #40	@ 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <sniprintf>:
 8006fcc:	b40c      	push	{r2, r3}
 8006fce:	b530      	push	{r4, r5, lr}
 8006fd0:	4b17      	ldr	r3, [pc, #92]	@ (8007030 <sniprintf+0x64>)
 8006fd2:	1e0c      	subs	r4, r1, #0
 8006fd4:	681d      	ldr	r5, [r3, #0]
 8006fd6:	b09d      	sub	sp, #116	@ 0x74
 8006fd8:	da08      	bge.n	8006fec <sniprintf+0x20>
 8006fda:	238b      	movs	r3, #139	@ 0x8b
 8006fdc:	602b      	str	r3, [r5, #0]
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b01d      	add	sp, #116	@ 0x74
 8006fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe8:	b002      	add	sp, #8
 8006fea:	4770      	bx	lr
 8006fec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ff4:	bf14      	ite	ne
 8006ff6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ffa:	4623      	moveq	r3, r4
 8006ffc:	9304      	str	r3, [sp, #16]
 8006ffe:	9307      	str	r3, [sp, #28]
 8007000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007004:	9002      	str	r0, [sp, #8]
 8007006:	9006      	str	r0, [sp, #24]
 8007008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800700c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800700e:	ab21      	add	r3, sp, #132	@ 0x84
 8007010:	a902      	add	r1, sp, #8
 8007012:	4628      	mov	r0, r5
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 f9b3 	bl	8007380 <_svfiprintf_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	bfbc      	itt	lt
 800701e:	238b      	movlt	r3, #139	@ 0x8b
 8007020:	602b      	strlt	r3, [r5, #0]
 8007022:	2c00      	cmp	r4, #0
 8007024:	d0dd      	beq.n	8006fe2 <sniprintf+0x16>
 8007026:	9b02      	ldr	r3, [sp, #8]
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e7d9      	b.n	8006fe2 <sniprintf+0x16>
 800702e:	bf00      	nop
 8007030:	20000014 	.word	0x20000014

08007034 <memcmp>:
 8007034:	b510      	push	{r4, lr}
 8007036:	3901      	subs	r1, #1
 8007038:	4402      	add	r2, r0
 800703a:	4290      	cmp	r0, r2
 800703c:	d101      	bne.n	8007042 <memcmp+0xe>
 800703e:	2000      	movs	r0, #0
 8007040:	e005      	b.n	800704e <memcmp+0x1a>
 8007042:	7803      	ldrb	r3, [r0, #0]
 8007044:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007048:	42a3      	cmp	r3, r4
 800704a:	d001      	beq.n	8007050 <memcmp+0x1c>
 800704c:	1b18      	subs	r0, r3, r4
 800704e:	bd10      	pop	{r4, pc}
 8007050:	3001      	adds	r0, #1
 8007052:	e7f2      	b.n	800703a <memcmp+0x6>

08007054 <memset>:
 8007054:	4402      	add	r2, r0
 8007056:	4603      	mov	r3, r0
 8007058:	4293      	cmp	r3, r2
 800705a:	d100      	bne.n	800705e <memset+0xa>
 800705c:	4770      	bx	lr
 800705e:	f803 1b01 	strb.w	r1, [r3], #1
 8007062:	e7f9      	b.n	8007058 <memset+0x4>

08007064 <__errno>:
 8007064:	4b01      	ldr	r3, [pc, #4]	@ (800706c <__errno+0x8>)
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000014 	.word	0x20000014

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	@ (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	@ (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	@ (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	@ (80070b4 <__libc_init_array+0x44>)
 8007084:	f000 fc66 	bl	8007954 <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	08007b3c 	.word	0x08007b3c
 80070ac:	08007b3c 	.word	0x08007b3c
 80070b0:	08007b3c 	.word	0x08007b3c
 80070b4:	08007b40 	.word	0x08007b40

080070b8 <__retarget_lock_acquire_recursive>:
 80070b8:	4770      	bx	lr

080070ba <__retarget_lock_release_recursive>:
 80070ba:	4770      	bx	lr

080070bc <memcpy>:
 80070bc:	440a      	add	r2, r1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	4770      	bx	lr
 80070c8:	b510      	push	{r4, lr}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d2:	4291      	cmp	r1, r2
 80070d4:	d1f9      	bne.n	80070ca <memcpy+0xe>
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <_free_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4605      	mov	r5, r0
 80070dc:	2900      	cmp	r1, #0
 80070de:	d041      	beq.n	8007164 <_free_r+0x8c>
 80070e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e4:	1f0c      	subs	r4, r1, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	18e4      	addlt	r4, r4, r3
 80070ec:	f000 f8e0 	bl	80072b0 <__malloc_lock>
 80070f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <_free_r+0x90>)
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	b933      	cbnz	r3, 8007104 <_free_r+0x2c>
 80070f6:	6063      	str	r3, [r4, #4]
 80070f8:	6014      	str	r4, [r2, #0]
 80070fa:	4628      	mov	r0, r5
 80070fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007100:	f000 b8dc 	b.w	80072bc <__malloc_unlock>
 8007104:	42a3      	cmp	r3, r4
 8007106:	d908      	bls.n	800711a <_free_r+0x42>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	1821      	adds	r1, r4, r0
 800710c:	428b      	cmp	r3, r1
 800710e:	bf01      	itttt	eq
 8007110:	6819      	ldreq	r1, [r3, #0]
 8007112:	685b      	ldreq	r3, [r3, #4]
 8007114:	1809      	addeq	r1, r1, r0
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	e7ed      	b.n	80070f6 <_free_r+0x1e>
 800711a:	461a      	mov	r2, r3
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	b10b      	cbz	r3, 8007124 <_free_r+0x4c>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d9fa      	bls.n	800711a <_free_r+0x42>
 8007124:	6811      	ldr	r1, [r2, #0]
 8007126:	1850      	adds	r0, r2, r1
 8007128:	42a0      	cmp	r0, r4
 800712a:	d10b      	bne.n	8007144 <_free_r+0x6c>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	4401      	add	r1, r0
 8007130:	1850      	adds	r0, r2, r1
 8007132:	4283      	cmp	r3, r0
 8007134:	6011      	str	r1, [r2, #0]
 8007136:	d1e0      	bne.n	80070fa <_free_r+0x22>
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	6053      	str	r3, [r2, #4]
 800713e:	4408      	add	r0, r1
 8007140:	6010      	str	r0, [r2, #0]
 8007142:	e7da      	b.n	80070fa <_free_r+0x22>
 8007144:	d902      	bls.n	800714c <_free_r+0x74>
 8007146:	230c      	movs	r3, #12
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	e7d6      	b.n	80070fa <_free_r+0x22>
 800714c:	6820      	ldr	r0, [r4, #0]
 800714e:	1821      	adds	r1, r4, r0
 8007150:	428b      	cmp	r3, r1
 8007152:	bf04      	itt	eq
 8007154:	6819      	ldreq	r1, [r3, #0]
 8007156:	685b      	ldreq	r3, [r3, #4]
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	bf04      	itt	eq
 800715c:	1809      	addeq	r1, r1, r0
 800715e:	6021      	streq	r1, [r4, #0]
 8007160:	6054      	str	r4, [r2, #4]
 8007162:	e7ca      	b.n	80070fa <_free_r+0x22>
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	20019a7c 	.word	0x20019a7c

0800716c <sbrk_aligned>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4e0f      	ldr	r6, [pc, #60]	@ (80071ac <sbrk_aligned+0x40>)
 8007170:	460c      	mov	r4, r1
 8007172:	6831      	ldr	r1, [r6, #0]
 8007174:	4605      	mov	r5, r0
 8007176:	b911      	cbnz	r1, 800717e <sbrk_aligned+0x12>
 8007178:	f000 fba6 	bl	80078c8 <_sbrk_r>
 800717c:	6030      	str	r0, [r6, #0]
 800717e:	4621      	mov	r1, r4
 8007180:	4628      	mov	r0, r5
 8007182:	f000 fba1 	bl	80078c8 <_sbrk_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d103      	bne.n	8007192 <sbrk_aligned+0x26>
 800718a:	f04f 34ff 	mov.w	r4, #4294967295
 800718e:	4620      	mov	r0, r4
 8007190:	bd70      	pop	{r4, r5, r6, pc}
 8007192:	1cc4      	adds	r4, r0, #3
 8007194:	f024 0403 	bic.w	r4, r4, #3
 8007198:	42a0      	cmp	r0, r4
 800719a:	d0f8      	beq.n	800718e <sbrk_aligned+0x22>
 800719c:	1a21      	subs	r1, r4, r0
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 fb92 	bl	80078c8 <_sbrk_r>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d1f2      	bne.n	800718e <sbrk_aligned+0x22>
 80071a8:	e7ef      	b.n	800718a <sbrk_aligned+0x1e>
 80071aa:	bf00      	nop
 80071ac:	20019a78 	.word	0x20019a78

080071b0 <_malloc_r>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	1ccd      	adds	r5, r1, #3
 80071b6:	f025 0503 	bic.w	r5, r5, #3
 80071ba:	3508      	adds	r5, #8
 80071bc:	2d0c      	cmp	r5, #12
 80071be:	bf38      	it	cc
 80071c0:	250c      	movcc	r5, #12
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	4606      	mov	r6, r0
 80071c6:	db01      	blt.n	80071cc <_malloc_r+0x1c>
 80071c8:	42a9      	cmp	r1, r5
 80071ca:	d904      	bls.n	80071d6 <_malloc_r+0x26>
 80071cc:	230c      	movs	r3, #12
 80071ce:	6033      	str	r3, [r6, #0]
 80071d0:	2000      	movs	r0, #0
 80071d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072ac <_malloc_r+0xfc>
 80071da:	f000 f869 	bl	80072b0 <__malloc_lock>
 80071de:	f8d8 3000 	ldr.w	r3, [r8]
 80071e2:	461c      	mov	r4, r3
 80071e4:	bb44      	cbnz	r4, 8007238 <_malloc_r+0x88>
 80071e6:	4629      	mov	r1, r5
 80071e8:	4630      	mov	r0, r6
 80071ea:	f7ff ffbf 	bl	800716c <sbrk_aligned>
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	4604      	mov	r4, r0
 80071f2:	d158      	bne.n	80072a6 <_malloc_r+0xf6>
 80071f4:	f8d8 4000 	ldr.w	r4, [r8]
 80071f8:	4627      	mov	r7, r4
 80071fa:	2f00      	cmp	r7, #0
 80071fc:	d143      	bne.n	8007286 <_malloc_r+0xd6>
 80071fe:	2c00      	cmp	r4, #0
 8007200:	d04b      	beq.n	800729a <_malloc_r+0xea>
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	4639      	mov	r1, r7
 8007206:	4630      	mov	r0, r6
 8007208:	eb04 0903 	add.w	r9, r4, r3
 800720c:	f000 fb5c 	bl	80078c8 <_sbrk_r>
 8007210:	4581      	cmp	r9, r0
 8007212:	d142      	bne.n	800729a <_malloc_r+0xea>
 8007214:	6821      	ldr	r1, [r4, #0]
 8007216:	1a6d      	subs	r5, r5, r1
 8007218:	4629      	mov	r1, r5
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff ffa6 	bl	800716c <sbrk_aligned>
 8007220:	3001      	adds	r0, #1
 8007222:	d03a      	beq.n	800729a <_malloc_r+0xea>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	442b      	add	r3, r5
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	f8d8 3000 	ldr.w	r3, [r8]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	bb62      	cbnz	r2, 800728c <_malloc_r+0xdc>
 8007232:	f8c8 7000 	str.w	r7, [r8]
 8007236:	e00f      	b.n	8007258 <_malloc_r+0xa8>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	1b52      	subs	r2, r2, r5
 800723c:	d420      	bmi.n	8007280 <_malloc_r+0xd0>
 800723e:	2a0b      	cmp	r2, #11
 8007240:	d917      	bls.n	8007272 <_malloc_r+0xc2>
 8007242:	1961      	adds	r1, r4, r5
 8007244:	42a3      	cmp	r3, r4
 8007246:	6025      	str	r5, [r4, #0]
 8007248:	bf18      	it	ne
 800724a:	6059      	strne	r1, [r3, #4]
 800724c:	6863      	ldr	r3, [r4, #4]
 800724e:	bf08      	it	eq
 8007250:	f8c8 1000 	streq.w	r1, [r8]
 8007254:	5162      	str	r2, [r4, r5]
 8007256:	604b      	str	r3, [r1, #4]
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f82f 	bl	80072bc <__malloc_unlock>
 800725e:	f104 000b 	add.w	r0, r4, #11
 8007262:	1d23      	adds	r3, r4, #4
 8007264:	f020 0007 	bic.w	r0, r0, #7
 8007268:	1ac2      	subs	r2, r0, r3
 800726a:	bf1c      	itt	ne
 800726c:	1a1b      	subne	r3, r3, r0
 800726e:	50a3      	strne	r3, [r4, r2]
 8007270:	e7af      	b.n	80071d2 <_malloc_r+0x22>
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	42a3      	cmp	r3, r4
 8007276:	bf0c      	ite	eq
 8007278:	f8c8 2000 	streq.w	r2, [r8]
 800727c:	605a      	strne	r2, [r3, #4]
 800727e:	e7eb      	b.n	8007258 <_malloc_r+0xa8>
 8007280:	4623      	mov	r3, r4
 8007282:	6864      	ldr	r4, [r4, #4]
 8007284:	e7ae      	b.n	80071e4 <_malloc_r+0x34>
 8007286:	463c      	mov	r4, r7
 8007288:	687f      	ldr	r7, [r7, #4]
 800728a:	e7b6      	b.n	80071fa <_malloc_r+0x4a>
 800728c:	461a      	mov	r2, r3
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	42a3      	cmp	r3, r4
 8007292:	d1fb      	bne.n	800728c <_malloc_r+0xdc>
 8007294:	2300      	movs	r3, #0
 8007296:	6053      	str	r3, [r2, #4]
 8007298:	e7de      	b.n	8007258 <_malloc_r+0xa8>
 800729a:	230c      	movs	r3, #12
 800729c:	6033      	str	r3, [r6, #0]
 800729e:	4630      	mov	r0, r6
 80072a0:	f000 f80c 	bl	80072bc <__malloc_unlock>
 80072a4:	e794      	b.n	80071d0 <_malloc_r+0x20>
 80072a6:	6005      	str	r5, [r0, #0]
 80072a8:	e7d6      	b.n	8007258 <_malloc_r+0xa8>
 80072aa:	bf00      	nop
 80072ac:	20019a7c 	.word	0x20019a7c

080072b0 <__malloc_lock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	@ (80072b8 <__malloc_lock+0x8>)
 80072b2:	f7ff bf01 	b.w	80070b8 <__retarget_lock_acquire_recursive>
 80072b6:	bf00      	nop
 80072b8:	20019a74 	.word	0x20019a74

080072bc <__malloc_unlock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	@ (80072c4 <__malloc_unlock+0x8>)
 80072be:	f7ff befc 	b.w	80070ba <__retarget_lock_release_recursive>
 80072c2:	bf00      	nop
 80072c4:	20019a74 	.word	0x20019a74

080072c8 <__ssputs_r>:
 80072c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072cc:	688e      	ldr	r6, [r1, #8]
 80072ce:	461f      	mov	r7, r3
 80072d0:	42be      	cmp	r6, r7
 80072d2:	680b      	ldr	r3, [r1, #0]
 80072d4:	4682      	mov	sl, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	4690      	mov	r8, r2
 80072da:	d82d      	bhi.n	8007338 <__ssputs_r+0x70>
 80072dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072e4:	d026      	beq.n	8007334 <__ssputs_r+0x6c>
 80072e6:	6965      	ldr	r5, [r4, #20]
 80072e8:	6909      	ldr	r1, [r1, #16]
 80072ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072ee:	eba3 0901 	sub.w	r9, r3, r1
 80072f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072f6:	1c7b      	adds	r3, r7, #1
 80072f8:	444b      	add	r3, r9
 80072fa:	106d      	asrs	r5, r5, #1
 80072fc:	429d      	cmp	r5, r3
 80072fe:	bf38      	it	cc
 8007300:	461d      	movcc	r5, r3
 8007302:	0553      	lsls	r3, r2, #21
 8007304:	d527      	bpl.n	8007356 <__ssputs_r+0x8e>
 8007306:	4629      	mov	r1, r5
 8007308:	f7ff ff52 	bl	80071b0 <_malloc_r>
 800730c:	4606      	mov	r6, r0
 800730e:	b360      	cbz	r0, 800736a <__ssputs_r+0xa2>
 8007310:	6921      	ldr	r1, [r4, #16]
 8007312:	464a      	mov	r2, r9
 8007314:	f7ff fed2 	bl	80070bc <memcpy>
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800731e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	6126      	str	r6, [r4, #16]
 8007326:	6165      	str	r5, [r4, #20]
 8007328:	444e      	add	r6, r9
 800732a:	eba5 0509 	sub.w	r5, r5, r9
 800732e:	6026      	str	r6, [r4, #0]
 8007330:	60a5      	str	r5, [r4, #8]
 8007332:	463e      	mov	r6, r7
 8007334:	42be      	cmp	r6, r7
 8007336:	d900      	bls.n	800733a <__ssputs_r+0x72>
 8007338:	463e      	mov	r6, r7
 800733a:	6820      	ldr	r0, [r4, #0]
 800733c:	4632      	mov	r2, r6
 800733e:	4641      	mov	r1, r8
 8007340:	f000 faa8 	bl	8007894 <memmove>
 8007344:	68a3      	ldr	r3, [r4, #8]
 8007346:	1b9b      	subs	r3, r3, r6
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	4433      	add	r3, r6
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	2000      	movs	r0, #0
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007356:	462a      	mov	r2, r5
 8007358:	f000 fac6 	bl	80078e8 <_realloc_r>
 800735c:	4606      	mov	r6, r0
 800735e:	2800      	cmp	r0, #0
 8007360:	d1e0      	bne.n	8007324 <__ssputs_r+0x5c>
 8007362:	6921      	ldr	r1, [r4, #16]
 8007364:	4650      	mov	r0, sl
 8007366:	f7ff feb7 	bl	80070d8 <_free_r>
 800736a:	230c      	movs	r3, #12
 800736c:	f8ca 3000 	str.w	r3, [sl]
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	f04f 30ff 	mov.w	r0, #4294967295
 800737c:	e7e9      	b.n	8007352 <__ssputs_r+0x8a>
	...

08007380 <_svfiprintf_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	4698      	mov	r8, r3
 8007386:	898b      	ldrh	r3, [r1, #12]
 8007388:	061b      	lsls	r3, r3, #24
 800738a:	b09d      	sub	sp, #116	@ 0x74
 800738c:	4607      	mov	r7, r0
 800738e:	460d      	mov	r5, r1
 8007390:	4614      	mov	r4, r2
 8007392:	d510      	bpl.n	80073b6 <_svfiprintf_r+0x36>
 8007394:	690b      	ldr	r3, [r1, #16]
 8007396:	b973      	cbnz	r3, 80073b6 <_svfiprintf_r+0x36>
 8007398:	2140      	movs	r1, #64	@ 0x40
 800739a:	f7ff ff09 	bl	80071b0 <_malloc_r>
 800739e:	6028      	str	r0, [r5, #0]
 80073a0:	6128      	str	r0, [r5, #16]
 80073a2:	b930      	cbnz	r0, 80073b2 <_svfiprintf_r+0x32>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	b01d      	add	sp, #116	@ 0x74
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	2340      	movs	r3, #64	@ 0x40
 80073b4:	616b      	str	r3, [r5, #20]
 80073b6:	2300      	movs	r3, #0
 80073b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ba:	2320      	movs	r3, #32
 80073bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073c4:	2330      	movs	r3, #48	@ 0x30
 80073c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007564 <_svfiprintf_r+0x1e4>
 80073ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ce:	f04f 0901 	mov.w	r9, #1
 80073d2:	4623      	mov	r3, r4
 80073d4:	469a      	mov	sl, r3
 80073d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073da:	b10a      	cbz	r2, 80073e0 <_svfiprintf_r+0x60>
 80073dc:	2a25      	cmp	r2, #37	@ 0x25
 80073de:	d1f9      	bne.n	80073d4 <_svfiprintf_r+0x54>
 80073e0:	ebba 0b04 	subs.w	fp, sl, r4
 80073e4:	d00b      	beq.n	80073fe <_svfiprintf_r+0x7e>
 80073e6:	465b      	mov	r3, fp
 80073e8:	4622      	mov	r2, r4
 80073ea:	4629      	mov	r1, r5
 80073ec:	4638      	mov	r0, r7
 80073ee:	f7ff ff6b 	bl	80072c8 <__ssputs_r>
 80073f2:	3001      	adds	r0, #1
 80073f4:	f000 80a7 	beq.w	8007546 <_svfiprintf_r+0x1c6>
 80073f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073fa:	445a      	add	r2, fp
 80073fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80073fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 809f 	beq.w	8007546 <_svfiprintf_r+0x1c6>
 8007408:	2300      	movs	r3, #0
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007412:	f10a 0a01 	add.w	sl, sl, #1
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	9307      	str	r3, [sp, #28]
 800741a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800741e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007420:	4654      	mov	r4, sl
 8007422:	2205      	movs	r2, #5
 8007424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007428:	484e      	ldr	r0, [pc, #312]	@ (8007564 <_svfiprintf_r+0x1e4>)
 800742a:	f7f8 ff21 	bl	8000270 <memchr>
 800742e:	9a04      	ldr	r2, [sp, #16]
 8007430:	b9d8      	cbnz	r0, 800746a <_svfiprintf_r+0xea>
 8007432:	06d0      	lsls	r0, r2, #27
 8007434:	bf44      	itt	mi
 8007436:	2320      	movmi	r3, #32
 8007438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800743c:	0711      	lsls	r1, r2, #28
 800743e:	bf44      	itt	mi
 8007440:	232b      	movmi	r3, #43	@ 0x2b
 8007442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007446:	f89a 3000 	ldrb.w	r3, [sl]
 800744a:	2b2a      	cmp	r3, #42	@ 0x2a
 800744c:	d015      	beq.n	800747a <_svfiprintf_r+0xfa>
 800744e:	9a07      	ldr	r2, [sp, #28]
 8007450:	4654      	mov	r4, sl
 8007452:	2000      	movs	r0, #0
 8007454:	f04f 0c0a 	mov.w	ip, #10
 8007458:	4621      	mov	r1, r4
 800745a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800745e:	3b30      	subs	r3, #48	@ 0x30
 8007460:	2b09      	cmp	r3, #9
 8007462:	d94b      	bls.n	80074fc <_svfiprintf_r+0x17c>
 8007464:	b1b0      	cbz	r0, 8007494 <_svfiprintf_r+0x114>
 8007466:	9207      	str	r2, [sp, #28]
 8007468:	e014      	b.n	8007494 <_svfiprintf_r+0x114>
 800746a:	eba0 0308 	sub.w	r3, r0, r8
 800746e:	fa09 f303 	lsl.w	r3, r9, r3
 8007472:	4313      	orrs	r3, r2
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	46a2      	mov	sl, r4
 8007478:	e7d2      	b.n	8007420 <_svfiprintf_r+0xa0>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	1d19      	adds	r1, r3, #4
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	9103      	str	r1, [sp, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	bfbb      	ittet	lt
 8007486:	425b      	neglt	r3, r3
 8007488:	f042 0202 	orrlt.w	r2, r2, #2
 800748c:	9307      	strge	r3, [sp, #28]
 800748e:	9307      	strlt	r3, [sp, #28]
 8007490:	bfb8      	it	lt
 8007492:	9204      	strlt	r2, [sp, #16]
 8007494:	7823      	ldrb	r3, [r4, #0]
 8007496:	2b2e      	cmp	r3, #46	@ 0x2e
 8007498:	d10a      	bne.n	80074b0 <_svfiprintf_r+0x130>
 800749a:	7863      	ldrb	r3, [r4, #1]
 800749c:	2b2a      	cmp	r3, #42	@ 0x2a
 800749e:	d132      	bne.n	8007506 <_svfiprintf_r+0x186>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	1d1a      	adds	r2, r3, #4
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	9203      	str	r2, [sp, #12]
 80074a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074ac:	3402      	adds	r4, #2
 80074ae:	9305      	str	r3, [sp, #20]
 80074b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007574 <_svfiprintf_r+0x1f4>
 80074b4:	7821      	ldrb	r1, [r4, #0]
 80074b6:	2203      	movs	r2, #3
 80074b8:	4650      	mov	r0, sl
 80074ba:	f7f8 fed9 	bl	8000270 <memchr>
 80074be:	b138      	cbz	r0, 80074d0 <_svfiprintf_r+0x150>
 80074c0:	9b04      	ldr	r3, [sp, #16]
 80074c2:	eba0 000a 	sub.w	r0, r0, sl
 80074c6:	2240      	movs	r2, #64	@ 0x40
 80074c8:	4082      	lsls	r2, r0
 80074ca:	4313      	orrs	r3, r2
 80074cc:	3401      	adds	r4, #1
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074d4:	4824      	ldr	r0, [pc, #144]	@ (8007568 <_svfiprintf_r+0x1e8>)
 80074d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074da:	2206      	movs	r2, #6
 80074dc:	f7f8 fec8 	bl	8000270 <memchr>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d036      	beq.n	8007552 <_svfiprintf_r+0x1d2>
 80074e4:	4b21      	ldr	r3, [pc, #132]	@ (800756c <_svfiprintf_r+0x1ec>)
 80074e6:	bb1b      	cbnz	r3, 8007530 <_svfiprintf_r+0x1b0>
 80074e8:	9b03      	ldr	r3, [sp, #12]
 80074ea:	3307      	adds	r3, #7
 80074ec:	f023 0307 	bic.w	r3, r3, #7
 80074f0:	3308      	adds	r3, #8
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f6:	4433      	add	r3, r6
 80074f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fa:	e76a      	b.n	80073d2 <_svfiprintf_r+0x52>
 80074fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007500:	460c      	mov	r4, r1
 8007502:	2001      	movs	r0, #1
 8007504:	e7a8      	b.n	8007458 <_svfiprintf_r+0xd8>
 8007506:	2300      	movs	r3, #0
 8007508:	3401      	adds	r4, #1
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	4619      	mov	r1, r3
 800750e:	f04f 0c0a 	mov.w	ip, #10
 8007512:	4620      	mov	r0, r4
 8007514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007518:	3a30      	subs	r2, #48	@ 0x30
 800751a:	2a09      	cmp	r2, #9
 800751c:	d903      	bls.n	8007526 <_svfiprintf_r+0x1a6>
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0c6      	beq.n	80074b0 <_svfiprintf_r+0x130>
 8007522:	9105      	str	r1, [sp, #20]
 8007524:	e7c4      	b.n	80074b0 <_svfiprintf_r+0x130>
 8007526:	fb0c 2101 	mla	r1, ip, r1, r2
 800752a:	4604      	mov	r4, r0
 800752c:	2301      	movs	r3, #1
 800752e:	e7f0      	b.n	8007512 <_svfiprintf_r+0x192>
 8007530:	ab03      	add	r3, sp, #12
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	462a      	mov	r2, r5
 8007536:	4b0e      	ldr	r3, [pc, #56]	@ (8007570 <_svfiprintf_r+0x1f0>)
 8007538:	a904      	add	r1, sp, #16
 800753a:	4638      	mov	r0, r7
 800753c:	f3af 8000 	nop.w
 8007540:	1c42      	adds	r2, r0, #1
 8007542:	4606      	mov	r6, r0
 8007544:	d1d6      	bne.n	80074f4 <_svfiprintf_r+0x174>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	065b      	lsls	r3, r3, #25
 800754a:	f53f af2d 	bmi.w	80073a8 <_svfiprintf_r+0x28>
 800754e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007550:	e72c      	b.n	80073ac <_svfiprintf_r+0x2c>
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	462a      	mov	r2, r5
 8007558:	4b05      	ldr	r3, [pc, #20]	@ (8007570 <_svfiprintf_r+0x1f0>)
 800755a:	a904      	add	r1, sp, #16
 800755c:	4638      	mov	r0, r7
 800755e:	f000 f879 	bl	8007654 <_printf_i>
 8007562:	e7ed      	b.n	8007540 <_svfiprintf_r+0x1c0>
 8007564:	08007b00 	.word	0x08007b00
 8007568:	08007b0a 	.word	0x08007b0a
 800756c:	00000000 	.word	0x00000000
 8007570:	080072c9 	.word	0x080072c9
 8007574:	08007b06 	.word	0x08007b06

08007578 <_printf_common>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	4616      	mov	r6, r2
 800757e:	4698      	mov	r8, r3
 8007580:	688a      	ldr	r2, [r1, #8]
 8007582:	690b      	ldr	r3, [r1, #16]
 8007584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007588:	4293      	cmp	r3, r2
 800758a:	bfb8      	it	lt
 800758c:	4613      	movlt	r3, r2
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007594:	4607      	mov	r7, r0
 8007596:	460c      	mov	r4, r1
 8007598:	b10a      	cbz	r2, 800759e <_printf_common+0x26>
 800759a:	3301      	adds	r3, #1
 800759c:	6033      	str	r3, [r6, #0]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	0699      	lsls	r1, r3, #26
 80075a2:	bf42      	ittt	mi
 80075a4:	6833      	ldrmi	r3, [r6, #0]
 80075a6:	3302      	addmi	r3, #2
 80075a8:	6033      	strmi	r3, [r6, #0]
 80075aa:	6825      	ldr	r5, [r4, #0]
 80075ac:	f015 0506 	ands.w	r5, r5, #6
 80075b0:	d106      	bne.n	80075c0 <_printf_common+0x48>
 80075b2:	f104 0a19 	add.w	sl, r4, #25
 80075b6:	68e3      	ldr	r3, [r4, #12]
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	42ab      	cmp	r3, r5
 80075be:	dc26      	bgt.n	800760e <_printf_common+0x96>
 80075c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	3b00      	subs	r3, #0
 80075c8:	bf18      	it	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	0692      	lsls	r2, r2, #26
 80075ce:	d42b      	bmi.n	8007628 <_printf_common+0xb0>
 80075d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075d4:	4641      	mov	r1, r8
 80075d6:	4638      	mov	r0, r7
 80075d8:	47c8      	blx	r9
 80075da:	3001      	adds	r0, #1
 80075dc:	d01e      	beq.n	800761c <_printf_common+0xa4>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	6922      	ldr	r2, [r4, #16]
 80075e2:	f003 0306 	and.w	r3, r3, #6
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	bf02      	ittt	eq
 80075ea:	68e5      	ldreq	r5, [r4, #12]
 80075ec:	6833      	ldreq	r3, [r6, #0]
 80075ee:	1aed      	subeq	r5, r5, r3
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	bf0c      	ite	eq
 80075f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075f8:	2500      	movne	r5, #0
 80075fa:	4293      	cmp	r3, r2
 80075fc:	bfc4      	itt	gt
 80075fe:	1a9b      	subgt	r3, r3, r2
 8007600:	18ed      	addgt	r5, r5, r3
 8007602:	2600      	movs	r6, #0
 8007604:	341a      	adds	r4, #26
 8007606:	42b5      	cmp	r5, r6
 8007608:	d11a      	bne.n	8007640 <_printf_common+0xc8>
 800760a:	2000      	movs	r0, #0
 800760c:	e008      	b.n	8007620 <_printf_common+0xa8>
 800760e:	2301      	movs	r3, #1
 8007610:	4652      	mov	r2, sl
 8007612:	4641      	mov	r1, r8
 8007614:	4638      	mov	r0, r7
 8007616:	47c8      	blx	r9
 8007618:	3001      	adds	r0, #1
 800761a:	d103      	bne.n	8007624 <_printf_common+0xac>
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007624:	3501      	adds	r5, #1
 8007626:	e7c6      	b.n	80075b6 <_printf_common+0x3e>
 8007628:	18e1      	adds	r1, r4, r3
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	2030      	movs	r0, #48	@ 0x30
 800762e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007632:	4422      	add	r2, r4
 8007634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800763c:	3302      	adds	r3, #2
 800763e:	e7c7      	b.n	80075d0 <_printf_common+0x58>
 8007640:	2301      	movs	r3, #1
 8007642:	4622      	mov	r2, r4
 8007644:	4641      	mov	r1, r8
 8007646:	4638      	mov	r0, r7
 8007648:	47c8      	blx	r9
 800764a:	3001      	adds	r0, #1
 800764c:	d0e6      	beq.n	800761c <_printf_common+0xa4>
 800764e:	3601      	adds	r6, #1
 8007650:	e7d9      	b.n	8007606 <_printf_common+0x8e>
	...

08007654 <_printf_i>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	7e0f      	ldrb	r7, [r1, #24]
 800765a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800765c:	2f78      	cmp	r7, #120	@ 0x78
 800765e:	4691      	mov	r9, r2
 8007660:	4680      	mov	r8, r0
 8007662:	460c      	mov	r4, r1
 8007664:	469a      	mov	sl, r3
 8007666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800766a:	d807      	bhi.n	800767c <_printf_i+0x28>
 800766c:	2f62      	cmp	r7, #98	@ 0x62
 800766e:	d80a      	bhi.n	8007686 <_printf_i+0x32>
 8007670:	2f00      	cmp	r7, #0
 8007672:	f000 80d2 	beq.w	800781a <_printf_i+0x1c6>
 8007676:	2f58      	cmp	r7, #88	@ 0x58
 8007678:	f000 80b9 	beq.w	80077ee <_printf_i+0x19a>
 800767c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007684:	e03a      	b.n	80076fc <_printf_i+0xa8>
 8007686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800768a:	2b15      	cmp	r3, #21
 800768c:	d8f6      	bhi.n	800767c <_printf_i+0x28>
 800768e:	a101      	add	r1, pc, #4	@ (adr r1, 8007694 <_printf_i+0x40>)
 8007690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007694:	080076ed 	.word	0x080076ed
 8007698:	08007701 	.word	0x08007701
 800769c:	0800767d 	.word	0x0800767d
 80076a0:	0800767d 	.word	0x0800767d
 80076a4:	0800767d 	.word	0x0800767d
 80076a8:	0800767d 	.word	0x0800767d
 80076ac:	08007701 	.word	0x08007701
 80076b0:	0800767d 	.word	0x0800767d
 80076b4:	0800767d 	.word	0x0800767d
 80076b8:	0800767d 	.word	0x0800767d
 80076bc:	0800767d 	.word	0x0800767d
 80076c0:	08007801 	.word	0x08007801
 80076c4:	0800772b 	.word	0x0800772b
 80076c8:	080077bb 	.word	0x080077bb
 80076cc:	0800767d 	.word	0x0800767d
 80076d0:	0800767d 	.word	0x0800767d
 80076d4:	08007823 	.word	0x08007823
 80076d8:	0800767d 	.word	0x0800767d
 80076dc:	0800772b 	.word	0x0800772b
 80076e0:	0800767d 	.word	0x0800767d
 80076e4:	0800767d 	.word	0x0800767d
 80076e8:	080077c3 	.word	0x080077c3
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6032      	str	r2, [r6, #0]
 80076f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076fc:	2301      	movs	r3, #1
 80076fe:	e09d      	b.n	800783c <_printf_i+0x1e8>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	6820      	ldr	r0, [r4, #0]
 8007704:	1d19      	adds	r1, r3, #4
 8007706:	6031      	str	r1, [r6, #0]
 8007708:	0606      	lsls	r6, r0, #24
 800770a:	d501      	bpl.n	8007710 <_printf_i+0xbc>
 800770c:	681d      	ldr	r5, [r3, #0]
 800770e:	e003      	b.n	8007718 <_printf_i+0xc4>
 8007710:	0645      	lsls	r5, r0, #25
 8007712:	d5fb      	bpl.n	800770c <_printf_i+0xb8>
 8007714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007718:	2d00      	cmp	r5, #0
 800771a:	da03      	bge.n	8007724 <_printf_i+0xd0>
 800771c:	232d      	movs	r3, #45	@ 0x2d
 800771e:	426d      	negs	r5, r5
 8007720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007724:	4859      	ldr	r0, [pc, #356]	@ (800788c <_printf_i+0x238>)
 8007726:	230a      	movs	r3, #10
 8007728:	e011      	b.n	800774e <_printf_i+0xfa>
 800772a:	6821      	ldr	r1, [r4, #0]
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	0608      	lsls	r0, r1, #24
 8007730:	f853 5b04 	ldr.w	r5, [r3], #4
 8007734:	d402      	bmi.n	800773c <_printf_i+0xe8>
 8007736:	0649      	lsls	r1, r1, #25
 8007738:	bf48      	it	mi
 800773a:	b2ad      	uxthmi	r5, r5
 800773c:	2f6f      	cmp	r7, #111	@ 0x6f
 800773e:	4853      	ldr	r0, [pc, #332]	@ (800788c <_printf_i+0x238>)
 8007740:	6033      	str	r3, [r6, #0]
 8007742:	bf14      	ite	ne
 8007744:	230a      	movne	r3, #10
 8007746:	2308      	moveq	r3, #8
 8007748:	2100      	movs	r1, #0
 800774a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800774e:	6866      	ldr	r6, [r4, #4]
 8007750:	60a6      	str	r6, [r4, #8]
 8007752:	2e00      	cmp	r6, #0
 8007754:	bfa2      	ittt	ge
 8007756:	6821      	ldrge	r1, [r4, #0]
 8007758:	f021 0104 	bicge.w	r1, r1, #4
 800775c:	6021      	strge	r1, [r4, #0]
 800775e:	b90d      	cbnz	r5, 8007764 <_printf_i+0x110>
 8007760:	2e00      	cmp	r6, #0
 8007762:	d04b      	beq.n	80077fc <_printf_i+0x1a8>
 8007764:	4616      	mov	r6, r2
 8007766:	fbb5 f1f3 	udiv	r1, r5, r3
 800776a:	fb03 5711 	mls	r7, r3, r1, r5
 800776e:	5dc7      	ldrb	r7, [r0, r7]
 8007770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007774:	462f      	mov	r7, r5
 8007776:	42bb      	cmp	r3, r7
 8007778:	460d      	mov	r5, r1
 800777a:	d9f4      	bls.n	8007766 <_printf_i+0x112>
 800777c:	2b08      	cmp	r3, #8
 800777e:	d10b      	bne.n	8007798 <_printf_i+0x144>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	07df      	lsls	r7, r3, #31
 8007784:	d508      	bpl.n	8007798 <_printf_i+0x144>
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	6861      	ldr	r1, [r4, #4]
 800778a:	4299      	cmp	r1, r3
 800778c:	bfde      	ittt	le
 800778e:	2330      	movle	r3, #48	@ 0x30
 8007790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007798:	1b92      	subs	r2, r2, r6
 800779a:	6122      	str	r2, [r4, #16]
 800779c:	f8cd a000 	str.w	sl, [sp]
 80077a0:	464b      	mov	r3, r9
 80077a2:	aa03      	add	r2, sp, #12
 80077a4:	4621      	mov	r1, r4
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7ff fee6 	bl	8007578 <_printf_common>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d14a      	bne.n	8007846 <_printf_i+0x1f2>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	b004      	add	sp, #16
 80077b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6023      	str	r3, [r4, #0]
 80077c2:	4833      	ldr	r0, [pc, #204]	@ (8007890 <_printf_i+0x23c>)
 80077c4:	2778      	movs	r7, #120	@ 0x78
 80077c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	6831      	ldr	r1, [r6, #0]
 80077ce:	061f      	lsls	r7, r3, #24
 80077d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80077d4:	d402      	bmi.n	80077dc <_printf_i+0x188>
 80077d6:	065f      	lsls	r7, r3, #25
 80077d8:	bf48      	it	mi
 80077da:	b2ad      	uxthmi	r5, r5
 80077dc:	6031      	str	r1, [r6, #0]
 80077de:	07d9      	lsls	r1, r3, #31
 80077e0:	bf44      	itt	mi
 80077e2:	f043 0320 	orrmi.w	r3, r3, #32
 80077e6:	6023      	strmi	r3, [r4, #0]
 80077e8:	b11d      	cbz	r5, 80077f2 <_printf_i+0x19e>
 80077ea:	2310      	movs	r3, #16
 80077ec:	e7ac      	b.n	8007748 <_printf_i+0xf4>
 80077ee:	4827      	ldr	r0, [pc, #156]	@ (800788c <_printf_i+0x238>)
 80077f0:	e7e9      	b.n	80077c6 <_printf_i+0x172>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	f023 0320 	bic.w	r3, r3, #32
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	e7f6      	b.n	80077ea <_printf_i+0x196>
 80077fc:	4616      	mov	r6, r2
 80077fe:	e7bd      	b.n	800777c <_printf_i+0x128>
 8007800:	6833      	ldr	r3, [r6, #0]
 8007802:	6825      	ldr	r5, [r4, #0]
 8007804:	6961      	ldr	r1, [r4, #20]
 8007806:	1d18      	adds	r0, r3, #4
 8007808:	6030      	str	r0, [r6, #0]
 800780a:	062e      	lsls	r6, r5, #24
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	d501      	bpl.n	8007814 <_printf_i+0x1c0>
 8007810:	6019      	str	r1, [r3, #0]
 8007812:	e002      	b.n	800781a <_printf_i+0x1c6>
 8007814:	0668      	lsls	r0, r5, #25
 8007816:	d5fb      	bpl.n	8007810 <_printf_i+0x1bc>
 8007818:	8019      	strh	r1, [r3, #0]
 800781a:	2300      	movs	r3, #0
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	4616      	mov	r6, r2
 8007820:	e7bc      	b.n	800779c <_printf_i+0x148>
 8007822:	6833      	ldr	r3, [r6, #0]
 8007824:	1d1a      	adds	r2, r3, #4
 8007826:	6032      	str	r2, [r6, #0]
 8007828:	681e      	ldr	r6, [r3, #0]
 800782a:	6862      	ldr	r2, [r4, #4]
 800782c:	2100      	movs	r1, #0
 800782e:	4630      	mov	r0, r6
 8007830:	f7f8 fd1e 	bl	8000270 <memchr>
 8007834:	b108      	cbz	r0, 800783a <_printf_i+0x1e6>
 8007836:	1b80      	subs	r0, r0, r6
 8007838:	6060      	str	r0, [r4, #4]
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	2300      	movs	r3, #0
 8007840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007844:	e7aa      	b.n	800779c <_printf_i+0x148>
 8007846:	6923      	ldr	r3, [r4, #16]
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	47d0      	blx	sl
 8007850:	3001      	adds	r0, #1
 8007852:	d0ad      	beq.n	80077b0 <_printf_i+0x15c>
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	079b      	lsls	r3, r3, #30
 8007858:	d413      	bmi.n	8007882 <_printf_i+0x22e>
 800785a:	68e0      	ldr	r0, [r4, #12]
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	4298      	cmp	r0, r3
 8007860:	bfb8      	it	lt
 8007862:	4618      	movlt	r0, r3
 8007864:	e7a6      	b.n	80077b4 <_printf_i+0x160>
 8007866:	2301      	movs	r3, #1
 8007868:	4632      	mov	r2, r6
 800786a:	4649      	mov	r1, r9
 800786c:	4640      	mov	r0, r8
 800786e:	47d0      	blx	sl
 8007870:	3001      	adds	r0, #1
 8007872:	d09d      	beq.n	80077b0 <_printf_i+0x15c>
 8007874:	3501      	adds	r5, #1
 8007876:	68e3      	ldr	r3, [r4, #12]
 8007878:	9903      	ldr	r1, [sp, #12]
 800787a:	1a5b      	subs	r3, r3, r1
 800787c:	42ab      	cmp	r3, r5
 800787e:	dcf2      	bgt.n	8007866 <_printf_i+0x212>
 8007880:	e7eb      	b.n	800785a <_printf_i+0x206>
 8007882:	2500      	movs	r5, #0
 8007884:	f104 0619 	add.w	r6, r4, #25
 8007888:	e7f5      	b.n	8007876 <_printf_i+0x222>
 800788a:	bf00      	nop
 800788c:	08007b11 	.word	0x08007b11
 8007890:	08007b22 	.word	0x08007b22

08007894 <memmove>:
 8007894:	4288      	cmp	r0, r1
 8007896:	b510      	push	{r4, lr}
 8007898:	eb01 0402 	add.w	r4, r1, r2
 800789c:	d902      	bls.n	80078a4 <memmove+0x10>
 800789e:	4284      	cmp	r4, r0
 80078a0:	4623      	mov	r3, r4
 80078a2:	d807      	bhi.n	80078b4 <memmove+0x20>
 80078a4:	1e43      	subs	r3, r0, #1
 80078a6:	42a1      	cmp	r1, r4
 80078a8:	d008      	beq.n	80078bc <memmove+0x28>
 80078aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078b2:	e7f8      	b.n	80078a6 <memmove+0x12>
 80078b4:	4402      	add	r2, r0
 80078b6:	4601      	mov	r1, r0
 80078b8:	428a      	cmp	r2, r1
 80078ba:	d100      	bne.n	80078be <memmove+0x2a>
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078c6:	e7f7      	b.n	80078b8 <memmove+0x24>

080078c8 <_sbrk_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d06      	ldr	r5, [pc, #24]	@ (80078e4 <_sbrk_r+0x1c>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7f9 f9ae 	bl	8000c34 <_sbrk>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_sbrk_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_sbrk_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20019a70 	.word	0x20019a70

080078e8 <_realloc_r>:
 80078e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ec:	4680      	mov	r8, r0
 80078ee:	4615      	mov	r5, r2
 80078f0:	460c      	mov	r4, r1
 80078f2:	b921      	cbnz	r1, 80078fe <_realloc_r+0x16>
 80078f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f8:	4611      	mov	r1, r2
 80078fa:	f7ff bc59 	b.w	80071b0 <_malloc_r>
 80078fe:	b92a      	cbnz	r2, 800790c <_realloc_r+0x24>
 8007900:	f7ff fbea 	bl	80070d8 <_free_r>
 8007904:	2400      	movs	r4, #0
 8007906:	4620      	mov	r0, r4
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	f000 f81a 	bl	8007944 <_malloc_usable_size_r>
 8007910:	4285      	cmp	r5, r0
 8007912:	4606      	mov	r6, r0
 8007914:	d802      	bhi.n	800791c <_realloc_r+0x34>
 8007916:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800791a:	d8f4      	bhi.n	8007906 <_realloc_r+0x1e>
 800791c:	4629      	mov	r1, r5
 800791e:	4640      	mov	r0, r8
 8007920:	f7ff fc46 	bl	80071b0 <_malloc_r>
 8007924:	4607      	mov	r7, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	d0ec      	beq.n	8007904 <_realloc_r+0x1c>
 800792a:	42b5      	cmp	r5, r6
 800792c:	462a      	mov	r2, r5
 800792e:	4621      	mov	r1, r4
 8007930:	bf28      	it	cs
 8007932:	4632      	movcs	r2, r6
 8007934:	f7ff fbc2 	bl	80070bc <memcpy>
 8007938:	4621      	mov	r1, r4
 800793a:	4640      	mov	r0, r8
 800793c:	f7ff fbcc 	bl	80070d8 <_free_r>
 8007940:	463c      	mov	r4, r7
 8007942:	e7e0      	b.n	8007906 <_realloc_r+0x1e>

08007944 <_malloc_usable_size_r>:
 8007944:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007948:	1f18      	subs	r0, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	bfbc      	itt	lt
 800794e:	580b      	ldrlt	r3, [r1, r0]
 8007950:	18c0      	addlt	r0, r0, r3
 8007952:	4770      	bx	lr

08007954 <_init>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr

08007960 <_fini>:
 8007960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007962:	bf00      	nop
 8007964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007966:	bc08      	pop	{r3}
 8007968:	469e      	mov	lr, r3
 800796a:	4770      	bx	lr
