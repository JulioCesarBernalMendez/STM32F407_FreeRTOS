
App_023_Example_7.3_Centralized_Deferred_Interrupt_Processing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08008114  08008114  00009114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082cc  080082cc  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  080082cc  080082cc  000092cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d4  080082d4  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d4  080082d4  000092d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082d8  080082d8  000092d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080082dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00019a98  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019afc  20019afc  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018857  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000331d  00000000  00000000  000228eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  00025c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112c  00000000  00000000  00027228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025259  00000000  00000000  00028354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a170  00000000  00000000  0004d5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb7c5  00000000  00000000  0006771d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152ee2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061f8  00000000  00000000  00152f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d9  00000000  00000000  00159120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080fc 	.word	0x080080fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080080fc 	.word	0x080080fc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f3c 	.word	0x20012f3c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fbe9 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f825 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f905 	bl	800081c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8d9 	bl	80007c8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000616:	f000 f889 	bl	800072c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <main+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a0b      	ldr	r2, [pc, #44]	@ (800064c <main+0x4c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000626:	f005 fb11 	bl	8005c4c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800062a:	f006 f867 	bl	80066fc <SEGGER_SYSVIEW_Start>
  
  /* Create the task that will start the TIM3 timeout interrupt. This will only
     run once before being deleted by itself since it won't be needed anymore */
  xTaskCreate( vTim3InterruptEnablingTask, "TIM3 INT start", 1000, NULL, 1, NULL );
 800062e:	2300      	movs	r3, #0
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800063c:	4904      	ldr	r1, [pc, #16]	@ (8000650 <main+0x50>)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <main+0x54>)
 8000640:	f003 f943 	bl	80038ca <xTaskCreate>

  /* start the scheduler */
  vTaskStartScheduler();
 8000644:	f003 fbba 	bl	8003dbc <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0x48>
 800064c:	e0001000 	.word	0xe0001000
 8000650:	08008114 	.word	0x08008114
 8000654:	08000979 	.word	0x08000979

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f007 f8c8 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	@ 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2310      	movs	r3, #16
 80006be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe71 	bl	80013c4 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 f9bc 	bl	8000a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 f8d2 	bl	80018b4 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 f9a5 	bl	8000a64 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_TIM3_Init+0x94>)
 800074a:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <MX_TIM3_Init+0x98>)
 800074c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_TIM3_Init+0x94>)
 8000750:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 8000754:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_TIM3_Init+0x94>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <MX_TIM3_Init+0x94>)
 800075e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_TIM3_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <MX_TIM3_Init+0x94>)
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <MX_TIM3_Init+0x94>)
 8000772:	f001 faf1 	bl	8001d58 <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800077c:	f000 f972 	bl	8000a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_TIM3_Init+0x94>)
 800078e:	f001 fc93 	bl	80020b8 <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 f964 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_TIM3_Init+0x94>)
 80007aa:	f001 febb 	bl	8002524 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f956 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000080 	.word	0x20000080
 80007c4:	40000400 	.word	0x40000400

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	@ (8000818 <MX_USART2_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_USART2_UART_Init+0x4c>)
 8000800:	f001 ff20 	bl	8002644 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f92b 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c8 	.word	0x200000c8
 8000818:	40004400 	.word	0x40004400

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a3a      	ldr	r2, [pc, #232]	@ (8000924 <MX_GPIO_Init+0x108>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a33      	ldr	r2, [pc, #204]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a2c      	ldr	r2, [pc, #176]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <MX_GPIO_Init+0x108>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_GPIO_Init+0x108>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a25      	ldr	r2, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_GPIO_Init+0x108>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008a8:	481f      	ldr	r0, [pc, #124]	@ (8000928 <MX_GPIO_Init+0x10c>)
 80008aa:	f000 fd57 	bl	800135c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	481a      	ldr	r0, [pc, #104]	@ (800092c <MX_GPIO_Init+0x110>)
 80008c2:	f000 fbaf 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c6:	2304      	movs	r3, #4
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4815      	ldr	r0, [pc, #84]	@ (8000930 <MX_GPIO_Init+0x114>)
 80008da:	f000 fba3 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80008de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_GPIO_Init+0x10c>)
 80008f8:	f000 fb94 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80008fc:	2380      	movs	r3, #128	@ 0x80
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800090c:	2306      	movs	r3, #6
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4807      	ldr	r0, [pc, #28]	@ (8000934 <MX_GPIO_Init+0x118>)
 8000918:	f000 fb84 	bl	8001024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400
 8000934:	40020800 	.word	0x40020800

08000938 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8000942:	2300      	movs	r3, #0
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	e00b      	b.n	8000960 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	683a      	ldr	r2, [r7, #0]
 800094c:	18d1      	adds	r1, r2, r3
 800094e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000952:	2201      	movs	r2, #1
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f001 fec5 	bl	80026e4 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	3301      	adds	r3, #1
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1ed      	bne.n	8000948 <UART2_Print_Text+0x10>
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <vTim3InterruptEnablingTask>:

static void vTim3InterruptEnablingTask( void *pvParameter )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Start the TIM3 in interrupt mode.
     This is done in a task after the scheduler is started because otherwise
     the TIM3 timeout would be triggered and then its callback would try to defer the
     processing to the daemon task before the scheduler started, causing an assertion
     due to the timer queue not being properly created */
  HAL_TIM_Base_Start_IT( &htim3 );
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <vTim3InterruptEnablingTask+0x1c>)
 8000982:	f001 fa39 	bl	8001df8 <HAL_TIM_Base_Start_IT>

  /* delete this task as it will be only required to run once at the beginning */
  vTaskDelete( NULL );
 8000986:	2000      	movs	r0, #0
 8000988:	f003 f90e 	bl	8003ba8 <vTaskDelete>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000080 	.word	0x20000080

08000998 <vDeferredHandlingFunction>:

static void vDeferredHandlingFunction( void *pvParameter1, uint32_t ulParameter2 )
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  /* Process the event, in this case just print out a message and the value of ulParameter2.
     pvParameter1 is not used in this example */
  ( void ) snprintf( ucOutputString, STRING_SIZE, "Handler function - Processing event %lu\n\n\r", ulParameter2 );
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	4a06      	ldr	r2, [pc, #24]	@ (80009c0 <vDeferredHandlingFunction+0x28>)
 80009a6:	2132      	movs	r1, #50	@ 0x32
 80009a8:	4806      	ldr	r0, [pc, #24]	@ (80009c4 <vDeferredHandlingFunction+0x2c>)
 80009aa:	f006 fee3 	bl	8007774 <sniprintf>
  UART2_Print_Text( &huart2, ( const char * ) ucOutputString );
 80009ae:	4905      	ldr	r1, [pc, #20]	@ (80009c4 <vDeferredHandlingFunction+0x2c>)
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <vDeferredHandlingFunction+0x30>)
 80009b2:	f7ff ffc1 	bl	8000938 <UART2_Print_Text>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08008124 	.word	0x08008124
 80009c4:	20000110 	.word	0x20000110
 80009c8:	200000c8 	.word	0x200000c8

080009cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a19      	ldr	r2, [pc, #100]	@ (8000a44 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d125      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x62>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 80009e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e6:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80009e8:	f000 fcd1 	bl	800138e <HAL_GPIO_TogglePin>

    /* print out a message */
    UART2_Print_Text( &huart2, "ISR Handler - About to defer processing to the Daemon task.\r\n" );
 80009ec:	4917      	ldr	r1, [pc, #92]	@ (8000a4c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80009ee:	4818      	ldr	r0, [pc, #96]	@ (8000a50 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80009f0:	f7ff ffa2 	bl	8000938 <UART2_Print_Text>

    /* - Send a pointer to the interrupt's deferred handling function to the daemon task:
       - The deferred handling function's pvParameter1 parameter is not used so it's just set to NULL.
       - The deferred handling function's ulParameter2 parameter is used to pass a number that is
         incremented by one each time this TIM3 timeout interrupt handler executes */
    xTimerPendFunctionCallFromISR(  vDeferredHandlingFunction, /* function to be executed by the daemon task */
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2100      	movs	r1, #0
 80009fe:	4816      	ldr	r0, [pc, #88]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a00:	f004 fbc2 	bl	8005188 <xTimerPendFunctionCallFromISR>
                                    ulParameterValue, /* ulParameter2 used as the incrementing value */
                                    &xHigherPriorityTaskWoken  /* context switch flag updated by this FromISR() API */
                                 );

    /* increment the TIM3 timeout interrupt counter */
    ulParameterValue++;
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a0c:	6013      	str	r3, [r2, #0]
    /* Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside xTimerPendFunctionCallFromISR(),
         then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR()
         will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00a      	beq.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000a14:	f006 f998 	bl	8006d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	f3bf 8f4f 	dsb	sy
 8000a24:	f3bf 8f6f 	isb	sy
 8000a28:	e001      	b.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x62>
 8000a2a:	f006 f971 	bl	8006d10 <SEGGER_SYSVIEW_RecordExitISR>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a0b      	ldr	r2, [pc, #44]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_TIM_PeriodElapsedCallback+0x70>
    HAL_IncTick();
 8000a38:	f000 f9f2 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40000400 	.word	0x40000400
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	08008150 	.word	0x08008150
 8000a50:	200000c8 	.word	0x200000c8
 8000a54:	20000144 	.word	0x20000144
 8000a58:	08000999 	.word	0x08000999
 8000a5c:	e000ed04 	.word	0xe000ed04
 8000a60:	40001000 	.word	0x40001000

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a68:	b672      	cpsid	i
}
 8000a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <Error_Handler+0x8>

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a86:	4b0d      	ldr	r3, [pc, #52]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a08      	ldr	r2, [pc, #32]	@ (8000abc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fa83 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <HAL_TIM_Base_MspInit+0x48>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d115      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_TIM_Base_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2106      	movs	r1, #6
 8000af2:	201d      	movs	r0, #29
 8000af4:	f000 fa6c 	bl	8000fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000af8:	201d      	movs	r0, #29
 8000afa:	f000 fa85 	bl	8001008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40000400 	.word	0x40000400
 8000b0c:	40023800 	.word	0x40023800

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b6a:	230c      	movs	r3, #12
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b86:	f000 fa4d 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020000 	.word	0x40020000

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	@ 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4b33      	ldr	r3, [pc, #204]	@ (8000c84 <HAL_InitTick+0xe4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a32      	ldr	r2, [pc, #200]	@ (8000c84 <HAL_InitTick+0xe4>)
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <HAL_InitTick+0xe4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bcc:	f107 0210 	add.w	r2, r7, #16
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f88c 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000be6:	f001 f85d 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000bea:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bec:	e004      	b.n	8000bf8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bee:	f001 f859 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bfa:	4a23      	ldr	r2, [pc, #140]	@ (8000c88 <HAL_InitTick+0xe8>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	0c9b      	lsrs	r3, r3, #18
 8000c02:	3b01      	subs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <HAL_InitTick+0xf0>)
 8000c0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c14:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c2c:	4817      	ldr	r0, [pc, #92]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c2e:	f001 f893 	bl	8001d58 <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d11b      	bne.n	8000c78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c40:	4812      	ldr	r0, [pc, #72]	@ (8000c8c <HAL_InitTick+0xec>)
 8000c42:	f001 f8d9 	bl	8001df8 <HAL_TIM_Base_Start_IT>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d111      	bne.n	8000c78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c54:	2036      	movs	r0, #54	@ 0x36
 8000c56:	f000 f9d7 	bl	8001008 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d808      	bhi.n	8000c72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2036      	movs	r0, #54	@ 0x36
 8000c66:	f000 f9b3 	bl	8000fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_InitTick+0xf4>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e002      	b.n	8000c78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3738      	adds	r7, #56	@ 0x38
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	431bde83 	.word	0x431bde83
 8000c8c:	20000148 	.word	0x20000148
 8000c90:	40001000 	.word	0x40001000
 8000c94:	20000004 	.word	0x20000004

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <NMI_Handler+0x4>

08000ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <MemManage_Handler+0x4>

08000cb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <BusFault_Handler+0x4>

08000cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <UsageFault_Handler+0x4>

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM3_IRQHandler+0x10>)
 8000cd6:	f001 f8ff 	bl	8001ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000080 	.word	0x20000080

08000ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM6_DAC_IRQHandler+0x10>)
 8000cea:	f001 f8f5 	bl	8001ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000148 	.word	0x20000148

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f006 fd70 	bl	800780c <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20000190 	.word	0x20000190
 8000d60:	20019b00 	.word	0x20019b00

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f006 fd2f 	bl	8007818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc21 	bl	8000600 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dcc:	080082dc 	.word	0x080082dc
  ldr r2, =_sbss
 8000dd0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dd4:	20019afc 	.word	0x20019afc

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f8d8 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fec8 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe2e 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000194 	.word	0x20000194

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000194 	.word	0x20000194

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	@ (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	@ (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	@ (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	@ 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e16b      	b.n	8001318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 815a 	bne.w	8001312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001072:	2b02      	cmp	r3, #2
 8001074:	d130      	bne.n	80010d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 0201 	and.w	r2, r3, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d017      	beq.n	8001114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80b4 	beq.w	8001312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b60      	ldr	r3, [pc, #384]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001330 <HAL_GPIO_Init+0x30c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001334 <HAL_GPIO_Init+0x310>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	@ (8001338 <HAL_GPIO_Init+0x314>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	@ (800133c <HAL_GPIO_Init+0x318>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	@ (8001340 <HAL_GPIO_Init+0x31c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <HAL_GPIO_Init+0x320>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	@ (8001348 <HAL_GPIO_Init+0x324>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	@ (800134c <HAL_GPIO_Init+0x328>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	@ (8001350 <HAL_GPIO_Init+0x32c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	@ (8001354 <HAL_GPIO_Init+0x330>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20a>
 800122a:	2307      	movs	r3, #7
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x228>
 800122e:	2308      	movs	r3, #8
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x228>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4935      	ldr	r1, [pc, #212]	@ (8001334 <HAL_GPIO_Init+0x310>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b3b      	ldr	r3, [pc, #236]	@ (8001358 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a32      	ldr	r2, [pc, #200]	@ (8001358 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b30      	ldr	r3, [pc, #192]	@ (8001358 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a27      	ldr	r2, [pc, #156]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <HAL_GPIO_Init+0x334>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800130c:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <HAL_GPIO_Init+0x334>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae90 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40013800 	.word	0x40013800
 8001338:	40020000 	.word	0x40020000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020800 	.word	0x40020800
 8001344:	40020c00 	.word	0x40020c00
 8001348:	40021000 	.word	0x40021000
 800134c:	40021400 	.word	0x40021400
 8001350:	40021800 	.word	0x40021800
 8001354:	40021c00 	.word	0x40021c00
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001378:	e003      	b.n	8001382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800137a:	887b      	ldrh	r3, [r7, #2]
 800137c:	041a      	lsls	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013a0:	887a      	ldrh	r2, [r7, #2]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	041a      	lsls	r2, r3, #16
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	400b      	ands	r3, r1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e267      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e2:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d00c      	beq.n	8001408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b85      	ldr	r3, [pc, #532]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d112      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b82      	ldr	r3, [pc, #520]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e242      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x74>
 800142a:	4b76      	ldr	r3, [pc, #472]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a75      	ldr	r2, [pc, #468]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6f      	ldr	r2, [pc, #444]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6c      	ldr	r2, [pc, #432]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a68      	ldr	r2, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a65      	ldr	r2, [pc, #404]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fce4 	bl	8000e48 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fce0 	bl	8000e48 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e207      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xc0>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcd0 	bl	8000e48 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fccc 	bl	8000e48 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1f3      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014be:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d063      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d11c      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d116      	bne.n	800152c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1c7      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	4937      	ldr	r1, [pc, #220]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152a:	e03a      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d020      	beq.n	8001576 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fc85 	bl	8000e48 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fc81 	bl	8000e48 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1a8      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001554:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b28      	ldr	r3, [pc, #160]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4925      	ldr	r1, [pc, #148]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
 8001574:	e015      	b.n	80015a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001576:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <HAL_RCC_OscConfig+0x244>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc64 	bl	8000e48 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001584:	f7ff fc60 	bl	8000e48 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e187      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d036      	beq.n	800161c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d016      	beq.n	80015e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fc44 	bl	8000e48 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff fc40 	bl	8000e48 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e167      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RCC_OscConfig+0x240>)
 80015d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0x200>
 80015e2:	e01b      	b.n	800161c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <HAL_RCC_OscConfig+0x248>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fc2d 	bl	8000e48 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f0:	e00e      	b.n	8001610 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc29 	bl	8000e48 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d907      	bls.n	8001610 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e150      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	42470000 	.word	0x42470000
 800160c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ea      	bne.n	80015f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8097 	beq.w	8001758 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b81      	ldr	r3, [pc, #516]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b7d      	ldr	r3, [pc, #500]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	4a7c      	ldr	r2, [pc, #496]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	@ 0x40
 800164a:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b77      	ldr	r3, [pc, #476]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fbe9 	bl	8000e48 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fbe5 	bl	8000e48 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e10c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b6a      	ldr	r3, [pc, #424]	@ (8001838 <HAL_RCC_OscConfig+0x474>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x2ea>
 80016a0:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a63      	ldr	r2, [pc, #396]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x30c>
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x324>
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d4:	4a57      	ldr	r2, [pc, #348]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	@ 0x70
 80016dc:	4b55      	ldr	r3, [pc, #340]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e0:	4a54      	ldr	r2, [pc, #336]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d015      	beq.n	800171c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fbaa 	bl	8000e48 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fba6 	bl	8000e48 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e0cb      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	4b49      	ldr	r3, [pc, #292]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0ee      	beq.n	80016f8 <HAL_RCC_OscConfig+0x334>
 800171a:	e014      	b.n	8001746 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171c:	f7ff fb94 	bl	8000e48 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff fb90 	bl	8000e48 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e0b5      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ee      	bne.n	8001724 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001746:	7dfb      	ldrb	r3, [r7, #23]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a38      	ldr	r2, [pc, #224]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 80a1 	beq.w	80018a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001762:	4b34      	ldr	r3, [pc, #208]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b08      	cmp	r3, #8
 800176c:	d05c      	beq.n	8001828 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d141      	bne.n	80017fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fb64 	bl	8000e48 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fb60 	bl	8000e48 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e087      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	4b27      	ldr	r3, [pc, #156]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69da      	ldr	r2, [r3, #28]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	061b      	lsls	r3, r3, #24
 80017c6:	491b      	ldr	r1, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb39 	bl	8000e48 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb35 	bl	8000e48 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e05c      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x416>
 80017f8:	e054      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <HAL_RCC_OscConfig+0x478>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb22 	bl	8000e48 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb1e 	bl	8000e48 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e045      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_RCC_OscConfig+0x470>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x444>
 8001826:	e03d      	b.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e038      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000
 800183c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_RCC_OscConfig+0x4ec>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d028      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d121      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001866:	429a      	cmp	r2, r3
 8001868:	d11a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001878:	4293      	cmp	r3, r2
 800187a:	d111      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0cc      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b68      	ldr	r3, [pc, #416]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d90c      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b65      	ldr	r3, [pc, #404]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b59      	ldr	r3, [pc, #356]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	4a58      	ldr	r2, [pc, #352]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800192a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b50      	ldr	r3, [pc, #320]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494d      	ldr	r1, [pc, #308]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d044      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d119      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	2b03      	cmp	r3, #3
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e06f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001982:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e067      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001992:	4b37      	ldr	r3, [pc, #220]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f023 0203 	bic.w	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	4934      	ldr	r1, [pc, #208]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fa50 	bl	8000e48 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff fa4c 	bl	8000e48 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d1eb      	bne.n	80019ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d20c      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e032      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4916      	ldr	r1, [pc, #88]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490e      	ldr	r1, [pc, #56]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 f821 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	490a      	ldr	r1, [pc, #40]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	5ccb      	ldrb	r3, [r1, r3]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_ClockConfig+0x1c8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f8a0 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023c00 	.word	0x40023c00
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08008258 	.word	0x08008258
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b094      	sub	sp, #80	@ 0x50
 8001a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	2300      	movs	r3, #0
 8001a92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a98:	4b79      	ldr	r3, [pc, #484]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	f200 80e1 	bhi.w	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d003      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x3a>
 8001ab2:	e0db      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ab8:	e0db      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aba:	4b73      	ldr	r3, [pc, #460]	@ (8001c88 <HAL_RCC_GetSysClockFreq+0x208>)
 8001abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001abe:	e0d8      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aca:	4b6d      	ldr	r3, [pc, #436]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	2200      	movs	r2, #0
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001af2:	4622      	mov	r2, r4
 8001af4:	462b      	mov	r3, r5
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	0159      	lsls	r1, r3, #5
 8001b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b04:	0150      	lsls	r0, r2, #5
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	1a51      	subs	r1, r2, r1
 8001b0e:	6139      	str	r1, [r7, #16]
 8001b10:	4629      	mov	r1, r5
 8001b12:	eb63 0301 	sbc.w	r3, r3, r1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b24:	4659      	mov	r1, fp
 8001b26:	018b      	lsls	r3, r1, #6
 8001b28:	4651      	mov	r1, sl
 8001b2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b2e:	4651      	mov	r1, sl
 8001b30:	018a      	lsls	r2, r1, #6
 8001b32:	4651      	mov	r1, sl
 8001b34:	ebb2 0801 	subs.w	r8, r2, r1
 8001b38:	4659      	mov	r1, fp
 8001b3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b52:	4690      	mov	r8, r2
 8001b54:	4699      	mov	r9, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	eb18 0303 	adds.w	r3, r8, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	462b      	mov	r3, r5
 8001b60:	eb49 0303 	adc.w	r3, r9, r3
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b72:	4629      	mov	r1, r5
 8001b74:	024b      	lsls	r3, r1, #9
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	024a      	lsls	r2, r1, #9
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b90:	f7fe fbbe 	bl	8000310 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9e:	4b38      	ldr	r3, [pc, #224]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	099b      	lsrs	r3, r3, #6
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	4611      	mov	r1, r2
 8001baa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb8:	4642      	mov	r2, r8
 8001bba:	464b      	mov	r3, r9
 8001bbc:	f04f 0000 	mov.w	r0, #0
 8001bc0:	f04f 0100 	mov.w	r1, #0
 8001bc4:	0159      	lsls	r1, r3, #5
 8001bc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bca:	0150      	lsls	r0, r2, #5
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4641      	mov	r1, r8
 8001bd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bd6:	4649      	mov	r1, r9
 8001bd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bf0:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf4:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	00eb      	lsls	r3, r5, #3
 8001c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c06:	00e2      	lsls	r2, r4, #3
 8001c08:	4614      	mov	r4, r2
 8001c0a:	461d      	mov	r5, r3
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	18e3      	adds	r3, r4, r3
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	464b      	mov	r3, r9
 8001c14:	eb45 0303 	adc.w	r3, r5, r3
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c26:	4629      	mov	r1, r5
 8001c28:	028b      	lsls	r3, r1, #10
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c30:	4621      	mov	r1, r4
 8001c32:	028a      	lsls	r2, r1, #10
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	61fa      	str	r2, [r7, #28]
 8001c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c44:	f7fe fb64 	bl	8000310 <__aeabi_uldivmod>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001c60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3750      	adds	r7, #80	@ 0x50
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff0 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08008268 	.word	0x08008268

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffdc 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0b5b      	lsrs	r3, r3, #13
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	@ (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08008268 	.word	0x08008268

08001cf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b12      	ldr	r3, [pc, #72]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <HAL_RCC_GetClockConfig+0x60>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40023c00 	.word	0x40023c00

08001d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e041      	b.n	8001dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fe9e 	bl	8000ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2202      	movs	r2, #2
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f000 fa7e 	bl	8002298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e04e      	b.n	8001eae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a23      	ldr	r2, [pc, #140]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3a:	d01d      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xd4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a19      	ldr	r2, [pc, #100]	@ (8001ed0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_TIM_Base_Start_IT+0x80>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d010      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	e007      	b.n	8001eac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	40000800 	.word	0x40000800
 8001ec8:	40000c00 	.word	0x40000c00
 8001ecc:	40010400 	.word	0x40010400
 8001ed0:	40014000 	.word	0x40014000
 8001ed4:	40001800 	.word	0x40001800

08001ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d020      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0202 	mvn.w	r2, #2
 8001f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f999 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f98b 	bl	8002246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f99c 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d020      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0204 	mvn.w	r2, #4
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f973 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f965 	bl	8002246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f976 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d020      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0208 	mvn.w	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f94d 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f93f 	bl	8002246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f950 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0210 	mvn.w	r2, #16
 8001ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f927 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 800200c:	e005      	b.n	800201a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f919 	bl	8002246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f92a 	bl	800226e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0201 	mvn.w	r2, #1
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fcc4 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fae4 	bl	8002630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8fb 	bl	8002282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0320 	and.w	r3, r3, #32
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0220 	mvn.w	r2, #32
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fab6 	bl	800261c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_TIM_ConfigClockSource+0x1c>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e0b4      	b.n	800223e <HAL_TIM_ConfigClockSource+0x186>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210c:	d03e      	beq.n	800218c <HAL_TIM_ConfigClockSource+0xd4>
 800210e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002112:	f200 8087 	bhi.w	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800211a:	f000 8086 	beq.w	800222a <HAL_TIM_ConfigClockSource+0x172>
 800211e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002122:	d87f      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b70      	cmp	r3, #112	@ 0x70
 8002126:	d01a      	beq.n	800215e <HAL_TIM_ConfigClockSource+0xa6>
 8002128:	2b70      	cmp	r3, #112	@ 0x70
 800212a:	d87b      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b60      	cmp	r3, #96	@ 0x60
 800212e:	d050      	beq.n	80021d2 <HAL_TIM_ConfigClockSource+0x11a>
 8002130:	2b60      	cmp	r3, #96	@ 0x60
 8002132:	d877      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b50      	cmp	r3, #80	@ 0x50
 8002136:	d03c      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0xfa>
 8002138:	2b50      	cmp	r3, #80	@ 0x50
 800213a:	d873      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 800213c:	2b40      	cmp	r3, #64	@ 0x40
 800213e:	d058      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0x13a>
 8002140:	2b40      	cmp	r3, #64	@ 0x40
 8002142:	d86f      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b30      	cmp	r3, #48	@ 0x30
 8002146:	d064      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
 8002148:	2b30      	cmp	r3, #48	@ 0x30
 800214a:	d86b      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 800214c:	2b20      	cmp	r3, #32
 800214e:	d060      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
 8002150:	2b20      	cmp	r3, #32
 8002152:	d867      	bhi.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05c      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
 8002158:	2b10      	cmp	r3, #16
 800215a:	d05a      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
 800215c:	e062      	b.n	8002224 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800216e:	f000 f9b9 	bl	80024e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	609a      	str	r2, [r3, #8]
      break;
 800218a:	e04f      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800219c:	f000 f9a2 	bl	80024e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021ae:	609a      	str	r2, [r3, #8]
      break;
 80021b0:	e03c      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021be:	461a      	mov	r2, r3
 80021c0:	f000 f916 	bl	80023f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2150      	movs	r1, #80	@ 0x50
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f96f 	bl	80024ae <TIM_ITRx_SetConfig>
      break;
 80021d0:	e02c      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021de:	461a      	mov	r2, r3
 80021e0:	f000 f935 	bl	800244e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2160      	movs	r1, #96	@ 0x60
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f95f 	bl	80024ae <TIM_ITRx_SetConfig>
      break;
 80021f0:	e01c      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021fe:	461a      	mov	r2, r3
 8002200:	f000 f8f6 	bl	80023f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2140      	movs	r1, #64	@ 0x40
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f94f 	bl	80024ae <TIM_ITRx_SetConfig>
      break;
 8002210:	e00c      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f000 f946 	bl	80024ae <TIM_ITRx_SetConfig>
      break;
 8002222:	e003      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      break;
 8002228:	e000      	b.n	800222c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800222a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a46      	ldr	r2, [pc, #280]	@ (80023c4 <TIM_Base_SetConfig+0x12c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d013      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b6:	d00f      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a43      	ldr	r2, [pc, #268]	@ (80023c8 <TIM_Base_SetConfig+0x130>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00b      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <TIM_Base_SetConfig+0x134>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d007      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a41      	ldr	r2, [pc, #260]	@ (80023d0 <TIM_Base_SetConfig+0x138>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a40      	ldr	r2, [pc, #256]	@ (80023d4 <TIM_Base_SetConfig+0x13c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a35      	ldr	r2, [pc, #212]	@ (80023c4 <TIM_Base_SetConfig+0x12c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d02b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f8:	d027      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a32      	ldr	r2, [pc, #200]	@ (80023c8 <TIM_Base_SetConfig+0x130>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d023      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a31      	ldr	r2, [pc, #196]	@ (80023cc <TIM_Base_SetConfig+0x134>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01f      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a30      	ldr	r2, [pc, #192]	@ (80023d0 <TIM_Base_SetConfig+0x138>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2f      	ldr	r2, [pc, #188]	@ (80023d4 <TIM_Base_SetConfig+0x13c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d017      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a2e      	ldr	r2, [pc, #184]	@ (80023d8 <TIM_Base_SetConfig+0x140>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <TIM_Base_SetConfig+0x144>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00f      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2c      	ldr	r2, [pc, #176]	@ (80023e0 <TIM_Base_SetConfig+0x148>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2b      	ldr	r2, [pc, #172]	@ (80023e4 <TIM_Base_SetConfig+0x14c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <TIM_Base_SetConfig+0x150>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a29      	ldr	r2, [pc, #164]	@ (80023ec <TIM_Base_SetConfig+0x154>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d108      	bne.n	800235c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a10      	ldr	r2, [pc, #64]	@ (80023c4 <TIM_Base_SetConfig+0x12c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0xf8>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <TIM_Base_SetConfig+0x13c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d103      	bne.n	8002398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f023 0201 	bic.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
  }
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000800 	.word	0x40000800
 80023d0:	40000c00 	.word	0x40000c00
 80023d4:	40010400 	.word	0x40010400
 80023d8:	40014000 	.word	0x40014000
 80023dc:	40014400 	.word	0x40014400
 80023e0:	40014800 	.word	0x40014800
 80023e4:	40001800 	.word	0x40001800
 80023e8:	40001c00 	.word	0x40001c00
 80023ec:	40002000 	.word	0x40002000

080023f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	f023 0201 	bic.w	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800241a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f023 030a 	bic.w	r3, r3, #10
 800242c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	621a      	str	r2, [r3, #32]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800244e:	b480      	push	{r7}
 8002450:	b087      	sub	sp, #28
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f023 0210 	bic.w	r2, r3, #16
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002478:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	031b      	lsls	r3, r3, #12
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800248a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	621a      	str	r2, [r3, #32]
}
 80024a2:	bf00      	nop
 80024a4:	371c      	adds	r7, #28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f043 0307 	orr.w	r3, r3, #7
 80024d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	021a      	lsls	r2, r3, #8
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	431a      	orrs	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	609a      	str	r2, [r3, #8]
}
 8002518:	bf00      	nop
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e05a      	b.n	80025f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002588:	d01d      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1b      	ldr	r2, [pc, #108]	@ (8002608 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a1a      	ldr	r2, [pc, #104]	@ (800260c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	@ (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a17      	ldr	r2, [pc, #92]	@ (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10c      	bne.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40010000 	.word	0x40010000
 8002604:	40000400 	.word	0x40000400
 8002608:	40000800 	.word	0x40000800
 800260c:	40000c00 	.word	0x40000c00
 8002610:	40010400 	.word	0x40010400
 8002614:	40014000 	.word	0x40014000
 8002618:	40001800 	.word	0x40001800

0800261c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e042      	b.n	80026dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fa50 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	@ 0x24
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002686:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f973 	bl	8002974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800269c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	d175      	bne.n	80027f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_UART_Transmit+0x2c>
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e06e      	b.n	80027f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	@ 0x21
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002722:	f7fe fb91 	bl	8000e48 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800273c:	d108      	bne.n	8002750 <HAL_UART_Transmit+0x6c>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d104      	bne.n	8002750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e003      	b.n	8002758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002758:	e02e      	b.n	80027b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	@ 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f848 	bl	80027fa <UART_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e03a      	b.n	80027f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3302      	adds	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e007      	b.n	80027aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1cb      	bne.n	800275a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2140      	movs	r1, #64	@ 0x40
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f814 	bl	80027fa <UART_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e006      	b.n	80027f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e000      	b.n	80027f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027f0:	2302      	movs	r3, #2
  }
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	4613      	mov	r3, r2
 8002808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800280a:	e03b      	b.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d037      	beq.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7fe fb18 	bl	8000e48 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <UART_WaitOnFlagUntilTimeout+0x30>
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e03a      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d023      	beq.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b80      	cmp	r3, #128	@ 0x80
 8002840:	d020      	beq.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d01d      	beq.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b08      	cmp	r3, #8
 8002854:	d116      	bne.n	8002884 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f81d 	bl	80028ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2208      	movs	r2, #8
 8002876:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e00f      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	4013      	ands	r3, r2
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d0b4      	beq.n	800280c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b095      	sub	sp, #84	@ 0x54
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	330c      	adds	r3, #12
 80028d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80028d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e5      	bne.n	80028b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	e853 3f00 	ldrex	r3, [r3]
 80028f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002908:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800290e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002910:	e841 2300 	strex	r3, r2, [r1]
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e5      	bne.n	80028e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	2b01      	cmp	r3, #1
 8002922:	d119      	bne.n	8002958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	e853 3f00 	ldrex	r3, [r3]
 8002932:	60bb      	str	r3, [r7, #8]
   return(result);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0310 	bic.w	r3, r3, #16
 800293a:	647b      	str	r3, [r7, #68]	@ 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002944:	61ba      	str	r2, [r7, #24]
 8002946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	6979      	ldr	r1, [r7, #20]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	e841 2300 	strex	r3, r2, [r1]
 8002950:	613b      	str	r3, [r7, #16]
   return(result);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e5      	bne.n	8002924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002966:	bf00      	nop
 8002968:	3754      	adds	r7, #84	@ 0x54
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b0c0      	sub	sp, #256	@ 0x100
 800297a:	af00      	add	r7, sp, #0
 800297c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	68d9      	ldr	r1, [r3, #12]
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	ea40 0301 	orr.w	r3, r0, r1
 800299c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029cc:	f021 010c 	bic.w	r1, r1, #12
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029da:	430b      	orrs	r3, r1
 80029dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	6999      	ldr	r1, [r3, #24]
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	ea40 0301 	orr.w	r3, r0, r1
 80029fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8f      	ldr	r3, [pc, #572]	@ (8002c40 <UART_SetConfig+0x2cc>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d005      	beq.n	8002a14 <UART_SetConfig+0xa0>
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c44 <UART_SetConfig+0x2d0>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d104      	bne.n	8002a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff f95a 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002a18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a1c:	e003      	b.n	8002a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff f941 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a30:	f040 810c 	bne.w	8002c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a46:	4622      	mov	r2, r4
 8002a48:	462b      	mov	r3, r5
 8002a4a:	1891      	adds	r1, r2, r2
 8002a4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a4e:	415b      	adcs	r3, r3
 8002a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a56:	4621      	mov	r1, r4
 8002a58:	eb12 0801 	adds.w	r8, r2, r1
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb43 0901 	adc.w	r9, r3, r1
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4699      	mov	r9, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	eb18 0303 	adds.w	r3, r8, r3
 8002a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a84:	462b      	mov	r3, r5
 8002a86:	eb49 0303 	adc.w	r3, r9, r3
 8002a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	18db      	adds	r3, r3, r3
 8002aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	eb42 0303 	adc.w	r3, r2, r3
 8002aae:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ab8:	f7fd fc2a 	bl	8000310 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <UART_SetConfig+0x2d4>)
 8002ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	011c      	lsls	r4, r3, #4
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002aec:	4641      	mov	r1, r8
 8002aee:	eb12 0a01 	adds.w	sl, r2, r1
 8002af2:	4649      	mov	r1, r9
 8002af4:	eb43 0b01 	adc.w	fp, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b0c:	4692      	mov	sl, r2
 8002b0e:	469b      	mov	fp, r3
 8002b10:	4643      	mov	r3, r8
 8002b12:	eb1a 0303 	adds.w	r3, sl, r3
 8002b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	18db      	adds	r3, r3, r3
 8002b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b3e:	4613      	mov	r3, r2
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b4e:	f7fd fbdf 	bl	8000310 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <UART_SetConfig+0x2d4>)
 8002b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2264      	movs	r2, #100	@ 0x64
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	1acb      	subs	r3, r1, r3
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b6e:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <UART_SetConfig+0x2d4>)
 8002b70:	fba3 2302 	umull	r2, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b7c:	441c      	add	r4, r3
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	1851      	adds	r1, r2, r1
 8002ba4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	414b      	adcs	r3, r1
 8002baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bb8:	4659      	mov	r1, fp
 8002bba:	00cb      	lsls	r3, r1, #3
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	00ca      	lsls	r2, r1, #3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4642      	mov	r2, r8
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	18db      	adds	r3, r3, r3
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c0a:	f7fd fb81 	bl	8000310 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4b0d      	ldr	r3, [pc, #52]	@ (8002c48 <UART_SetConfig+0x2d4>)
 8002c14:	fba3 1302 	umull	r1, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	2164      	movs	r1, #100	@ 0x64
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	3332      	adds	r3, #50	@ 0x32
 8002c26:	4a08      	ldr	r2, [pc, #32]	@ (8002c48 <UART_SetConfig+0x2d4>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	f003 0207 	and.w	r2, r3, #7
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4422      	add	r2, r4
 8002c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c3c:	e106      	b.n	8002e4c <UART_SetConfig+0x4d8>
 8002c3e:	bf00      	nop
 8002c40:	40011000 	.word	0x40011000
 8002c44:	40011400 	.word	0x40011400
 8002c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c5e:	4642      	mov	r2, r8
 8002c60:	464b      	mov	r3, r9
 8002c62:	1891      	adds	r1, r2, r2
 8002c64:	6239      	str	r1, [r7, #32]
 8002c66:	415b      	adcs	r3, r3
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6e:	4641      	mov	r1, r8
 8002c70:	1854      	adds	r4, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb43 0501 	adc.w	r5, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	00eb      	lsls	r3, r5, #3
 8002c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c86:	00e2      	lsls	r2, r4, #3
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	18e3      	adds	r3, r4, r3
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c94:	464b      	mov	r3, r9
 8002c96:	eb45 0303 	adc.w	r3, r5, r3
 8002c9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002caa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cba:	4629      	mov	r1, r5
 8002cbc:	008b      	lsls	r3, r1, #2
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	008a      	lsls	r2, r1, #2
 8002cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ccc:	f7fd fb20 	bl	8000310 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <UART_SetConfig+0x4e4>)
 8002cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	011c      	lsls	r4, r3, #4
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ce8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	61b9      	str	r1, [r7, #24]
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6139      	str	r1, [r7, #16]
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d58:	4649      	mov	r1, r9
 8002d5a:	008b      	lsls	r3, r1, #2
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d62:	4641      	mov	r1, r8
 8002d64:	008a      	lsls	r2, r1, #2
 8002d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d6a:	f7fd fad1 	bl	8000310 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4611      	mov	r1, r2
 8002d74:	4b38      	ldr	r3, [pc, #224]	@ (8002e58 <UART_SetConfig+0x4e4>)
 8002d76:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2264      	movs	r2, #100	@ 0x64
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	1acb      	subs	r3, r1, r3
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	3332      	adds	r3, #50	@ 0x32
 8002d88:	4a33      	ldr	r2, [pc, #204]	@ (8002e58 <UART_SetConfig+0x4e4>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d94:	441c      	add	r4, r3
 8002d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002da0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	415b      	adcs	r3, r3
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002de6:	464b      	mov	r3, r9
 8002de8:	460a      	mov	r2, r1
 8002dea:	eb42 0303 	adc.w	r3, r2, r3
 8002dee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e08:	4649      	mov	r1, r9
 8002e0a:	008b      	lsls	r3, r1, #2
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e12:	4641      	mov	r1, r8
 8002e14:	008a      	lsls	r2, r1, #2
 8002e16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e1a:	f7fd fa79 	bl	8000310 <__aeabi_uldivmod>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <UART_SetConfig+0x4e4>)
 8002e24:	fba3 1302 	umull	r1, r3, r3, r2
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	2164      	movs	r1, #100	@ 0x64
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	3332      	adds	r3, #50	@ 0x32
 8002e36:	4a08      	ldr	r2, [pc, #32]	@ (8002e58 <UART_SetConfig+0x4e4>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	f003 020f 	and.w	r2, r3, #15
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4422      	add	r2, r4
 8002e4a:	609a      	str	r2, [r3, #8]
}
 8002e4c:	bf00      	nop
 8002e4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e52:	46bd      	mov	sp, r7
 8002e54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e58:	51eb851f 	.word	0x51eb851f

08002e5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f103 0208 	add.w	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295
 8002e74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0208 	add.w	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f103 0208 	add.w	r2, r3, #8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002e90:	f240 1019 	movw	r0, #281	@ 0x119
 8002e94:	f003 ff74 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002eae:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002eb2:	f003 ff65 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8002efa:	f240 101b 	movw	r0, #283	@ 0x11b
 8002efe:	f003 ff3f 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d103      	bne.n	8002f2a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	e00c      	b.n	8002f44 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e002      	b.n	8002f38 <vListInsert+0x2e>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d2f6      	bcs.n	8002f32 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002f70:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002f74:	f003 ff04 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6852      	ldr	r2, [r2, #4]
 8002fa0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d103      	bne.n	8002fb4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1e5a      	subs	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f240 101d 	movw	r0, #285	@ 0x11d
 8002fce:	f003 ff13 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002fea:	2301      	movs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d05d      	beq.n	80030d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d059      	beq.n	80030d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	2100      	movs	r1, #0
 8003028:	fba3 2302 	umull	r2, r3, r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d000      	beq.n	8003032 <xQueueGenericReset+0x52>
 8003030:	2101      	movs	r1, #1
 8003032:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003034:	2b00      	cmp	r3, #0
 8003036:	d14c      	bne.n	80030d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8003038:	f002 fa4c 	bl	80054d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003044:	6939      	ldr	r1, [r7, #16]
 8003046:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	441a      	add	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2200      	movs	r2, #0
 8003056:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	6939      	ldr	r1, [r7, #16]
 800306c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	441a      	add	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	22ff      	movs	r2, #255	@ 0xff
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	22ff      	movs	r2, #255	@ 0xff
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d114      	bne.n	80030b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01a      	beq.n	80030cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3310      	adds	r3, #16
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fa3e 	bl	800451c <xTaskRemoveFromEventList>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030a6:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <xQueueGenericReset+0x128>)
 80030a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	e009      	b.n	80030cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	3310      	adds	r3, #16
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fecd 	bl	8002e5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	3324      	adds	r3, #36	@ 0x24
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fec8 	bl	8002e5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80030cc:	f002 fa34 	bl	8005538 <vPortExitCritical>
 80030d0:	e001      	b.n	80030d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10b      	bne.n	80030f4 <xQueueGenericReset+0x114>
    __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	60bb      	str	r3, [r7, #8]
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	e7fd      	b.n	80030f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4619      	mov	r1, r3
 80030f8:	2096      	movs	r0, #150	@ 0x96
 80030fa:	f003 fe7d 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80030fe:	697b      	ldr	r3, [r7, #20]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02e      	beq.n	8003182 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003124:	2100      	movs	r1, #0
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	fba3 2302 	umull	r2, r3, r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d000      	beq.n	8003134 <xQueueGenericCreate+0x28>
 8003132:	2101      	movs	r1, #1
 8003134:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003136:	2b00      	cmp	r3, #0
 8003138:	d123      	bne.n	8003182 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003142:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003146:	d81c      	bhi.n	8003182 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3350      	adds	r3, #80	@ 0x50
 8003156:	4618      	mov	r0, r3
 8003158:	f002 faea 	bl	8005730 <pvPortMalloc>
 800315c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01d      	beq.n	80031a0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3350      	adds	r3, #80	@ 0x50
 800316c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800316e:	79fa      	ldrb	r2, [r7, #7]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4613      	mov	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f81e 	bl	80031bc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003180:	e00e      	b.n	80031a0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10b      	bne.n	80031a0 <xQueueGenericCreate+0x94>
    __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	613b      	str	r3, [r7, #16]
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 ffc2 	bl	800712c <SEGGER_SYSVIEW_ShrinkId>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4619      	mov	r1, r3
 80031ac:	2098      	movs	r0, #152	@ 0x98
 80031ae:	f003 fe23 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80031b2:	69fb      	ldr	r3, [r7, #28]
    }
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	e002      	b.n	80031de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031ea:	2101      	movs	r1, #1
 80031ec:	69b8      	ldr	r0, [r7, #24]
 80031ee:	f7ff fef7 	bl	8002fe0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	78fa      	ldrb	r2, [r7, #3]
 80031f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b092      	sub	sp, #72	@ 0x48
 8003206:	af00      	add	r7, sp, #0
 8003208:	60f8      	str	r0, [r7, #12]
 800320a:	60b9      	str	r1, [r7, #8]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8003214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <xQueueGenericSendFromISR+0x3e>
 8003238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <xQueueGenericSendFromISR+0x42>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <xQueueGenericSendFromISR+0x44>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d103      	bne.n	8003270 <xQueueGenericSendFromISR+0x6e>
 8003268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800326a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <xQueueGenericSendFromISR+0x72>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <xQueueGenericSendFromISR+0x74>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003292:	f002 fa0b 	bl	80056ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8003296:	f3ef 8211 	mrs	r2, BASEPRI
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	623a      	str	r2, [r7, #32]
 80032ac:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80032b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <xQueueGenericSendFromISR+0xc2>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d147      	bne.n	8003354 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80032c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80032da:	f000 f93b 	bl	8003554 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80032de:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d112      	bne.n	800330e <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d02e      	beq.n	800334e <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	3324      	adds	r3, #36	@ 0x24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 f911 	bl	800451c <xTaskRemoveFromEventList>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d026      	beq.n	800334e <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d023      	beq.n	800334e <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e01f      	b.n	800334e <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800330e:	f000 fef7 	bl	8004100 <uxTaskGetNumberOfTasks>
 8003312:	6338      	str	r0, [r7, #48]	@ 0x30
 8003314:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800331a:	429a      	cmp	r2, r3
 800331c:	d917      	bls.n	800334e <xQueueGenericSendFromISR+0x14c>
 800331e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8003322:	2b7f      	cmp	r3, #127	@ 0x7f
 8003324:	d10b      	bne.n	800333e <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	61bb      	str	r3, [r7, #24]
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	e7fd      	b.n	800333a <xQueueGenericSendFromISR+0x138>
 800333e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003342:	3301      	adds	r3, #1
 8003344:	b2db      	uxtb	r3, r3
 8003346:	b25a      	sxtb	r2, r3
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800334e:	2301      	movs	r3, #1
 8003350:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8003352:	e001      	b.n	8003358 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003354:	2300      	movs	r3, #0
 8003356:	647b      	str	r3, [r7, #68]	@ 0x44
 8003358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003362:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 8003364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003366:	4619      	mov	r1, r3
 8003368:	20a2      	movs	r0, #162	@ 0xa2
 800336a:	f003 fd45 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800336e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003370:	4618      	mov	r0, r3
 8003372:	3748      	adds	r7, #72	@ 0x48
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	@ 0x30
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003384:	2300      	movs	r3, #0
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10b      	bne.n	80033aa <xQueueReceive+0x32>
    __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	623b      	str	r3, [r7, #32]
}
 80033a4:	bf00      	nop
 80033a6:	bf00      	nop
 80033a8:	e7fd      	b.n	80033a6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <xQueueReceive+0x40>
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <xQueueReceive+0x44>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <xQueueReceive+0x46>
 80033bc:	2300      	movs	r3, #0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <xQueueReceive+0x62>
    __asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	61fb      	str	r3, [r7, #28]
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	e7fd      	b.n	80033d6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033da:	f001 fac1 	bl	8004960 <xTaskGetSchedulerState>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d102      	bne.n	80033ea <xQueueReceive+0x72>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <xQueueReceive+0x76>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueReceive+0x78>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <xQueueReceive+0x94>
    __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	61bb      	str	r3, [r7, #24]
}
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800340c:	f002 f862 	bl	80054d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003420:	f000 f902 	bl	8003628 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003436:	3310      	adds	r3, #16
 8003438:	4618      	mov	r0, r3
 800343a:	f001 f86f 	bl	800451c <xTaskRemoveFromEventList>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003444:	4b42      	ldr	r3, [pc, #264]	@ (8003550 <xQueueReceive+0x1d8>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003454:	f002 f870 	bl	8005538 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8003458:	2101      	movs	r1, #1
 800345a:	20a4      	movs	r0, #164	@ 0xa4
 800345c:	f003 fccc 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003460:	2301      	movs	r3, #1
 8003462:	e071      	b.n	8003548 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d107      	bne.n	800347a <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800346a:	f002 f865 	bl	8005538 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800346e:	2100      	movs	r1, #0
 8003470:	20a4      	movs	r0, #164	@ 0xa4
 8003472:	f003 fcc1 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8003476:	2300      	movs	r3, #0
 8003478:	e066      	b.n	8003548 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800347a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	4618      	mov	r0, r3
 8003486:	f001 f929 	bl	80046dc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800348e:	f002 f853 	bl	8005538 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003492:	f000 fced 	bl	8003e70 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003496:	f002 f81d 	bl	80054d4 <vPortEnterCritical>
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d103      	bne.n	80034b0 <xQueueReceive+0x138>
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d103      	bne.n	80034c6 <xQueueReceive+0x14e>
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034c6:	f002 f837 	bl	8005538 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ca:	1d3a      	adds	r2, r7, #4
 80034cc:	f107 0310 	add.w	r3, r7, #16
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f91a 	bl	800470c <xTaskCheckForTimeOut>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034e0:	f000 f91a 	bl	8003718 <prvIsQueueEmpty>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	3324      	adds	r3, #36	@ 0x24
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 ffa0 	bl	8004438 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80034f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034fa:	f000 f8bb 	bl	8003674 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80034fe:	f000 fcc5 	bl	8003e8c <xTaskResumeAll>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d181      	bne.n	800340c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <xQueueReceive+0x1d8>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	e778      	b.n	800340c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800351a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800351c:	f000 f8aa 	bl	8003674 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003520:	f000 fcb4 	bl	8003e8c <xTaskResumeAll>
 8003524:	e772      	b.n	800340c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003528:	f000 f8a4 	bl	8003674 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800352c:	f000 fcae 	bl	8003e8c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003532:	f000 f8f1 	bl	8003718 <prvIsQueueEmpty>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f43f af67 	beq.w	800340c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800353e:	2100      	movs	r1, #0
 8003540:	20a4      	movs	r0, #164	@ 0xa4
 8003542:	f003 fc59 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8003546:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003548:	4618      	mov	r0, r3
 800354a:	3730      	adds	r7, #48	@ 0x30
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d14d      	bne.n	8003616 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fa10 	bl	80049a4 <xTaskPriorityDisinherit>
 8003584:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e043      	b.n	8003616 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d119      	bne.n	80035c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6858      	ldr	r0, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	461a      	mov	r2, r3
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	f004 f960 	bl	8007864 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	441a      	add	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d32b      	bcc.n	8003616 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	e026      	b.n	8003616 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68d8      	ldr	r0, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	461a      	mov	r2, r3
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	f004 f946 	bl	8007864 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	425b      	negs	r3, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d207      	bcs.n	8003604 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	425b      	negs	r3, r3
 80035fe:	441a      	add	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d105      	bne.n	8003616 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	3b01      	subs	r3, #1
 8003614:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800361e:	697b      	ldr	r3, [r7, #20]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d303      	bcc.n	800365c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	461a      	mov	r2, r3
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f004 f8fc 	bl	8007864 <memcpy>
    }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800367c:	f001 ff2a 	bl	80054d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003686:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003688:	e011      	b.n	80036ae <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3324      	adds	r3, #36	@ 0x24
 8003696:	4618      	mov	r0, r3
 8003698:	f000 ff40 	bl	800451c <xTaskRemoveFromEventList>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80036a2:	f001 f89f 	bl	80047e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dce9      	bgt.n	800368a <prvUnlockQueue+0x16>
 80036b6:	e000      	b.n	80036ba <prvUnlockQueue+0x46>
                    break;
 80036b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	22ff      	movs	r2, #255	@ 0xff
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80036c2:	f001 ff39 	bl	8005538 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80036c6:	f001 ff05 	bl	80054d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d2:	e011      	b.n	80036f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3310      	adds	r3, #16
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ff1b 	bl	800451c <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80036ec:	f001 f87a 	bl	80047e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	dce9      	bgt.n	80036d4 <prvUnlockQueue+0x60>
 8003700:	e000      	b.n	8003704 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003702:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	22ff      	movs	r2, #255	@ 0xff
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800370c:	f001 ff14 	bl	8005538 <vPortExitCritical>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003720:	f001 fed8 	bl	80054d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e001      	b.n	8003736 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003736:	f001 feff 	bl	8005538 <vPortExitCritical>

    return xReturn;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d024      	beq.n	80037c0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e01e      	b.n	80037ba <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800377c:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d105      	bne.n	8003798 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 8003792:	4413      	add	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
                    break;
 8003796:	e013      	b.n	80037c0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <vQueueAddToRegistry+0x70>
 800379e:	4a10      	ldr	r2, [pc, #64]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4a0c      	ldr	r2, [pc, #48]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 80037b0:	4413      	add	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d9dd      	bls.n	800377c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80037d2:	20b6      	movs	r0, #182	@ 0xb6
 80037d4:	f003 fad4 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80037d8:	bf00      	nop
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000198 	.word	0x20000198

080037e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80037f4:	f001 fe6e 	bl	80054d4 <vPortEnterCritical>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d103      	bne.n	800380e <vQueueWaitForMessageRestricted+0x2a>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003814:	b25b      	sxtb	r3, r3
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d103      	bne.n	8003824 <vQueueWaitForMessageRestricted+0x40>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003824:	f001 fe88 	bl	8005538 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3324      	adds	r3, #36	@ 0x24
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fe25 	bl	8004488 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff18 	bl	8003674 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003844:	20b9      	movs	r0, #185	@ 0xb9
 8003846:	f003 fa9b 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	@ 0x28
 8003856:	af04      	add	r7, sp, #16
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f001 ff63 	bl	8005730 <pvPortMalloc>
 800386a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003872:	205c      	movs	r0, #92	@ 0x5c
 8003874:	f001 ff5c 	bl	8005730 <pvPortMalloc>
 8003878:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003880:	225c      	movs	r2, #92	@ 0x5c
 8003882:	2100      	movs	r1, #0
 8003884:	6978      	ldr	r0, [r7, #20]
 8003886:	f003 ffb9 	bl	80077fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003890:	e005      	b.n	800389e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003892:	6938      	ldr	r0, [r7, #16]
 8003894:	f002 f87e 	bl	8005994 <vPortFree>
 8003898:	e001      	b.n	800389e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038a4:	2300      	movs	r3, #0
 80038a6:	9303      	str	r3, [sp, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9302      	str	r3, [sp, #8]
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f82d 	bl	800391a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80038c0:	697b      	ldr	r3, [r7, #20]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff ffb3 	bl	8003852 <prvCreateTask>
 80038ec:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80038f4:	6938      	ldr	r0, [r7, #16]
 80038f6:	f000 f8a1 	bl	8003a3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e002      	b.n	8003906 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4619      	mov	r1, r3
 800390a:	20c2      	movs	r0, #194	@ 0xc2
 800390c:	f003 fa74 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003910:	697b      	ldr	r3, [r7, #20]
    }
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	21a5      	movs	r1, #165	@ 0xa5
 8003934:	f003 ff62 	bl	80077fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003942:	3b01      	subs	r3, #1
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f023 0307 	bic.w	r3, r3, #7
 8003950:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	617b      	str	r3, [r7, #20]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01e      	beq.n	80039b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	e012      	b.n	80039a6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	7819      	ldrb	r1, [r3, #0]
 8003988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	3334      	adds	r3, #52	@ 0x34
 8003990:	460a      	mov	r2, r1
 8003992:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b0e      	cmp	r3, #14
 80039aa:	d9e9      	bls.n	8003980 <prvInitialiseNewTask+0x66>
 80039ac:	e000      	b.n	80039b0 <prvInitialiseNewTask+0x96>
            {
                break;
 80039ae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d90b      	bls.n	80039d6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	613b      	str	r3, [r7, #16]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d901      	bls.n	80039e0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039dc:	2304      	movs	r3, #4
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fa55 	bl	8002ea0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	3318      	adds	r3, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff fa50 	bl	8002ea0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a04:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	f1c3 0205 	rsb	r2, r3, #5
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	69b8      	ldr	r0, [r7, #24]
 8003a1c:	f001 fbda 	bl	80051d4 <pxPortInitialiseStack>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a32:	bf00      	nop
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003a44:	f001 fd46 	bl	80054d4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a50:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003a52:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003a68:	f000 fee0 	bl	800482c <prvInitialiseTaskLists>
 8003a6c:	e00d      	b.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <prvAddNewTaskToReadyList+0x158>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003a84:	4a42      	ldr	r2, [pc, #264]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a41      	ldr	r2, [pc, #260]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a92:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a94:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <prvAddNewTaskToReadyList+0x94>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 fa1b 	bl	8006ee0 <SEGGER_SYSVIEW_OnTaskCreate>
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	461d      	mov	r5, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	1ae3      	subs	r3, r4, r3
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	462b      	mov	r3, r5
 8003acc:	f003 fd0c 	bl	80074e8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 fa88 	bl	8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b9c <prvAddNewTaskToReadyList+0x160>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <prvAddNewTaskToReadyList+0x160>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	492c      	ldr	r1, [pc, #176]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3304      	adds	r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	3204      	adds	r2, #4
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	4919      	ldr	r1, [pc, #100]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	4814      	ldr	r0, [pc, #80]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4403      	add	r3, r0
 8003b58:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003b5a:	f001 fced 	bl	8005538 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <prvAddNewTaskToReadyList+0x158>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003b66:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d207      	bcs.n	8003b84 <prvAddNewTaskToReadyList+0x148>
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <prvAddNewTaskToReadyList+0x168>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8c:	200002b0 	.word	0x200002b0
 8003b90:	200001d8 	.word	0x200001d8
 8003b94:	200002bc 	.word	0x200002bc
 8003b98:	200002cc 	.word	0x200002cc
 8003b9c:	200002b8 	.word	0x200002b8
 8003ba0:	200001dc 	.word	0x200001dc
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8003bb4:	f001 fc8e 	bl	80054d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d102      	bne.n	8003bc4 <vTaskDelete+0x1c>
 8003bbe:	4b50      	ldr	r3, [pc, #320]	@ (8003d00 <vTaskDelete+0x158>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	e000      	b.n	8003bc6 <vTaskDelete+0x1e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff f9d7 	bl	8002f80 <uxListRemove>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d115      	bne.n	8003c04 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	4949      	ldr	r1, [pc, #292]	@ (8003d04 <vTaskDelete+0x15c>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <vTaskDelete+0x5c>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <vTaskDelete+0x160>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a41      	ldr	r2, [pc, #260]	@ (8003d08 <vTaskDelete+0x160>)
 8003c02:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3318      	adds	r3, #24
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff f9b5 	bl	8002f80 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8003c16:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <vTaskDelete+0x164>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <vTaskDelete+0x164>)
 8003c1e:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8003c20:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <vTaskDelete+0x158>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <vTaskDelete+0x86>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <vTaskDelete+0x88>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8003c32:	4b37      	ldr	r3, [pc, #220]	@ (8003d10 <vTaskDelete+0x168>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01d      	beq.n	8003c76 <vTaskDelete+0xce>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01a      	beq.n	8003c76 <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4833      	ldr	r0, [pc, #204]	@ (8003d14 <vTaskDelete+0x16c>)
 8003c48:	f7ff f939 	bl	8002ebe <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8003c4c:	4b32      	ldr	r3, [pc, #200]	@ (8003d18 <vTaskDelete+0x170>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a31      	ldr	r2, [pc, #196]	@ (8003d18 <vTaskDelete+0x170>)
 8003c54:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f003 fa67 	bl	800712c <SEGGER_SYSVIEW_ShrinkId>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4619      	mov	r1, r3
 8003c62:	20c3      	movs	r0, #195	@ 0xc3
 8003c64:	f002 fcb4 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fca4 	bl	80075b8 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8003c70:	2301      	movs	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e013      	b.n	8003c9e <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003c76:	4b29      	ldr	r3, [pc, #164]	@ (8003d1c <vTaskDelete+0x174>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	4a27      	ldr	r2, [pc, #156]	@ (8003d1c <vTaskDelete+0x174>)
 8003c7e:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 fa52 	bl	800712c <SEGGER_SYSVIEW_ShrinkId>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	20c3      	movs	r0, #195	@ 0xc3
 8003c8e:	f002 fc9f 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 fc8f 	bl	80075b8 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8003c9a:	f000 fe45 	bl	8004928 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003c9e:	f001 fc4b 	bl	8005538 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 8003ca8:	6938      	ldr	r0, [r7, #16]
 8003caa:	f000 fe2d 	bl	8004908 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <vTaskDelete+0x168>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01c      	beq.n	8003cf0 <vTaskDelete+0x148>
            {
                if( pxTCB == pxCurrentTCB )
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <vTaskDelete+0x158>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d117      	bne.n	8003cf0 <vTaskDelete+0x148>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8003cc0:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <vTaskDelete+0x178>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <vTaskDelete+0x138>
    __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60bb      	str	r3, [r7, #8]
}
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <vTaskDelete+0x134>
                    taskYIELD_WITHIN_API();
 8003ce0:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <vTaskDelete+0x17c>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8003cf0:	20c3      	movs	r0, #195	@ 0xc3
 8003cf2:	f003 f845 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003cf6:	bf00      	nop
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200001d8 	.word	0x200001d8
 8003d04:	200001dc 	.word	0x200001dc
 8003d08:	200002b8 	.word	0x200002b8
 8003d0c:	200002cc 	.word	0x200002cc
 8003d10:	200002bc 	.word	0x200002bc
 8003d14:	20000284 	.word	0x20000284
 8003d18:	20000298 	.word	0x20000298
 8003d1c:	200002b0 	.word	0x200002b0
 8003d20:	200002d8 	.word	0x200002d8
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	@ 0x28
 8003d2c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e011      	b.n	8003d60 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <prvCreateIdleTasks+0x88>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4413      	add	r3, r2
 8003d42:	7819      	ldrb	r1, [r3, #0]
 8003d44:	463a      	mov	r2, r7
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003d4e:	463a      	mov	r2, r7
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b0e      	cmp	r3, #14
 8003d64:	ddea      	ble.n	8003d3c <prvCreateIdleTasks+0x14>
 8003d66:	e000      	b.n	8003d6a <prvCreateIdleTasks+0x42>
        {
            break;
 8003d68:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e015      	b.n	8003d9c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003d70:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <prvCreateIdleTasks+0x8c>)
 8003d72:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a0f      	ldr	r2, [pc, #60]	@ (8003db8 <prvCreateIdleTasks+0x90>)
 8003d7a:	4413      	add	r3, r2
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	2282      	movs	r2, #130	@ 0x82
 8003d88:	6938      	ldr	r0, [r7, #16]
 8003d8a:	f7ff fd9e 	bl	80038ca <xTaskCreate>
 8003d8e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d006      	beq.n	8003da4 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	dde6      	ble.n	8003d70 <prvCreateIdleTasks+0x48>
 8003da2:	e000      	b.n	8003da6 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003da4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003da6:	69fb      	ldr	r3, [r7, #28]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08008190 	.word	0x08008190
 8003db4:	080047fd 	.word	0x080047fd
 8003db8:	200002d4 	.word	0x200002d4

08003dbc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003dc2:	f7ff ffb1 	bl	8003d28 <prvCreateIdleTasks>
 8003dc6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003dce:	f000 ff27 	bl	8004c20 <xTimerCreateTimerTask>
 8003dd2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d124      	bne.n	8003e24 <vTaskStartScheduler+0x68>
    __asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	60bb      	str	r3, [r7, #8]
}
 8003dec:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	@ (8003e58 <vTaskStartScheduler+0x9c>)
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295
 8003df4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003df6:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <vTaskStartScheduler+0xa0>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <vTaskStartScheduler+0xa4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003e02:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <vTaskStartScheduler+0xa8>)
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4b18      	ldr	r3, [pc, #96]	@ (8003e68 <vTaskStartScheduler+0xac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d102      	bne.n	8003e14 <vTaskStartScheduler+0x58>
 8003e0e:	f003 f84b 	bl	8006ea8 <SEGGER_SYSVIEW_OnIdle>
 8003e12:	e004      	b.n	8003e1e <vTaskStartScheduler+0x62>
 8003e14:	4b14      	ldr	r3, [pc, #80]	@ (8003e68 <vTaskStartScheduler+0xac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 f8a3 	bl	8006f64 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003e1e:	f001 fa69 	bl	80052f4 <xPortStartScheduler>
 8003e22:	e00f      	b.n	8003e44 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d10b      	bne.n	8003e44 <vTaskStartScheduler+0x88>
    __asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	607b      	str	r3, [r7, #4]
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003e44:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <vTaskStartScheduler+0xb0>)
 8003e46:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003e48:	20cd      	movs	r0, #205	@ 0xcd
 8003e4a:	f002 ff99 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200002d0 	.word	0x200002d0
 8003e5c:	200002bc 	.word	0x200002bc
 8003e60:	200002b4 	.word	0x200002b4
 8003e64:	200002d4 	.word	0x200002d4
 8003e68:	200001d8 	.word	0x200001d8
 8003e6c:	2000000c 	.word	0x2000000c

08003e70 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <vTaskSuspendAll+0x18>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a03      	ldr	r2, [pc, #12]	@ (8003e88 <vTaskSuspendAll+0x18>)
 8003e7c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003e7e:	20cf      	movs	r0, #207	@ 0xcf
 8003e80:	f002 ff7e 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	200002d8 	.word	0x200002d8

08003e8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003e9a:	f001 fb1b 	bl	80054d4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800408c <xTaskResumeAll+0x200>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <xTaskResumeAll+0x36>
    __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	603b      	str	r3, [r7, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003ec2:	4b72      	ldr	r3, [pc, #456]	@ (800408c <xTaskResumeAll+0x200>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	4a70      	ldr	r2, [pc, #448]	@ (800408c <xTaskResumeAll+0x200>)
 8003eca:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800408c <xTaskResumeAll+0x200>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f040 80ce 	bne.w	8004072 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8004090 <xTaskResumeAll+0x204>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80c9 	beq.w	8004072 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee0:	e092      	b.n	8004008 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8004094 <xTaskResumeAll+0x208>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	69fa      	ldr	r2, [r7, #28]
 8003ef6:	6a12      	ldr	r2, [r2, #32]
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	69d2      	ldr	r2, [r2, #28]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	3318      	adds	r3, #24
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d103      	bne.n	8003f18 <xTaskResumeAll+0x8c>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	6a1a      	ldr	r2, [r3, #32]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	1e5a      	subs	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d103      	bne.n	8003f56 <xTaskResumeAll+0xca>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	615a      	str	r2, [r3, #20]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	1e5a      	subs	r2, r3, #1
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 f83d 	bl	8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	2201      	movs	r2, #1
 8003f74:	409a      	lsls	r2, r3
 8003f76:	4b48      	ldr	r3, [pc, #288]	@ (8004098 <xTaskResumeAll+0x20c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	4a46      	ldr	r2, [pc, #280]	@ (8004098 <xTaskResumeAll+0x20c>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	4945      	ldr	r1, [pc, #276]	@ (800409c <xTaskResumeAll+0x210>)
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	3304      	adds	r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	60da      	str	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	3204      	adds	r2, #4
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	1d1a      	adds	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4a36      	ldr	r2, [pc, #216]	@ (800409c <xTaskResumeAll+0x210>)
 8003fc4:	441a      	add	r2, r3
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	615a      	str	r2, [r3, #20]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fce:	4933      	ldr	r1, [pc, #204]	@ (800409c <xTaskResumeAll+0x210>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69fa      	ldr	r2, [r7, #28]
 8003fde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fe0:	1c59      	adds	r1, r3, #1
 8003fe2:	482e      	ldr	r0, [pc, #184]	@ (800409c <xTaskResumeAll+0x210>)
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4403      	add	r3, r0
 8003fee:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <xTaskResumeAll+0x214>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d904      	bls.n	8004008 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003ffe:	4a29      	ldr	r2, [pc, #164]	@ (80040a4 <xTaskResumeAll+0x218>)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	2101      	movs	r1, #1
 8004004:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004008:	4b22      	ldr	r3, [pc, #136]	@ (8004094 <xTaskResumeAll+0x208>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f47f af68 	bne.w	8003ee2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004018:	f000 fc86 	bl	8004928 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800401c:	4b22      	ldr	r3, [pc, #136]	@ (80040a8 <xTaskResumeAll+0x21c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d012      	beq.n	800404e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004028:	f000 f878 	bl	800411c <xTaskIncrementTick>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004032:	4a1c      	ldr	r2, [pc, #112]	@ (80040a4 <xTaskResumeAll+0x218>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2101      	movs	r1, #1
 8004038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3b01      	subs	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ef      	bne.n	8004028 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8004048:	4b17      	ldr	r3, [pc, #92]	@ (80040a8 <xTaskResumeAll+0x21c>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800404e:	4a15      	ldr	r2, [pc, #84]	@ (80040a4 <xTaskResumeAll+0x218>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <xTaskResumeAll+0x214>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4b12      	ldr	r3, [pc, #72]	@ (80040ac <xTaskResumeAll+0x220>)
 8004064:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004072:	f001 fa61 	bl	8005538 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4619      	mov	r1, r3
 800407a:	20d0      	movs	r0, #208	@ 0xd0
 800407c:	f002 febc 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8004080:	69bb      	ldr	r3, [r7, #24]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	200002d8 	.word	0x200002d8
 8004090:	200002b0 	.word	0x200002b0
 8004094:	20000270 	.word	0x20000270
 8004098:	200002b8 	.word	0x200002b8
 800409c:	200001dc 	.word	0x200001dc
 80040a0:	200001d8 	.word	0x200001d8
 80040a4:	200002c4 	.word	0x200002c4
 80040a8:	200002c0 	.word	0x200002c0
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <xTaskGetTickCount+0x20>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	20d1      	movs	r0, #209	@ 0xd1
 80040c0:	f002 fe9a 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80040c4:	687b      	ldr	r3, [r7, #4]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200002b4 	.word	0x200002b4

080040d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040da:	f001 fae7 	bl	80056ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <xTaskGetTickCountFromISR+0x28>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80040e8:	6839      	ldr	r1, [r7, #0]
 80040ea:	20d2      	movs	r0, #210	@ 0xd2
 80040ec:	f002 fe84 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80040f0:	683b      	ldr	r3, [r7, #0]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	200002b4 	.word	0x200002b4

08004100 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8004104:	4b04      	ldr	r3, [pc, #16]	@ (8004118 <uxTaskGetNumberOfTasks+0x18>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	20d3      	movs	r0, #211	@ 0xd3
 800410c:	f002 fe74 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8004110:	4b01      	ldr	r3, [pc, #4]	@ (8004118 <uxTaskGetNumberOfTasks+0x18>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	200002b0 	.word	0x200002b0

0800411c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	@ 0x28
 8004120:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004126:	4b83      	ldr	r3, [pc, #524]	@ (8004334 <xTaskIncrementTick+0x218>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 80f3 	bne.w	8004316 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004130:	4b81      	ldr	r3, [pc, #516]	@ (8004338 <xTaskIncrementTick+0x21c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004138:	4a7f      	ldr	r2, [pc, #508]	@ (8004338 <xTaskIncrementTick+0x21c>)
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d121      	bne.n	8004188 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004144:	4b7d      	ldr	r3, [pc, #500]	@ (800433c <xTaskIncrementTick+0x220>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <xTaskIncrementTick+0x4a>
    __asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	607b      	str	r3, [r7, #4]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <xTaskIncrementTick+0x46>
 8004166:	4b75      	ldr	r3, [pc, #468]	@ (800433c <xTaskIncrementTick+0x220>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	4b74      	ldr	r3, [pc, #464]	@ (8004340 <xTaskIncrementTick+0x224>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a72      	ldr	r2, [pc, #456]	@ (800433c <xTaskIncrementTick+0x220>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4a72      	ldr	r2, [pc, #456]	@ (8004340 <xTaskIncrementTick+0x224>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <xTaskIncrementTick+0x228>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a70      	ldr	r2, [pc, #448]	@ (8004344 <xTaskIncrementTick+0x228>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	f000 fbd0 	bl	8004928 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004188:	4b6f      	ldr	r3, [pc, #444]	@ (8004348 <xTaskIncrementTick+0x22c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	429a      	cmp	r2, r3
 8004190:	f0c0 80ac 	bcc.w	80042ec <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004194:	4b69      	ldr	r3, [pc, #420]	@ (800433c <xTaskIncrementTick+0x220>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d104      	bne.n	80041a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800419e:	4b6a      	ldr	r3, [pc, #424]	@ (8004348 <xTaskIncrementTick+0x22c>)
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	601a      	str	r2, [r3, #0]
                    break;
 80041a6:	e0a1      	b.n	80042ec <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041a8:	4b64      	ldr	r3, [pc, #400]	@ (800433c <xTaskIncrementTick+0x220>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d203      	bcs.n	80041c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80041c0:	4a61      	ldr	r2, [pc, #388]	@ (8004348 <xTaskIncrementTick+0x22c>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6013      	str	r3, [r2, #0]
                        break;
 80041c6:	e091      	b.n	80042ec <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	6892      	ldr	r2, [r2, #8]
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3304      	adds	r3, #4
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d103      	bne.n	80041f6 <xTaskIncrementTick+0xda>
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2200      	movs	r2, #0
 80041fa:	615a      	str	r2, [r3, #20]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01e      	beq.n	800424c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	6a12      	ldr	r2, [r2, #32]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	69d2      	ldr	r2, [r2, #28]
 8004226:	605a      	str	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	3318      	adds	r3, #24
 8004230:	429a      	cmp	r2, r3
 8004232:	d103      	bne.n	800423c <xTaskIncrementTick+0x120>
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1e5a      	subs	r2, r3, #1
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4618      	mov	r0, r3
 8004250:	f002 feca 	bl	8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	4b3b      	ldr	r3, [pc, #236]	@ (800434c <xTaskIncrementTick+0x230>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4313      	orrs	r3, r2
 8004262:	4a3a      	ldr	r2, [pc, #232]	@ (800434c <xTaskIncrementTick+0x230>)
 8004264:	6013      	str	r3, [r2, #0]
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	4939      	ldr	r1, [pc, #228]	@ (8004350 <xTaskIncrementTick+0x234>)
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	3304      	adds	r3, #4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	3204      	adds	r2, #4
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1d1a      	adds	r2, r3, #4
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4a29      	ldr	r2, [pc, #164]	@ (8004350 <xTaskIncrementTick+0x234>)
 80042aa:	441a      	add	r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	615a      	str	r2, [r3, #20]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4926      	ldr	r1, [pc, #152]	@ (8004350 <xTaskIncrementTick+0x234>)
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042c6:	1c59      	adds	r1, r3, #1
 80042c8:	4821      	ldr	r0, [pc, #132]	@ (8004350 <xTaskIncrementTick+0x234>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4403      	add	r3, r0
 80042d4:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <xTaskIncrementTick+0x238>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	f67f af57 	bls.w	8004194 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80042e6:	2301      	movs	r3, #1
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ea:	e753      	b.n	8004194 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80042ec:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <xTaskIncrementTick+0x238>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f2:	4917      	ldr	r1, [pc, #92]	@ (8004350 <xTaskIncrementTick+0x234>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d901      	bls.n	8004308 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8004304:	2301      	movs	r3, #1
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004308:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <xTaskIncrementTick+0x23c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d007      	beq.n	8004320 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8004310:	2301      	movs	r3, #1
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
 8004314:	e004      	b.n	8004320 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004316:	4b11      	ldr	r3, [pc, #68]	@ (800435c <xTaskIncrementTick+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	4a0f      	ldr	r2, [pc, #60]	@ (800435c <xTaskIncrementTick+0x240>)
 800431e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	4619      	mov	r1, r3
 8004324:	20db      	movs	r0, #219	@ 0xdb
 8004326:	f002 fd67 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800432c:	4618      	mov	r0, r3
 800432e:	3728      	adds	r7, #40	@ 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200002d8 	.word	0x200002d8
 8004338:	200002b4 	.word	0x200002b4
 800433c:	20000268 	.word	0x20000268
 8004340:	2000026c 	.word	0x2000026c
 8004344:	200002c8 	.word	0x200002c8
 8004348:	200002d0 	.word	0x200002d0
 800434c:	200002b8 	.word	0x200002b8
 8004350:	200001dc 	.word	0x200001dc
 8004354:	200001d8 	.word	0x200001d8
 8004358:	200002c4 	.word	0x200002c4
 800435c:	200002c0 	.word	0x200002c0

08004360 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004366:	4b2e      	ldr	r3, [pc, #184]	@ (8004420 <vTaskSwitchContext+0xc0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800436e:	4b2d      	ldr	r3, [pc, #180]	@ (8004424 <vTaskSwitchContext+0xc4>)
 8004370:	2201      	movs	r2, #1
 8004372:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004374:	e04f      	b.n	8004416 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8004376:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <vTaskSwitchContext+0xc4>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800437c:	4b2a      	ldr	r3, [pc, #168]	@ (8004428 <vTaskSwitchContext+0xc8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	f1c3 031f 	rsb	r3, r3, #31
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	4926      	ldr	r1, [pc, #152]	@ (800442c <vTaskSwitchContext+0xcc>)
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <vTaskSwitchContext+0x5e>
    __asm volatile
 80043a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	607b      	str	r3, [r7, #4]
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	e7fd      	b.n	80043ba <vTaskSwitchContext+0x5a>
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <vTaskSwitchContext+0xcc>)
 80043ca:	4413      	add	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	3308      	adds	r3, #8
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d103      	bne.n	80043ec <vTaskSwitchContext+0x8c>
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004430 <vTaskSwitchContext+0xd0>)
 80043f4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80043f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <vTaskSwitchContext+0xd4>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <vTaskSwitchContext+0xd0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d102      	bne.n	8004408 <vTaskSwitchContext+0xa8>
 8004402:	f002 fd51 	bl	8006ea8 <SEGGER_SYSVIEW_OnIdle>
 8004406:	e004      	b.n	8004412 <vTaskSwitchContext+0xb2>
 8004408:	4b09      	ldr	r3, [pc, #36]	@ (8004430 <vTaskSwitchContext+0xd0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f002 fda9 	bl	8006f64 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004412:	4b07      	ldr	r3, [pc, #28]	@ (8004430 <vTaskSwitchContext+0xd0>)
 8004414:	681b      	ldr	r3, [r3, #0]
    }
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200002d8 	.word	0x200002d8
 8004424:	200002c4 	.word	0x200002c4
 8004428:	200002b8 	.word	0x200002b8
 800442c:	200001dc 	.word	0x200001dc
 8004430:	200001d8 	.word	0x200001d8
 8004434:	200002d4 	.word	0x200002d4

08004438 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	60fb      	str	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004460:	4b08      	ldr	r3, [pc, #32]	@ (8004484 <vTaskPlaceOnEventList+0x4c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3318      	adds	r3, #24
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fe fd4e 	bl	8002f0a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800446e:	2101      	movs	r1, #1
 8004470:	6838      	ldr	r0, [r7, #0]
 8004472:	f000 fb47 	bl	8004b04 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8004476:	20e1      	movs	r0, #225	@ 0xe1
 8004478:	f002 fc82 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200001d8 	.word	0x200001d8

08004488 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	613b      	str	r3, [r7, #16]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	4b17      	ldr	r3, [pc, #92]	@ (8004518 <vTaskPlaceOnEventListRestricted+0x90>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	61da      	str	r2, [r3, #28]
 80044c0:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <vTaskPlaceOnEventListRestricted+0x90>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	6892      	ldr	r2, [r2, #8]
 80044c8:	621a      	str	r2, [r3, #32]
 80044ca:	4b13      	ldr	r3, [pc, #76]	@ (8004518 <vTaskPlaceOnEventListRestricted+0x90>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	3218      	adds	r2, #24
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <vTaskPlaceOnEventListRestricted+0x90>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f103 0218 	add.w	r2, r3, #24
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <vTaskPlaceOnEventListRestricted+0x90>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	68b8      	ldr	r0, [r7, #8]
 8004504:	f000 fafe 	bl	8004b04 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004508:	20e3      	movs	r0, #227	@ 0xe3
 800450a:	f002 fc39 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800450e:	bf00      	nop
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200001d8 	.word	0x200001d8

0800451c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10b      	bne.n	800454a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60fb      	str	r3, [r7, #12]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	6a3a      	ldr	r2, [r7, #32]
 8004556:	6a12      	ldr	r2, [r2, #32]
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	69d2      	ldr	r2, [r2, #28]
 8004562:	605a      	str	r2, [r3, #4]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	3318      	adds	r3, #24
 800456c:	429a      	cmp	r2, r3
 800456e:	d103      	bne.n	8004578 <xTaskRemoveFromEventList+0x5c>
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	605a      	str	r2, [r3, #4]
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	2200      	movs	r2, #0
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	1e5a      	subs	r2, r3, #1
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004588:	4b4e      	ldr	r3, [pc, #312]	@ (80046c4 <xTaskRemoveFromEventList+0x1a8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d164      	bne.n	800465a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	6a3a      	ldr	r2, [r7, #32]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	3304      	adds	r3, #4
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d103      	bne.n	80045be <xTaskRemoveFromEventList+0xa2>
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f002 fd09 	bl	8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	4b3a      	ldr	r3, [pc, #232]	@ (80046c8 <xTaskRemoveFromEventList+0x1ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	4a38      	ldr	r2, [pc, #224]	@ (80046c8 <xTaskRemoveFromEventList+0x1ac>)
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ec:	4937      	ldr	r1, [pc, #220]	@ (80046cc <xTaskRemoveFromEventList+0x1b0>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	3304      	adds	r3, #4
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	60da      	str	r2, [r3, #12]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	6a3a      	ldr	r2, [r7, #32]
 8004612:	3204      	adds	r2, #4
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <xTaskRemoveFromEventList+0x1b0>)
 800462c:	441a      	add	r2, r3
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	615a      	str	r2, [r3, #20]
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004636:	4925      	ldr	r1, [pc, #148]	@ (80046cc <xTaskRemoveFromEventList+0x1b0>)
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004648:	1c59      	adds	r1, r3, #1
 800464a:	4820      	ldr	r0, [pc, #128]	@ (80046cc <xTaskRemoveFromEventList+0x1b0>)
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	6019      	str	r1, [r3, #0]
 8004658:	e01b      	b.n	8004692 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800465a:	4b1d      	ldr	r3, [pc, #116]	@ (80046d0 <xTaskRemoveFromEventList+0x1b4>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	61da      	str	r2, [r3, #28]
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	621a      	str	r2, [r3, #32]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	3218      	adds	r2, #24
 8004676:	605a      	str	r2, [r3, #4]
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f103 0218 	add.w	r2, r3, #24
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	4a12      	ldr	r2, [pc, #72]	@ (80046d0 <xTaskRemoveFromEventList+0x1b4>)
 8004686:	629a      	str	r2, [r3, #40]	@ 0x28
 8004688:	4b11      	ldr	r3, [pc, #68]	@ (80046d0 <xTaskRemoveFromEventList+0x1b4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	4a10      	ldr	r2, [pc, #64]	@ (80046d0 <xTaskRemoveFromEventList+0x1b4>)
 8004690:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004696:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <xTaskRemoveFromEventList+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d905      	bls.n	80046ac <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <xTaskRemoveFromEventList+0x1bc>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e001      	b.n	80046b0 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	4619      	mov	r1, r3
 80046b4:	20e4      	movs	r0, #228	@ 0xe4
 80046b6:	f002 fb9f 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	@ 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	200002d8 	.word	0x200002d8
 80046c8:	200002b8 	.word	0x200002b8
 80046cc:	200001dc 	.word	0x200001dc
 80046d0:	20000270 	.word	0x20000270
 80046d4:	200001d8 	.word	0x200001d8
 80046d8:	200002c4 	.word	0x200002c4

080046dc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046e4:	4b07      	ldr	r3, [pc, #28]	@ (8004704 <vTaskInternalSetTimeOutState+0x28>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <vTaskInternalSetTimeOutState+0x2c>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80046f4:	20e7      	movs	r0, #231	@ 0xe7
 80046f6:	f002 fb43 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200002c8 	.word	0x200002c8
 8004708:	200002b4 	.word	0x200002b4

0800470c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	613b      	str	r3, [r7, #16]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60fb      	str	r3, [r7, #12]
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	e7fd      	b.n	800474e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004752:	f000 febf 	bl	80054d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004756:	4b21      	ldr	r3, [pc, #132]	@ (80047dc <xTaskCheckForTimeOut+0xd0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d102      	bne.n	8004776 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e026      	b.n	80047c4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <xTaskCheckForTimeOut+0xd4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d00a      	beq.n	8004798 <xTaskCheckForTimeOut+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d305      	bcc.n	8004798 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	e015      	b.n	80047c4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d20b      	bcs.n	80047ba <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad2      	subs	r2, r2, r3
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff ff94 	bl	80046dc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61fb      	str	r3, [r7, #28]
 80047b8:	e004      	b.n	80047c4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80047c0:	2301      	movs	r3, #1
 80047c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80047c4:	f000 feb8 	bl	8005538 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	4619      	mov	r1, r3
 80047cc:	20e8      	movs	r0, #232	@ 0xe8
 80047ce:	f002 fb13 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80047d2:	69fb      	ldr	r3, [r7, #28]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200002b4 	.word	0x200002b4
 80047e0:	200002c8 	.word	0x200002c8

080047e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80047e8:	4b03      	ldr	r3, [pc, #12]	@ (80047f8 <vTaskMissedYield+0x14>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80047ee:	20e9      	movs	r0, #233	@ 0xe9
 80047f0:	f002 fac6 	bl	8006d80 <SEGGER_SYSVIEW_RecordEndCall>
}
 80047f4:	bf00      	nop
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200002c4 	.word	0x200002c4

080047fc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004804:	f000 f852 	bl	80048ac <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <prvIdleTask+0x28>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d9f9      	bls.n	8004804 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004810:	4b05      	ldr	r3, [pc, #20]	@ (8004828 <prvIdleTask+0x2c>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004820:	e7f0      	b.n	8004804 <prvIdleTask+0x8>
 8004822:	bf00      	nop
 8004824:	200001dc 	.word	0x200001dc
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004832:	2300      	movs	r3, #0
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	e00c      	b.n	8004852 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <prvInitialiseTaskLists+0x60>)
 8004844:	4413      	add	r3, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fb08 	bl	8002e5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3301      	adds	r3, #1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d9ef      	bls.n	8004838 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004858:	480d      	ldr	r0, [pc, #52]	@ (8004890 <prvInitialiseTaskLists+0x64>)
 800485a:	f7fe faff 	bl	8002e5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800485e:	480d      	ldr	r0, [pc, #52]	@ (8004894 <prvInitialiseTaskLists+0x68>)
 8004860:	f7fe fafc 	bl	8002e5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004864:	480c      	ldr	r0, [pc, #48]	@ (8004898 <prvInitialiseTaskLists+0x6c>)
 8004866:	f7fe faf9 	bl	8002e5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800486a:	480c      	ldr	r0, [pc, #48]	@ (800489c <prvInitialiseTaskLists+0x70>)
 800486c:	f7fe faf6 	bl	8002e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004870:	480b      	ldr	r0, [pc, #44]	@ (80048a0 <prvInitialiseTaskLists+0x74>)
 8004872:	f7fe faf3 	bl	8002e5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004876:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <prvInitialiseTaskLists+0x78>)
 8004878:	4a05      	ldr	r2, [pc, #20]	@ (8004890 <prvInitialiseTaskLists+0x64>)
 800487a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvInitialiseTaskLists+0x7c>)
 800487e:	4a05      	ldr	r2, [pc, #20]	@ (8004894 <prvInitialiseTaskLists+0x68>)
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200001dc 	.word	0x200001dc
 8004890:	20000240 	.word	0x20000240
 8004894:	20000254 	.word	0x20000254
 8004898:	20000270 	.word	0x20000270
 800489c:	20000284 	.word	0x20000284
 80048a0:	2000029c 	.word	0x2000029c
 80048a4:	20000268 	.word	0x20000268
 80048a8:	2000026c 	.word	0x2000026c

080048ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048b2:	e019      	b.n	80048e8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80048b4:	f000 fe0e 	bl	80054d4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048b8:	4b10      	ldr	r3, [pc, #64]	@ (80048fc <prvCheckTasksWaitingTermination+0x50>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fb5b 	bl	8002f80 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80048ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <prvCheckTasksWaitingTermination+0x54>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004900 <prvCheckTasksWaitingTermination+0x54>)
 80048d2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3b01      	subs	r3, #1
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048dc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80048de:	f000 fe2b 	bl	8005538 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f810 	bl	8004908 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <prvCheckTasksWaitingTermination+0x58>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e1      	bne.n	80048b4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	3708      	adds	r7, #8
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000284 	.word	0x20000284
 8004900:	200002b0 	.word	0x200002b0
 8004904:	20000298 	.word	0x20000298

08004908 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004914:	4618      	mov	r0, r3
 8004916:	f001 f83d 	bl	8005994 <vPortFree>
            vPortFree( pxTCB );
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f83a 	bl	8005994 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <prvResetNextTaskUnblockTime+0x30>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004936:	4b09      	ldr	r3, [pc, #36]	@ (800495c <prvResetNextTaskUnblockTime+0x34>)
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800493e:	e005      	b.n	800494c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <prvResetNextTaskUnblockTime+0x30>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a04      	ldr	r2, [pc, #16]	@ (800495c <prvResetNextTaskUnblockTime+0x34>)
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	bf00      	nop
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000268 	.word	0x20000268
 800495c:	200002d0 	.word	0x200002d0

08004960 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004966:	4b0d      	ldr	r3, [pc, #52]	@ (800499c <xTaskGetSchedulerState+0x3c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800496e:	2301      	movs	r3, #1
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e008      	b.n	8004986 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004974:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <xTaskGetSchedulerState+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800497c:	2302      	movs	r3, #2
 800497e:	607b      	str	r3, [r7, #4]
 8004980:	e001      	b.n	8004986 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004982:	2300      	movs	r3, #0
 8004984:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4619      	mov	r1, r3
 800498a:	20f5      	movs	r0, #245	@ 0xf5
 800498c:	f002 fa34 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004990:	687b      	ldr	r3, [r7, #4]
    }
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200002bc 	.word	0x200002bc
 80049a0:	200002d8 	.word	0x200002d8

080049a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8094 	beq.w	8004ae4 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80049bc:	4b4e      	ldr	r3, [pc, #312]	@ (8004af8 <xTaskPriorityDisinherit+0x154>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d00b      	beq.n	80049de <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	613b      	str	r3, [r7, #16]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	1e5a      	subs	r2, r3, #1
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d067      	beq.n	8004ae4 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d163      	bne.n	8004ae4 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe faad 	bl	8002f80 <uxListRemove>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	4b30      	ldr	r3, [pc, #192]	@ (8004afc <xTaskPriorityDisinherit+0x158>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004afc <xTaskPriorityDisinherit+0x158>)
 8004a40:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4e:	f1c3 0205 	rsb	r2, r3, #5
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f002 fac5 	bl	8006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	2201      	movs	r2, #1
 8004a64:	409a      	lsls	r2, r3
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <xTaskPriorityDisinherit+0x158>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	4a23      	ldr	r2, [pc, #140]	@ (8004afc <xTaskPriorityDisinherit+0x158>)
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a74:	4922      	ldr	r1, [pc, #136]	@ (8004b00 <xTaskPriorityDisinherit+0x15c>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3304      	adds	r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	3204      	adds	r2, #4
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	1d1a      	adds	r2, r3, #4
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	609a      	str	r2, [r3, #8]
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <xTaskPriorityDisinherit+0x15c>)
 8004ab4:	441a      	add	r2, r3
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	615a      	str	r2, [r3, #20]
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abe:	4910      	ldr	r1, [pc, #64]	@ (8004b00 <xTaskPriorityDisinherit+0x15c>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ad0:	1c59      	adds	r1, r3, #1
 8004ad2:	480b      	ldr	r0, [pc, #44]	@ (8004b00 <xTaskPriorityDisinherit+0x15c>)
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4403      	add	r3, r0
 8004ade:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	20f7      	movs	r0, #247	@ 0xf7
 8004aea:	f002 f985 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004aee:	69fb      	ldr	r3, [r7, #28]
    }
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	200001d8 	.word	0x200001d8
 8004afc:	200002b8 	.word	0x200002b8
 8004b00:	200001dc 	.word	0x200001dc

08004b04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c04 <prvAddCurrentTaskToDelayedList+0x100>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004b14:	4b3c      	ldr	r3, [pc, #240]	@ (8004c08 <prvAddCurrentTaskToDelayedList+0x104>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c0c <prvAddCurrentTaskToDelayedList+0x108>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fa2a 	bl	8002f80 <uxListRemove>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	2201      	movs	r2, #1
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <prvAddCurrentTaskToDelayedList+0x110>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4013      	ands	r3, r2
 8004b46:	4a33      	ldr	r2, [pc, #204]	@ (8004c14 <prvAddCurrentTaskToDelayedList+0x110>)
 8004b48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d124      	bne.n	8004b9c <prvAddCurrentTaskToDelayedList+0x98>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d021      	beq.n	8004b9c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b58:	4b2f      	ldr	r3, [pc, #188]	@ (8004c18 <prvAddCurrentTaskToDelayedList+0x114>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	4b2a      	ldr	r3, [pc, #168]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	4b27      	ldr	r3, [pc, #156]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	3204      	adds	r2, #4
 8004b7a:	605a      	str	r2, [r3, #4]
 8004b7c:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	609a      	str	r2, [r3, #8]
 8004b86:	4b22      	ldr	r3, [pc, #136]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a23      	ldr	r2, [pc, #140]	@ (8004c18 <prvAddCurrentTaskToDelayedList+0x114>)
 8004b8c:	615a      	str	r2, [r3, #20]
 8004b8e:	4b22      	ldr	r3, [pc, #136]	@ (8004c18 <prvAddCurrentTaskToDelayedList+0x114>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a20      	ldr	r2, [pc, #128]	@ (8004c18 <prvAddCurrentTaskToDelayedList+0x114>)
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004b9a:	e02e      	b.n	8004bfa <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d20d      	bcs.n	8004bd0 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004bb4:	4b16      	ldr	r3, [pc, #88]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2104      	movs	r1, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f002 fa56 	bl	800706c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6978      	ldr	r0, [r7, #20]
 8004bca:	f7fe f99e 	bl	8002f0a <vListInsert>
}
 8004bce:	e014      	b.n	8004bfa <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f002 fa48 	bl	800706c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	69b8      	ldr	r0, [r7, #24]
 8004be6:	f7fe f990 	bl	8002f0a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x118>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d202      	bcs.n	8004bfa <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004bf4:	4a09      	ldr	r2, [pc, #36]	@ (8004c1c <prvAddCurrentTaskToDelayedList+0x118>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6013      	str	r3, [r2, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200002b4 	.word	0x200002b4
 8004c08:	20000268 	.word	0x20000268
 8004c0c:	2000026c 	.word	0x2000026c
 8004c10:	200001d8 	.word	0x200001d8
 8004c14:	200002b8 	.word	0x200002b8
 8004c18:	2000029c 	.word	0x2000029c
 8004c1c:	200002d0 	.word	0x200002d0

08004c20 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004c2a:	f000 fa77 	bl	800511c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <xTimerCreateTimerTask+0x64>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004c36:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <xTimerCreateTimerTask+0x68>)
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c44:	4911      	ldr	r1, [pc, #68]	@ (8004c8c <xTimerCreateTimerTask+0x6c>)
 8004c46:	4812      	ldr	r0, [pc, #72]	@ (8004c90 <xTimerCreateTimerTask+0x70>)
 8004c48:	f7fe fe3f 	bl	80038ca <xTaskCreate>
 8004c4c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	603b      	str	r3, [r7, #0]
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004c74:	f002 f8c0 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004c78:	687b      	ldr	r3, [r7, #4]
    }
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	2000030c 	.word	0x2000030c
 8004c88:	20000310 	.word	0x20000310
 8004c8c:	08008198 	.word	0x08008198
 8004c90:	08004d39 	.word	0x08004d39

08004c94 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004ca0:	e008      	b.n	8004cb4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	18d1      	adds	r1, r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 f8df 	bl	8004e84 <prvInsertTimerInActiveList>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ea      	bne.n	8004ca2 <prvReloadTimer+0xe>
        }
    }
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce2:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <prvProcessExpiredTimer+0x5c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe f945 	bl	8002f80 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff ffc3 	bl	8004c94 <prvReloadTimer>
 8004d0e:	e008      	b.n	8004d22 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	4798      	blx	r3
    }
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000304 	.word	0x20000304

08004d38 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d40:	f107 0308 	add.w	r3, r7, #8
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f859 	bl	8004dfc <prvGetNextExpireTime>
 8004d4a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f805 	bl	8004d60 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004d56:	f000 f8d7 	bl	8004f08 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d5a:	bf00      	nop
 8004d5c:	e7f0      	b.n	8004d40 <prvTimerTask+0x8>
	...

08004d60 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004d6a:	f7ff f881 	bl	8003e70 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f866 	bl	8004e44 <prvSampleTimeNow>
 8004d78:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d130      	bne.n	8004de2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <prvProcessTimerOrBlockTask+0x3c>
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d806      	bhi.n	8004d9c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004d8e:	f7ff f87d 	bl	8003e8c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff9f 	bl	8004cd8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004d9a:	e024      	b.n	8004de6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004da2:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <prvProcessTimerOrBlockTask+0x90>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <prvProcessTimerOrBlockTask+0x50>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <prvProcessTimerOrBlockTask+0x52>
 8004db0:	2300      	movs	r3, #0
 8004db2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004db4:	4b0f      	ldr	r3, [pc, #60]	@ (8004df4 <prvProcessTimerOrBlockTask+0x94>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	f7fe fd0f 	bl	80037e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004dc6:	f7ff f861 	bl	8003e8c <xTaskResumeAll>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10a      	bne.n	8004de6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <prvProcessTimerOrBlockTask+0x98>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
    }
 8004de0:	e001      	b.n	8004de6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004de2:	f7ff f853 	bl	8003e8c <xTaskResumeAll>
    }
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000308 	.word	0x20000308
 8004df4:	2000030c 	.word	0x2000030c
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e04:	4b0e      	ldr	r3, [pc, #56]	@ (8004e40 <prvGetNextExpireTime+0x44>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <prvGetNextExpireTime+0x16>
 8004e0e:	2201      	movs	r2, #1
 8004e10:	e000      	b.n	8004e14 <prvGetNextExpireTime+0x18>
 8004e12:	2200      	movs	r2, #0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e20:	4b07      	ldr	r3, [pc, #28]	@ (8004e40 <prvGetNextExpireTime+0x44>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e001      	b.n	8004e30 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004e30:	68fb      	ldr	r3, [r7, #12]
    }
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20000304 	.word	0x20000304

08004e44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004e4c:	f7ff f930 	bl	80040b0 <xTaskGetTickCount>
 8004e50:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <prvSampleTimeNow+0x3c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d205      	bcs.n	8004e68 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004e5c:	f000 f938 	bl	80050d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e002      	b.n	8004e6e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004e6e:	4a04      	ldr	r2, [pc, #16]	@ (8004e80 <prvSampleTimeNow+0x3c>)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004e74:	68fb      	ldr	r3, [r7, #12]
    }
 8004e76:	4618      	mov	r0, r3
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000314 	.word	0x20000314

08004e84 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d812      	bhi.n	8004ed0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e01b      	b.n	8004ef6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <prvInsertTimerInActiveList+0x7c>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe f81e 	bl	8002f0a <vListInsert>
 8004ece:	e012      	b.n	8004ef6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d206      	bcs.n	8004ee6 <prvInsertTimerInActiveList+0x62>
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e007      	b.n	8004ef6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <prvInsertTimerInActiveList+0x80>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7fe f80a 	bl	8002f0a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ef6:	697b      	ldr	r3, [r7, #20]
    }
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20000308 	.word	0x20000308
 8004f04:	20000304 	.word	0x20000304

08004f08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	@ 0x28
 8004f0c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004f1a:	e0c7      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da19      	bge.n	8004f56 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	3304      	adds	r3, #4
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61bb      	str	r3, [r7, #24]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	6850      	ldr	r0, [r2, #4]
 8004f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	4611      	mov	r1, r2
 8004f54:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f2c0 80a7 	blt.w	80050ac <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe f806 	bl	8002f80 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f74:	463b      	mov	r3, r7
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff ff64 	bl	8004e44 <prvSampleTimeNow>
 8004f7c:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	f200 808f 	bhi.w	80050a6 <prvProcessReceivedCommands+0x19e>
 8004f88:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <prvProcessReceivedCommands+0x88>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	0800501d 	.word	0x0800501d
 8004f9c:	08005031 	.word	0x08005031
 8004fa0:	0800507d 	.word	0x0800507d
 8004fa4:	08004fb5 	.word	0x08004fb5
 8004fa8:	08004fb5 	.word	0x08004fb5
 8004fac:	0800501d 	.word	0x0800501d
 8004fb0:	08005031 	.word	0x08005031
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	18d1      	adds	r1, r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	6a38      	ldr	r0, [r7, #32]
 8004fd4:	f7ff ff56 	bl	8004e84 <prvInsertTimerInActiveList>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d065      	beq.n	80050aa <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6a38      	ldr	r0, [r7, #32]
 8004ffa:	f7ff fe4b 	bl	8004c94 <prvReloadTimer>
 8004ffe:	e008      	b.n	8005012 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	6a38      	ldr	r0, [r7, #32]
 8005018:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800501a:	e046      	b.n	80050aa <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800502e:	e03d      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	617b      	str	r3, [r7, #20]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	699a      	ldr	r2, [r3, #24]
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	18d1      	adds	r1, r2, r3
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	6a38      	ldr	r0, [r7, #32]
 8005076:	f7ff ff05 	bl	8004e84 <prvInsertTimerInActiveList>
                        break;
 800507a:	e017      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 800508a:	6a38      	ldr	r0, [r7, #32]
 800508c:	f000 fc82 	bl	8005994 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005090:	e00c      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80050a4:	e002      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 80050a6:	bf00      	nop
 80050a8:	e000      	b.n	80050ac <prvProcessReceivedCommands+0x1a4>
                        break;
 80050aa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80050ac:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <prvProcessReceivedCommands+0x1c4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1d39      	adds	r1, r7, #4
 80050b2:	2200      	movs	r2, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fe f95f 	bl	8003378 <xQueueReceive>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af2d 	bne.w	8004f1c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	3728      	adds	r7, #40	@ 0x28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	2000030c 	.word	0x2000030c

080050d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050d6:	e009      	b.n	80050ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80050e2:	f04f 31ff 	mov.w	r1, #4294967295
 80050e6:	6838      	ldr	r0, [r7, #0]
 80050e8:	f7ff fdf6 	bl	8004cd8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <prvSwitchTimerLists+0x48>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a04      	ldr	r2, [pc, #16]	@ (8005114 <prvSwitchTimerLists+0x44>)
 8005102:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005104:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <prvSwitchTimerLists+0x48>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6013      	str	r3, [r2, #0]
    }
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000304 	.word	0x20000304
 8005118:	20000308 	.word	0x20000308

0800511c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005120:	f000 f9d8 	bl	80054d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11d      	bne.n	8005168 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800512c:	4811      	ldr	r0, [pc, #68]	@ (8005174 <prvCheckForValidListAndQueue+0x58>)
 800512e:	f7fd fe95 	bl	8002e5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005132:	4811      	ldr	r0, [pc, #68]	@ (8005178 <prvCheckForValidListAndQueue+0x5c>)
 8005134:	f7fd fe92 	bl	8002e5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005138:	4b10      	ldr	r3, [pc, #64]	@ (800517c <prvCheckForValidListAndQueue+0x60>)
 800513a:	4a0e      	ldr	r2, [pc, #56]	@ (8005174 <prvCheckForValidListAndQueue+0x58>)
 800513c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <prvCheckForValidListAndQueue+0x64>)
 8005140:	4a0d      	ldr	r2, [pc, #52]	@ (8005178 <prvCheckForValidListAndQueue+0x5c>)
 8005142:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8005144:	2200      	movs	r2, #0
 8005146:	2110      	movs	r1, #16
 8005148:	200a      	movs	r0, #10
 800514a:	f7fd ffdf 	bl	800310c <xQueueGenericCreate>
 800514e:	4603      	mov	r3, r0
 8005150:	4a07      	ldr	r2, [pc, #28]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005152:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800515c:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4908      	ldr	r1, [pc, #32]	@ (8005184 <prvCheckForValidListAndQueue+0x68>)
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe faee 	bl	8003744 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005168:	f000 f9e6 	bl	8005538 <vPortExitCritical>
    }
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	2000030c 	.word	0x2000030c
 8005174:	200002dc 	.word	0x200002dc
 8005178:	200002f0 	.word	0x200002f0
 800517c:	20000304 	.word	0x20000304
 8005180:	20000308 	.word	0x20000308
 8005184:	080081a0 	.word	0x080081a0

08005188 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]

            traceENTER_xTimerPendFunctionCallFromISR( xFunctionToPend, pvParameter1, ulParameter2, pxHigherPriorityTaskWoken );

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8005196:	f06f 0301 	mvn.w	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051a8:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <xTimerPendFunctionCallFromISR+0x48>)
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	f107 0114 	add.w	r1, r7, #20
 80051b0:	2300      	movs	r3, #0
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	f7fe f825 	bl	8003202 <xQueueGenericSendFromISR>
 80051b8:	6278      	str	r0, [r7, #36]	@ 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
            traceRETURN_xTimerPendFunctionCallFromISR( xReturn );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	4619      	mov	r1, r3
 80051be:	f240 1015 	movw	r0, #277	@ 0x115
 80051c2:	f001 fe19 	bl	8006df8 <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80051c8:	4618      	mov	r0, r3
 80051ca:	3728      	adds	r7, #40	@ 0x28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2000030c 	.word	0x2000030c

080051d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3b04      	subs	r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005204:	4a0c      	ldr	r2, [pc, #48]	@ (8005238 <pxPortInitialiseStack+0x64>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b14      	subs	r3, #20
 800520e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b04      	subs	r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f06f 0202 	mvn.w	r2, #2
 8005222:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b20      	subs	r3, #32
 8005228:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	0800523d 	.word	0x0800523d

0800523c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <prvTaskExitError+0x58>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d00b      	beq.n	8005268 <prvTaskExitError+0x2c>
    __asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <prvTaskExitError+0x28>
    __asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	60bb      	str	r3, [r7, #8]
}
 800527a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800527c:	bf00      	nop
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0fc      	beq.n	800527e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	20000010 	.word	0x20000010
	...

080052a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80052a0:	4b07      	ldr	r3, [pc, #28]	@ (80052c0 <pxCurrentTCBConst2>)
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f380 8809 	msr	PSP, r0
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8811 	msr	BASEPRI, r0
 80052ba:	4770      	bx	lr
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst2>:
 80052c0:	200001d8 	.word	0x200001d8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80052c8:	4808      	ldr	r0, [pc, #32]	@ (80052ec <prvPortStartFirstTask+0x24>)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f380 8808 	msr	MSP, r0
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8814 	msr	CONTROL, r0
 80052da:	b662      	cpsie	i
 80052dc:	b661      	cpsie	f
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	df00      	svc	0
 80052e8:	bf00      	nop
 80052ea:	0000      	.short	0x0000
 80052ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop

080052f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08c      	sub	sp, #48	@ 0x30
 80052f8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052fa:	4b69      	ldr	r3, [pc, #420]	@ (80054a0 <xPortStartScheduler+0x1ac>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a69      	ldr	r2, [pc, #420]	@ (80054a4 <xPortStartScheduler+0x1b0>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10b      	bne.n	800531c <xPortStartScheduler+0x28>
    __asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800531c:	4b60      	ldr	r3, [pc, #384]	@ (80054a0 <xPortStartScheduler+0x1ac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a61      	ldr	r2, [pc, #388]	@ (80054a8 <xPortStartScheduler+0x1b4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10b      	bne.n	800533e <xPortStartScheduler+0x4a>
    __asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	623b      	str	r3, [r7, #32]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800533e:	4b5b      	ldr	r3, [pc, #364]	@ (80054ac <xPortStartScheduler+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005346:	332c      	adds	r3, #44	@ 0x2c
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a59      	ldr	r2, [pc, #356]	@ (80054b0 <xPortStartScheduler+0x1bc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <xPortStartScheduler+0x74>
    __asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	61fb      	str	r3, [r7, #28]
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	3338      	adds	r3, #56	@ 0x38
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a51      	ldr	r2, [pc, #324]	@ (80054b4 <xPortStartScheduler+0x1c0>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <xPortStartScheduler+0x98>
    __asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61bb      	str	r3, [r7, #24]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005390:	4b49      	ldr	r3, [pc, #292]	@ (80054b8 <xPortStartScheduler+0x1c4>)
 8005392:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	b2db      	uxtb	r3, r3
 800539a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	22ff      	movs	r2, #255	@ 0xff
 80053a0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b41      	ldr	r3, [pc, #260]	@ (80054bc <xPortStartScheduler+0x1c8>)
 80053b6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80053b8:	4b40      	ldr	r3, [pc, #256]	@ (80054bc <xPortStartScheduler+0x1c8>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10b      	bne.n	80053d8 <xPortStartScheduler+0xe4>
    __asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	617b      	str	r3, [r7, #20]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <xPortStartScheduler+0x11a>
    __asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	613b      	str	r3, [r7, #16]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	3301      	adds	r3, #1
 8005402:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	b2db      	uxtb	r3, r3
 800540c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005416:	2b80      	cmp	r3, #128	@ 0x80
 8005418:	d0f1      	beq.n	80053fe <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d103      	bne.n	8005428 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005420:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e004      	b.n	8005432 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f1c3 0307 	rsb	r3, r3, #7
 800542e:	4a24      	ldr	r2, [pc, #144]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 8005430:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005432:	4b23      	ldr	r3, [pc, #140]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	4a21      	ldr	r2, [pc, #132]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 800543a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005444:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <xPortStartScheduler+0x1cc>)
 8005446:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005450:	4b1c      	ldr	r3, [pc, #112]	@ (80054c4 <xPortStartScheduler+0x1d0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <xPortStartScheduler+0x1d0>)
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800545c:	4b19      	ldr	r3, [pc, #100]	@ (80054c4 <xPortStartScheduler+0x1d0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <xPortStartScheduler+0x1d0>)
 8005462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005466:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005468:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <xPortStartScheduler+0x1d4>)
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800546e:	f000 f8ed 	bl	800564c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005472:	4b16      	ldr	r3, [pc, #88]	@ (80054cc <xPortStartScheduler+0x1d8>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005478:	f000 f90c 	bl	8005694 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800547c:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <xPortStartScheduler+0x1dc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a13      	ldr	r2, [pc, #76]	@ (80054d0 <xPortStartScheduler+0x1dc>)
 8005482:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005486:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005488:	f7ff ff1e 	bl	80052c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800548c:	f7fe ff68 	bl	8004360 <vTaskSwitchContext>
    prvTaskExitError();
 8005490:	f7ff fed4 	bl	800523c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3730      	adds	r7, #48	@ 0x30
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	e000ed00 	.word	0xe000ed00
 80054a4:	410fc271 	.word	0x410fc271
 80054a8:	410fc270 	.word	0x410fc270
 80054ac:	e000ed08 	.word	0xe000ed08
 80054b0:	080052a1 	.word	0x080052a1
 80054b4:	08005591 	.word	0x08005591
 80054b8:	e000e400 	.word	0xe000e400
 80054bc:	20000318 	.word	0x20000318
 80054c0:	2000031c 	.word	0x2000031c
 80054c4:	e000ed20 	.word	0xe000ed20
 80054c8:	e000ed1c 	.word	0xe000ed1c
 80054cc:	20000010 	.word	0x20000010
 80054d0:	e000ef34 	.word	0xe000ef34

080054d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
    __asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80054ee:	4b10      	ldr	r3, [pc, #64]	@ (8005530 <vPortEnterCritical+0x5c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005530 <vPortEnterCritical+0x5c>)
 80054f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80054f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <vPortEnterCritical+0x5c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d110      	bne.n	8005522 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005500:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <vPortEnterCritical+0x60>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <vPortEnterCritical+0x4e>
    __asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	603b      	str	r3, [r7, #0]
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <vPortEnterCritical+0x4a>
    }
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	20000010 	.word	0x20000010
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <vPortExitCritical+0x50>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10b      	bne.n	800555e <vPortExitCritical+0x26>
    __asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	607b      	str	r3, [r7, #4]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800555e:	4b0a      	ldr	r3, [pc, #40]	@ (8005588 <vPortExitCritical+0x50>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	4a08      	ldr	r2, [pc, #32]	@ (8005588 <vPortExitCritical+0x50>)
 8005566:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005568:	4b07      	ldr	r3, [pc, #28]	@ (8005588 <vPortExitCritical+0x50>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <vPortExitCritical+0x44>
 8005570:	2300      	movs	r3, #0
 8005572:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f383 8811 	msr	BASEPRI, r3
}
 800557a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000010 	.word	0x20000010
 800558c:	00000000 	.word	0x00000000

08005590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005590:	f3ef 8009 	mrs	r0, PSP
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <pxCurrentTCBConst>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	f01e 0f10 	tst.w	lr, #16
 80055a0:	bf08      	it	eq
 80055a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	6010      	str	r0, [r2, #0]
 80055ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055b4:	f380 8811 	msr	BASEPRI, r0
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f7fe fece 	bl	8004360 <vTaskSwitchContext>
 80055c4:	f04f 0000 	mov.w	r0, #0
 80055c8:	f380 8811 	msr	BASEPRI, r0
 80055cc:	bc09      	pop	{r0, r3}
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	6808      	ldr	r0, [r1, #0]
 80055d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d6:	f01e 0f10 	tst.w	lr, #16
 80055da:	bf08      	it	eq
 80055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80055e0:	f380 8809 	msr	PSP, r0
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w

080055f0 <pxCurrentTCBConst>:
 80055f0:	200001d8 	.word	0x200001d8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80055f4:	bf00      	nop
 80055f6:	bf00      	nop

080055f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
    __asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005612:	f001 fb3b 	bl	8006c8c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005616:	f7fe fd81 	bl	800411c <xTaskIncrementTick>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005620:	f001 fb92 	bl	8006d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005624:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <SysTick_Handler+0x50>)
 8005626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e001      	b.n	8005632 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800562e:	f001 fb6f 	bl	8006d10 <SEGGER_SYSVIEW_RecordExitISR>
 8005632:	2300      	movs	r3, #0
 8005634:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f383 8811 	msr	BASEPRI, r3
}
 800563c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005650:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005656:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <vPortSetupTimerInterrupt+0x38>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <vPortSetupTimerInterrupt+0x3c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0a      	ldr	r2, [pc, #40]	@ (800568c <vPortSetupTimerInterrupt+0x40>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	4a09      	ldr	r2, [pc, #36]	@ (8005690 <vPortSetupTimerInterrupt+0x44>)
 800566a:	3b01      	subs	r3, #1
 800566c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800566e:	4b04      	ldr	r3, [pc, #16]	@ (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	e000e010 	.word	0xe000e010
 8005684:	e000e018 	.word	0xe000e018
 8005688:	20000000 	.word	0x20000000
 800568c:	10624dd3 	.word	0x10624dd3
 8005690:	e000e014 	.word	0xe000e014

08005694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80056a4 <vPortEnableVFP+0x10>
 8005698:	6801      	ldr	r1, [r0, #0]
 800569a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800569e:	6001      	str	r1, [r0, #0]
 80056a0:	4770      	bx	lr
 80056a2:	0000      	.short	0x0000
 80056a4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop

080056ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056b2:	f3ef 8305 	mrs	r3, IPSR
 80056b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d915      	bls.n	80056ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056be:	4a18      	ldr	r2, [pc, #96]	@ (8005720 <vPortValidateInterruptPriority+0x74>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056c8:	4b16      	ldr	r3, [pc, #88]	@ (8005724 <vPortValidateInterruptPriority+0x78>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	7afa      	ldrb	r2, [r7, #11]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d20b      	bcs.n	80056ea <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	607b      	str	r3, [r7, #4]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005728 <vPortValidateInterruptPriority+0x7c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056f2:	4b0e      	ldr	r3, [pc, #56]	@ (800572c <vPortValidateInterruptPriority+0x80>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d90b      	bls.n	8005712 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	603b      	str	r3, [r7, #0]
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	e7fd      	b.n	800570e <vPortValidateInterruptPriority+0x62>
    }
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e3f0 	.word	0xe000e3f0
 8005724:	20000318 	.word	0x20000318
 8005728:	e000ed0c 	.word	0xe000ed0c
 800572c:	2000031c 	.word	0x2000031c

08005730 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	@ 0x38
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d022      	beq.n	8005788 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005742:	2308      	movs	r3, #8
 8005744:	43db      	mvns	r3, r3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	429a      	cmp	r2, r3
 800574a:	d81b      	bhi.n	8005784 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800574c:	2208      	movs	r2, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	2b00      	cmp	r3, #0
 800575c:	d014      	beq.n	8005788 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	f1c3 0308 	rsb	r3, r3, #8
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	43db      	mvns	r3, r3
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	429a      	cmp	r2, r3
 8005772:	d804      	bhi.n	800577e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005778:	4413      	add	r3, r2
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	e004      	b.n	8005788 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	e001      	b.n	8005788 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005788:	f7fe fb72 	bl	8003e70 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800578c:	4b7a      	ldr	r3, [pc, #488]	@ (8005978 <pvPortMalloc+0x248>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005794:	f000 f978 	bl	8005a88 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	f2c0 80d3 	blt.w	8005946 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 80cf 	beq.w	8005946 <pvPortMalloc+0x216>
 80057a8:	4b74      	ldr	r3, [pc, #464]	@ (800597c <pvPortMalloc+0x24c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	f200 80c9 	bhi.w	8005946 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057b4:	4b72      	ldr	r3, [pc, #456]	@ (8005980 <pvPortMalloc+0x250>)
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80057b8:	4b71      	ldr	r3, [pc, #452]	@ (8005980 <pvPortMalloc+0x250>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	4a70      	ldr	r2, [pc, #448]	@ (8005984 <pvPortMalloc+0x254>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d305      	bcc.n	80057d2 <pvPortMalloc+0xa2>
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	4a6f      	ldr	r2, [pc, #444]	@ (8005988 <pvPortMalloc+0x258>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d801      	bhi.n	80057d2 <pvPortMalloc+0xa2>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <pvPortMalloc+0xa4>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d129      	bne.n	800582c <pvPortMalloc+0xfc>
    __asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80057f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80057fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fc:	4a61      	ldr	r2, [pc, #388]	@ (8005984 <pvPortMalloc+0x254>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d305      	bcc.n	800580e <pvPortMalloc+0xde>
 8005802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005804:	4a60      	ldr	r2, [pc, #384]	@ (8005988 <pvPortMalloc+0x258>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d801      	bhi.n	800580e <pvPortMalloc+0xde>
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <pvPortMalloc+0xe0>
 800580e:	2300      	movs	r3, #0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <pvPortMalloc+0xfc>
    __asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	61fb      	str	r3, [r7, #28]
}
 8005826:	bf00      	nop
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d903      	bls.n	800583e <pvPortMalloc+0x10e>
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1d8      	bne.n	80057f0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800583e:	4b4e      	ldr	r3, [pc, #312]	@ (8005978 <pvPortMalloc+0x248>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005844:	429a      	cmp	r2, r3
 8005846:	d07e      	beq.n	8005946 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2208      	movs	r2, #8
 800584e:	4413      	add	r3, r2
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005854:	4a4b      	ldr	r2, [pc, #300]	@ (8005984 <pvPortMalloc+0x254>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d305      	bcc.n	8005866 <pvPortMalloc+0x136>
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	4a4a      	ldr	r2, [pc, #296]	@ (8005988 <pvPortMalloc+0x258>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d801      	bhi.n	8005866 <pvPortMalloc+0x136>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <pvPortMalloc+0x138>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <pvPortMalloc+0x154>
    __asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	61bb      	str	r3, [r7, #24]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800588c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d90b      	bls.n	80058ae <pvPortMalloc+0x17e>
    __asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	617b      	str	r3, [r7, #20]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	1ad2      	subs	r2, r2, r3
 80058b6:	2308      	movs	r3, #8
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d924      	bls.n	8005908 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4413      	add	r3, r2
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00b      	beq.n	80058e8 <pvPortMalloc+0x1b8>
    __asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	613b      	str	r3, [r7, #16]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005906:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <pvPortMalloc+0x24c>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <pvPortMalloc+0x24c>)
 8005914:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005916:	4b19      	ldr	r3, [pc, #100]	@ (800597c <pvPortMalloc+0x24c>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	4b1c      	ldr	r3, [pc, #112]	@ (800598c <pvPortMalloc+0x25c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d203      	bcs.n	800592a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005922:	4b16      	ldr	r3, [pc, #88]	@ (800597c <pvPortMalloc+0x24c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a19      	ldr	r2, [pc, #100]	@ (800598c <pvPortMalloc+0x25c>)
 8005928:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800592a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005934:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <pvPortMalloc+0x260>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <pvPortMalloc+0x260>)
 8005944:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005946:	f7fe faa1 	bl	8003e8c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800594a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <pvPortMalloc+0x23c>
    __asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	60fb      	str	r3, [r7, #12]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <pvPortMalloc+0x238>
    return pvReturn;
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800596e:	4618      	mov	r0, r3
 8005970:	3738      	adds	r7, #56	@ 0x38
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20012f28 	.word	0x20012f28
 800597c:	20012f2c 	.word	0x20012f2c
 8005980:	20012f20 	.word	0x20012f20
 8005984:	20000320 	.word	0x20000320
 8005988:	20012f1f 	.word	0x20012f1f
 800598c:	20012f30 	.word	0x20012f30
 8005990:	20012f34 	.word	0x20012f34

08005994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d064      	beq.n	8005a70 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80059a6:	2308      	movs	r3, #8
 80059a8:	425b      	negs	r3, r3
 80059aa:	69fa      	ldr	r2, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	4a30      	ldr	r2, [pc, #192]	@ (8005a78 <vPortFree+0xe4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d305      	bcc.n	80059c8 <vPortFree+0x34>
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	4a2f      	ldr	r2, [pc, #188]	@ (8005a7c <vPortFree+0xe8>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d801      	bhi.n	80059c8 <vPortFree+0x34>
 80059c4:	2301      	movs	r3, #1
 80059c6:	e000      	b.n	80059ca <vPortFree+0x36>
 80059c8:	2300      	movs	r3, #0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10b      	bne.n	80059e6 <vPortFree+0x52>
    __asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	617b      	str	r3, [r7, #20]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	db0b      	blt.n	8005a06 <vPortFree+0x72>
    __asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	613b      	str	r3, [r7, #16]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <vPortFree+0x92>
    __asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60fb      	str	r3, [r7, #12]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	0fdb      	lsrs	r3, r3, #31
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01c      	beq.n	8005a70 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d118      	bne.n	8005a70 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005a4a:	f7fe fa11 	bl	8003e70 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <vPortFree+0xec>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4413      	add	r3, r2
 8005a58:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <vPortFree+0xec>)
 8005a5a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a5c:	69b8      	ldr	r0, [r7, #24]
 8005a5e:	f000 f86d 	bl	8005b3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a62:	4b08      	ldr	r3, [pc, #32]	@ (8005a84 <vPortFree+0xf0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a06      	ldr	r2, [pc, #24]	@ (8005a84 <vPortFree+0xf0>)
 8005a6a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a6c:	f7fe fa0e 	bl	8003e8c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a70:	bf00      	nop
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	20000320 	.word	0x20000320
 8005a7c:	20012f1f 	.word	0x20012f1f
 8005a80:	20012f2c 	.word	0x20012f2c
 8005a84:	20012f38 	.word	0x20012f38

08005a88 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a8e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005a92:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005a94:	4b24      	ldr	r3, [pc, #144]	@ (8005b28 <prvHeapInit+0xa0>)
 8005a96:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00c      	beq.n	8005abc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3307      	adds	r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0307 	bic.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b28 <prvHeapInit+0xa0>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	@ (8005b2c <prvHeapInit+0xa4>)
 8005ac0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <prvHeapInit+0xa4>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4413      	add	r3, r2
 8005ace:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	1a9b      	subs	r3, r3, r2
 8005ad6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	@ (8005b30 <prvHeapInit+0xa8>)
 8005ae4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005ae6:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <prvHeapInit+0xa8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005aee:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <prvHeapInit+0xa8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005b04:	4b0a      	ldr	r3, [pc, #40]	@ (8005b30 <prvHeapInit+0xa8>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a08      	ldr	r2, [pc, #32]	@ (8005b34 <prvHeapInit+0xac>)
 8005b12:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4a07      	ldr	r2, [pc, #28]	@ (8005b38 <prvHeapInit+0xb0>)
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000320 	.word	0x20000320
 8005b2c:	20012f20 	.word	0x20012f20
 8005b30:	20012f28 	.word	0x20012f28
 8005b34:	20012f30 	.word	0x20012f30
 8005b38:	20012f2c 	.word	0x20012f2c

08005b3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005b44:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <prvInsertBlockIntoFreeList+0xe4>)
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e002      	b.n	8005b50 <prvInsertBlockIntoFreeList+0x14>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d8f7      	bhi.n	8005b4a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	4a30      	ldr	r2, [pc, #192]	@ (8005c20 <prvInsertBlockIntoFreeList+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4a2f      	ldr	r2, [pc, #188]	@ (8005c24 <prvInsertBlockIntoFreeList+0xe8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d305      	bcc.n	8005b76 <prvInsertBlockIntoFreeList+0x3a>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005c28 <prvInsertBlockIntoFreeList+0xec>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d801      	bhi.n	8005b76 <prvInsertBlockIntoFreeList+0x3a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <prvInsertBlockIntoFreeList+0x3c>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d108      	bne.n	8005bb8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	441a      	add	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	441a      	add	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d118      	bne.n	8005bfe <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b16      	ldr	r3, [pc, #88]	@ (8005c2c <prvInsertBlockIntoFreeList+0xf0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d00d      	beq.n	8005bf4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	441a      	add	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e008      	b.n	8005c06 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <prvInsertBlockIntoFreeList+0xf0>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e003      	b.n	8005c06 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d002      	beq.n	8005c14 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20012f20 	.word	0x20012f20
 8005c24:	20000320 	.word	0x20000320
 8005c28:	20012f1f 	.word	0x20012f1f
 8005c2c:	20012f28 	.word	0x20012f28

08005c30 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005c34:	4803      	ldr	r0, [pc, #12]	@ (8005c44 <_cbSendSystemDesc+0x14>)
 8005c36:	f000 ffd3 	bl	8006be0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005c3a:	4803      	ldr	r0, [pc, #12]	@ (8005c48 <_cbSendSystemDesc+0x18>)
 8005c3c:	f000 ffd0 	bl	8006be0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005c40:	bf00      	nop
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	080081a8 	.word	0x080081a8
 8005c48:	080081d4 	.word	0x080081d4

08005c4c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <SEGGER_SYSVIEW_Conf+0x20>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	4b05      	ldr	r3, [pc, #20]	@ (8005c6c <SEGGER_SYSVIEW_Conf+0x20>)
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <SEGGER_SYSVIEW_Conf+0x24>)
 8005c5a:	4a06      	ldr	r2, [pc, #24]	@ (8005c74 <SEGGER_SYSVIEW_Conf+0x28>)
 8005c5c:	f000 fc46 	bl	80064ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005c60:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005c64:	f000 fc86 	bl	8006574 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005c68:	bf00      	nop
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	08005c31 	.word	0x08005c31
 8005c74:	08008290 	.word	0x08008290

08005c78 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005c7e:	4b26      	ldr	r3, [pc, #152]	@ (8005d18 <_DoInit+0xa0>)
 8005c80:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005c82:	22a8      	movs	r2, #168	@ 0xa8
 8005c84:	2100      	movs	r1, #0
 8005c86:	6838      	ldr	r0, [r7, #0]
 8005c88:	f001 fdb8 	bl	80077fc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2203      	movs	r2, #3
 8005c90:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2203      	movs	r2, #3
 8005c96:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	4a20      	ldr	r2, [pc, #128]	@ (8005d1c <_DoInit+0xa4>)
 8005c9c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d20 <_DoInit+0xa8>)
 8005ca2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005caa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <_DoInit+0xa4>)
 8005cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	4a17      	ldr	r2, [pc, #92]	@ (8005d24 <_DoInit+0xac>)
 8005cc8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005ce2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	607b      	str	r3, [r7, #4]
 8005cea:	e00c      	b.n	8005d06 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1c3 030f 	rsb	r3, r3, #15
 8005cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8005d28 <_DoInit+0xb0>)
 8005cf4:	5cd1      	ldrb	r1, [r2, r3]
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3301      	adds	r3, #1
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d9ef      	bls.n	8005cec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005d0c:	f3bf 8f5f 	dmb	sy
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20012f3c 	.word	0x20012f3c
 8005d1c:	080081e4 	.word	0x080081e4
 8005d20:	20012fe4 	.word	0x20012fe4
 8005d24:	200133e4 	.word	0x200133e4
 8005d28:	08008270 	.word	0x08008270

08005d2c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	@ 0x30
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005d38:	4b3e      	ldr	r3, [pc, #248]	@ (8005e34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d3a:	623b      	str	r3, [r7, #32]
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b53      	cmp	r3, #83	@ 0x53
 8005d44:	d001      	beq.n	8005d4a <SEGGER_RTT_ReadNoLock+0x1e>
 8005d46:	f7ff ff97 	bl	8005c78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	3360      	adds	r3, #96	@ 0x60
 8005d56:	4a37      	ldr	r2, [pc, #220]	@ (8005e34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d58:	4413      	add	r3, r2
 8005d5a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d92b      	bls.n	8005dd0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	bf28      	it	cs
 8005d8a:	4613      	movcs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	4413      	add	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	6939      	ldr	r1, [r7, #16]
 8005d9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d9e:	f001 fd61 	bl	8007864 <memcpy>
    NumBytesRead += NumBytesRem;
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	4413      	add	r3, r2
 8005da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d101      	bne.n	8005dd0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	bf28      	it	cs
 8005de0:	4613      	movcs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d019      	beq.n	8005e1e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	4413      	add	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	6939      	ldr	r1, [r7, #16]
 8005df8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dfa:	f001 fd33 	bl	8007864 <memcpy>
    NumBytesRead += NumBytesRem;
 8005dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	4413      	add	r3, r2
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005e16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3730      	adds	r7, #48	@ 0x30
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20012f3c 	.word	0x20012f3c

08005e38 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b088      	sub	sp, #32
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005e46:	4b3d      	ldr	r3, [pc, #244]	@ (8005f3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b53      	cmp	r3, #83	@ 0x53
 8005e52:	d001      	beq.n	8005e58 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005e54:	f7ff ff10 	bl	8005c78 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e58:	f3ef 8311 	mrs	r3, BASEPRI
 8005e5c:	f04f 0120 	mov.w	r1, #32
 8005e60:	f381 8811 	msr	BASEPRI, r1
 8005e64:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e66:	4b35      	ldr	r3, [pc, #212]	@ (8005f3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e68:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e6e:	6939      	ldr	r1, [r7, #16]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	4613      	mov	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	3304      	adds	r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	69fa      	ldr	r2, [r7, #28]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	dbeb      	blt.n	8005e6e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e96:	e000      	b.n	8005e9a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e98:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	da3f      	bge.n	8005f24 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005ea4:	6939      	ldr	r1, [r7, #16]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005eb8:	6939      	ldr	r1, [r7, #16]
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3304      	adds	r3, #4
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ece:	6939      	ldr	r1, [r7, #16]
 8005ed0:	69fa      	ldr	r2, [r7, #28]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	3320      	adds	r3, #32
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ee2:	6939      	ldr	r1, [r7, #16]
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	440b      	add	r3, r1
 8005ef0:	3328      	adds	r3, #40	@ 0x28
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ef6:	6939      	ldr	r1, [r7, #16]
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	440b      	add	r3, r1
 8005f04:	3324      	adds	r3, #36	@ 0x24
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	4413      	add	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	440b      	add	r3, r1
 8005f18:	332c      	adds	r3, #44	@ 0x2c
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f1e:	f3bf 8f5f 	dmb	sy
 8005f22:	e002      	b.n	8005f2a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295
 8005f28:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005f30:	69fb      	ldr	r3, [r7, #28]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3720      	adds	r7, #32
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20012f3c 	.word	0x20012f3c

08005f40 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08a      	sub	sp, #40	@ 0x28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005f4e:	4b21      	ldr	r3, [pc, #132]	@ (8005fd4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b53      	cmp	r3, #83	@ 0x53
 8005f5a:	d001      	beq.n	8005f60 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005f5c:	f7ff fe8c 	bl	8005c78 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f60:	4b1c      	ldr	r3, [pc, #112]	@ (8005fd4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f62:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d82c      	bhi.n	8005fc4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6e:	f04f 0120 	mov.w	r1, #32
 8005f72:	f381 8811 	msr	BASEPRI, r1
 8005f76:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4413      	add	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	3360      	adds	r3, #96	@ 0x60
 8005f84:	69fa      	ldr	r2, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005fb4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc2:	e002      	b.n	8005fca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3728      	adds	r7, #40	@ 0x28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20012f3c 	.word	0x20012f3c

08005fd8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	60fa      	str	r2, [r7, #12]
 8005fee:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b80      	cmp	r3, #128	@ 0x80
 8005ff4:	d90a      	bls.n	800600c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005ff6:	2380      	movs	r3, #128	@ 0x80
 8005ff8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005ffa:	e007      	b.n	800600c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	1c53      	adds	r3, r2, #1
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	60f9      	str	r1, [r7, #12]
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1e5a      	subs	r2, r3, #1
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <_EncodeStr+0x46>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1ee      	bne.n	8005ffc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	b2da      	uxtb	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3307      	adds	r3, #7
}
 8006044:	4618      	mov	r0, r3
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006056:	4b34      	ldr	r3, [pc, #208]	@ (8006128 <_HandleIncomingPacket+0xd8>)
 8006058:	7e1b      	ldrb	r3, [r3, #24]
 800605a:	4618      	mov	r0, r3
 800605c:	1cfb      	adds	r3, r7, #3
 800605e:	2201      	movs	r2, #1
 8006060:	4619      	mov	r1, r3
 8006062:	f7ff fe63 	bl	8005d2c <SEGGER_RTT_ReadNoLock>
 8006066:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d057      	beq.n	800611e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	2b80      	cmp	r3, #128	@ 0x80
 8006072:	d031      	beq.n	80060d8 <_HandleIncomingPacket+0x88>
 8006074:	2b80      	cmp	r3, #128	@ 0x80
 8006076:	dc40      	bgt.n	80060fa <_HandleIncomingPacket+0xaa>
 8006078:	2b07      	cmp	r3, #7
 800607a:	dc15      	bgt.n	80060a8 <_HandleIncomingPacket+0x58>
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd3c      	ble.n	80060fa <_HandleIncomingPacket+0xaa>
 8006080:	3b01      	subs	r3, #1
 8006082:	2b06      	cmp	r3, #6
 8006084:	d839      	bhi.n	80060fa <_HandleIncomingPacket+0xaa>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <_HandleIncomingPacket+0x3c>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060af 	.word	0x080060af
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bb 	.word	0x080060bb
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	080060d3 	.word	0x080060d3
 80060a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060aa:	d033      	beq.n	8006114 <_HandleIncomingPacket+0xc4>
 80060ac:	e025      	b.n	80060fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80060ae:	f000 fb25 	bl	80066fc <SEGGER_SYSVIEW_Start>
      break;
 80060b2:	e034      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80060b4:	f000 fbdc 	bl	8006870 <SEGGER_SYSVIEW_Stop>
      break;
 80060b8:	e031      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80060ba:	f000 fdb5 	bl	8006c28 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80060be:	e02e      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80060c0:	f000 fd7a 	bl	8006bb8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80060c4:	e02b      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80060c6:	f000 fbf9 	bl	80068bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80060ca:	e028      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80060cc:	f001 f8e6 	bl	800729c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80060d0:	e025      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80060d2:	f001 f8c5 	bl	8007260 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80060d6:	e022      	b.n	800611e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060d8:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <_HandleIncomingPacket+0xd8>)
 80060da:	7e1b      	ldrb	r3, [r3, #24]
 80060dc:	4618      	mov	r0, r3
 80060de:	1cfb      	adds	r3, r7, #3
 80060e0:	2201      	movs	r2, #1
 80060e2:	4619      	mov	r1, r3
 80060e4:	f7ff fe22 	bl	8005d2c <SEGGER_RTT_ReadNoLock>
 80060e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d013      	beq.n	8006118 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f82a 	bl	800714c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060f8:	e00e      	b.n	8006118 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da0c      	bge.n	800611c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006102:	4b09      	ldr	r3, [pc, #36]	@ (8006128 <_HandleIncomingPacket+0xd8>)
 8006104:	7e1b      	ldrb	r3, [r3, #24]
 8006106:	4618      	mov	r0, r3
 8006108:	1cfb      	adds	r3, r7, #3
 800610a:	2201      	movs	r2, #1
 800610c:	4619      	mov	r1, r3
 800610e:	f7ff fe0d 	bl	8005d2c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006112:	e003      	b.n	800611c <_HandleIncomingPacket+0xcc>
      break;
 8006114:	bf00      	nop
 8006116:	e002      	b.n	800611e <_HandleIncomingPacket+0xce>
      break;
 8006118:	bf00      	nop
 800611a:	e000      	b.n	800611e <_HandleIncomingPacket+0xce>
      break;
 800611c:	bf00      	nop
    }
  }
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200197fc 	.word	0x200197fc

0800612c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	@ 0x30
 8006130:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006132:	2301      	movs	r3, #1
 8006134:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006136:	1d3b      	adds	r3, r7, #4
 8006138:	3301      	adds	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006146:	e00b      	b.n	8006160 <_TrySendOverflowPacket+0x34>
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	b2da      	uxtb	r2, r3
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006152:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	09db      	lsrs	r3, r3, #7
 800615e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	2b7f      	cmp	r3, #127	@ 0x7f
 8006164:	d8f0      	bhi.n	8006148 <_TrySendOverflowPacket+0x1c>
 8006166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800616c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006176:	4b25      	ldr	r3, [pc, #148]	@ (800620c <_TrySendOverflowPacket+0xe0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800617c:	4b22      	ldr	r3, [pc, #136]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	e00b      	b.n	80061a8 <_TrySendOverflowPacket+0x7c>
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	b2da      	uxtb	r2, r3
 8006194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006196:	1c59      	adds	r1, r3, #1
 8006198:	6279      	str	r1, [r7, #36]	@ 0x24
 800619a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	09db      	lsrs	r3, r3, #7
 80061a6:	623b      	str	r3, [r7, #32]
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ac:	d8f0      	bhi.n	8006190 <_TrySendOverflowPacket+0x64>
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80061be:	4b12      	ldr	r3, [pc, #72]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	4618      	mov	r0, r3
 80061c4:	1d3b      	adds	r3, r7, #4
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	f7f9 fffe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80061d4:	4603      	mov	r3, r0
 80061d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d009      	beq.n	80061f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80061de:	4a0a      	ldr	r2, [pc, #40]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80061e4:	4b08      	ldr	r3, [pc, #32]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	e004      	b.n	80061fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061f2:	4b05      	ldr	r3, [pc, #20]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	3301      	adds	r3, #1
 80061f8:	4a03      	ldr	r2, [pc, #12]	@ (8006208 <_TrySendOverflowPacket+0xdc>)
 80061fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061fc:	693b      	ldr	r3, [r7, #16]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3730      	adds	r7, #48	@ 0x30
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	200197fc 	.word	0x200197fc
 800620c:	e0001004 	.word	0xe0001004

08006210 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800621c:	4b98      	ldr	r3, [pc, #608]	@ (8006480 <_SendPacket+0x270>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d010      	beq.n	8006246 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006224:	4b96      	ldr	r3, [pc, #600]	@ (8006480 <_SendPacket+0x270>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 812d 	beq.w	8006488 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800622e:	4b94      	ldr	r3, [pc, #592]	@ (8006480 <_SendPacket+0x270>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b02      	cmp	r3, #2
 8006234:	d109      	bne.n	800624a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006236:	f7ff ff79 	bl	800612c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800623a:	4b91      	ldr	r3, [pc, #580]	@ (8006480 <_SendPacket+0x270>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	f040 8124 	bne.w	800648c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006244:	e001      	b.n	800624a <_SendPacket+0x3a>
    goto Send;
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <_SendPacket+0x3c>
Send:
 800624a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b1f      	cmp	r3, #31
 8006250:	d809      	bhi.n	8006266 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006252:	4b8b      	ldr	r3, [pc, #556]	@ (8006480 <_SendPacket+0x270>)
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8115 	bne.w	8006490 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b17      	cmp	r3, #23
 800626a:	d807      	bhi.n	800627c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e0c4      	b.n	8006406 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	2b7f      	cmp	r3, #127	@ 0x7f
 8006288:	d912      	bls.n	80062b0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	09da      	lsrs	r2, r3, #7
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b01      	subs	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	3a01      	subs	r2, #1
 80062a2:	60fa      	str	r2, [r7, #12]
 80062a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e006      	b.n	80062be <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b7e      	cmp	r3, #126	@ 0x7e
 80062c2:	d807      	bhi.n	80062d4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	e098      	b.n	8006406 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062da:	d212      	bcs.n	8006302 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	09da      	lsrs	r2, r3, #7
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	3a01      	subs	r2, #1
 80062f4:	60fa      	str	r2, [r7, #12]
 80062f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e081      	b.n	8006406 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006308:	d21d      	bcs.n	8006346 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0b9a      	lsrs	r2, r3, #14
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3b01      	subs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	b2db      	uxtb	r3, r3
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	3a01      	subs	r2, #1
 8006324:	60fa      	str	r2, [r7, #12]
 8006326:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	3a01      	subs	r2, #1
 8006338:	60fa      	str	r2, [r7, #12]
 800633a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	e05f      	b.n	8006406 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800634c:	d228      	bcs.n	80063a0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0d5a      	lsrs	r2, r3, #21
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b01      	subs	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	0b9b      	lsrs	r3, r3, #14
 8006362:	b2db      	uxtb	r3, r3
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	3a01      	subs	r2, #1
 8006368:	60fa      	str	r2, [r7, #12]
 800636a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	b2db      	uxtb	r3, r3
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	3a01      	subs	r2, #1
 800637e:	60fa      	str	r2, [r7, #12]
 8006380:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	3a01      	subs	r2, #1
 8006392:	60fa      	str	r2, [r7, #12]
 8006394:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006398:	b2da      	uxtb	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	e032      	b.n	8006406 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0f1a      	lsrs	r2, r3, #28
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	0d5b      	lsrs	r3, r3, #21
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	3a01      	subs	r2, #1
 80063ba:	60fa      	str	r2, [r7, #12]
 80063bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	0b9b      	lsrs	r3, r3, #14
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	3a01      	subs	r2, #1
 80063d0:	60fa      	str	r2, [r7, #12]
 80063d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	3a01      	subs	r2, #1
 80063e6:	60fa      	str	r2, [r7, #12]
 80063e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	3a01      	subs	r2, #1
 80063fa:	60fa      	str	r2, [r7, #12]
 80063fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006400:	b2da      	uxtb	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006406:	4b1f      	ldr	r3, [pc, #124]	@ (8006484 <_SendPacket+0x274>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800640c:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <_SendPacket+0x270>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	623b      	str	r3, [r7, #32]
 800641e:	e00b      	b.n	8006438 <_SendPacket+0x228>
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	6279      	str	r1, [r7, #36]	@ 0x24
 800642a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2b7f      	cmp	r3, #127	@ 0x7f
 800643c:	d8f0      	bhi.n	8006420 <_SendPacket+0x210>
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	627a      	str	r2, [r7, #36]	@ 0x24
 8006444:	6a3a      	ldr	r2, [r7, #32]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <_SendPacket+0x270>)
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	4618      	mov	r0, r3
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	f7f9 feb7 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006462:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800646a:	4a05      	ldr	r2, [pc, #20]	@ (8006480 <_SendPacket+0x270>)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	60d3      	str	r3, [r2, #12]
 8006470:	e00f      	b.n	8006492 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006472:	4b03      	ldr	r3, [pc, #12]	@ (8006480 <_SendPacket+0x270>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b01      	ldr	r3, [pc, #4]	@ (8006480 <_SendPacket+0x270>)
 800647c:	701a      	strb	r2, [r3, #0]
 800647e:	e008      	b.n	8006492 <_SendPacket+0x282>
 8006480:	200197fc 	.word	0x200197fc
 8006484:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <_SendPacket+0x282>
      goto SendDone;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <_SendPacket+0x282>
      goto SendDone;
 8006490:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006492:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <_SendPacket+0x2d4>)
 8006494:	7e1b      	ldrb	r3, [r3, #24]
 8006496:	4619      	mov	r1, r3
 8006498:	4a13      	ldr	r2, [pc, #76]	@ (80064e8 <_SendPacket+0x2d8>)
 800649a:	460b      	mov	r3, r1
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	440b      	add	r3, r1
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4413      	add	r3, r2
 80064a4:	336c      	adds	r3, #108	@ 0x6c
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b0e      	ldr	r3, [pc, #56]	@ (80064e4 <_SendPacket+0x2d4>)
 80064aa:	7e1b      	ldrb	r3, [r3, #24]
 80064ac:	4618      	mov	r0, r3
 80064ae:	490e      	ldr	r1, [pc, #56]	@ (80064e8 <_SendPacket+0x2d8>)
 80064b0:	4603      	mov	r3, r0
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4403      	add	r3, r0
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	440b      	add	r3, r1
 80064ba:	3370      	adds	r3, #112	@ 0x70
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d00b      	beq.n	80064da <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064c2:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <_SendPacket+0x2d4>)
 80064c4:	789b      	ldrb	r3, [r3, #2]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d107      	bne.n	80064da <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064ca:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <_SendPacket+0x2d4>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064d0:	f7ff fdbe 	bl	8006050 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <_SendPacket+0x2d4>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064da:	bf00      	nop
 80064dc:	3728      	adds	r7, #40	@ 0x28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200197fc 	.word	0x200197fc
 80064e8:	20012f3c 	.word	0x20012f3c

080064ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064fa:	2300      	movs	r3, #0
 80064fc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8006500:	4917      	ldr	r1, [pc, #92]	@ (8006560 <SEGGER_SYSVIEW_Init+0x74>)
 8006502:	4818      	ldr	r0, [pc, #96]	@ (8006564 <SEGGER_SYSVIEW_Init+0x78>)
 8006504:	f7ff fc98 	bl	8005e38 <SEGGER_RTT_AllocUpBuffer>
 8006508:	4603      	mov	r3, r0
 800650a:	b2da      	uxtb	r2, r3
 800650c:	4b16      	ldr	r3, [pc, #88]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 800650e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006510:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006512:	785a      	ldrb	r2, [r3, #1]
 8006514:	4b14      	ldr	r3, [pc, #80]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006516:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006518:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 800651a:	7e1b      	ldrb	r3, [r3, #24]
 800651c:	4618      	mov	r0, r3
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2308      	movs	r3, #8
 8006524:	4a11      	ldr	r2, [pc, #68]	@ (800656c <SEGGER_SYSVIEW_Init+0x80>)
 8006526:	490f      	ldr	r1, [pc, #60]	@ (8006564 <SEGGER_SYSVIEW_Init+0x78>)
 8006528:	f7ff fd0a 	bl	8005f40 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800652c:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 800652e:	2200      	movs	r2, #0
 8006530:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006532:	4b0f      	ldr	r3, [pc, #60]	@ (8006570 <SEGGER_SYSVIEW_Init+0x84>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a0c      	ldr	r2, [pc, #48]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006538:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800653a:	4a0b      	ldr	r2, [pc, #44]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006540:	4a09      	ldr	r2, [pc, #36]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006546:	4a08      	ldr	r2, [pc, #32]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800654c:	4a06      	ldr	r2, [pc, #24]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <SEGGER_SYSVIEW_Init+0x7c>)
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006558:	bf00      	nop
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200133f4 	.word	0x200133f4
 8006564:	080081f8 	.word	0x080081f8
 8006568:	200197fc 	.word	0x200197fc
 800656c:	200197f4 	.word	0x200197f4
 8006570:	e0001004 	.word	0xe0001004

08006574 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800657c:	4a04      	ldr	r2, [pc, #16]	@ (8006590 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6113      	str	r3, [r2, #16]
}
 8006582:	bf00      	nop
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	200197fc 	.word	0x200197fc

08006594 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800659c:	f3ef 8311 	mrs	r3, BASEPRI
 80065a0:	f04f 0120 	mov.w	r1, #32
 80065a4:	f381 8811 	msr	BASEPRI, r1
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	4808      	ldr	r0, [pc, #32]	@ (80065cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80065ac:	f7ff fd44 	bl	8006038 <_PreparePacket>
 80065b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	f7ff fe2a 	bl	8006210 <_SendPacket>
  RECORD_END();
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f383 8811 	msr	BASEPRI, r3
}
 80065c2:	bf00      	nop
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	2001982c 	.word	0x2001982c

080065d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80065da:	f3ef 8311 	mrs	r3, BASEPRI
 80065de:	f04f 0120 	mov.w	r1, #32
 80065e2:	f381 8811 	msr	BASEPRI, r1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	4816      	ldr	r0, [pc, #88]	@ (8006644 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80065ea:	f7ff fd25 	bl	8006038 <_PreparePacket>
 80065ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	61bb      	str	r3, [r7, #24]
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_RecordU32+0x46>
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	61f9      	str	r1, [r7, #28]
 8006608:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	61bb      	str	r3, [r7, #24]
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b7f      	cmp	r3, #127	@ 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	61fa      	str	r2, [r7, #28]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	6938      	ldr	r0, [r7, #16]
 8006632:	f7ff fded 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f383 8811 	msr	BASEPRI, r3
}
 800663c:	bf00      	nop
 800663e:	3720      	adds	r7, #32
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	2001982c 	.word	0x2001982c

08006648 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006648:	b580      	push	{r7, lr}
 800664a:	b08c      	sub	sp, #48	@ 0x30
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006654:	f3ef 8311 	mrs	r3, BASEPRI
 8006658:	f04f 0120 	mov.w	r1, #32
 800665c:	f381 8811 	msr	BASEPRI, r1
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	4825      	ldr	r0, [pc, #148]	@ (80066f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006664:	f7ff fce8 	bl	8006038 <_PreparePacket>
 8006668:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006682:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006692:	2b7f      	cmp	r3, #127	@ 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800669c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e00b      	b.n	80066c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80066ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	623b      	str	r3, [r7, #32]
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80066cc:	d8f0      	bhi.n	80066b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	6979      	ldr	r1, [r7, #20]
 80066e2:	69b8      	ldr	r0, [r7, #24]
 80066e4:	f7ff fd94 	bl	8006210 <_SendPacket>
  RECORD_END();
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f383 8811 	msr	BASEPRI, r3
}
 80066ee:	bf00      	nop
 80066f0:	3730      	adds	r7, #48	@ 0x30
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	2001982c 	.word	0x2001982c

080066fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08c      	sub	sp, #48	@ 0x30
 8006700:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006702:	4b58      	ldr	r3, [pc, #352]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006716:	4b53      	ldr	r3, [pc, #332]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	220a      	movs	r2, #10
 800671c:	4952      	ldr	r1, [pc, #328]	@ (8006868 <SEGGER_SYSVIEW_Start+0x16c>)
 800671e:	4618      	mov	r0, r3
 8006720:	f7f9 fd56 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800672a:	200a      	movs	r0, #10
 800672c:	f7ff ff32 	bl	8006594 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006730:	f3ef 8311 	mrs	r3, BASEPRI
 8006734:	f04f 0120 	mov.w	r1, #32
 8006738:	f381 8811 	msr	BASEPRI, r1
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	484b      	ldr	r0, [pc, #300]	@ (800686c <SEGGER_SYSVIEW_Start+0x170>)
 8006740:	f7ff fc7a 	bl	8006038 <_PreparePacket>
 8006744:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800674e:	4b45      	ldr	r3, [pc, #276]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006754:	e00b      	b.n	800676e <SEGGER_SYSVIEW_Start+0x72>
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	b2da      	uxtb	r2, r3
 800675a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800675c:	1c59      	adds	r1, r3, #1
 800675e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006760:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	701a      	strb	r2, [r3, #0]
 8006768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676a:	09db      	lsrs	r3, r3, #7
 800676c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800676e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006770:	2b7f      	cmp	r3, #127	@ 0x7f
 8006772:	d8f0      	bhi.n	8006756 <SEGGER_SYSVIEW_Start+0x5a>
 8006774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800677a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	627b      	str	r3, [r7, #36]	@ 0x24
 8006788:	4b36      	ldr	r3, [pc, #216]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	623b      	str	r3, [r7, #32]
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_Start+0xac>
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	6279      	str	r1, [r7, #36]	@ 0x24
 800679a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	623b      	str	r3, [r7, #32]
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_Start+0x94>
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	4b28      	ldr	r3, [pc, #160]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	e00b      	b.n	80067e2 <SEGGER_SYSVIEW_Start+0xe6>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	1c59      	adds	r1, r3, #1
 80067d2:	61f9      	str	r1, [r7, #28]
 80067d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	09db      	lsrs	r3, r3, #7
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e6:	d8f0      	bhi.n	80067ca <SEGGER_SYSVIEW_Start+0xce>
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	61fa      	str	r2, [r7, #28]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e00b      	b.n	800681a <SEGGER_SYSVIEW_Start+0x11e>
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	6179      	str	r1, [r7, #20]
 800680c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	09db      	lsrs	r3, r3, #7
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b7f      	cmp	r3, #127	@ 0x7f
 800681e:	d8f0      	bhi.n	8006802 <SEGGER_SYSVIEW_Start+0x106>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	617a      	str	r2, [r7, #20]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006830:	2218      	movs	r2, #24
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fceb 	bl	8006210 <_SendPacket>
      RECORD_END();
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006840:	4b08      	ldr	r3, [pc, #32]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 8006842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006848:	4b06      	ldr	r3, [pc, #24]	@ (8006864 <SEGGER_SYSVIEW_Start+0x168>)
 800684a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800684e:	f000 f9eb 	bl	8006c28 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006852:	f000 f9b1 	bl	8006bb8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006856:	f000 fd21 	bl	800729c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800685a:	bf00      	nop
 800685c:	3730      	adds	r7, #48	@ 0x30
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200197fc 	.word	0x200197fc
 8006868:	08008284 	.word	0x08008284
 800686c:	2001982c 	.word	0x2001982c

08006870 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	480b      	ldr	r0, [pc, #44]	@ (80068b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006886:	f7ff fbd7 	bl	8006038 <_PreparePacket>
 800688a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800688c:	4b0a      	ldr	r3, [pc, #40]	@ (80068b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d007      	beq.n	80068a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006894:	220b      	movs	r2, #11
 8006896:	6839      	ldr	r1, [r7, #0]
 8006898:	6838      	ldr	r0, [r7, #0]
 800689a:	f7ff fcb9 	bl	8006210 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800689e:	4b06      	ldr	r3, [pc, #24]	@ (80068b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f383 8811 	msr	BASEPRI, r3
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	2001982c 	.word	0x2001982c
 80068b8:	200197fc 	.word	0x200197fc

080068bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08c      	sub	sp, #48	@ 0x30
 80068c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068c2:	f3ef 8311 	mrs	r3, BASEPRI
 80068c6:	f04f 0120 	mov.w	r1, #32
 80068ca:	f381 8811 	msr	BASEPRI, r1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	4845      	ldr	r0, [pc, #276]	@ (80069e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068d2:	f7ff fbb1 	bl	8006038 <_PreparePacket>
 80068d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068e0:	4b42      	ldr	r3, [pc, #264]	@ (80069ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006902:	2b7f      	cmp	r3, #127	@ 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800690c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006914:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
 800691a:	4b34      	ldr	r3, [pc, #208]	@ (80069ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	e00b      	b.n	800693a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	6279      	str	r1, [r7, #36]	@ 0x24
 800692c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	09db      	lsrs	r3, r3, #7
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	2b7f      	cmp	r3, #127	@ 0x7f
 800693e:	d8f0      	bhi.n	8006922 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	627a      	str	r2, [r7, #36]	@ 0x24
 8006946:	6a3a      	ldr	r2, [r7, #32]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	4b25      	ldr	r3, [pc, #148]	@ (80069ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e00b      	b.n	8006974 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	1c59      	adds	r1, r3, #1
 8006964:	61f9      	str	r1, [r7, #28]
 8006966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	09db      	lsrs	r3, r3, #7
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b7f      	cmp	r3, #127	@ 0x7f
 8006978:	d8f0      	bhi.n	800695c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e00b      	b.n	80069ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1c59      	adds	r1, r3, #1
 800699c:	6179      	str	r1, [r7, #20]
 800699e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	09db      	lsrs	r3, r3, #7
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80069b0:	d8f0      	bhi.n	8006994 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	617a      	str	r2, [r7, #20]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069c2:	2218      	movs	r2, #24
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	68b8      	ldr	r0, [r7, #8]
 80069c8:	f7ff fc22 	bl	8006210 <_SendPacket>
  RECORD_END();
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80069da:	4b04      	ldr	r3, [pc, #16]	@ (80069ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	4798      	blx	r3
  }
}
 80069e0:	bf00      	nop
 80069e2:	3730      	adds	r7, #48	@ 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	2001982c 	.word	0x2001982c
 80069ec:	200197fc 	.word	0x200197fc

080069f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b092      	sub	sp, #72	@ 0x48
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069f8:	f3ef 8311 	mrs	r3, BASEPRI
 80069fc:	f04f 0120 	mov.w	r1, #32
 8006a00:	f381 8811 	msr	BASEPRI, r1
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	486a      	ldr	r0, [pc, #424]	@ (8006bb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006a08:	f7ff fb16 	bl	8006038 <_PreparePacket>
 8006a0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b66      	ldr	r3, [pc, #408]	@ (8006bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a22:	e00b      	b.n	8006a3c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006a2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
 8006a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a38:	09db      	lsrs	r3, r3, #7
 8006a3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a40:	d8f0      	bhi.n	8006a24 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a5c:	e00b      	b.n	8006a76 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a72:	09db      	lsrs	r3, r3, #7
 8006a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a7a:	d8f0      	bhi.n	8006a5e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fa9f 	bl	8005fd8 <_EncodeStr>
 8006a9a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a9c:	2209      	movs	r2, #9
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6938      	ldr	r0, [r7, #16]
 8006aa2:	f7ff fbb5 	bl	8006210 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b40      	ldr	r3, [pc, #256]	@ (8006bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	e00b      	b.n	8006b48 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	09db      	lsrs	r3, r3, #7
 8006b46:	623b      	str	r3, [r7, #32]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b4c:	d8f0      	bhi.n	8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b54:	6a3a      	ldr	r2, [r7, #32]
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	2300      	movs	r3, #0
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	e00b      	b.n	8006b80 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	1c59      	adds	r1, r3, #1
 8006b70:	61f9      	str	r1, [r7, #28]
 8006b72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b84:	d8f0      	bhi.n	8006b68 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	61fa      	str	r2, [r7, #28]
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b96:	2215      	movs	r2, #21
 8006b98:	68f9      	ldr	r1, [r7, #12]
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f7ff fb38 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f383 8811 	msr	BASEPRI, r3
}
 8006ba6:	bf00      	nop
 8006ba8:	3748      	adds	r7, #72	@ 0x48
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	2001982c 	.word	0x2001982c
 8006bb4:	200197fc 	.word	0x200197fc

08006bb8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006bce:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4798      	blx	r3
  }
}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200197fc 	.word	0x200197fc

08006be0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006be8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bec:	f04f 0120 	mov.w	r1, #32
 8006bf0:	f381 8811 	msr	BASEPRI, r1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	480b      	ldr	r0, [pc, #44]	@ (8006c24 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bf8:	f7ff fa1e 	bl	8006038 <_PreparePacket>
 8006bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bfe:	2280      	movs	r2, #128	@ 0x80
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	6938      	ldr	r0, [r7, #16]
 8006c04:	f7ff f9e8 	bl	8005fd8 <_EncodeStr>
 8006c08:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006c0a:	220e      	movs	r2, #14
 8006c0c:	68f9      	ldr	r1, [r7, #12]
 8006c0e:	6938      	ldr	r0, [r7, #16]
 8006c10:	f7ff fafe 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f383 8811 	msr	BASEPRI, r3
}
 8006c1a:	bf00      	nop
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	2001982c 	.word	0x2001982c

08006c28 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c2e:	4b15      	ldr	r3, [pc, #84]	@ (8006c84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01a      	beq.n	8006c6c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c36:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d015      	beq.n	8006c6c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4798      	blx	r3
 8006c48:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c4c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	f04f 0300 	mov.w	r3, #0
 8006c5a:	000a      	movs	r2, r1
 8006c5c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c5e:	4613      	mov	r3, r2
 8006c60:	461a      	mov	r2, r3
 8006c62:	4621      	mov	r1, r4
 8006c64:	200d      	movs	r0, #13
 8006c66:	f7ff fcef 	bl	8006648 <SEGGER_SYSVIEW_RecordU32x2>
 8006c6a:	e006      	b.n	8006c7a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c6c:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	200c      	movs	r0, #12
 8006c74:	f7ff fcac 	bl	80065d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd90      	pop	{r4, r7, pc}
 8006c82:	bf00      	nop
 8006c84:	200197fc 	.word	0x200197fc
 8006c88:	e0001004 	.word	0xe0001004

08006c8c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c92:	f3ef 8311 	mrs	r3, BASEPRI
 8006c96:	f04f 0120 	mov.w	r1, #32
 8006c9a:	f381 8811 	msr	BASEPRI, r1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	4819      	ldr	r0, [pc, #100]	@ (8006d08 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006ca2:	f7ff f9c9 	bl	8006038 <_PreparePacket>
 8006ca6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006cac:	4b17      	ldr	r3, [pc, #92]	@ (8006d0c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e00b      	b.n	8006cd8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	6179      	str	r1, [r7, #20]
 8006cca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	09db      	lsrs	r3, r3, #7
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cdc:	d8f0      	bhi.n	8006cc0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	617a      	str	r2, [r7, #20]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006cee:	2202      	movs	r2, #2
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f7ff fa8c 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
}
 8006cfe:	bf00      	nop
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	2001982c 	.word	0x2001982c
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d16:	f3ef 8311 	mrs	r3, BASEPRI
 8006d1a:	f04f 0120 	mov.w	r1, #32
 8006d1e:	f381 8811 	msr	BASEPRI, r1
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	4807      	ldr	r0, [pc, #28]	@ (8006d44 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d26:	f7ff f987 	bl	8006038 <_PreparePacket>
 8006d2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d2c:	2203      	movs	r2, #3
 8006d2e:	6839      	ldr	r1, [r7, #0]
 8006d30:	6838      	ldr	r0, [r7, #0]
 8006d32:	f7ff fa6d 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f383 8811 	msr	BASEPRI, r3
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2001982c 	.word	0x2001982c

08006d48 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d52:	f04f 0120 	mov.w	r1, #32
 8006d56:	f381 8811 	msr	BASEPRI, r1
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	4807      	ldr	r0, [pc, #28]	@ (8006d7c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d5e:	f7ff f96b 	bl	8006038 <_PreparePacket>
 8006d62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d64:	2212      	movs	r2, #18
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6838      	ldr	r0, [r7, #0]
 8006d6a:	f7ff fa51 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f383 8811 	msr	BASEPRI, r3
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2001982c 	.word	0x2001982c

08006d80 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d88:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8c:	f04f 0120 	mov.w	r1, #32
 8006d90:	f381 8811 	msr	BASEPRI, r1
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	4817      	ldr	r0, [pc, #92]	@ (8006df4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006d98:	f7ff f94e 	bl	8006038 <_PreparePacket>
 8006d9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e00b      	b.n	8006dc4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	1c59      	adds	r1, r3, #1
 8006db4:	61f9      	str	r1, [r7, #28]
 8006db6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	09db      	lsrs	r3, r3, #7
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dc8:	d8f0      	bhi.n	8006dac <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	61fa      	str	r2, [r7, #28]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006dda:	221c      	movs	r2, #28
 8006ddc:	68f9      	ldr	r1, [r7, #12]
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7ff fa16 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f383 8811 	msr	BASEPRI, r3
}
 8006dea:	bf00      	nop
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	2001982c 	.word	0x2001982c

08006df8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	@ 0x28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e02:	f3ef 8311 	mrs	r3, BASEPRI
 8006e06:	f04f 0120 	mov.w	r1, #32
 8006e0a:	f381 8811 	msr	BASEPRI, r1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	4824      	ldr	r0, [pc, #144]	@ (8006ea4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006e12:	f7ff f911 	bl	8006038 <_PreparePacket>
 8006e16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	e00b      	b.n	8006e3e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	09db      	lsrs	r3, r3, #7
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e42:	d8f0      	bhi.n	8006e26 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e4a:	6a3a      	ldr	r2, [r7, #32]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	e00b      	b.n	8006e76 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	61f9      	str	r1, [r7, #28]
 8006e68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e7a:	d8f0      	bhi.n	8006e5e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	61fa      	str	r2, [r7, #28]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006e8c:	221c      	movs	r2, #28
 8006e8e:	68f9      	ldr	r1, [r7, #12]
 8006e90:	6938      	ldr	r0, [r7, #16]
 8006e92:	f7ff f9bd 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f383 8811 	msr	BASEPRI, r3
}
 8006e9c:	bf00      	nop
 8006e9e:	3728      	adds	r7, #40	@ 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	2001982c 	.word	0x2001982c

08006ea8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006eae:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb2:	f04f 0120 	mov.w	r1, #32
 8006eb6:	f381 8811 	msr	BASEPRI, r1
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	4807      	ldr	r0, [pc, #28]	@ (8006edc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006ebe:	f7ff f8bb 	bl	8006038 <_PreparePacket>
 8006ec2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ec4:	2211      	movs	r2, #17
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6838      	ldr	r0, [r7, #0]
 8006eca:	f7ff f9a1 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f383 8811 	msr	BASEPRI, r3
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	2001982c 	.word	0x2001982c

08006ee0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ee8:	f3ef 8311 	mrs	r3, BASEPRI
 8006eec:	f04f 0120 	mov.w	r1, #32
 8006ef0:	f381 8811 	msr	BASEPRI, r1
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	4819      	ldr	r0, [pc, #100]	@ (8006f5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ef8:	f7ff f89e 	bl	8006038 <_PreparePacket>
 8006efc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f02:	4b17      	ldr	r3, [pc, #92]	@ (8006f60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	e00b      	b.n	8006f2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	1c59      	adds	r1, r3, #1
 8006f1e:	61f9      	str	r1, [r7, #28]
 8006f20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	09db      	lsrs	r3, r3, #7
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f32:	d8f0      	bhi.n	8006f16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	61fa      	str	r2, [r7, #28]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f44:	2208      	movs	r2, #8
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6938      	ldr	r0, [r7, #16]
 8006f4a:	f7ff f961 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f383 8811 	msr	BASEPRI, r3
}
 8006f54:	bf00      	nop
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	2001982c 	.word	0x2001982c
 8006f60:	200197fc 	.word	0x200197fc

08006f64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f70:	f04f 0120 	mov.w	r1, #32
 8006f74:	f381 8811 	msr	BASEPRI, r1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	4819      	ldr	r0, [pc, #100]	@ (8006fe0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f7c:	f7ff f85c 	bl	8006038 <_PreparePacket>
 8006f80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f86:	4b17      	ldr	r3, [pc, #92]	@ (8006fe4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	61fb      	str	r3, [r7, #28]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	e00b      	b.n	8006fb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	61f9      	str	r1, [r7, #28]
 8006fa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	09db      	lsrs	r3, r3, #7
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb6:	d8f0      	bhi.n	8006f9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	61fa      	str	r2, [r7, #28]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fc8:	2204      	movs	r2, #4
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	6938      	ldr	r0, [r7, #16]
 8006fce:	f7ff f91f 	bl	8006210 <_SendPacket>
  RECORD_END();
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f383 8811 	msr	BASEPRI, r3
}
 8006fd8:	bf00      	nop
 8006fda:	3720      	adds	r7, #32
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	2001982c 	.word	0x2001982c
 8006fe4:	200197fc 	.word	0x200197fc

08006fe8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ff0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff4:	f04f 0120 	mov.w	r1, #32
 8006ff8:	f381 8811 	msr	BASEPRI, r1
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	4819      	ldr	r0, [pc, #100]	@ (8007064 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007000:	f7ff f81a 	bl	8006038 <_PreparePacket>
 8007004:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800700a:	4b17      	ldr	r3, [pc, #92]	@ (8007068 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	61bb      	str	r3, [r7, #24]
 800701c:	e00b      	b.n	8007036 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	1c59      	adds	r1, r3, #1
 8007026:	61f9      	str	r1, [r7, #28]
 8007028:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	09db      	lsrs	r3, r3, #7
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b7f      	cmp	r3, #127	@ 0x7f
 800703a:	d8f0      	bhi.n	800701e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61fa      	str	r2, [r7, #28]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800704c:	2206      	movs	r2, #6
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6938      	ldr	r0, [r7, #16]
 8007052:	f7ff f8dd 	bl	8006210 <_SendPacket>
  RECORD_END();
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f383 8811 	msr	BASEPRI, r3
}
 800705c:	bf00      	nop
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	2001982c 	.word	0x2001982c
 8007068:	200197fc 	.word	0x200197fc

0800706c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b08a      	sub	sp, #40	@ 0x28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007076:	f3ef 8311 	mrs	r3, BASEPRI
 800707a:	f04f 0120 	mov.w	r1, #32
 800707e:	f381 8811 	msr	BASEPRI, r1
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	4827      	ldr	r0, [pc, #156]	@ (8007124 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007086:	f7fe ffd7 	bl	8006038 <_PreparePacket>
 800708a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007090:	4b25      	ldr	r3, [pc, #148]	@ (8007128 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	e00b      	b.n	80070bc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80070ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	09db      	lsrs	r3, r3, #7
 80070ba:	623b      	str	r3, [r7, #32]
 80070bc:	6a3b      	ldr	r3, [r7, #32]
 80070be:	2b7f      	cmp	r3, #127	@ 0x7f
 80070c0:	d8f0      	bhi.n	80070a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80070c8:	6a3a      	ldr	r2, [r7, #32]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e00b      	b.n	80070f4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	1c59      	adds	r1, r3, #1
 80070e4:	61f9      	str	r1, [r7, #28]
 80070e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	09db      	lsrs	r3, r3, #7
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f8:	d8f0      	bhi.n	80070dc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	61fa      	str	r2, [r7, #28]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800710a:	2207      	movs	r2, #7
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f7ff f87e 	bl	8006210 <_SendPacket>
  RECORD_END();
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f383 8811 	msr	BASEPRI, r3
}
 800711a:	bf00      	nop
 800711c:	3728      	adds	r7, #40	@ 0x28
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	2001982c 	.word	0x2001982c
 8007128:	200197fc 	.word	0x200197fc

0800712c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007134:	4b04      	ldr	r3, [pc, #16]	@ (8007148 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	1ad3      	subs	r3, r2, r3
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	200197fc 	.word	0x200197fc

0800714c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	@ 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007156:	4b40      	ldr	r3, [pc, #256]	@ (8007258 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d077      	beq.n	800724e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800715e:	4b3e      	ldr	r3, [pc, #248]	@ (8007258 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007164:	2300      	movs	r3, #0
 8007166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007168:	e008      	b.n	800717c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800716a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d007      	beq.n	8007186 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007178:	3301      	adds	r3, #1
 800717a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800717c:	79fb      	ldrb	r3, [r7, #7]
 800717e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007180:	429a      	cmp	r2, r3
 8007182:	d3f2      	bcc.n	800716a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007184:	e000      	b.n	8007188 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007186:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d055      	beq.n	800723a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800718e:	f3ef 8311 	mrs	r3, BASEPRI
 8007192:	f04f 0120 	mov.w	r1, #32
 8007196:	f381 8811 	msr	BASEPRI, r1
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	482f      	ldr	r0, [pc, #188]	@ (800725c <SEGGER_SYSVIEW_SendModule+0x110>)
 800719e:	f7fe ff4b 	bl	8006038 <_PreparePacket>
 80071a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	623b      	str	r3, [r7, #32]
 80071b0:	e00b      	b.n	80071ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80071bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	09db      	lsrs	r3, r3, #7
 80071c8:	623b      	str	r3, [r7, #32]
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ce:	d8f0      	bhi.n	80071b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80071d6:	6a3a      	ldr	r2, [r7, #32]
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	61fb      	str	r3, [r7, #28]
 80071e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	61bb      	str	r3, [r7, #24]
 80071ea:	e00b      	b.n	8007204 <SEGGER_SYSVIEW_SendModule+0xb8>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	61f9      	str	r1, [r7, #28]
 80071f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	09db      	lsrs	r3, r3, #7
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	2b7f      	cmp	r3, #127	@ 0x7f
 8007208:	d8f0      	bhi.n	80071ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	61fa      	str	r2, [r7, #28]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2280      	movs	r2, #128	@ 0x80
 8007220:	4619      	mov	r1, r3
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f7fe fed8 	bl	8005fd8 <_EncodeStr>
 8007228:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800722a:	2216      	movs	r2, #22
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	6938      	ldr	r0, [r7, #16]
 8007230:	f7fe ffee 	bl	8006210 <_SendPacket>
      RECORD_END();
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800723a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <SEGGER_SYSVIEW_SendModule+0x102>
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4798      	blx	r3
    }
  }
}
 800724e:	bf00      	nop
 8007250:	3730      	adds	r7, #48	@ 0x30
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20019824 	.word	0x20019824
 800725c:	2001982c 	.word	0x2001982c

08007260 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007266:	4b0c      	ldr	r3, [pc, #48]	@ (8007298 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800726e:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1f2      	bne.n	8007274 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20019824 	.word	0x20019824

0800729c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80072a2:	f3ef 8311 	mrs	r3, BASEPRI
 80072a6:	f04f 0120 	mov.w	r1, #32
 80072aa:	f381 8811 	msr	BASEPRI, r1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	4817      	ldr	r0, [pc, #92]	@ (8007310 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80072b2:	f7fe fec1 	bl	8006038 <_PreparePacket>
 80072b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e00b      	b.n	80072e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	b2da      	uxtb	r2, r3
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	1c59      	adds	r1, r3, #1
 80072d0:	6179      	str	r1, [r7, #20]
 80072d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072d6:	b2d2      	uxtb	r2, r2
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	09db      	lsrs	r3, r3, #7
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072e4:	d8f0      	bhi.n	80072c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	617a      	str	r2, [r7, #20]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072f6:	221b      	movs	r2, #27
 80072f8:	6879      	ldr	r1, [r7, #4]
 80072fa:	68b8      	ldr	r0, [r7, #8]
 80072fc:	f7fe ff88 	bl	8006210 <_SendPacket>
  RECORD_END();
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f383 8811 	msr	BASEPRI, r3
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	2001982c 	.word	0x2001982c
 8007314:	20019828 	.word	0x20019828

08007318 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	@ 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007320:	f3ef 8311 	mrs	r3, BASEPRI
 8007324:	f04f 0120 	mov.w	r1, #32
 8007328:	f381 8811 	msr	BASEPRI, r1
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	4827      	ldr	r0, [pc, #156]	@ (80073cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8007330:	f7fe fe82 	bl	8006038 <_PreparePacket>
 8007334:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007336:	2280      	movs	r2, #128	@ 0x80
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	6938      	ldr	r0, [r7, #16]
 800733c:	f7fe fe4c 	bl	8005fd8 <_EncodeStr>
 8007340:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
 8007346:	2301      	movs	r3, #1
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	e00b      	b.n	8007364 <SEGGER_SYSVIEW_Warn+0x4c>
 800734c:	6a3b      	ldr	r3, [r7, #32]
 800734e:	b2da      	uxtb	r2, r3
 8007350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007352:	1c59      	adds	r1, r3, #1
 8007354:	6279      	str	r1, [r7, #36]	@ 0x24
 8007356:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	09db      	lsrs	r3, r3, #7
 8007362:	623b      	str	r3, [r7, #32]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b7f      	cmp	r3, #127	@ 0x7f
 8007368:	d8f0      	bhi.n	800734c <SEGGER_SYSVIEW_Warn+0x34>
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007370:	6a3a      	ldr	r2, [r7, #32]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	2300      	movs	r3, #0
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	e00b      	b.n	800739c <SEGGER_SYSVIEW_Warn+0x84>
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	1c59      	adds	r1, r3, #1
 800738c:	61f9      	str	r1, [r7, #28]
 800738e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	09db      	lsrs	r3, r3, #7
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b7f      	cmp	r3, #127	@ 0x7f
 80073a0:	d8f0      	bhi.n	8007384 <SEGGER_SYSVIEW_Warn+0x6c>
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	61fa      	str	r2, [r7, #28]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80073b2:	221a      	movs	r2, #26
 80073b4:	68f9      	ldr	r1, [r7, #12]
 80073b6:	6938      	ldr	r0, [r7, #16]
 80073b8:	f7fe ff2a 	bl	8006210 <_SendPacket>
  RECORD_END();
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f383 8811 	msr	BASEPRI, r3
}
 80073c2:	bf00      	nop
 80073c4:	3728      	adds	r7, #40	@ 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	2001982c 	.word	0x2001982c

080073d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80073d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80073d6:	2300      	movs	r3, #0
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	e033      	b.n	8007444 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80073dc:	491e      	ldr	r1, [pc, #120]	@ (8007458 <_cbSendTaskList+0x88>)
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	491a      	ldr	r1, [pc, #104]	@ (8007458 <_cbSendTaskList+0x88>)
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	3304      	adds	r3, #4
 80073fc:	6819      	ldr	r1, [r3, #0]
 80073fe:	4c16      	ldr	r4, [pc, #88]	@ (8007458 <_cbSendTaskList+0x88>)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4423      	add	r3, r4
 800740c:	3308      	adds	r3, #8
 800740e:	681c      	ldr	r4, [r3, #0]
 8007410:	4d11      	ldr	r5, [pc, #68]	@ (8007458 <_cbSendTaskList+0x88>)
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4613      	mov	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	442b      	add	r3, r5
 800741e:	330c      	adds	r3, #12
 8007420:	681d      	ldr	r5, [r3, #0]
 8007422:	4e0d      	ldr	r6, [pc, #52]	@ (8007458 <_cbSendTaskList+0x88>)
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4433      	add	r3, r6
 8007430:	3310      	adds	r3, #16
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	462b      	mov	r3, r5
 8007438:	4622      	mov	r2, r4
 800743a:	f000 f979 	bl	8007730 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3301      	adds	r3, #1
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	4b05      	ldr	r3, [pc, #20]	@ (800745c <_cbSendTaskList+0x8c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d3c6      	bcc.n	80073dc <_cbSendTaskList+0xc>
  }
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	20019910 	.word	0x20019910
 800745c:	200199b0 	.word	0x200199b0

08007460 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007468:	f7fc fe34 	bl	80040d4 <xTaskGetTickCountFromISR>
 800746c:	4603      	mov	r3, r0
 800746e:	2200      	movs	r2, #0
 8007470:	469a      	mov	sl, r3
 8007472:	4693      	mov	fp, r2
 8007474:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	f04f 0a00 	mov.w	sl, #0
 8007484:	f04f 0b00 	mov.w	fp, #0
 8007488:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800748c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007490:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007494:	4652      	mov	r2, sl
 8007496:	465b      	mov	r3, fp
 8007498:	1a14      	subs	r4, r2, r0
 800749a:	eb63 0501 	sbc.w	r5, r3, r1
 800749e:	f04f 0200 	mov.w	r2, #0
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	00ab      	lsls	r3, r5, #2
 80074a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80074ac:	00a2      	lsls	r2, r4, #2
 80074ae:	4614      	mov	r4, r2
 80074b0:	461d      	mov	r5, r3
 80074b2:	eb14 0800 	adds.w	r8, r4, r0
 80074b6:	eb45 0901 	adc.w	r9, r5, r1
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	f04f 0300 	mov.w	r3, #0
 80074c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ce:	4690      	mov	r8, r2
 80074d0:	4699      	mov	r9, r3
 80074d2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80074d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80074da:	4610      	mov	r0, r2
 80074dc:	4619      	mov	r1, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080074e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80074f6:	2205      	movs	r2, #5
 80074f8:	492b      	ldr	r1, [pc, #172]	@ (80075a8 <SYSVIEW_AddTask+0xc0>)
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	f000 f96e 	bl	80077dc <memcmp>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d04b      	beq.n	800759e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007506:	4b29      	ldr	r3, [pc, #164]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b07      	cmp	r3, #7
 800750c:	d903      	bls.n	8007516 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800750e:	4828      	ldr	r0, [pc, #160]	@ (80075b0 <SYSVIEW_AddTask+0xc8>)
 8007510:	f7ff ff02 	bl	8007318 <SEGGER_SYSVIEW_Warn>
    return;
 8007514:	e044      	b.n	80075a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007516:	4b25      	ldr	r3, [pc, #148]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4926      	ldr	r1, [pc, #152]	@ (80075b4 <SYSVIEW_AddTask+0xcc>)
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800752a:	4b20      	ldr	r3, [pc, #128]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4921      	ldr	r1, [pc, #132]	@ (80075b4 <SYSVIEW_AddTask+0xcc>)
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	440b      	add	r3, r1
 800753a:	3304      	adds	r3, #4
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007540:	4b1a      	ldr	r3, [pc, #104]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	491b      	ldr	r1, [pc, #108]	@ (80075b4 <SYSVIEW_AddTask+0xcc>)
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3308      	adds	r3, #8
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007556:	4b15      	ldr	r3, [pc, #84]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4916      	ldr	r1, [pc, #88]	@ (80075b4 <SYSVIEW_AddTask+0xcc>)
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	440b      	add	r3, r1
 8007566:	330c      	adds	r3, #12
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800756c:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	4910      	ldr	r1, [pc, #64]	@ (80075b4 <SYSVIEW_AddTask+0xcc>)
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3310      	adds	r3, #16
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007582:	4b0a      	ldr	r3, [pc, #40]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	4a08      	ldr	r2, [pc, #32]	@ (80075ac <SYSVIEW_AddTask+0xc4>)
 800758a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f8ca 	bl	8007730 <SYSVIEW_SendTaskInfo>
 800759c:	e000      	b.n	80075a0 <SYSVIEW_AddTask+0xb8>
    return;
 800759e:	bf00      	nop

}
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	08008200 	.word	0x08008200
 80075ac:	200199b0 	.word	0x200199b0
 80075b0:	08008208 	.word	0x08008208
 80075b4:	20019910 	.word	0x20019910

080075b8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80075c0:	4b59      	ldr	r3, [pc, #356]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80ab 	beq.w	8007720 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e00d      	b.n	80075ec <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80075d0:	4956      	ldr	r1, [pc, #344]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4613      	mov	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d008      	beq.n	80075f8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d3ec      	bcc.n	80075d0 <SYSVIEW_DeleteTask+0x18>
 80075f6:	e000      	b.n	80075fa <SYSVIEW_DeleteTask+0x42>
      break;
 80075f8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80075fa:	4b4b      	ldr	r3, [pc, #300]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3b01      	subs	r3, #1
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	429a      	cmp	r2, r3
 8007604:	d111      	bne.n	800762a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4613      	mov	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4a46      	ldr	r2, [pc, #280]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007612:	4413      	add	r3, r2
 8007614:	2214      	movs	r2, #20
 8007616:	2100      	movs	r1, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f8ef 	bl	80077fc <memset>
    _NumTasks--;
 800761e:	4b42      	ldr	r3, [pc, #264]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3b01      	subs	r3, #1
 8007624:	4a40      	ldr	r2, [pc, #256]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e07b      	b.n	8007722 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800762a:	4b3f      	ldr	r3, [pc, #252]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d276      	bcs.n	8007722 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8007634:	4b3c      	ldr	r3, [pc, #240]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	1e5a      	subs	r2, r3, #1
 800763a:	493c      	ldr	r1, [pc, #240]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	6819      	ldr	r1, [r3, #0]
 8007648:	4838      	ldr	r0, [pc, #224]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4403      	add	r3, r0
 8007656:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8007658:	4b33      	ldr	r3, [pc, #204]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	1e5a      	subs	r2, r3, #1
 800765e:	4933      	ldr	r1, [pc, #204]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	440b      	add	r3, r1
 800766a:	3304      	adds	r3, #4
 800766c:	6819      	ldr	r1, [r3, #0]
 800766e:	482f      	ldr	r0, [pc, #188]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4403      	add	r3, r0
 800767c:	3304      	adds	r3, #4
 800767e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8007680:	4b29      	ldr	r3, [pc, #164]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	1e5a      	subs	r2, r3, #1
 8007686:	4929      	ldr	r1, [pc, #164]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	3308      	adds	r3, #8
 8007694:	6819      	ldr	r1, [r3, #0]
 8007696:	4825      	ldr	r0, [pc, #148]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4403      	add	r3, r0
 80076a4:	3308      	adds	r3, #8
 80076a6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80076a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	1e5a      	subs	r2, r3, #1
 80076ae:	491f      	ldr	r1, [pc, #124]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	330c      	adds	r3, #12
 80076bc:	6819      	ldr	r1, [r3, #0]
 80076be:	481b      	ldr	r0, [pc, #108]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4403      	add	r3, r0
 80076cc:	330c      	adds	r3, #12
 80076ce:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80076d0:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	4915      	ldr	r1, [pc, #84]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	3310      	adds	r3, #16
 80076e4:	6819      	ldr	r1, [r3, #0]
 80076e6:	4811      	ldr	r0, [pc, #68]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4613      	mov	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4403      	add	r3, r0
 80076f4:	3310      	adds	r3, #16
 80076f6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80076f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	1e5a      	subs	r2, r3, #1
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a09      	ldr	r2, [pc, #36]	@ (800772c <SYSVIEW_DeleteTask+0x174>)
 8007708:	4413      	add	r3, r2
 800770a:	2214      	movs	r2, #20
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f874 	bl	80077fc <memset>
    _NumTasks--;
 8007714:	4b04      	ldr	r3, [pc, #16]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3b01      	subs	r3, #1
 800771a:	4a03      	ldr	r2, [pc, #12]	@ (8007728 <SYSVIEW_DeleteTask+0x170>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e000      	b.n	8007722 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8007720:	bf00      	nop
  }
}
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	200199b0 	.word	0x200199b0
 800772c:	20019910 	.word	0x20019910

08007730 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	@ 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800773e:	f107 0314 	add.w	r3, r7, #20
 8007742:	2214      	movs	r2, #20
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f858 	bl	80077fc <memset>
  TaskInfo.TaskID     = TaskID;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800775c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	4618      	mov	r0, r3
 8007766:	f7ff f943 	bl	80069f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800776a:	bf00      	nop
 800776c:	3728      	adds	r7, #40	@ 0x28
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <sniprintf>:
 8007774:	b40c      	push	{r2, r3}
 8007776:	b530      	push	{r4, r5, lr}
 8007778:	4b17      	ldr	r3, [pc, #92]	@ (80077d8 <sniprintf+0x64>)
 800777a:	1e0c      	subs	r4, r1, #0
 800777c:	681d      	ldr	r5, [r3, #0]
 800777e:	b09d      	sub	sp, #116	@ 0x74
 8007780:	da08      	bge.n	8007794 <sniprintf+0x20>
 8007782:	238b      	movs	r3, #139	@ 0x8b
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	f04f 30ff 	mov.w	r0, #4294967295
 800778a:	b01d      	add	sp, #116	@ 0x74
 800778c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007790:	b002      	add	sp, #8
 8007792:	4770      	bx	lr
 8007794:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800779c:	bf14      	ite	ne
 800779e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077a2:	4623      	moveq	r3, r4
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077ac:	9002      	str	r0, [sp, #8]
 80077ae:	9006      	str	r0, [sp, #24]
 80077b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077b6:	ab21      	add	r3, sp, #132	@ 0x84
 80077b8:	a902      	add	r1, sp, #8
 80077ba:	4628      	mov	r0, r5
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f000 f9b3 	bl	8007b28 <_svfiprintf_r>
 80077c2:	1c43      	adds	r3, r0, #1
 80077c4:	bfbc      	itt	lt
 80077c6:	238b      	movlt	r3, #139	@ 0x8b
 80077c8:	602b      	strlt	r3, [r5, #0]
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	d0dd      	beq.n	800778a <sniprintf+0x16>
 80077ce:	9b02      	ldr	r3, [sp, #8]
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
 80077d4:	e7d9      	b.n	800778a <sniprintf+0x16>
 80077d6:	bf00      	nop
 80077d8:	20000014 	.word	0x20000014

080077dc <memcmp>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	3901      	subs	r1, #1
 80077e0:	4402      	add	r2, r0
 80077e2:	4290      	cmp	r0, r2
 80077e4:	d101      	bne.n	80077ea <memcmp+0xe>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e005      	b.n	80077f6 <memcmp+0x1a>
 80077ea:	7803      	ldrb	r3, [r0, #0]
 80077ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d001      	beq.n	80077f8 <memcmp+0x1c>
 80077f4:	1b18      	subs	r0, r3, r4
 80077f6:	bd10      	pop	{r4, pc}
 80077f8:	3001      	adds	r0, #1
 80077fa:	e7f2      	b.n	80077e2 <memcmp+0x6>

080077fc <memset>:
 80077fc:	4402      	add	r2, r0
 80077fe:	4603      	mov	r3, r0
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	f803 1b01 	strb.w	r1, [r3], #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <__errno>:
 800780c:	4b01      	ldr	r3, [pc, #4]	@ (8007814 <__errno+0x8>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20000014 	.word	0x20000014

08007818 <__libc_init_array>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4d0d      	ldr	r5, [pc, #52]	@ (8007850 <__libc_init_array+0x38>)
 800781c:	4c0d      	ldr	r4, [pc, #52]	@ (8007854 <__libc_init_array+0x3c>)
 800781e:	1b64      	subs	r4, r4, r5
 8007820:	10a4      	asrs	r4, r4, #2
 8007822:	2600      	movs	r6, #0
 8007824:	42a6      	cmp	r6, r4
 8007826:	d109      	bne.n	800783c <__libc_init_array+0x24>
 8007828:	4d0b      	ldr	r5, [pc, #44]	@ (8007858 <__libc_init_array+0x40>)
 800782a:	4c0c      	ldr	r4, [pc, #48]	@ (800785c <__libc_init_array+0x44>)
 800782c:	f000 fc66 	bl	80080fc <_init>
 8007830:	1b64      	subs	r4, r4, r5
 8007832:	10a4      	asrs	r4, r4, #2
 8007834:	2600      	movs	r6, #0
 8007836:	42a6      	cmp	r6, r4
 8007838:	d105      	bne.n	8007846 <__libc_init_array+0x2e>
 800783a:	bd70      	pop	{r4, r5, r6, pc}
 800783c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007840:	4798      	blx	r3
 8007842:	3601      	adds	r6, #1
 8007844:	e7ee      	b.n	8007824 <__libc_init_array+0xc>
 8007846:	f855 3b04 	ldr.w	r3, [r5], #4
 800784a:	4798      	blx	r3
 800784c:	3601      	adds	r6, #1
 800784e:	e7f2      	b.n	8007836 <__libc_init_array+0x1e>
 8007850:	080082d4 	.word	0x080082d4
 8007854:	080082d4 	.word	0x080082d4
 8007858:	080082d4 	.word	0x080082d4
 800785c:	080082d8 	.word	0x080082d8

08007860 <__retarget_lock_acquire_recursive>:
 8007860:	4770      	bx	lr

08007862 <__retarget_lock_release_recursive>:
 8007862:	4770      	bx	lr

08007864 <memcpy>:
 8007864:	440a      	add	r2, r1
 8007866:	4291      	cmp	r1, r2
 8007868:	f100 33ff 	add.w	r3, r0, #4294967295
 800786c:	d100      	bne.n	8007870 <memcpy+0xc>
 800786e:	4770      	bx	lr
 8007870:	b510      	push	{r4, lr}
 8007872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800787a:	4291      	cmp	r1, r2
 800787c:	d1f9      	bne.n	8007872 <memcpy+0xe>
 800787e:	bd10      	pop	{r4, pc}

08007880 <_free_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4605      	mov	r5, r0
 8007884:	2900      	cmp	r1, #0
 8007886:	d041      	beq.n	800790c <_free_r+0x8c>
 8007888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788c:	1f0c      	subs	r4, r1, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfb8      	it	lt
 8007892:	18e4      	addlt	r4, r4, r3
 8007894:	f000 f8e0 	bl	8007a58 <__malloc_lock>
 8007898:	4a1d      	ldr	r2, [pc, #116]	@ (8007910 <_free_r+0x90>)
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	b933      	cbnz	r3, 80078ac <_free_r+0x2c>
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	6014      	str	r4, [r2, #0]
 80078a2:	4628      	mov	r0, r5
 80078a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078a8:	f000 b8dc 	b.w	8007a64 <__malloc_unlock>
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d908      	bls.n	80078c2 <_free_r+0x42>
 80078b0:	6820      	ldr	r0, [r4, #0]
 80078b2:	1821      	adds	r1, r4, r0
 80078b4:	428b      	cmp	r3, r1
 80078b6:	bf01      	itttt	eq
 80078b8:	6819      	ldreq	r1, [r3, #0]
 80078ba:	685b      	ldreq	r3, [r3, #4]
 80078bc:	1809      	addeq	r1, r1, r0
 80078be:	6021      	streq	r1, [r4, #0]
 80078c0:	e7ed      	b.n	800789e <_free_r+0x1e>
 80078c2:	461a      	mov	r2, r3
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b10b      	cbz	r3, 80078cc <_free_r+0x4c>
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	d9fa      	bls.n	80078c2 <_free_r+0x42>
 80078cc:	6811      	ldr	r1, [r2, #0]
 80078ce:	1850      	adds	r0, r2, r1
 80078d0:	42a0      	cmp	r0, r4
 80078d2:	d10b      	bne.n	80078ec <_free_r+0x6c>
 80078d4:	6820      	ldr	r0, [r4, #0]
 80078d6:	4401      	add	r1, r0
 80078d8:	1850      	adds	r0, r2, r1
 80078da:	4283      	cmp	r3, r0
 80078dc:	6011      	str	r1, [r2, #0]
 80078de:	d1e0      	bne.n	80078a2 <_free_r+0x22>
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	6053      	str	r3, [r2, #4]
 80078e6:	4408      	add	r0, r1
 80078e8:	6010      	str	r0, [r2, #0]
 80078ea:	e7da      	b.n	80078a2 <_free_r+0x22>
 80078ec:	d902      	bls.n	80078f4 <_free_r+0x74>
 80078ee:	230c      	movs	r3, #12
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	e7d6      	b.n	80078a2 <_free_r+0x22>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	1821      	adds	r1, r4, r0
 80078f8:	428b      	cmp	r3, r1
 80078fa:	bf04      	itt	eq
 80078fc:	6819      	ldreq	r1, [r3, #0]
 80078fe:	685b      	ldreq	r3, [r3, #4]
 8007900:	6063      	str	r3, [r4, #4]
 8007902:	bf04      	itt	eq
 8007904:	1809      	addeq	r1, r1, r0
 8007906:	6021      	streq	r1, [r4, #0]
 8007908:	6054      	str	r4, [r2, #4]
 800790a:	e7ca      	b.n	80078a2 <_free_r+0x22>
 800790c:	bd38      	pop	{r3, r4, r5, pc}
 800790e:	bf00      	nop
 8007910:	20019af8 	.word	0x20019af8

08007914 <sbrk_aligned>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	4e0f      	ldr	r6, [pc, #60]	@ (8007954 <sbrk_aligned+0x40>)
 8007918:	460c      	mov	r4, r1
 800791a:	6831      	ldr	r1, [r6, #0]
 800791c:	4605      	mov	r5, r0
 800791e:	b911      	cbnz	r1, 8007926 <sbrk_aligned+0x12>
 8007920:	f000 fba6 	bl	8008070 <_sbrk_r>
 8007924:	6030      	str	r0, [r6, #0]
 8007926:	4621      	mov	r1, r4
 8007928:	4628      	mov	r0, r5
 800792a:	f000 fba1 	bl	8008070 <_sbrk_r>
 800792e:	1c43      	adds	r3, r0, #1
 8007930:	d103      	bne.n	800793a <sbrk_aligned+0x26>
 8007932:	f04f 34ff 	mov.w	r4, #4294967295
 8007936:	4620      	mov	r0, r4
 8007938:	bd70      	pop	{r4, r5, r6, pc}
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d0f8      	beq.n	8007936 <sbrk_aligned+0x22>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4628      	mov	r0, r5
 8007948:	f000 fb92 	bl	8008070 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d1f2      	bne.n	8007936 <sbrk_aligned+0x22>
 8007950:	e7ef      	b.n	8007932 <sbrk_aligned+0x1e>
 8007952:	bf00      	nop
 8007954:	20019af4 	.word	0x20019af4

08007958 <_malloc_r>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	1ccd      	adds	r5, r1, #3
 800795e:	f025 0503 	bic.w	r5, r5, #3
 8007962:	3508      	adds	r5, #8
 8007964:	2d0c      	cmp	r5, #12
 8007966:	bf38      	it	cc
 8007968:	250c      	movcc	r5, #12
 800796a:	2d00      	cmp	r5, #0
 800796c:	4606      	mov	r6, r0
 800796e:	db01      	blt.n	8007974 <_malloc_r+0x1c>
 8007970:	42a9      	cmp	r1, r5
 8007972:	d904      	bls.n	800797e <_malloc_r+0x26>
 8007974:	230c      	movs	r3, #12
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	2000      	movs	r0, #0
 800797a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a54 <_malloc_r+0xfc>
 8007982:	f000 f869 	bl	8007a58 <__malloc_lock>
 8007986:	f8d8 3000 	ldr.w	r3, [r8]
 800798a:	461c      	mov	r4, r3
 800798c:	bb44      	cbnz	r4, 80079e0 <_malloc_r+0x88>
 800798e:	4629      	mov	r1, r5
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff ffbf 	bl	8007914 <sbrk_aligned>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	4604      	mov	r4, r0
 800799a:	d158      	bne.n	8007a4e <_malloc_r+0xf6>
 800799c:	f8d8 4000 	ldr.w	r4, [r8]
 80079a0:	4627      	mov	r7, r4
 80079a2:	2f00      	cmp	r7, #0
 80079a4:	d143      	bne.n	8007a2e <_malloc_r+0xd6>
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	d04b      	beq.n	8007a42 <_malloc_r+0xea>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	4639      	mov	r1, r7
 80079ae:	4630      	mov	r0, r6
 80079b0:	eb04 0903 	add.w	r9, r4, r3
 80079b4:	f000 fb5c 	bl	8008070 <_sbrk_r>
 80079b8:	4581      	cmp	r9, r0
 80079ba:	d142      	bne.n	8007a42 <_malloc_r+0xea>
 80079bc:	6821      	ldr	r1, [r4, #0]
 80079be:	1a6d      	subs	r5, r5, r1
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ffa6 	bl	8007914 <sbrk_aligned>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d03a      	beq.n	8007a42 <_malloc_r+0xea>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	442b      	add	r3, r5
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	f8d8 3000 	ldr.w	r3, [r8]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	bb62      	cbnz	r2, 8007a34 <_malloc_r+0xdc>
 80079da:	f8c8 7000 	str.w	r7, [r8]
 80079de:	e00f      	b.n	8007a00 <_malloc_r+0xa8>
 80079e0:	6822      	ldr	r2, [r4, #0]
 80079e2:	1b52      	subs	r2, r2, r5
 80079e4:	d420      	bmi.n	8007a28 <_malloc_r+0xd0>
 80079e6:	2a0b      	cmp	r2, #11
 80079e8:	d917      	bls.n	8007a1a <_malloc_r+0xc2>
 80079ea:	1961      	adds	r1, r4, r5
 80079ec:	42a3      	cmp	r3, r4
 80079ee:	6025      	str	r5, [r4, #0]
 80079f0:	bf18      	it	ne
 80079f2:	6059      	strne	r1, [r3, #4]
 80079f4:	6863      	ldr	r3, [r4, #4]
 80079f6:	bf08      	it	eq
 80079f8:	f8c8 1000 	streq.w	r1, [r8]
 80079fc:	5162      	str	r2, [r4, r5]
 80079fe:	604b      	str	r3, [r1, #4]
 8007a00:	4630      	mov	r0, r6
 8007a02:	f000 f82f 	bl	8007a64 <__malloc_unlock>
 8007a06:	f104 000b 	add.w	r0, r4, #11
 8007a0a:	1d23      	adds	r3, r4, #4
 8007a0c:	f020 0007 	bic.w	r0, r0, #7
 8007a10:	1ac2      	subs	r2, r0, r3
 8007a12:	bf1c      	itt	ne
 8007a14:	1a1b      	subne	r3, r3, r0
 8007a16:	50a3      	strne	r3, [r4, r2]
 8007a18:	e7af      	b.n	800797a <_malloc_r+0x22>
 8007a1a:	6862      	ldr	r2, [r4, #4]
 8007a1c:	42a3      	cmp	r3, r4
 8007a1e:	bf0c      	ite	eq
 8007a20:	f8c8 2000 	streq.w	r2, [r8]
 8007a24:	605a      	strne	r2, [r3, #4]
 8007a26:	e7eb      	b.n	8007a00 <_malloc_r+0xa8>
 8007a28:	4623      	mov	r3, r4
 8007a2a:	6864      	ldr	r4, [r4, #4]
 8007a2c:	e7ae      	b.n	800798c <_malloc_r+0x34>
 8007a2e:	463c      	mov	r4, r7
 8007a30:	687f      	ldr	r7, [r7, #4]
 8007a32:	e7b6      	b.n	80079a2 <_malloc_r+0x4a>
 8007a34:	461a      	mov	r2, r3
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	42a3      	cmp	r3, r4
 8007a3a:	d1fb      	bne.n	8007a34 <_malloc_r+0xdc>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6053      	str	r3, [r2, #4]
 8007a40:	e7de      	b.n	8007a00 <_malloc_r+0xa8>
 8007a42:	230c      	movs	r3, #12
 8007a44:	6033      	str	r3, [r6, #0]
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f80c 	bl	8007a64 <__malloc_unlock>
 8007a4c:	e794      	b.n	8007978 <_malloc_r+0x20>
 8007a4e:	6005      	str	r5, [r0, #0]
 8007a50:	e7d6      	b.n	8007a00 <_malloc_r+0xa8>
 8007a52:	bf00      	nop
 8007a54:	20019af8 	.word	0x20019af8

08007a58 <__malloc_lock>:
 8007a58:	4801      	ldr	r0, [pc, #4]	@ (8007a60 <__malloc_lock+0x8>)
 8007a5a:	f7ff bf01 	b.w	8007860 <__retarget_lock_acquire_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20019af0 	.word	0x20019af0

08007a64 <__malloc_unlock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	@ (8007a6c <__malloc_unlock+0x8>)
 8007a66:	f7ff befc 	b.w	8007862 <__retarget_lock_release_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20019af0 	.word	0x20019af0

08007a70 <__ssputs_r>:
 8007a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a74:	688e      	ldr	r6, [r1, #8]
 8007a76:	461f      	mov	r7, r3
 8007a78:	42be      	cmp	r6, r7
 8007a7a:	680b      	ldr	r3, [r1, #0]
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	4690      	mov	r8, r2
 8007a82:	d82d      	bhi.n	8007ae0 <__ssputs_r+0x70>
 8007a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a8c:	d026      	beq.n	8007adc <__ssputs_r+0x6c>
 8007a8e:	6965      	ldr	r5, [r4, #20]
 8007a90:	6909      	ldr	r1, [r1, #16]
 8007a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a96:	eba3 0901 	sub.w	r9, r3, r1
 8007a9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a9e:	1c7b      	adds	r3, r7, #1
 8007aa0:	444b      	add	r3, r9
 8007aa2:	106d      	asrs	r5, r5, #1
 8007aa4:	429d      	cmp	r5, r3
 8007aa6:	bf38      	it	cc
 8007aa8:	461d      	movcc	r5, r3
 8007aaa:	0553      	lsls	r3, r2, #21
 8007aac:	d527      	bpl.n	8007afe <__ssputs_r+0x8e>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	f7ff ff52 	bl	8007958 <_malloc_r>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	b360      	cbz	r0, 8007b12 <__ssputs_r+0xa2>
 8007ab8:	6921      	ldr	r1, [r4, #16]
 8007aba:	464a      	mov	r2, r9
 8007abc:	f7ff fed2 	bl	8007864 <memcpy>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	6126      	str	r6, [r4, #16]
 8007ace:	6165      	str	r5, [r4, #20]
 8007ad0:	444e      	add	r6, r9
 8007ad2:	eba5 0509 	sub.w	r5, r5, r9
 8007ad6:	6026      	str	r6, [r4, #0]
 8007ad8:	60a5      	str	r5, [r4, #8]
 8007ada:	463e      	mov	r6, r7
 8007adc:	42be      	cmp	r6, r7
 8007ade:	d900      	bls.n	8007ae2 <__ssputs_r+0x72>
 8007ae0:	463e      	mov	r6, r7
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	f000 faa8 	bl	800803c <memmove>
 8007aec:	68a3      	ldr	r3, [r4, #8]
 8007aee:	1b9b      	subs	r3, r3, r6
 8007af0:	60a3      	str	r3, [r4, #8]
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	4433      	add	r3, r6
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	2000      	movs	r0, #0
 8007afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afe:	462a      	mov	r2, r5
 8007b00:	f000 fac6 	bl	8008090 <_realloc_r>
 8007b04:	4606      	mov	r6, r0
 8007b06:	2800      	cmp	r0, #0
 8007b08:	d1e0      	bne.n	8007acc <__ssputs_r+0x5c>
 8007b0a:	6921      	ldr	r1, [r4, #16]
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	f7ff feb7 	bl	8007880 <_free_r>
 8007b12:	230c      	movs	r3, #12
 8007b14:	f8ca 3000 	str.w	r3, [sl]
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	e7e9      	b.n	8007afa <__ssputs_r+0x8a>
	...

08007b28 <_svfiprintf_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	4698      	mov	r8, r3
 8007b2e:	898b      	ldrh	r3, [r1, #12]
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	b09d      	sub	sp, #116	@ 0x74
 8007b34:	4607      	mov	r7, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	d510      	bpl.n	8007b5e <_svfiprintf_r+0x36>
 8007b3c:	690b      	ldr	r3, [r1, #16]
 8007b3e:	b973      	cbnz	r3, 8007b5e <_svfiprintf_r+0x36>
 8007b40:	2140      	movs	r1, #64	@ 0x40
 8007b42:	f7ff ff09 	bl	8007958 <_malloc_r>
 8007b46:	6028      	str	r0, [r5, #0]
 8007b48:	6128      	str	r0, [r5, #16]
 8007b4a:	b930      	cbnz	r0, 8007b5a <_svfiprintf_r+0x32>
 8007b4c:	230c      	movs	r3, #12
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	b01d      	add	sp, #116	@ 0x74
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	2340      	movs	r3, #64	@ 0x40
 8007b5c:	616b      	str	r3, [r5, #20]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b62:	2320      	movs	r3, #32
 8007b64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b6c:	2330      	movs	r3, #48	@ 0x30
 8007b6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d0c <_svfiprintf_r+0x1e4>
 8007b72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b76:	f04f 0901 	mov.w	r9, #1
 8007b7a:	4623      	mov	r3, r4
 8007b7c:	469a      	mov	sl, r3
 8007b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b82:	b10a      	cbz	r2, 8007b88 <_svfiprintf_r+0x60>
 8007b84:	2a25      	cmp	r2, #37	@ 0x25
 8007b86:	d1f9      	bne.n	8007b7c <_svfiprintf_r+0x54>
 8007b88:	ebba 0b04 	subs.w	fp, sl, r4
 8007b8c:	d00b      	beq.n	8007ba6 <_svfiprintf_r+0x7e>
 8007b8e:	465b      	mov	r3, fp
 8007b90:	4622      	mov	r2, r4
 8007b92:	4629      	mov	r1, r5
 8007b94:	4638      	mov	r0, r7
 8007b96:	f7ff ff6b 	bl	8007a70 <__ssputs_r>
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f000 80a7 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007ba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ba2:	445a      	add	r2, fp
 8007ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 809f 	beq.w	8007cee <_svfiprintf_r+0x1c6>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bba:	f10a 0a01 	add.w	sl, sl, #1
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	9307      	str	r3, [sp, #28]
 8007bc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bc8:	4654      	mov	r4, sl
 8007bca:	2205      	movs	r2, #5
 8007bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd0:	484e      	ldr	r0, [pc, #312]	@ (8007d0c <_svfiprintf_r+0x1e4>)
 8007bd2:	f7f8 fb4d 	bl	8000270 <memchr>
 8007bd6:	9a04      	ldr	r2, [sp, #16]
 8007bd8:	b9d8      	cbnz	r0, 8007c12 <_svfiprintf_r+0xea>
 8007bda:	06d0      	lsls	r0, r2, #27
 8007bdc:	bf44      	itt	mi
 8007bde:	2320      	movmi	r3, #32
 8007be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007be4:	0711      	lsls	r1, r2, #28
 8007be6:	bf44      	itt	mi
 8007be8:	232b      	movmi	r3, #43	@ 0x2b
 8007bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007bee:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf4:	d015      	beq.n	8007c22 <_svfiprintf_r+0xfa>
 8007bf6:	9a07      	ldr	r2, [sp, #28]
 8007bf8:	4654      	mov	r4, sl
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	f04f 0c0a 	mov.w	ip, #10
 8007c00:	4621      	mov	r1, r4
 8007c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c06:	3b30      	subs	r3, #48	@ 0x30
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d94b      	bls.n	8007ca4 <_svfiprintf_r+0x17c>
 8007c0c:	b1b0      	cbz	r0, 8007c3c <_svfiprintf_r+0x114>
 8007c0e:	9207      	str	r2, [sp, #28]
 8007c10:	e014      	b.n	8007c3c <_svfiprintf_r+0x114>
 8007c12:	eba0 0308 	sub.w	r3, r0, r8
 8007c16:	fa09 f303 	lsl.w	r3, r9, r3
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	9304      	str	r3, [sp, #16]
 8007c1e:	46a2      	mov	sl, r4
 8007c20:	e7d2      	b.n	8007bc8 <_svfiprintf_r+0xa0>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	1d19      	adds	r1, r3, #4
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	9103      	str	r1, [sp, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bfbb      	ittet	lt
 8007c2e:	425b      	neglt	r3, r3
 8007c30:	f042 0202 	orrlt.w	r2, r2, #2
 8007c34:	9307      	strge	r3, [sp, #28]
 8007c36:	9307      	strlt	r3, [sp, #28]
 8007c38:	bfb8      	it	lt
 8007c3a:	9204      	strlt	r2, [sp, #16]
 8007c3c:	7823      	ldrb	r3, [r4, #0]
 8007c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c40:	d10a      	bne.n	8007c58 <_svfiprintf_r+0x130>
 8007c42:	7863      	ldrb	r3, [r4, #1]
 8007c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c46:	d132      	bne.n	8007cae <_svfiprintf_r+0x186>
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	9203      	str	r2, [sp, #12]
 8007c50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c54:	3402      	adds	r4, #2
 8007c56:	9305      	str	r3, [sp, #20]
 8007c58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d1c <_svfiprintf_r+0x1f4>
 8007c5c:	7821      	ldrb	r1, [r4, #0]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	4650      	mov	r0, sl
 8007c62:	f7f8 fb05 	bl	8000270 <memchr>
 8007c66:	b138      	cbz	r0, 8007c78 <_svfiprintf_r+0x150>
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	eba0 000a 	sub.w	r0, r0, sl
 8007c6e:	2240      	movs	r2, #64	@ 0x40
 8007c70:	4082      	lsls	r2, r0
 8007c72:	4313      	orrs	r3, r2
 8007c74:	3401      	adds	r4, #1
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7c:	4824      	ldr	r0, [pc, #144]	@ (8007d10 <_svfiprintf_r+0x1e8>)
 8007c7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c82:	2206      	movs	r2, #6
 8007c84:	f7f8 faf4 	bl	8000270 <memchr>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d036      	beq.n	8007cfa <_svfiprintf_r+0x1d2>
 8007c8c:	4b21      	ldr	r3, [pc, #132]	@ (8007d14 <_svfiprintf_r+0x1ec>)
 8007c8e:	bb1b      	cbnz	r3, 8007cd8 <_svfiprintf_r+0x1b0>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3307      	adds	r3, #7
 8007c94:	f023 0307 	bic.w	r3, r3, #7
 8007c98:	3308      	adds	r3, #8
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c9e:	4433      	add	r3, r6
 8007ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ca2:	e76a      	b.n	8007b7a <_svfiprintf_r+0x52>
 8007ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ca8:	460c      	mov	r4, r1
 8007caa:	2001      	movs	r0, #1
 8007cac:	e7a8      	b.n	8007c00 <_svfiprintf_r+0xd8>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cc0:	3a30      	subs	r2, #48	@ 0x30
 8007cc2:	2a09      	cmp	r2, #9
 8007cc4:	d903      	bls.n	8007cce <_svfiprintf_r+0x1a6>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d0c6      	beq.n	8007c58 <_svfiprintf_r+0x130>
 8007cca:	9105      	str	r1, [sp, #20]
 8007ccc:	e7c4      	b.n	8007c58 <_svfiprintf_r+0x130>
 8007cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e7f0      	b.n	8007cba <_svfiprintf_r+0x192>
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b0e      	ldr	r3, [pc, #56]	@ (8007d18 <_svfiprintf_r+0x1f0>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	1c42      	adds	r2, r0, #1
 8007cea:	4606      	mov	r6, r0
 8007cec:	d1d6      	bne.n	8007c9c <_svfiprintf_r+0x174>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	065b      	lsls	r3, r3, #25
 8007cf2:	f53f af2d 	bmi.w	8007b50 <_svfiprintf_r+0x28>
 8007cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cf8:	e72c      	b.n	8007b54 <_svfiprintf_r+0x2c>
 8007cfa:	ab03      	add	r3, sp, #12
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	462a      	mov	r2, r5
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <_svfiprintf_r+0x1f0>)
 8007d02:	a904      	add	r1, sp, #16
 8007d04:	4638      	mov	r0, r7
 8007d06:	f000 f879 	bl	8007dfc <_printf_i>
 8007d0a:	e7ed      	b.n	8007ce8 <_svfiprintf_r+0x1c0>
 8007d0c:	08008298 	.word	0x08008298
 8007d10:	080082a2 	.word	0x080082a2
 8007d14:	00000000 	.word	0x00000000
 8007d18:	08007a71 	.word	0x08007a71
 8007d1c:	0800829e 	.word	0x0800829e

08007d20 <_printf_common>:
 8007d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d24:	4616      	mov	r6, r2
 8007d26:	4698      	mov	r8, r3
 8007d28:	688a      	ldr	r2, [r1, #8]
 8007d2a:	690b      	ldr	r3, [r1, #16]
 8007d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d30:	4293      	cmp	r3, r2
 8007d32:	bfb8      	it	lt
 8007d34:	4613      	movlt	r3, r2
 8007d36:	6033      	str	r3, [r6, #0]
 8007d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d3c:	4607      	mov	r7, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	b10a      	cbz	r2, 8007d46 <_printf_common+0x26>
 8007d42:	3301      	adds	r3, #1
 8007d44:	6033      	str	r3, [r6, #0]
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	0699      	lsls	r1, r3, #26
 8007d4a:	bf42      	ittt	mi
 8007d4c:	6833      	ldrmi	r3, [r6, #0]
 8007d4e:	3302      	addmi	r3, #2
 8007d50:	6033      	strmi	r3, [r6, #0]
 8007d52:	6825      	ldr	r5, [r4, #0]
 8007d54:	f015 0506 	ands.w	r5, r5, #6
 8007d58:	d106      	bne.n	8007d68 <_printf_common+0x48>
 8007d5a:	f104 0a19 	add.w	sl, r4, #25
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	6832      	ldr	r2, [r6, #0]
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dc26      	bgt.n	8007db6 <_printf_common+0x96>
 8007d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d6c:	6822      	ldr	r2, [r4, #0]
 8007d6e:	3b00      	subs	r3, #0
 8007d70:	bf18      	it	ne
 8007d72:	2301      	movne	r3, #1
 8007d74:	0692      	lsls	r2, r2, #26
 8007d76:	d42b      	bmi.n	8007dd0 <_printf_common+0xb0>
 8007d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d7c:	4641      	mov	r1, r8
 8007d7e:	4638      	mov	r0, r7
 8007d80:	47c8      	blx	r9
 8007d82:	3001      	adds	r0, #1
 8007d84:	d01e      	beq.n	8007dc4 <_printf_common+0xa4>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	6922      	ldr	r2, [r4, #16]
 8007d8a:	f003 0306 	and.w	r3, r3, #6
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	bf02      	ittt	eq
 8007d92:	68e5      	ldreq	r5, [r4, #12]
 8007d94:	6833      	ldreq	r3, [r6, #0]
 8007d96:	1aed      	subeq	r5, r5, r3
 8007d98:	68a3      	ldr	r3, [r4, #8]
 8007d9a:	bf0c      	ite	eq
 8007d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da0:	2500      	movne	r5, #0
 8007da2:	4293      	cmp	r3, r2
 8007da4:	bfc4      	itt	gt
 8007da6:	1a9b      	subgt	r3, r3, r2
 8007da8:	18ed      	addgt	r5, r5, r3
 8007daa:	2600      	movs	r6, #0
 8007dac:	341a      	adds	r4, #26
 8007dae:	42b5      	cmp	r5, r6
 8007db0:	d11a      	bne.n	8007de8 <_printf_common+0xc8>
 8007db2:	2000      	movs	r0, #0
 8007db4:	e008      	b.n	8007dc8 <_printf_common+0xa8>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4652      	mov	r2, sl
 8007dba:	4641      	mov	r1, r8
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	47c8      	blx	r9
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d103      	bne.n	8007dcc <_printf_common+0xac>
 8007dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e7c6      	b.n	8007d5e <_printf_common+0x3e>
 8007dd0:	18e1      	adds	r1, r4, r3
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	2030      	movs	r0, #48	@ 0x30
 8007dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007dda:	4422      	add	r2, r4
 8007ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007de4:	3302      	adds	r3, #2
 8007de6:	e7c7      	b.n	8007d78 <_printf_common+0x58>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4622      	mov	r2, r4
 8007dec:	4641      	mov	r1, r8
 8007dee:	4638      	mov	r0, r7
 8007df0:	47c8      	blx	r9
 8007df2:	3001      	adds	r0, #1
 8007df4:	d0e6      	beq.n	8007dc4 <_printf_common+0xa4>
 8007df6:	3601      	adds	r6, #1
 8007df8:	e7d9      	b.n	8007dae <_printf_common+0x8e>
	...

08007dfc <_printf_i>:
 8007dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e00:	7e0f      	ldrb	r7, [r1, #24]
 8007e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e04:	2f78      	cmp	r7, #120	@ 0x78
 8007e06:	4691      	mov	r9, r2
 8007e08:	4680      	mov	r8, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	469a      	mov	sl, r3
 8007e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e12:	d807      	bhi.n	8007e24 <_printf_i+0x28>
 8007e14:	2f62      	cmp	r7, #98	@ 0x62
 8007e16:	d80a      	bhi.n	8007e2e <_printf_i+0x32>
 8007e18:	2f00      	cmp	r7, #0
 8007e1a:	f000 80d2 	beq.w	8007fc2 <_printf_i+0x1c6>
 8007e1e:	2f58      	cmp	r7, #88	@ 0x58
 8007e20:	f000 80b9 	beq.w	8007f96 <_printf_i+0x19a>
 8007e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e2c:	e03a      	b.n	8007ea4 <_printf_i+0xa8>
 8007e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e32:	2b15      	cmp	r3, #21
 8007e34:	d8f6      	bhi.n	8007e24 <_printf_i+0x28>
 8007e36:	a101      	add	r1, pc, #4	@ (adr r1, 8007e3c <_printf_i+0x40>)
 8007e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007ea9 	.word	0x08007ea9
 8007e44:	08007e25 	.word	0x08007e25
 8007e48:	08007e25 	.word	0x08007e25
 8007e4c:	08007e25 	.word	0x08007e25
 8007e50:	08007e25 	.word	0x08007e25
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	08007e25 	.word	0x08007e25
 8007e5c:	08007e25 	.word	0x08007e25
 8007e60:	08007e25 	.word	0x08007e25
 8007e64:	08007e25 	.word	0x08007e25
 8007e68:	08007fa9 	.word	0x08007fa9
 8007e6c:	08007ed3 	.word	0x08007ed3
 8007e70:	08007f63 	.word	0x08007f63
 8007e74:	08007e25 	.word	0x08007e25
 8007e78:	08007e25 	.word	0x08007e25
 8007e7c:	08007fcb 	.word	0x08007fcb
 8007e80:	08007e25 	.word	0x08007e25
 8007e84:	08007ed3 	.word	0x08007ed3
 8007e88:	08007e25 	.word	0x08007e25
 8007e8c:	08007e25 	.word	0x08007e25
 8007e90:	08007f6b 	.word	0x08007f6b
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	1d1a      	adds	r2, r3, #4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6032      	str	r2, [r6, #0]
 8007e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e09d      	b.n	8007fe4 <_printf_i+0x1e8>
 8007ea8:	6833      	ldr	r3, [r6, #0]
 8007eaa:	6820      	ldr	r0, [r4, #0]
 8007eac:	1d19      	adds	r1, r3, #4
 8007eae:	6031      	str	r1, [r6, #0]
 8007eb0:	0606      	lsls	r6, r0, #24
 8007eb2:	d501      	bpl.n	8007eb8 <_printf_i+0xbc>
 8007eb4:	681d      	ldr	r5, [r3, #0]
 8007eb6:	e003      	b.n	8007ec0 <_printf_i+0xc4>
 8007eb8:	0645      	lsls	r5, r0, #25
 8007eba:	d5fb      	bpl.n	8007eb4 <_printf_i+0xb8>
 8007ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ec0:	2d00      	cmp	r5, #0
 8007ec2:	da03      	bge.n	8007ecc <_printf_i+0xd0>
 8007ec4:	232d      	movs	r3, #45	@ 0x2d
 8007ec6:	426d      	negs	r5, r5
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ecc:	4859      	ldr	r0, [pc, #356]	@ (8008034 <_printf_i+0x238>)
 8007ece:	230a      	movs	r3, #10
 8007ed0:	e011      	b.n	8007ef6 <_printf_i+0xfa>
 8007ed2:	6821      	ldr	r1, [r4, #0]
 8007ed4:	6833      	ldr	r3, [r6, #0]
 8007ed6:	0608      	lsls	r0, r1, #24
 8007ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007edc:	d402      	bmi.n	8007ee4 <_printf_i+0xe8>
 8007ede:	0649      	lsls	r1, r1, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b2ad      	uxthmi	r5, r5
 8007ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ee6:	4853      	ldr	r0, [pc, #332]	@ (8008034 <_printf_i+0x238>)
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	bf14      	ite	ne
 8007eec:	230a      	movne	r3, #10
 8007eee:	2308      	moveq	r3, #8
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ef6:	6866      	ldr	r6, [r4, #4]
 8007ef8:	60a6      	str	r6, [r4, #8]
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	bfa2      	ittt	ge
 8007efe:	6821      	ldrge	r1, [r4, #0]
 8007f00:	f021 0104 	bicge.w	r1, r1, #4
 8007f04:	6021      	strge	r1, [r4, #0]
 8007f06:	b90d      	cbnz	r5, 8007f0c <_printf_i+0x110>
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	d04b      	beq.n	8007fa4 <_printf_i+0x1a8>
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f12:	fb03 5711 	mls	r7, r3, r1, r5
 8007f16:	5dc7      	ldrb	r7, [r0, r7]
 8007f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f1c:	462f      	mov	r7, r5
 8007f1e:	42bb      	cmp	r3, r7
 8007f20:	460d      	mov	r5, r1
 8007f22:	d9f4      	bls.n	8007f0e <_printf_i+0x112>
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d10b      	bne.n	8007f40 <_printf_i+0x144>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07df      	lsls	r7, r3, #31
 8007f2c:	d508      	bpl.n	8007f40 <_printf_i+0x144>
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	6861      	ldr	r1, [r4, #4]
 8007f32:	4299      	cmp	r1, r3
 8007f34:	bfde      	ittt	le
 8007f36:	2330      	movle	r3, #48	@ 0x30
 8007f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f40:	1b92      	subs	r2, r2, r6
 8007f42:	6122      	str	r2, [r4, #16]
 8007f44:	f8cd a000 	str.w	sl, [sp]
 8007f48:	464b      	mov	r3, r9
 8007f4a:	aa03      	add	r2, sp, #12
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	4640      	mov	r0, r8
 8007f50:	f7ff fee6 	bl	8007d20 <_printf_common>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d14a      	bne.n	8007fee <_printf_i+0x1f2>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	b004      	add	sp, #16
 8007f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	f043 0320 	orr.w	r3, r3, #32
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	4833      	ldr	r0, [pc, #204]	@ (8008038 <_printf_i+0x23c>)
 8007f6c:	2778      	movs	r7, #120	@ 0x78
 8007f6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	6831      	ldr	r1, [r6, #0]
 8007f76:	061f      	lsls	r7, r3, #24
 8007f78:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f7c:	d402      	bmi.n	8007f84 <_printf_i+0x188>
 8007f7e:	065f      	lsls	r7, r3, #25
 8007f80:	bf48      	it	mi
 8007f82:	b2ad      	uxthmi	r5, r5
 8007f84:	6031      	str	r1, [r6, #0]
 8007f86:	07d9      	lsls	r1, r3, #31
 8007f88:	bf44      	itt	mi
 8007f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f8e:	6023      	strmi	r3, [r4, #0]
 8007f90:	b11d      	cbz	r5, 8007f9a <_printf_i+0x19e>
 8007f92:	2310      	movs	r3, #16
 8007f94:	e7ac      	b.n	8007ef0 <_printf_i+0xf4>
 8007f96:	4827      	ldr	r0, [pc, #156]	@ (8008034 <_printf_i+0x238>)
 8007f98:	e7e9      	b.n	8007f6e <_printf_i+0x172>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	f023 0320 	bic.w	r3, r3, #32
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	e7f6      	b.n	8007f92 <_printf_i+0x196>
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	e7bd      	b.n	8007f24 <_printf_i+0x128>
 8007fa8:	6833      	ldr	r3, [r6, #0]
 8007faa:	6825      	ldr	r5, [r4, #0]
 8007fac:	6961      	ldr	r1, [r4, #20]
 8007fae:	1d18      	adds	r0, r3, #4
 8007fb0:	6030      	str	r0, [r6, #0]
 8007fb2:	062e      	lsls	r6, r5, #24
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	d501      	bpl.n	8007fbc <_printf_i+0x1c0>
 8007fb8:	6019      	str	r1, [r3, #0]
 8007fba:	e002      	b.n	8007fc2 <_printf_i+0x1c6>
 8007fbc:	0668      	lsls	r0, r5, #25
 8007fbe:	d5fb      	bpl.n	8007fb8 <_printf_i+0x1bc>
 8007fc0:	8019      	strh	r1, [r3, #0]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	6123      	str	r3, [r4, #16]
 8007fc6:	4616      	mov	r6, r2
 8007fc8:	e7bc      	b.n	8007f44 <_printf_i+0x148>
 8007fca:	6833      	ldr	r3, [r6, #0]
 8007fcc:	1d1a      	adds	r2, r3, #4
 8007fce:	6032      	str	r2, [r6, #0]
 8007fd0:	681e      	ldr	r6, [r3, #0]
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7f8 f94a 	bl	8000270 <memchr>
 8007fdc:	b108      	cbz	r0, 8007fe2 <_printf_i+0x1e6>
 8007fde:	1b80      	subs	r0, r0, r6
 8007fe0:	6060      	str	r0, [r4, #4]
 8007fe2:	6863      	ldr	r3, [r4, #4]
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fec:	e7aa      	b.n	8007f44 <_printf_i+0x148>
 8007fee:	6923      	ldr	r3, [r4, #16]
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	47d0      	blx	sl
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d0ad      	beq.n	8007f58 <_printf_i+0x15c>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	079b      	lsls	r3, r3, #30
 8008000:	d413      	bmi.n	800802a <_printf_i+0x22e>
 8008002:	68e0      	ldr	r0, [r4, #12]
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	4298      	cmp	r0, r3
 8008008:	bfb8      	it	lt
 800800a:	4618      	movlt	r0, r3
 800800c:	e7a6      	b.n	8007f5c <_printf_i+0x160>
 800800e:	2301      	movs	r3, #1
 8008010:	4632      	mov	r2, r6
 8008012:	4649      	mov	r1, r9
 8008014:	4640      	mov	r0, r8
 8008016:	47d0      	blx	sl
 8008018:	3001      	adds	r0, #1
 800801a:	d09d      	beq.n	8007f58 <_printf_i+0x15c>
 800801c:	3501      	adds	r5, #1
 800801e:	68e3      	ldr	r3, [r4, #12]
 8008020:	9903      	ldr	r1, [sp, #12]
 8008022:	1a5b      	subs	r3, r3, r1
 8008024:	42ab      	cmp	r3, r5
 8008026:	dcf2      	bgt.n	800800e <_printf_i+0x212>
 8008028:	e7eb      	b.n	8008002 <_printf_i+0x206>
 800802a:	2500      	movs	r5, #0
 800802c:	f104 0619 	add.w	r6, r4, #25
 8008030:	e7f5      	b.n	800801e <_printf_i+0x222>
 8008032:	bf00      	nop
 8008034:	080082a9 	.word	0x080082a9
 8008038:	080082ba 	.word	0x080082ba

0800803c <memmove>:
 800803c:	4288      	cmp	r0, r1
 800803e:	b510      	push	{r4, lr}
 8008040:	eb01 0402 	add.w	r4, r1, r2
 8008044:	d902      	bls.n	800804c <memmove+0x10>
 8008046:	4284      	cmp	r4, r0
 8008048:	4623      	mov	r3, r4
 800804a:	d807      	bhi.n	800805c <memmove+0x20>
 800804c:	1e43      	subs	r3, r0, #1
 800804e:	42a1      	cmp	r1, r4
 8008050:	d008      	beq.n	8008064 <memmove+0x28>
 8008052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800805a:	e7f8      	b.n	800804e <memmove+0x12>
 800805c:	4402      	add	r2, r0
 800805e:	4601      	mov	r1, r0
 8008060:	428a      	cmp	r2, r1
 8008062:	d100      	bne.n	8008066 <memmove+0x2a>
 8008064:	bd10      	pop	{r4, pc}
 8008066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800806a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800806e:	e7f7      	b.n	8008060 <memmove+0x24>

08008070 <_sbrk_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d06      	ldr	r5, [pc, #24]	@ (800808c <_sbrk_r+0x1c>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	602b      	str	r3, [r5, #0]
 800807c:	f7f8 fe3c 	bl	8000cf8 <_sbrk>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_sbrk_r+0x1a>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_sbrk_r+0x1a>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	20019aec 	.word	0x20019aec

08008090 <_realloc_r>:
 8008090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008094:	4680      	mov	r8, r0
 8008096:	4615      	mov	r5, r2
 8008098:	460c      	mov	r4, r1
 800809a:	b921      	cbnz	r1, 80080a6 <_realloc_r+0x16>
 800809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080a0:	4611      	mov	r1, r2
 80080a2:	f7ff bc59 	b.w	8007958 <_malloc_r>
 80080a6:	b92a      	cbnz	r2, 80080b4 <_realloc_r+0x24>
 80080a8:	f7ff fbea 	bl	8007880 <_free_r>
 80080ac:	2400      	movs	r4, #0
 80080ae:	4620      	mov	r0, r4
 80080b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080b4:	f000 f81a 	bl	80080ec <_malloc_usable_size_r>
 80080b8:	4285      	cmp	r5, r0
 80080ba:	4606      	mov	r6, r0
 80080bc:	d802      	bhi.n	80080c4 <_realloc_r+0x34>
 80080be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80080c2:	d8f4      	bhi.n	80080ae <_realloc_r+0x1e>
 80080c4:	4629      	mov	r1, r5
 80080c6:	4640      	mov	r0, r8
 80080c8:	f7ff fc46 	bl	8007958 <_malloc_r>
 80080cc:	4607      	mov	r7, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	d0ec      	beq.n	80080ac <_realloc_r+0x1c>
 80080d2:	42b5      	cmp	r5, r6
 80080d4:	462a      	mov	r2, r5
 80080d6:	4621      	mov	r1, r4
 80080d8:	bf28      	it	cs
 80080da:	4632      	movcs	r2, r6
 80080dc:	f7ff fbc2 	bl	8007864 <memcpy>
 80080e0:	4621      	mov	r1, r4
 80080e2:	4640      	mov	r0, r8
 80080e4:	f7ff fbcc 	bl	8007880 <_free_r>
 80080e8:	463c      	mov	r4, r7
 80080ea:	e7e0      	b.n	80080ae <_realloc_r+0x1e>

080080ec <_malloc_usable_size_r>:
 80080ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f0:	1f18      	subs	r0, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfbc      	itt	lt
 80080f6:	580b      	ldrlt	r3, [r1, r0]
 80080f8:	18c0      	addlt	r0, r0, r3
 80080fa:	4770      	bx	lr

080080fc <_init>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr

08008108 <_fini>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	bf00      	nop
 800810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810e:	bc08      	pop	{r3}
 8008110:	469e      	mov	lr, r3
 8008112:	4770      	bx	lr
