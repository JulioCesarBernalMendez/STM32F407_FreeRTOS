
App_013_Example_5.1_Blocking_When_Receiving_From_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08007984  08007984  00008984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007b5c  08007b5c  00008b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b64  08007b64  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b64  08007b64  00008b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b68  08007b68  00008b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007b6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00019a30  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019a94  20019a94  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fa1  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032df  00000000  00000000  00021035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  00024318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001107  00000000  00000000  00025908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251c8  00000000  00000000  00026a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019eb5  00000000  00000000  0004bbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb6d7  00000000  00000000  00065a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00151163  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006110  00000000  00000000  001511a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d2  00000000  00000000  001572b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800796c 	.word	0x0800796c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800796c 	.word	0x0800796c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb83 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f849 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8db 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8af 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <main+0x84>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a1a      	ldr	r2, [pc, #104]	@ (8000684 <main+0x84>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000622:	f005 f81b 	bl	800565c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 8000626:	f005 fd71 	bl	800610c <SEGGER_SYSVIEW_Start>

  /* the queue is created to hold a maximum of 5 values, each of which is
     large enough to hold a variable of type int32_t */
  xQueue = xQueueCreate( 5, sizeof( int32_t ) );
 800062a:	2200      	movs	r2, #0
 800062c:	2104      	movs	r1, #4
 800062e:	2005      	movs	r0, #5
 8000630:	f002 faf2 	bl	8002c18 <xQueueGenericCreate>
 8000634:	4603      	mov	r3, r0
 8000636:	4a14      	ldr	r2, [pc, #80]	@ (8000688 <main+0x88>)
 8000638:	6013      	str	r3, [r2, #0]
  /* Create two instances of the task that will send to the queue.
     The task parameter is used to pass the value that the task will
     write to the queue, so one task will continuously write 100 to the queue,
     while the other task will continuously write 200 to the queue.
     Both tasks are create at priority 1 */
  xTaskCreate( vSenderTask, "Sender 1", 1000, ( void * ) 100, 1, NULL );
 800063a:	2300      	movs	r3, #0
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000648:	4910      	ldr	r1, [pc, #64]	@ (800068c <main+0x8c>)
 800064a:	4811      	ldr	r0, [pc, #68]	@ (8000690 <main+0x90>)
 800064c:	f002 ff53 	bl	80034f6 <xTaskCreate>
  xTaskCreate( vSenderTask, "Sender 2", 1000, ( void * ) 200, 1, NULL );
 8000650:	2300      	movs	r3, #0
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2301      	movs	r3, #1
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	23c8      	movs	r3, #200	@ 0xc8
 800065a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800065e:	490d      	ldr	r1, [pc, #52]	@ (8000694 <main+0x94>)
 8000660:	480b      	ldr	r0, [pc, #44]	@ (8000690 <main+0x90>)
 8000662:	f002 ff48 	bl	80034f6 <xTaskCreate>

  /* Create the task that will read from the queue.
     The task is create with priority 2, so above the priority of the sender tasks */
  xTaskCreate( vReceiverTask, "Receiver", 1000, NULL, 2, NULL );
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000674:	4908      	ldr	r1, [pc, #32]	@ (8000698 <main+0x98>)
 8000676:	4809      	ldr	r0, [pc, #36]	@ (800069c <main+0x9c>)
 8000678:	f002 ff3d 	bl	80034f6 <xTaskCreate>


  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 800067c:	f003 f8f4 	bl	8003868 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <main+0x80>
 8000684:	e0001000 	.word	0xe0001000
 8000688:	200000c8 	.word	0x200000c8
 800068c:	08007984 	.word	0x08007984
 8000690:	08000929 	.word	0x08000929
 8000694:	08007990 	.word	0x08007990
 8000698:	0800799c 	.word	0x0800799c
 800069c:	08000965 	.word	0x08000965

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	@ 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fcdc 	bl	800706c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	@ (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	@ (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	@ (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000714:	2332      	movs	r3, #50	@ 0x32
 8000716:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800071c:	2307      	movs	r3, #7
 800071e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fdcd 	bl	80012c4 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f964 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f001 f82e 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 f94d 	bl	80009fc <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	@ 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 fcf6 	bl	800219c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f921 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000080 	.word	0x20000080
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a3b      	ldr	r2, [pc, #236]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b39      	ldr	r3, [pc, #228]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a34      	ldr	r2, [pc, #208]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a2d      	ldr	r2, [pc, #180]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a26      	ldr	r2, [pc, #152]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000854:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <MX_GPIO_Init+0x110>)
 8000856:	f000 fd1b 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	481b      	ldr	r0, [pc, #108]	@ (80008dc <MX_GPIO_Init+0x114>)
 8000870:	f000 fb72 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000874:	2304      	movs	r3, #4
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4816      	ldr	r0, [pc, #88]	@ (80008e0 <MX_GPIO_Init+0x118>)
 8000888:	f000 fb66 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800088c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_GPIO_Init+0x110>)
 80008a6:	f000 fb57 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ba:	2306      	movs	r3, #6
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_GPIO_Init+0x11c>)
 80008c6:	f000 fb47 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3728      	adds	r7, #40	@ 0x28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020400 	.word	0x40020400
 80008e4:	40020800 	.word	0x40020800

080008e8 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e00b      	b.n	8000910 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	18d1      	adds	r1, r2, r3
 80008fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000902:	2201      	movs	r2, #1
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f001 fc99 	bl	800223c <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1ed      	bne.n	80008f8 <UART2_Print_Text+0x10>
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <vSenderTask>:

static void vSenderTask( void *pvParameters )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Two instances of this task are created so the value that is sent to the queue
     is passed in via the task parameter - this way each instance can use a different
     value.
     The queue was created to hold values of type int32_t, so cast the parameter to
     the required type */
  lValueToSend = ( int32_t ) pvParameters;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60bb      	str	r3, [r7, #8]
       The third parameter is the Block time - the time the task should be
       kept in the Blocked state to wait for space to become available on
       the queue should the queue already be full.
       In this case a block time is not specified because the queue should
       never contain more than one item, and therefore never be full. */
    xStatus = xQueueSendToBack( xQueue, &lValueToSend, 0 );
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <vSenderTask+0x30>)
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	f107 0108 	add.w	r1, r7, #8
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	f002 f9e6 	bl	8002d10 <xQueueGenericSend>
 8000944:	60f8      	str	r0, [r7, #12]

    if ( xStatus != pdPASS )
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d0f3      	beq.n	8000934 <vSenderTask+0xc>
    {
      /* the send operation could not complete because the queue was full
         - this must be an error as the queue should never contain more
           than one item! */
      UART2_Print_Text( &huart2, "Could not send to the queue\n\r" );
 800094c:	4903      	ldr	r1, [pc, #12]	@ (800095c <vSenderTask+0x34>)
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <vSenderTask+0x38>)
 8000950:	f7ff ffca 	bl	80008e8 <UART2_Print_Text>
    xStatus = xQueueSendToBack( xQueue, &lValueToSend, 0 );
 8000954:	e7ee      	b.n	8000934 <vSenderTask+0xc>
 8000956:	bf00      	nop
 8000958:	200000c8 	.word	0x200000c8
 800095c:	080079a8 	.word	0x080079a8
 8000960:	20000080 	.word	0x20000080

08000964 <vReceiverTask>:
    }
  }
}

static void vReceiverTask( void *pvParameters )
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  /* declare the variable that will hold the status of xQueueReceive() */
  BaseType_t xStatus;
  
  /* get 100 milliseconds equivalency in tick interrupts */
  const TickType_t xTicksToWait = pdMS_TO_TICKS( 100 );
 800096c:	2364      	movs	r3, #100	@ 0x64
 800096e:	617b      	str	r3, [r7, #20]
  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* this call should always find the queue empty because this task
       will immediately remove any data that is written to the queue */
    if ( uxQueueMessagesWaiting( xQueue ) != 0 )
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <vReceiverTask+0x5c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fbc7 	bl	8003108 <uxQueueMessagesWaiting>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <vReceiverTask+0x24>
    {
      UART2_Print_Text( &huart2, "Queue should have been empty!\n\r" );
 8000980:	4910      	ldr	r1, [pc, #64]	@ (80009c4 <vReceiverTask+0x60>)
 8000982:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <vReceiverTask+0x64>)
 8000984:	f7ff ffb0 	bl	80008e8 <UART2_Print_Text>
       variable that has the required size to hold the received data.
       
       The last parameter is the block time - the maximum amount of time
       that the task will remain in the Blocked state to wait for data to
       be available should the queue already be empty */
    xStatus = xQueueReceive( xQueue, &lReceivedValue, xTicksToWait );
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <vReceiverTask+0x5c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f107 010c 	add.w	r1, r7, #12
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	4618      	mov	r0, r3
 8000994:	f002 faca 	bl	8002f2c <xQueueReceive>
 8000998:	6138      	str	r0, [r7, #16]

    if ( xStatus == pdPASS )
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10a      	bne.n	80009b6 <vReceiverTask+0x52>
    {
      /* data was successfully received from the queue,
         print out the received value */
      sprintf( pcReceivedQueue, "Received = %ld\n\r", lReceivedValue );
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	461a      	mov	r2, r3
 80009a4:	4909      	ldr	r1, [pc, #36]	@ (80009cc <vReceiverTask+0x68>)
 80009a6:	480a      	ldr	r0, [pc, #40]	@ (80009d0 <vReceiverTask+0x6c>)
 80009a8:	f006 fb30 	bl	800700c <siprintf>
      UART2_Print_Text( &huart2, ( const char * ) pcReceivedQueue );
 80009ac:	4908      	ldr	r1, [pc, #32]	@ (80009d0 <vReceiverTask+0x6c>)
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <vReceiverTask+0x64>)
 80009b0:	f7ff ff9a 	bl	80008e8 <UART2_Print_Text>
 80009b4:	e7dc      	b.n	8000970 <vReceiverTask+0xc>
    else
    {
      /* Data was not received from the queue even after waiting for 100ms.
        This must be an error as the sending tasks are free running and will
        be continuously writing to the queue */
      UART2_Print_Text( &huart2, "Could not receive from the queue\n\r" );
 80009b6:	4907      	ldr	r1, [pc, #28]	@ (80009d4 <vReceiverTask+0x70>)
 80009b8:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <vReceiverTask+0x64>)
 80009ba:	f7ff ff95 	bl	80008e8 <UART2_Print_Text>
    if ( uxQueueMessagesWaiting( xQueue ) != 0 )
 80009be:	e7d7      	b.n	8000970 <vReceiverTask+0xc>
 80009c0:	200000c8 	.word	0x200000c8
 80009c4:	080079c8 	.word	0x080079c8
 80009c8:	20000080 	.word	0x20000080
 80009cc:	080079e8 	.word	0x080079e8
 80009d0:	200000cc 	.word	0x200000cc
 80009d4:	080079fc 	.word	0x080079fc

080009d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ea:	f000 f9b3 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40001000 	.word	0x40001000

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 fa51 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <HAL_UART_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12b      	bne.n	8000ad2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab2:	230c      	movs	r3, #12
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ace:	f000 fa43 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <HAL_InitTick+0xe4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	4a32      	ldr	r2, [pc, #200]	@ (8000bcc <HAL_InitTick+0xe4>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b08:	4b30      	ldr	r3, [pc, #192]	@ (8000bcc <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b14:	f107 0210 	add.w	r2, r7, #16
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 f868 	bl	8001bf4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d103      	bne.n	8000b36 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2e:	f001 f839 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000b32:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b34:	e004      	b.n	8000b40 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b36:	f001 f835 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b42:	4a23      	ldr	r2, [pc, #140]	@ (8000bd0 <HAL_InitTick+0xe8>)
 8000b44:	fba2 2303 	umull	r2, r3, r2, r3
 8000b48:	0c9b      	lsrs	r3, r3, #18
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	@ (8000bd8 <HAL_InitTick+0xf0>)
 8000b52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b74:	4817      	ldr	r0, [pc, #92]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b76:	f001 f86f 	bl	8001c58 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d11b      	bne.n	8000bc0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b88:	4812      	ldr	r0, [pc, #72]	@ (8000bd4 <HAL_InitTick+0xec>)
 8000b8a:	f001 f8bf 	bl	8001d0c <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d111      	bne.n	8000bc0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b9c:	2036      	movs	r0, #54	@ 0x36
 8000b9e:	f000 f9cd 	bl	8000f3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d808      	bhi.n	8000bba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2036      	movs	r0, #54	@ 0x36
 8000bae:	f000 f9a9 	bl	8000f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_InitTick+0xf4>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e002      	b.n	8000bc0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3738      	adds	r7, #56	@ 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	431bde83 	.word	0x431bde83
 8000bd4:	200000e0 	.word	0x200000e0
 8000bd8:	40001000 	.word	0x40001000
 8000bdc:	20000004 	.word	0x20000004

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <NMI_Handler+0x4>

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	@ (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f001 f8e5 	bl	8001dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000e0 	.word	0x200000e0

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f006 fa0e 	bl	800707c <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	@ (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	@ (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000128 	.word	0x20000128
 8000c94:	20019a98 	.word	0x20019a98

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f006 f9cd 	bl	8007088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc87 	bl	8000600 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d00:	08007b6c 	.word	0x08007b6c
  ldr r2, =_sbss
 8000d04:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d08:	20019a94 	.word	0x20019a94

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f8d8 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fed2 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe60 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	2000012c 	.word	0x2000012c

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	2000012c 	.word	0x2000012c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	@ (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	@ (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	@ 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	@ 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e16b      	b.n	800124c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 815a 	bne.w	8001246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b4 	beq.w	8001246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b60      	ldr	r3, [pc, #384]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001264 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001268 <HAL_GPIO_Init+0x310>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	@ (8001270 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	@ (8001274 <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	@ (8001278 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4e      	ldr	r2, [pc, #312]	@ (800127c <HAL_GPIO_Init+0x324>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4d      	ldr	r2, [pc, #308]	@ (8001280 <HAL_GPIO_Init+0x328>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4c      	ldr	r2, [pc, #304]	@ (8001284 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4b      	ldr	r2, [pc, #300]	@ (8001288 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x20a>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	@ (8001268 <HAL_GPIO_Init+0x310>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b30      	ldr	r3, [pc, #192]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_GPIO_Init+0x334>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae90 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	@ 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e267      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4b88      	ldr	r3, [pc, #544]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b85      	ldr	r3, [pc, #532]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b82      	ldr	r3, [pc, #520]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b7e      	ldr	r3, [pc, #504]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e242      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b76      	ldr	r3, [pc, #472]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a75      	ldr	r2, [pc, #468]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b70      	ldr	r3, [pc, #448]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6d      	ldr	r3, [pc, #436]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6c      	ldr	r2, [pc, #432]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b69      	ldr	r3, [pc, #420]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b66      	ldr	r3, [pc, #408]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcfe 	bl	8000d7c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcfa 	bl	8000d7c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	@ 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e207      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5b      	ldr	r3, [pc, #364]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcea 	bl	8000d7c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fce6 	bl	8000d7c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	@ 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f3      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b4a      	ldr	r3, [pc, #296]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b44      	ldr	r3, [pc, #272]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3b      	ldr	r3, [pc, #236]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4937      	ldr	r1, [pc, #220]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <HAL_RCC_OscConfig+0x244>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc9f 	bl	8000d7c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc9b 	bl	8000d7c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a8      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4925      	ldr	r1, [pc, #148]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_RCC_OscConfig+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc7e 	bl	8000d7c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc7a 	bl	8000d7c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e187      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <HAL_RCC_OscConfig+0x248>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc5e 	bl	8000d7c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc5a 	bl	8000d7c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e167      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_RCC_OscConfig+0x240>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <HAL_RCC_OscConfig+0x248>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc47 	bl	8000d7c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc43 	bl	8000d7c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d907      	bls.n	8001510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e150      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b88      	ldr	r3, [pc, #544]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ea      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8097 	beq.w	8001658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b7d      	ldr	r3, [pc, #500]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	4a7c      	ldr	r2, [pc, #496]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	@ 0x40
 800154a:	4b7a      	ldr	r3, [pc, #488]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b77      	ldr	r3, [pc, #476]	@ (8001738 <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	@ (8001738 <HAL_RCC_OscConfig+0x474>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fc03 	bl	8000d7c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fbff 	bl	8000d7c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e10c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_RCC_OscConfig+0x474>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x2ea>
 80015a0:	4b64      	ldr	r3, [pc, #400]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a63      	ldr	r2, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x30c>
 80015b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015d0:	4b58      	ldr	r3, [pc, #352]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a57      	ldr	r2, [pc, #348]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
 80015dc:	4b55      	ldr	r3, [pc, #340]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015e0:	4a54      	ldr	r2, [pc, #336]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbc4 	bl	8000d7c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbc0 	bl	8000d7c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0cb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b49      	ldr	r3, [pc, #292]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x334>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fbae 	bl	8000d7c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fbaa 	bl	8000d7c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b5      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	4b3e      	ldr	r3, [pc, #248]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a1 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001662:	4b34      	ldr	r3, [pc, #208]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d05c      	beq.n	8001728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d141      	bne.n	80016fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	@ (800173c <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb7e 	bl	8000d7c <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb7a 	bl	8000d7c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e087      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	491b      	ldr	r1, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <HAL_RCC_OscConfig+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb53 	bl	8000d7c <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb4f 	bl	8000d7c <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e05c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x416>
 80016f8:	e054      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb3c 	bl	8000d7c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb38 	bl	8000d7c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e045      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e038      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
 800173c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d028      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa6a 	bl	8000d7c <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa66 	bl	8000d7c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	@ (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f8c4 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	08007ae8 	.word	0x08007ae8
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b094      	sub	sp, #80	@ 0x50
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	647b      	str	r3, [r7, #68]	@ 0x44
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b79      	ldr	r3, [pc, #484]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80e1 	bhi.w	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0db      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b73      	ldr	r3, [pc, #460]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019b8:	e0db      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b73      	ldr	r3, [pc, #460]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80019bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019be:	e0d8      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	1a51      	subs	r1, r2, r1
 8001a0e:	6139      	str	r1, [r7, #16]
 8001a10:	4629      	mov	r1, r5
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a24:	4659      	mov	r1, fp
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4651      	mov	r1, sl
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4651      	mov	r1, sl
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4651      	mov	r1, sl
 8001a34:	ebb2 0801 	subs.w	r8, r2, r1
 8001a38:	4659      	mov	r1, fp
 8001a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	eb18 0303 	adds.w	r3, r8, r3
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	462b      	mov	r3, r5
 8001a60:	eb49 0303 	adc.w	r3, r9, r3
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a72:	4629      	mov	r1, r5
 8001a74:	024b      	lsls	r3, r1, #9
 8001a76:	4621      	mov	r1, r4
 8001a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	024a      	lsls	r2, r1, #9
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a86:	2200      	movs	r2, #0
 8001a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a90:	f7fe fc3e 	bl	8000310 <__aeabi_uldivmod>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a9c:	e058      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0159      	lsls	r1, r3, #5
 8001ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aca:	0150      	lsls	r0, r2, #5
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af0:	ebb2 040a 	subs.w	r4, r2, sl
 8001af4:	eb63 050b 	sbc.w	r5, r3, fp
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00eb      	lsls	r3, r5, #3
 8001b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b06:	00e2      	lsls	r2, r4, #3
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	18e3      	adds	r3, r4, r3
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	464b      	mov	r3, r9
 8001b14:	eb45 0303 	adc.w	r3, r5, r3
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	61fa      	str	r2, [r7, #28]
 8001b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b44:	f7fe fbe4 	bl	8000310 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3750      	adds	r7, #80	@ 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	@ (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08007af8 	.word	0x08007af8

08001bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bd0:	f7ff ffdc 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	0b5b      	lsrs	r3, r3, #13
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	4903      	ldr	r1, [pc, #12]	@ (8001bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be2:	5ccb      	ldrb	r3, [r1, r3]
 8001be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08007af8 	.word	0x08007af8

08001bf4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	220f      	movs	r2, #15
 8001c02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c04:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0203 	and.w	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	@ (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	08db      	lsrs	r3, r3, #3
 8001c2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_RCC_GetClockConfig+0x60>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0207 	and.w	r2, r3, #7
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e041      	b.n	8001cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f839 	bl	8001cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f000 f9c0 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d001      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e04e      	b.n	8001dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4e:	d01d      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a18      	ldr	r2, [pc, #96]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d111      	bne.n	8001db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d010      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dae:	e007      	b.n	8001dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40010400 	.word	0x40010400
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40001800 	.word	0x40001800

08001dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8d2 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8c4 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8d5 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0204 	mvn.w	r2, #4
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8ac 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f89e 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8af 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0208 	mvn.w	r2, #8
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f886 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f878 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f889 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0210 	mvn.w	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f860 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f852 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f863 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0201 	mvn.w	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fd40 	bl	80009d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f906 	bl	8002188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f834 	bl	8002008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0220 	mvn.w	r2, #32
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8d8 	bl	8002174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a46      	ldr	r2, [pc, #280]	@ (8002148 <TIM_Base_SetConfig+0x12c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203a:	d00f      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a43      	ldr	r2, [pc, #268]	@ (800214c <TIM_Base_SetConfig+0x130>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <TIM_Base_SetConfig+0x134>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a41      	ldr	r2, [pc, #260]	@ (8002154 <TIM_Base_SetConfig+0x138>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	@ (8002158 <TIM_Base_SetConfig+0x13c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a35      	ldr	r2, [pc, #212]	@ (8002148 <TIM_Base_SetConfig+0x12c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d027      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a32      	ldr	r2, [pc, #200]	@ (800214c <TIM_Base_SetConfig+0x130>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d023      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a31      	ldr	r2, [pc, #196]	@ (8002150 <TIM_Base_SetConfig+0x134>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <TIM_Base_SetConfig+0x138>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2f      	ldr	r2, [pc, #188]	@ (8002158 <TIM_Base_SetConfig+0x13c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	@ (800215c <TIM_Base_SetConfig+0x140>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002160 <TIM_Base_SetConfig+0x144>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002164 <TIM_Base_SetConfig+0x148>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002168 <TIM_Base_SetConfig+0x14c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2a      	ldr	r2, [pc, #168]	@ (800216c <TIM_Base_SetConfig+0x150>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <TIM_Base_SetConfig+0x154>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a10      	ldr	r2, [pc, #64]	@ (8002148 <TIM_Base_SetConfig+0x12c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_Base_SetConfig+0xf8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <TIM_Base_SetConfig+0x13c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d103      	bne.n	800211c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f023 0201 	bic.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	611a      	str	r2, [r3, #16]
  }
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40010000 	.word	0x40010000
 800214c:	40000400 	.word	0x40000400
 8002150:	40000800 	.word	0x40000800
 8002154:	40000c00 	.word	0x40000c00
 8002158:	40010400 	.word	0x40010400
 800215c:	40014000 	.word	0x40014000
 8002160:	40014400 	.word	0x40014400
 8002164:	40014800 	.word	0x40014800
 8002168:	40001800 	.word	0x40001800
 800216c:	40001c00 	.word	0x40001c00
 8002170:	40002000 	.word	0x40002000

08002174 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e042      	b.n	8002234 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fc48 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2224      	movs	r2, #36	@ 0x24
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f973 	bl	80024cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b20      	cmp	r3, #32
 800225a:	d175      	bne.n	8002348 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_UART_Transmit+0x2c>
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e06e      	b.n	800234a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2221      	movs	r2, #33	@ 0x21
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800227a:	f7fe fd7f 	bl	8000d7c <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	88fa      	ldrh	r2, [r7, #6]
 8002284:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	88fa      	ldrh	r2, [r7, #6]
 800228a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002294:	d108      	bne.n	80022a8 <HAL_UART_Transmit+0x6c>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d104      	bne.n	80022a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	e003      	b.n	80022b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022b0:	e02e      	b.n	8002310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2180      	movs	r1, #128	@ 0x80
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f848 	bl	8002352 <UART_WaitOnFlagUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03a      	b.n	800234a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10b      	bne.n	80022f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	881b      	ldrh	r3, [r3, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3302      	adds	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e007      	b.n	8002302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1cb      	bne.n	80022b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2200      	movs	r2, #0
 8002322:	2140      	movs	r1, #64	@ 0x40
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f814 	bl	8002352 <UART_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e006      	b.n	800234a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002362:	e03b      	b.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d037      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236c:	f7fe fd06 	bl	8000d7c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	6a3a      	ldr	r2, [r7, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d302      	bcc.n	8002382 <UART_WaitOnFlagUntilTimeout+0x30>
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e03a      	b.n	80023fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b80      	cmp	r3, #128	@ 0x80
 8002398:	d020      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b40      	cmp	r3, #64	@ 0x40
 800239e:	d01d      	beq.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d116      	bne.n	80023dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f81d 	bl	8002404 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2208      	movs	r2, #8
 80023ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00f      	b.n	80023fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4013      	ands	r3, r2
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d0b4      	beq.n	8002364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002404:	b480      	push	{r7}
 8002406:	b095      	sub	sp, #84	@ 0x54
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002416:	e853 3f00 	ldrex	r3, [r3]
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800241c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	330c      	adds	r3, #12
 800242a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800242c:	643a      	str	r2, [r7, #64]	@ 0x40
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002430:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002432:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002434:	e841 2300 	strex	r3, r2, [r1]
 8002438:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3314      	adds	r3, #20
 8002446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	e853 3f00 	ldrex	r3, [r3]
 800244e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f023 0301 	bic.w	r3, r3, #1
 8002456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3314      	adds	r3, #20
 800245e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002460:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002464:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002468:	e841 2300 	strex	r3, r2, [r1]
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	2b01      	cmp	r3, #1
 800247a:	d119      	bne.n	80024b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	e853 3f00 	ldrex	r3, [r3]
 800248a:	60bb      	str	r3, [r7, #8]
   return(result);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f023 0310 	bic.w	r3, r3, #16
 8002492:	647b      	str	r3, [r7, #68]	@ 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800249c:	61ba      	str	r2, [r7, #24]
 800249e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	613b      	str	r3, [r7, #16]
   return(result);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024be:	bf00      	nop
 80024c0:	3754      	adds	r7, #84	@ 0x54
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d0:	b0c0      	sub	sp, #256	@ 0x100
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	ea40 0301 	orr.w	r3, r0, r1
 80024f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	431a      	orrs	r2, r3
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	431a      	orrs	r2, r3
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002524:	f021 010c 	bic.w	r1, r1, #12
 8002528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002532:	430b      	orrs	r3, r1
 8002534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002546:	6999      	ldr	r1, [r3, #24]
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	ea40 0301 	orr.w	r3, r0, r1
 8002552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b8f      	ldr	r3, [pc, #572]	@ (8002798 <UART_SetConfig+0x2cc>)
 800255c:	429a      	cmp	r2, r3
 800255e:	d005      	beq.n	800256c <UART_SetConfig+0xa0>
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b8d      	ldr	r3, [pc, #564]	@ (800279c <UART_SetConfig+0x2d0>)
 8002568:	429a      	cmp	r2, r3
 800256a:	d104      	bne.n	8002576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800256c:	f7ff fb2e 	bl	8001bcc <HAL_RCC_GetPCLK2Freq>
 8002570:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002574:	e003      	b.n	800257e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002576:	f7ff fb15 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 800257a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002588:	f040 810c 	bne.w	80027a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800258c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002596:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800259a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800259e:	4622      	mov	r2, r4
 80025a0:	462b      	mov	r3, r5
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025a6:	415b      	adcs	r3, r3
 80025a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025ae:	4621      	mov	r1, r4
 80025b0:	eb12 0801 	adds.w	r8, r2, r1
 80025b4:	4629      	mov	r1, r5
 80025b6:	eb43 0901 	adc.w	r9, r3, r1
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ce:	4690      	mov	r8, r2
 80025d0:	4699      	mov	r9, r3
 80025d2:	4623      	mov	r3, r4
 80025d4:	eb18 0303 	adds.w	r3, r8, r3
 80025d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025dc:	462b      	mov	r3, r5
 80025de:	eb49 0303 	adc.w	r3, r9, r3
 80025e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025fa:	460b      	mov	r3, r1
 80025fc:	18db      	adds	r3, r3, r3
 80025fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002600:	4613      	mov	r3, r2
 8002602:	eb42 0303 	adc.w	r3, r2, r3
 8002606:	657b      	str	r3, [r7, #84]	@ 0x54
 8002608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800260c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002610:	f7fd fe7e 	bl	8000310 <__aeabi_uldivmod>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <UART_SetConfig+0x2d4>)
 800261a:	fba3 2302 	umull	r2, r3, r3, r2
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	011c      	lsls	r4, r3, #4
 8002622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800262c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002634:	4642      	mov	r2, r8
 8002636:	464b      	mov	r3, r9
 8002638:	1891      	adds	r1, r2, r2
 800263a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800263c:	415b      	adcs	r3, r3
 800263e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002644:	4641      	mov	r1, r8
 8002646:	eb12 0a01 	adds.w	sl, r2, r1
 800264a:	4649      	mov	r1, r9
 800264c:	eb43 0b01 	adc.w	fp, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800265c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002664:	4692      	mov	sl, r2
 8002666:	469b      	mov	fp, r3
 8002668:	4643      	mov	r3, r8
 800266a:	eb1a 0303 	adds.w	r3, sl, r3
 800266e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002672:	464b      	mov	r3, r9
 8002674:	eb4b 0303 	adc.w	r3, fp, r3
 8002678:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002688:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800268c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002690:	460b      	mov	r3, r1
 8002692:	18db      	adds	r3, r3, r3
 8002694:	643b      	str	r3, [r7, #64]	@ 0x40
 8002696:	4613      	mov	r3, r2
 8002698:	eb42 0303 	adc.w	r3, r2, r3
 800269c:	647b      	str	r3, [r7, #68]	@ 0x44
 800269e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026a6:	f7fd fe33 	bl	8000310 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <UART_SetConfig+0x2d4>)
 80026b2:	fba3 2301 	umull	r2, r3, r3, r1
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2264      	movs	r2, #100	@ 0x64
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026c6:	4b36      	ldr	r3, [pc, #216]	@ (80027a0 <UART_SetConfig+0x2d4>)
 80026c8:	fba3 2302 	umull	r2, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026d4:	441c      	add	r4, r3
 80026d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026da:	2200      	movs	r2, #0
 80026dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026e8:	4642      	mov	r2, r8
 80026ea:	464b      	mov	r3, r9
 80026ec:	1891      	adds	r1, r2, r2
 80026ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026f0:	415b      	adcs	r3, r3
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026f8:	4641      	mov	r1, r8
 80026fa:	1851      	adds	r1, r2, r1
 80026fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80026fe:	4649      	mov	r1, r9
 8002700:	414b      	adcs	r3, r1
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002710:	4659      	mov	r1, fp
 8002712:	00cb      	lsls	r3, r1, #3
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271a:	4651      	mov	r1, sl
 800271c:	00ca      	lsls	r2, r1, #3
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	4603      	mov	r3, r0
 8002724:	4642      	mov	r2, r8
 8002726:	189b      	adds	r3, r3, r2
 8002728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800272c:	464b      	mov	r3, r9
 800272e:	460a      	mov	r2, r1
 8002730:	eb42 0303 	adc.w	r3, r2, r3
 8002734:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002744:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800274c:	460b      	mov	r3, r1
 800274e:	18db      	adds	r3, r3, r3
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002752:	4613      	mov	r3, r2
 8002754:	eb42 0303 	adc.w	r3, r2, r3
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800275a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800275e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002762:	f7fd fdd5 	bl	8000310 <__aeabi_uldivmod>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <UART_SetConfig+0x2d4>)
 800276c:	fba3 1302 	umull	r1, r3, r3, r2
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	2164      	movs	r1, #100	@ 0x64
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	3332      	adds	r3, #50	@ 0x32
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <UART_SetConfig+0x2d4>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	f003 0207 	and.w	r2, r3, #7
 800278a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4422      	add	r2, r4
 8002792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002794:	e106      	b.n	80029a4 <UART_SetConfig+0x4d8>
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	40011400 	.word	0x40011400
 80027a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027b6:	4642      	mov	r2, r8
 80027b8:	464b      	mov	r3, r9
 80027ba:	1891      	adds	r1, r2, r2
 80027bc:	6239      	str	r1, [r7, #32]
 80027be:	415b      	adcs	r3, r3
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027c6:	4641      	mov	r1, r8
 80027c8:	1854      	adds	r4, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb43 0501 	adc.w	r5, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	00eb      	lsls	r3, r5, #3
 80027da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027de:	00e2      	lsls	r2, r4, #3
 80027e0:	4614      	mov	r4, r2
 80027e2:	461d      	mov	r5, r3
 80027e4:	4643      	mov	r3, r8
 80027e6:	18e3      	adds	r3, r4, r3
 80027e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027ec:	464b      	mov	r3, r9
 80027ee:	eb45 0303 	adc.w	r3, r5, r3
 80027f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002812:	4629      	mov	r1, r5
 8002814:	008b      	lsls	r3, r1, #2
 8002816:	4621      	mov	r1, r4
 8002818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800281c:	4621      	mov	r1, r4
 800281e:	008a      	lsls	r2, r1, #2
 8002820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002824:	f7fd fd74 	bl	8000310 <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4b60      	ldr	r3, [pc, #384]	@ (80029b0 <UART_SetConfig+0x4e4>)
 800282e:	fba3 2302 	umull	r2, r3, r3, r2
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	011c      	lsls	r4, r3, #4
 8002836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	1891      	adds	r1, r2, r2
 800284e:	61b9      	str	r1, [r7, #24]
 8002850:	415b      	adcs	r3, r3
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002858:	4641      	mov	r1, r8
 800285a:	1851      	adds	r1, r2, r1
 800285c:	6139      	str	r1, [r7, #16]
 800285e:	4649      	mov	r1, r9
 8002860:	414b      	adcs	r3, r1
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002870:	4659      	mov	r1, fp
 8002872:	00cb      	lsls	r3, r1, #3
 8002874:	4651      	mov	r1, sl
 8002876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800287a:	4651      	mov	r1, sl
 800287c:	00ca      	lsls	r2, r1, #3
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	4603      	mov	r3, r0
 8002884:	4642      	mov	r2, r8
 8002886:	189b      	adds	r3, r3, r2
 8002888:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800288c:	464b      	mov	r3, r9
 800288e:	460a      	mov	r2, r1
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028b0:	4649      	mov	r1, r9
 80028b2:	008b      	lsls	r3, r1, #2
 80028b4:	4641      	mov	r1, r8
 80028b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ba:	4641      	mov	r1, r8
 80028bc:	008a      	lsls	r2, r1, #2
 80028be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028c2:	f7fd fd25 	bl	8000310 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	4b38      	ldr	r3, [pc, #224]	@ (80029b0 <UART_SetConfig+0x4e4>)
 80028ce:	fba3 2301 	umull	r2, r3, r3, r1
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2264      	movs	r2, #100	@ 0x64
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	1acb      	subs	r3, r1, r3
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	3332      	adds	r3, #50	@ 0x32
 80028e0:	4a33      	ldr	r2, [pc, #204]	@ (80029b0 <UART_SetConfig+0x4e4>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028ec:	441c      	add	r4, r3
 80028ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f2:	2200      	movs	r2, #0
 80028f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80028f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80028f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028fc:	4642      	mov	r2, r8
 80028fe:	464b      	mov	r3, r9
 8002900:	1891      	adds	r1, r2, r2
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	415b      	adcs	r3, r3
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800290c:	4641      	mov	r1, r8
 800290e:	1851      	adds	r1, r2, r1
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	4649      	mov	r1, r9
 8002914:	414b      	adcs	r3, r1
 8002916:	607b      	str	r3, [r7, #4]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002924:	4659      	mov	r1, fp
 8002926:	00cb      	lsls	r3, r1, #3
 8002928:	4651      	mov	r1, sl
 800292a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800292e:	4651      	mov	r1, sl
 8002930:	00ca      	lsls	r2, r1, #3
 8002932:	4610      	mov	r0, r2
 8002934:	4619      	mov	r1, r3
 8002936:	4603      	mov	r3, r0
 8002938:	4642      	mov	r2, r8
 800293a:	189b      	adds	r3, r3, r2
 800293c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800293e:	464b      	mov	r3, r9
 8002940:	460a      	mov	r2, r1
 8002942:	eb42 0303 	adc.w	r3, r2, r3
 8002946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	663b      	str	r3, [r7, #96]	@ 0x60
 8002952:	667a      	str	r2, [r7, #100]	@ 0x64
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002960:	4649      	mov	r1, r9
 8002962:	008b      	lsls	r3, r1, #2
 8002964:	4641      	mov	r1, r8
 8002966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800296a:	4641      	mov	r1, r8
 800296c:	008a      	lsls	r2, r1, #2
 800296e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002972:	f7fd fccd 	bl	8000310 <__aeabi_uldivmod>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <UART_SetConfig+0x4e4>)
 800297c:	fba3 1302 	umull	r1, r3, r3, r2
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2164      	movs	r1, #100	@ 0x64
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	@ 0x32
 800298e:	4a08      	ldr	r2, [pc, #32]	@ (80029b0 <UART_SetConfig+0x4e4>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4422      	add	r2, r4
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029aa:	46bd      	mov	sp, r7
 80029ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029b0:	51eb851f 	.word	0x51eb851f

080029b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 0208 	add.w	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f103 0208 	add.w	r2, r3, #8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f103 0208 	add.w	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80029e8:	f240 1019 	movw	r0, #281	@ 0x119
 80029ec:	f003 fed0 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002a06:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002a0a:	f003 fec1 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d103      	bne.n	8002a36 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e00c      	b.n	8002a50 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3308      	adds	r3, #8
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	e002      	b.n	8002a44 <vListInsert+0x2e>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d2f6      	bcs.n	8002a3e <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002a7c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002a80:	f003 fe86 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6852      	ldr	r2, [r2, #4]
 8002aac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d103      	bne.n	8002ac0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f240 101d 	movw	r0, #285	@ 0x11d
 8002ada:	f003 fe95 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002af6:	2301      	movs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d05d      	beq.n	8002bde <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d059      	beq.n	8002bde <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b32:	2100      	movs	r1, #0
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d000      	beq.n	8002b3e <xQueueGenericReset+0x52>
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d14c      	bne.n	8002bde <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002b44:	f002 f9ce 	bl	8004ee4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b54:	fb01 f303 	mul.w	r3, r1, r3
 8002b58:	441a      	add	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2200      	movs	r2, #0
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b74:	3b01      	subs	r3, #1
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	441a      	add	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	22ff      	movs	r2, #255	@ 0xff
 8002b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01a      	beq.n	8002bd8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 fa00 	bl	8003fac <xTaskRemoveFromEventList>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <xQueueGenericReset+0x128>)
 8002bb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	e009      	b.n	8002bd8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	3310      	adds	r3, #16
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fef3 	bl	80029b4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	3324      	adds	r3, #36	@ 0x24
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff feee 	bl	80029b4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002bd8:	f002 f9b6 	bl	8004f48 <vPortExitCritical>
 8002bdc:	e001      	b.n	8002be2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericReset+0x114>
    __asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	60bb      	str	r3, [r7, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4619      	mov	r1, r3
 8002c04:	2096      	movs	r0, #150	@ 0x96
 8002c06:	f003 fdff 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002c0a:	697b      	ldr	r3, [r7, #20]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d02e      	beq.n	8002c8e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c30:	2100      	movs	r1, #0
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	fba3 2302 	umull	r2, r3, r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d000      	beq.n	8002c40 <xQueueGenericCreate+0x28>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d123      	bne.n	8002c8e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002c4e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002c52:	d81c      	bhi.n	8002c8e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	3350      	adds	r3, #80	@ 0x50
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fa6c 	bl	8005140 <pvPortMalloc>
 8002c68:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01d      	beq.n	8002cac <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3350      	adds	r3, #80	@ 0x50
 8002c78:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c7a:	79fa      	ldrb	r2, [r7, #7]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f81e 	bl	8002cc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002c8c:	e00e      	b.n	8002cac <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10b      	bne.n	8002cac <xQueueGenericCreate+0x94>
    __asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	613b      	str	r3, [r7, #16]
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f003 ff44 	bl	8006b3c <SEGGER_SYSVIEW_ShrinkId>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	2098      	movs	r0, #152	@ 0x98
 8002cba:	f003 fda5 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
    }
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e002      	b.n	8002cea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	69b8      	ldr	r0, [r7, #24]
 8002cfa:	f7ff fef7 	bl	8002aec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002d06:	bf00      	nop
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	@ 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10b      	bne.n	8002d44 <xQueueGenericSend+0x34>
    __asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d103      	bne.n	8002d52 <xQueueGenericSend+0x42>
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <xQueueGenericSend+0x46>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <xQueueGenericSend+0x48>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <xQueueGenericSend+0x64>
    __asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
 8002d72:	e7fd      	b.n	8002d70 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x72>
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSend+0x76>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSend+0x78>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <xQueueGenericSend+0x94>
    __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da4:	f001 fb24 	bl	80043f0 <xTaskGetSchedulerState>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <xQueueGenericSend+0xa4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <xQueueGenericSend+0xa8>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <xQueueGenericSend+0xaa>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10b      	bne.n	8002dd6 <xQueueGenericSend+0xc6>
    __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	61fb      	str	r3, [r7, #28]
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dd6:	f002 f885 	bl	8004ee4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <xQueueGenericSend+0xdc>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d12d      	bne.n	8002e48 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df2:	f000 f9ac 	bl	800314e <prvCopyDataToQueue>
 8002df6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	3324      	adds	r3, #36	@ 0x24
 8002e04:	4618      	mov	r0, r3
 8002e06:	f001 f8d1 	bl	8003fac <xTaskRemoveFromEventList>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002e10:	4b45      	ldr	r3, [pc, #276]	@ (8002f28 <xQueueGenericSend+0x218>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	e00a      	b.n	8002e38 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <xQueueGenericSend+0x218>)
 8002e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002e38:	f002 f886 	bl	8004f48 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	20a1      	movs	r0, #161	@ 0xa1
 8002e40:	f003 fce2 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e06b      	b.n	8002f20 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e4e:	f002 f87b 	bl	8004f48 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002e52:	2100      	movs	r1, #0
 8002e54:	20a1      	movs	r0, #161	@ 0xa1
 8002e56:	f003 fcd7 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e060      	b.n	8002f20 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 f97f 	bl	800416c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e72:	f002 f869 	bl	8004f48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e76:	f000 fd51 	bl	800391c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e7a:	f002 f833 	bl	8004ee4 <vPortEnterCritical>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d103      	bne.n	8002e94 <xQueueGenericSend+0x184>
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSend+0x19a>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eaa:	f002 f84d 	bl	8004f48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eae:	1d3a      	adds	r2, r7, #4
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f001 f970 	bl	800419c <xTaskCheckForTimeOut>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d124      	bne.n	8002f0c <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ec2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ec4:	f000 fa3b 	bl	800333e <prvIsQueueFull>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fff6 	bl	8003ec8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002edc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ede:	f000 f9c6 	bl	800326e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002ee2:	f000 fd29 	bl	8003938 <xTaskResumeAll>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f af74 	bne.w	8002dd6 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <xQueueGenericSend+0x218>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	e76a      	b.n	8002dd6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f02:	f000 f9b4 	bl	800326e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f06:	f000 fd17 	bl	8003938 <xTaskResumeAll>
 8002f0a:	e764      	b.n	8002dd6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f0e:	f000 f9ae 	bl	800326e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f12:	f000 fd11 	bl	8003938 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002f16:	2100      	movs	r1, #0
 8002f18:	20a1      	movs	r0, #161	@ 0xa1
 8002f1a:	f003 fc75 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8002f1e:	2300      	movs	r3, #0
        }
    }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3738      	adds	r7, #56	@ 0x38
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	e000ed04 	.word	0xe000ed04

08002f2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <xQueueReceive+0x32>
    __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	623b      	str	r3, [r7, #32]
}
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueReceive+0x40>
 8002f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueReceive+0x44>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueReceive+0x46>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <xQueueReceive+0x62>
    __asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61fb      	str	r3, [r7, #28]
}
 8002f88:	bf00      	nop
 8002f8a:	bf00      	nop
 8002f8c:	e7fd      	b.n	8002f8a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f8e:	f001 fa2f 	bl	80043f0 <xTaskGetSchedulerState>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <xQueueReceive+0x72>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <xQueueReceive+0x76>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <xQueueReceive+0x78>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <xQueueReceive+0x94>
    __asm volatile
 8002fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	61bb      	str	r3, [r7, #24]
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	e7fd      	b.n	8002fbc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fc0:	f001 ff90 	bl	8004ee4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d023      	beq.n	8003018 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fd4:	f000 f925 	bl	8003222 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00f      	beq.n	8003008 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fea:	3310      	adds	r3, #16
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 ffdd 	bl	8003fac <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <xQueueReceive+0x1d8>)
 8002ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003008:	f001 ff9e 	bl	8004f48 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800300c:	2101      	movs	r1, #1
 800300e:	20a4      	movs	r0, #164	@ 0xa4
 8003010:	f003 fbfa 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003014:	2301      	movs	r3, #1
 8003016:	e071      	b.n	80030fc <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800301e:	f001 ff93 	bl	8004f48 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003022:	2100      	movs	r1, #0
 8003024:	20a4      	movs	r0, #164	@ 0xa4
 8003026:	f003 fbef 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800302a:	2300      	movs	r3, #0
 800302c:	e066      	b.n	80030fc <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800302e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	4618      	mov	r0, r3
 800303a:	f001 f897 	bl	800416c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800303e:	2301      	movs	r3, #1
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003042:	f001 ff81 	bl	8004f48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003046:	f000 fc69 	bl	800391c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800304a:	f001 ff4b 	bl	8004ee4 <vPortEnterCritical>
 800304e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <xQueueReceive+0x138>
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003066:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800306a:	b25b      	sxtb	r3, r3
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d103      	bne.n	800307a <xQueueReceive+0x14e>
 8003072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800307a:	f001 ff65 	bl	8004f48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800307e:	1d3a      	adds	r2, r7, #4
 8003080:	f107 0310 	add.w	r3, r7, #16
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 f888 	bl	800419c <xTaskCheckForTimeOut>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d123      	bne.n	80030da <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003094:	f000 f93d 	bl	8003312 <prvIsQueueEmpty>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d017      	beq.n	80030ce <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	3324      	adds	r3, #36	@ 0x24
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 ff0e 	bl	8003ec8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ae:	f000 f8de 	bl	800326e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030b2:	f000 fc41 	bl	8003938 <xTaskResumeAll>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d181      	bne.n	8002fc0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <xQueueReceive+0x1d8>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	e778      	b.n	8002fc0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d0:	f000 f8cd 	bl	800326e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030d4:	f000 fc30 	bl	8003938 <xTaskResumeAll>
 80030d8:	e772      	b.n	8002fc0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030dc:	f000 f8c7 	bl	800326e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030e0:	f000 fc2a 	bl	8003938 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e6:	f000 f914 	bl	8003312 <prvIsQueueEmpty>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f43f af67 	beq.w	8002fc0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80030f2:	2100      	movs	r1, #0
 80030f4:	20a4      	movs	r0, #164	@ 0xa4
 80030f6:	f003 fb87 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80030fa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3730      	adds	r7, #48	@ 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <uxQueueMessagesWaiting+0x26>
    __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60bb      	str	r3, [r7, #8]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800312e:	f001 fed9 	bl	8004ee4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003136:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003138:	f001 ff06 	bl	8004f48 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	20a9      	movs	r0, #169	@ 0xa9
 8003140:	f003 fb62 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxReturn;
 8003144:	68fb      	ldr	r3, [r7, #12]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003162:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d14d      	bne.n	8003210 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f95b 	bl	8004434 <xTaskPriorityDisinherit>
 800317e:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	e043      	b.n	8003210 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d119      	bne.n	80031c2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6858      	ldr	r0, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	461a      	mov	r2, r3
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	f003 ff9b 	bl	80070d4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a6:	441a      	add	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d32b      	bcc.n	8003210 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e026      	b.n	8003210 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	68d8      	ldr	r0, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	461a      	mov	r2, r3
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	f003 ff81 	bl	80070d4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	425b      	negs	r3, r3
 80031dc:	441a      	add	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d207      	bcs.n	80031fe <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	425b      	negs	r3, r3
 80031f8:	441a      	add	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d105      	bne.n	8003210 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3b01      	subs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003218:	697b      	ldr	r3, [r7, #20]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	441a      	add	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d303      	bcc.n	8003256 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	461a      	mov	r2, r3
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	f003 ff37 	bl	80070d4 <memcpy>
    }
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b084      	sub	sp, #16
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003276:	f001 fe35 	bl	8004ee4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003280:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003282:	e011      	b.n	80032a8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d012      	beq.n	80032b2 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3324      	adds	r3, #36	@ 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fe8b 	bl	8003fac <xTaskRemoveFromEventList>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800329c:	f000 ffea 	bl	8004274 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dce9      	bgt.n	8003284 <prvUnlockQueue+0x16>
 80032b0:	e000      	b.n	80032b4 <prvUnlockQueue+0x46>
                    break;
 80032b2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	22ff      	movs	r2, #255	@ 0xff
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80032bc:	f001 fe44 	bl	8004f48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032c0:	f001 fe10 	bl	8004ee4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032ca:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032cc:	e011      	b.n	80032f2 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d012      	beq.n	80032fc <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3310      	adds	r3, #16
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fe66 	bl	8003fac <xTaskRemoveFromEventList>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032e6:	f000 ffc5 	bl	8004274 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	dce9      	bgt.n	80032ce <prvUnlockQueue+0x60>
 80032fa:	e000      	b.n	80032fe <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032fc:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	22ff      	movs	r2, #255	@ 0xff
 8003302:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003306:	f001 fe1f 	bl	8004f48 <vPortExitCritical>
}
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800331a:	f001 fde3 	bl	8004ee4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003326:	2301      	movs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e001      	b.n	8003330 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003330:	f001 fe0a 	bl	8004f48 <vPortExitCritical>

    return xReturn;
 8003334:	68fb      	ldr	r3, [r7, #12]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003346:	f001 fdcd 	bl	8004ee4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003352:	429a      	cmp	r2, r3
 8003354:	d102      	bne.n	800335c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003356:	2301      	movs	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e001      	b.n	8003360 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003360:	f001 fdf2 	bl	8004f48 <vPortExitCritical>

    return xReturn;
 8003364:	68fb      	ldr	r3, [r7, #12]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
}
 8003396:	bf00      	nop
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e01e      	b.n	80033e6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80033a8:	4a18      	ldr	r2, [pc, #96]	@ (800340c <vQueueAddToRegistry+0x9c>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d105      	bne.n	80033c4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <vQueueAddToRegistry+0x9c>)
 80033be:	4413      	add	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
                    break;
 80033c2:	e013      	b.n	80033ec <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <vQueueAddToRegistry+0x70>
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <vQueueAddToRegistry+0x9c>)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <vQueueAddToRegistry+0x9c>)
 80033dc:	4413      	add	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b07      	cmp	r3, #7
 80033ea:	d9dd      	bls.n	80033a8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80033fe:	20b6      	movs	r0, #182	@ 0xb6
 8003400:	f003 f9c6 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003404:	bf00      	nop
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000130 	.word	0x20000130

08003410 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003420:	f001 fd60 	bl	8004ee4 <vPortEnterCritical>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800342a:	b25b      	sxtb	r3, r3
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d103      	bne.n	800343a <vQueueWaitForMessageRestricted+0x2a>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003440:	b25b      	sxtb	r3, r3
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d103      	bne.n	8003450 <vQueueWaitForMessageRestricted+0x40>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003450:	f001 fd7a 	bl	8004f48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3324      	adds	r3, #36	@ 0x24
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fd57 	bl	8003f18 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff feff 	bl	800326e <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003470:	20b9      	movs	r0, #185	@ 0xb9
 8003472:	f003 f98d 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800347e:	b580      	push	{r7, lr}
 8003480:	b08a      	sub	sp, #40	@ 0x28
 8003482:	af04      	add	r7, sp, #16
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fe55 	bl	8005140 <pvPortMalloc>
 8003496:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d013      	beq.n	80034c6 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800349e:	2058      	movs	r0, #88	@ 0x58
 80034a0:	f001 fe4e 	bl	8005140 <pvPortMalloc>
 80034a4:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80034ac:	2258      	movs	r2, #88	@ 0x58
 80034ae:	2100      	movs	r1, #0
 80034b0:	6978      	ldr	r0, [r7, #20]
 80034b2:	f003 fddb 	bl	800706c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80034bc:	e005      	b.n	80034ca <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80034be:	6938      	ldr	r0, [r7, #16]
 80034c0:	f001 ff70 	bl	80053a4 <vPortFree>
 80034c4:	e001      	b.n	80034ca <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034d0:	2300      	movs	r3, #0
 80034d2:	9303      	str	r3, [sp, #12]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f82d 	bl	8003546 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80034ec:	697b      	ldr	r3, [r7, #20]
    }
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af02      	add	r7, sp, #8
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff ffb3 	bl	800347e <prvCreateTask>
 8003518:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003520:	6938      	ldr	r0, [r7, #16]
 8003522:	f000 f8a1 	bl	8003668 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003526:	2301      	movs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e002      	b.n	8003532 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	4619      	mov	r1, r3
 8003536:	20c2      	movs	r0, #194	@ 0xc2
 8003538:	f003 f966 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800353c:	697b      	ldr	r3, [r7, #20]
    }
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b088      	sub	sp, #32
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	461a      	mov	r2, r3
 800355e:	21a5      	movs	r1, #165	@ 0xa5
 8003560:	f003 fd84 	bl	800706c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800356e:	3b01      	subs	r3, #1
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f023 0307 	bic.w	r3, r3, #7
 800357c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	617b      	str	r3, [r7, #20]
}
 800359a:	bf00      	nop
 800359c:	bf00      	nop
 800359e:	e7fd      	b.n	800359c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01e      	beq.n	80035e4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e012      	b.n	80035d2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	4413      	add	r3, r2
 80035b2:	7819      	ldrb	r1, [r3, #0]
 80035b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	3334      	adds	r3, #52	@ 0x34
 80035bc:	460a      	mov	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	d9e9      	bls.n	80035ac <prvInitialiseNewTask+0x66>
 80035d8:	e000      	b.n	80035dc <prvInitialiseNewTask+0x96>
            {
                break;
 80035da:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d90b      	bls.n	8003602 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	613b      	str	r3, [r7, #16]
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	e7fd      	b.n	80035fe <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	2b04      	cmp	r3, #4
 8003606:	d901      	bls.n	800360c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003608:	2304      	movs	r3, #4
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003610:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003616:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	3304      	adds	r3, #4
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff f9eb 	bl	80029f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	3318      	adds	r3, #24
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f9e6 	bl	80029f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003630:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	f1c3 0205 	rsb	r2, r3, #5
 8003638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	69b8      	ldr	r0, [r7, #24]
 8003648:	f001 faca 	bl	8004be0 <pxPortInitialiseStack>
 800364c:	4602      	mov	r2, r0
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800365e:	bf00      	nop
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003670:	f001 fc38 	bl	8004ee4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003674:	4b50      	ldr	r3, [pc, #320]	@ (80037b8 <prvAddNewTaskToReadyList+0x150>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a4f      	ldr	r2, [pc, #316]	@ (80037b8 <prvAddNewTaskToReadyList+0x150>)
 800367c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800367e:	4b4f      	ldr	r3, [pc, #316]	@ (80037bc <prvAddNewTaskToReadyList+0x154>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003686:	4a4d      	ldr	r2, [pc, #308]	@ (80037bc <prvAddNewTaskToReadyList+0x154>)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800368c:	4b4a      	ldr	r3, [pc, #296]	@ (80037b8 <prvAddNewTaskToReadyList+0x150>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d110      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003694:	f000 fe12 	bl	80042bc <prvInitialiseTaskLists>
 8003698:	e00d      	b.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800369a:	4b49      	ldr	r3, [pc, #292]	@ (80037c0 <prvAddNewTaskToReadyList+0x158>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036a2:	4b46      	ldr	r3, [pc, #280]	@ (80037bc <prvAddNewTaskToReadyList+0x154>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d802      	bhi.n	80036b6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80036b0:	4a42      	ldr	r2, [pc, #264]	@ (80037bc <prvAddNewTaskToReadyList+0x154>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <prvAddNewTaskToReadyList+0x15c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	4a41      	ldr	r2, [pc, #260]	@ (80037c4 <prvAddNewTaskToReadyList+0x15c>)
 80036be:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036c0:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <prvAddNewTaskToReadyList+0x15c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <prvAddNewTaskToReadyList+0x94>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 f90d 	bl	80068f0 <SEGGER_SYSVIEW_OnTaskCreate>
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	461d      	mov	r5, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461c      	mov	r4, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	1ae3      	subs	r3, r4, r3
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462b      	mov	r3, r5
 80036f8:	f003 fbfe 	bl	8006ef8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 f97a 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	2201      	movs	r2, #1
 800370a:	409a      	lsls	r2, r3
 800370c:	4b2e      	ldr	r3, [pc, #184]	@ (80037c8 <prvAddNewTaskToReadyList+0x160>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <prvAddNewTaskToReadyList+0x160>)
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371a:	492c      	ldr	r1, [pc, #176]	@ (80037cc <prvAddNewTaskToReadyList+0x164>)
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3304      	adds	r3, #4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	60da      	str	r2, [r3, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	3204      	adds	r2, #4
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1d1a      	adds	r2, r3, #4
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4a1c      	ldr	r2, [pc, #112]	@ (80037cc <prvAddNewTaskToReadyList+0x164>)
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	615a      	str	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003764:	4919      	ldr	r1, [pc, #100]	@ (80037cc <prvAddNewTaskToReadyList+0x164>)
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003776:	1c59      	adds	r1, r3, #1
 8003778:	4814      	ldr	r0, [pc, #80]	@ (80037cc <prvAddNewTaskToReadyList+0x164>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4403      	add	r3, r0
 8003784:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003786:	f001 fbdf 	bl	8004f48 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800378a:	4b0d      	ldr	r3, [pc, #52]	@ (80037c0 <prvAddNewTaskToReadyList+0x158>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00e      	beq.n	80037b0 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <prvAddNewTaskToReadyList+0x154>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <prvAddNewTaskToReadyList+0x148>
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <prvAddNewTaskToReadyList+0x168>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}
 80037b8:	20000248 	.word	0x20000248
 80037bc:	20000170 	.word	0x20000170
 80037c0:	20000254 	.word	0x20000254
 80037c4:	20000264 	.word	0x20000264
 80037c8:	20000250 	.word	0x20000250
 80037cc:	20000174 	.word	0x20000174
 80037d0:	e000ed04 	.word	0xe000ed04

080037d4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	@ 0x28
 80037d8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80037da:	2301      	movs	r3, #1
 80037dc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e011      	b.n	800380c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80037e8:	4a1c      	ldr	r2, [pc, #112]	@ (800385c <prvCreateIdleTasks+0x88>)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	7819      	ldrb	r1, [r3, #0]
 80037f0:	1d3a      	adds	r2, r7, #4
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4413      	add	r3, r2
 80037f6:	460a      	mov	r2, r1
 80037f8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80037fa:	1d3a      	adds	r2, r7, #4
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d006      	beq.n	8003814 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b09      	cmp	r3, #9
 8003810:	ddea      	ble.n	80037e8 <prvCreateIdleTasks+0x14>
 8003812:	e000      	b.n	8003816 <prvCreateIdleTasks+0x42>
        {
            break;
 8003814:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003816:	2300      	movs	r3, #0
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e015      	b.n	8003848 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800381c:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <prvCreateIdleTasks+0x8c>)
 800381e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a0f      	ldr	r2, [pc, #60]	@ (8003864 <prvCreateIdleTasks+0x90>)
 8003826:	4413      	add	r3, r2
 8003828:	1d39      	adds	r1, r7, #4
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2300      	movs	r3, #0
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2300      	movs	r3, #0
 8003832:	2282      	movs	r2, #130	@ 0x82
 8003834:	6938      	ldr	r0, [r7, #16]
 8003836:	f7ff fe5e 	bl	80034f6 <xTaskCreate>
 800383a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	3301      	adds	r3, #1
 8003846:	61bb      	str	r3, [r7, #24]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	dde6      	ble.n	800381c <prvCreateIdleTasks+0x48>
 800384e:	e000      	b.n	8003852 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003850:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003852:	69fb      	ldr	r3, [r7, #28]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3720      	adds	r7, #32
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	08007a20 	.word	0x08007a20
 8003860:	0800428d 	.word	0x0800428d
 8003864:	2000026c 	.word	0x2000026c

08003868 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800386e:	f7ff ffb1 	bl	80037d4 <prvCreateIdleTasks>
 8003872:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800387a:	f000 ff19 	bl	80046b0 <xTimerCreateTimerTask>
 800387e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d124      	bne.n	80038d0 <vTaskStartScheduler+0x68>
    __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	60bb      	str	r3, [r7, #8]
}
 8003898:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800389a:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <vTaskStartScheduler+0x9c>)
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80038a2:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <vTaskStartScheduler+0xa0>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038a8:	4b18      	ldr	r3, [pc, #96]	@ (800390c <vTaskStartScheduler+0xa4>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80038ae:	4b18      	ldr	r3, [pc, #96]	@ (8003910 <vTaskStartScheduler+0xa8>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b18      	ldr	r3, [pc, #96]	@ (8003914 <vTaskStartScheduler+0xac>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d102      	bne.n	80038c0 <vTaskStartScheduler+0x58>
 80038ba:	f002 fffd 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>
 80038be:	e004      	b.n	80038ca <vTaskStartScheduler+0x62>
 80038c0:	4b14      	ldr	r3, [pc, #80]	@ (8003914 <vTaskStartScheduler+0xac>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f855 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80038ca:	f001 fa1b 	bl	8004d04 <xPortStartScheduler>
 80038ce:	e00f      	b.n	80038f0 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d10b      	bne.n	80038f0 <vTaskStartScheduler+0x88>
    __asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	607b      	str	r3, [r7, #4]
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <vTaskStartScheduler+0xb0>)
 80038f2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80038f4:	20cd      	movs	r0, #205	@ 0xcd
 80038f6:	f002 ff4b 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000268 	.word	0x20000268
 8003908:	20000254 	.word	0x20000254
 800390c:	2000024c 	.word	0x2000024c
 8003910:	2000026c 	.word	0x2000026c
 8003914:	20000170 	.word	0x20000170
 8003918:	2000000c 	.word	0x2000000c

0800391c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003920:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a03      	ldr	r2, [pc, #12]	@ (8003934 <vTaskSuspendAll+0x18>)
 8003928:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 800392a:	20cf      	movs	r0, #207	@ 0xcf
 800392c:	f002 ff30 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000270 	.word	0x20000270

08003938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003946:	f001 facd 	bl	8004ee4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800394e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b38 <xTaskResumeAll+0x200>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <xTaskResumeAll+0x36>
    __asm volatile
 8003956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	603b      	str	r3, [r7, #0]
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	e7fd      	b.n	800396a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800396e:	4b72      	ldr	r3, [pc, #456]	@ (8003b38 <xTaskResumeAll+0x200>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3b01      	subs	r3, #1
 8003974:	4a70      	ldr	r2, [pc, #448]	@ (8003b38 <xTaskResumeAll+0x200>)
 8003976:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003978:	4b6f      	ldr	r3, [pc, #444]	@ (8003b38 <xTaskResumeAll+0x200>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 80ce 	bne.w	8003b1e <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003982:	4b6e      	ldr	r3, [pc, #440]	@ (8003b3c <xTaskResumeAll+0x204>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80c9 	beq.w	8003b1e <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800398c:	e092      	b.n	8003ab4 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800398e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b40 <xTaskResumeAll+0x208>)
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	6a12      	ldr	r2, [r2, #32]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	69d2      	ldr	r2, [r2, #28]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	3318      	adds	r3, #24
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d103      	bne.n	80039c4 <xTaskResumeAll+0x8c>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d103      	bne.n	8003a02 <xTaskResumeAll+0xca>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2200      	movs	r2, #0
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	1e5a      	subs	r2, r3, #1
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 ffef 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1e:	2201      	movs	r2, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	4b48      	ldr	r3, [pc, #288]	@ (8003b44 <xTaskResumeAll+0x20c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	4a46      	ldr	r2, [pc, #280]	@ (8003b44 <xTaskResumeAll+0x20c>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a30:	4945      	ldr	r1, [pc, #276]	@ (8003b48 <xTaskResumeAll+0x210>)
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	3204      	adds	r2, #4
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4a36      	ldr	r2, [pc, #216]	@ (8003b48 <xTaskResumeAll+0x210>)
 8003a70:	441a      	add	r2, r3
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	615a      	str	r2, [r3, #20]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7a:	4933      	ldr	r1, [pc, #204]	@ (8003b48 <xTaskResumeAll+0x210>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69fa      	ldr	r2, [r7, #28]
 8003a8a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a8c:	1c59      	adds	r1, r3, #1
 8003a8e:	482e      	ldr	r0, [pc, #184]	@ (8003b48 <xTaskResumeAll+0x210>)
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4403      	add	r3, r0
 8003a9a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b4c <xTaskResumeAll+0x214>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d904      	bls.n	8003ab4 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003aaa:	4a29      	ldr	r2, [pc, #164]	@ (8003b50 <xTaskResumeAll+0x218>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab4:	4b22      	ldr	r3, [pc, #136]	@ (8003b40 <xTaskResumeAll+0x208>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f af68 	bne.w	800398e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003ac4:	f000 fc78 	bl	80043b8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac8:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <xTaskResumeAll+0x21c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003ad4:	f000 f86a 	bl	8003bac <xTaskIncrementTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d004      	beq.n	8003ae8 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003ade:	4a1c      	ldr	r2, [pc, #112]	@ (8003b50 <xTaskResumeAll+0x218>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1ef      	bne.n	8003ad4 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <xTaskResumeAll+0x21c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003afa:	4a15      	ldr	r2, [pc, #84]	@ (8003b50 <xTaskResumeAll+0x218>)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <xTaskResumeAll+0x214>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <xTaskResumeAll+0x220>)
 8003b10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b1e:	f001 fa13 	bl	8004f48 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	4619      	mov	r1, r3
 8003b26:	20d0      	movs	r0, #208	@ 0xd0
 8003b28:	f002 fe6e 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000270 	.word	0x20000270
 8003b3c:	20000248 	.word	0x20000248
 8003b40:	20000208 	.word	0x20000208
 8003b44:	20000250 	.word	0x20000250
 8003b48:	20000174 	.word	0x20000174
 8003b4c:	20000170 	.word	0x20000170
 8003b50:	2000025c 	.word	0x2000025c
 8003b54:	20000258 	.word	0x20000258
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <xTaskGetTickCount+0x20>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	20d1      	movs	r0, #209	@ 0xd1
 8003b6c:	f002 fe4c 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003b70:	687b      	ldr	r3, [r7, #4]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000024c 	.word	0x2000024c

08003b80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b86:	f001 fa99 	bl	80050bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003b8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <xTaskGetTickCountFromISR+0x28>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	20d2      	movs	r0, #210	@ 0xd2
 8003b98:	f002 fe36 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003b9c:	683b      	ldr	r3, [r7, #0]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000024c 	.word	0x2000024c

08003bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003bb6:	4b83      	ldr	r3, [pc, #524]	@ (8003dc4 <xTaskIncrementTick+0x218>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 80f3 	bne.w	8003da6 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bc0:	4b81      	ldr	r3, [pc, #516]	@ (8003dc8 <xTaskIncrementTick+0x21c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8003dc8 <xTaskIncrementTick+0x21c>)
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d121      	bne.n	8003c18 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003bd4:	4b7d      	ldr	r3, [pc, #500]	@ (8003dcc <xTaskIncrementTick+0x220>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00b      	beq.n	8003bf6 <xTaskIncrementTick+0x4a>
    __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	607b      	str	r3, [r7, #4]
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	e7fd      	b.n	8003bf2 <xTaskIncrementTick+0x46>
 8003bf6:	4b75      	ldr	r3, [pc, #468]	@ (8003dcc <xTaskIncrementTick+0x220>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	4b74      	ldr	r3, [pc, #464]	@ (8003dd0 <xTaskIncrementTick+0x224>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a72      	ldr	r2, [pc, #456]	@ (8003dcc <xTaskIncrementTick+0x220>)
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4a72      	ldr	r2, [pc, #456]	@ (8003dd0 <xTaskIncrementTick+0x224>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b72      	ldr	r3, [pc, #456]	@ (8003dd4 <xTaskIncrementTick+0x228>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a70      	ldr	r2, [pc, #448]	@ (8003dd4 <xTaskIncrementTick+0x228>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	f000 fbd0 	bl	80043b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c18:	4b6f      	ldr	r3, [pc, #444]	@ (8003dd8 <xTaskIncrementTick+0x22c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	f0c0 80ac 	bcc.w	8003d7c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c24:	4b69      	ldr	r3, [pc, #420]	@ (8003dcc <xTaskIncrementTick+0x220>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd8 <xTaskIncrementTick+0x22c>)
 8003c30:	f04f 32ff 	mov.w	r2, #4294967295
 8003c34:	601a      	str	r2, [r3, #0]
                    break;
 8003c36:	e0a1      	b.n	8003d7c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c38:	4b64      	ldr	r3, [pc, #400]	@ (8003dcc <xTaskIncrementTick+0x220>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003c48:	6a3a      	ldr	r2, [r7, #32]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d203      	bcs.n	8003c58 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003c50:	4a61      	ldr	r2, [pc, #388]	@ (8003dd8 <xTaskIncrementTick+0x22c>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
                        break;
 8003c56:	e091      	b.n	8003d7c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	68d2      	ldr	r2, [r2, #12]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d103      	bne.n	8003c86 <xTaskIncrementTick+0xda>
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	605a      	str	r2, [r3, #4]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1e5a      	subs	r2, r3, #1
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01e      	beq.n	8003cdc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	6a12      	ldr	r2, [r2, #32]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	69d2      	ldr	r2, [r2, #28]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d103      	bne.n	8003ccc <xTaskIncrementTick+0x120>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	605a      	str	r2, [r3, #4]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 fe8a 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <xTaskIncrementTick+0x230>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8003ddc <xTaskIncrementTick+0x230>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cfa:	4939      	ldr	r1, [pc, #228]	@ (8003de0 <xTaskIncrementTick+0x234>)
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3304      	adds	r3, #4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	3204      	adds	r2, #4
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1d1a      	adds	r2, r3, #4
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4a29      	ldr	r2, [pc, #164]	@ (8003de0 <xTaskIncrementTick+0x234>)
 8003d3a:	441a      	add	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	615a      	str	r2, [r3, #20]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d44:	4926      	ldr	r1, [pc, #152]	@ (8003de0 <xTaskIncrementTick+0x234>)
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d56:	1c59      	adds	r1, r3, #1
 8003d58:	4821      	ldr	r0, [pc, #132]	@ (8003de0 <xTaskIncrementTick+0x234>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4403      	add	r3, r0
 8003d64:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <xTaskIncrementTick+0x238>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f67f af57 	bls.w	8003c24 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7a:	e753      	b.n	8003c24 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <xTaskIncrementTick+0x238>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	4917      	ldr	r1, [pc, #92]	@ (8003de0 <xTaskIncrementTick+0x234>)
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d901      	bls.n	8003d98 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003d98:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <xTaskIncrementTick+0x23c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da4:	e004      	b.n	8003db0 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003da6:	4b11      	ldr	r3, [pc, #68]	@ (8003dec <xTaskIncrementTick+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a0f      	ldr	r2, [pc, #60]	@ (8003dec <xTaskIncrementTick+0x240>)
 8003dae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	4619      	mov	r1, r3
 8003db4:	20db      	movs	r0, #219	@ 0xdb
 8003db6:	f002 fd27 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3728      	adds	r7, #40	@ 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000270 	.word	0x20000270
 8003dc8:	2000024c 	.word	0x2000024c
 8003dcc:	20000200 	.word	0x20000200
 8003dd0:	20000204 	.word	0x20000204
 8003dd4:	20000260 	.word	0x20000260
 8003dd8:	20000268 	.word	0x20000268
 8003ddc:	20000250 	.word	0x20000250
 8003de0:	20000174 	.word	0x20000174
 8003de4:	20000170 	.word	0x20000170
 8003de8:	2000025c 	.word	0x2000025c
 8003dec:	20000258 	.word	0x20000258

08003df0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003df6:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <vTaskSwitchContext+0xc0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8003eb4 <vTaskSwitchContext+0xc4>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003e04:	e04f      	b.n	8003ea6 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003e06:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb4 <vTaskSwitchContext+0xc4>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <vTaskSwitchContext+0xc8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	fab3 f383 	clz	r3, r3
 8003e18:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003e1a:	7afb      	ldrb	r3, [r7, #11]
 8003e1c:	f1c3 031f 	rsb	r3, r3, #31
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	4926      	ldr	r1, [pc, #152]	@ (8003ebc <vTaskSwitchContext+0xcc>)
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <vTaskSwitchContext+0x5e>
    __asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	607b      	str	r3, [r7, #4]
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	e7fd      	b.n	8003e4a <vTaskSwitchContext+0x5a>
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <vTaskSwitchContext+0xcc>)
 8003e5a:	4413      	add	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d103      	bne.n	8003e7c <vTaskSwitchContext+0x8c>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec0 <vTaskSwitchContext+0xd0>)
 8003e84:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003e86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <vTaskSwitchContext+0xd4>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <vTaskSwitchContext+0xd0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d102      	bne.n	8003e98 <vTaskSwitchContext+0xa8>
 8003e92:	f002 fd11 	bl	80068b8 <SEGGER_SYSVIEW_OnIdle>
 8003e96:	e004      	b.n	8003ea2 <vTaskSwitchContext+0xb2>
 8003e98:	4b09      	ldr	r3, [pc, #36]	@ (8003ec0 <vTaskSwitchContext+0xd0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fd69 	bl	8006974 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <vTaskSwitchContext+0xd0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
    }
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000270 	.word	0x20000270
 8003eb4:	2000025c 	.word	0x2000025c
 8003eb8:	20000250 	.word	0x20000250
 8003ebc:	20000174 	.word	0x20000174
 8003ec0:	20000170 	.word	0x20000170
 8003ec4:	2000026c 	.word	0x2000026c

08003ec8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60fb      	str	r3, [r7, #12]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <vTaskPlaceOnEventList+0x4c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3318      	adds	r3, #24
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7fe fd8c 	bl	8002a16 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003efe:	2101      	movs	r1, #1
 8003f00:	6838      	ldr	r0, [r7, #0]
 8003f02:	f000 fb47 	bl	8004594 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003f06:	20e1      	movs	r0, #225	@ 0xe1
 8003f08:	f002 fc42 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000170 	.word	0x20000170

08003f18 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	613b      	str	r3, [r7, #16]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	61da      	str	r2, [r3, #28]
 8003f50:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	6892      	ldr	r2, [r2, #8]
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	4b13      	ldr	r3, [pc, #76]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	3218      	adds	r2, #24
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f103 0218 	add.w	r2, r3, #24
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68b8      	ldr	r0, [r7, #8]
 8003f94:	f000 fafe 	bl	8004594 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003f98:	20e3      	movs	r0, #227	@ 0xe3
 8003f9a:	f002 fbf9 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000170 	.word	0x20000170

08003fac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	@ 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	60fb      	str	r3, [r7, #12]
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	e7fd      	b.n	8003fd6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	6a12      	ldr	r2, [r2, #32]
 8003fe8:	609a      	str	r2, [r3, #8]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	6a3a      	ldr	r2, [r7, #32]
 8003ff0:	69d2      	ldr	r2, [r2, #28]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d103      	bne.n	8004008 <xTaskRemoveFromEventList+0x5c>
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	605a      	str	r2, [r3, #4]
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	2200      	movs	r2, #0
 800400c:	629a      	str	r2, [r3, #40]	@ 0x28
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	1e5a      	subs	r2, r3, #1
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004018:	4b4e      	ldr	r3, [pc, #312]	@ (8004154 <xTaskRemoveFromEventList+0x1a8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d164      	bne.n	80040ea <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	68d2      	ldr	r2, [r2, #12]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	3304      	adds	r3, #4
 8004042:	429a      	cmp	r2, r3
 8004044:	d103      	bne.n	800404e <xTaskRemoveFromEventList+0xa2>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	2200      	movs	r2, #0
 8004052:	615a      	str	r2, [r3, #20]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	4618      	mov	r0, r3
 8004062:	f002 fcc9 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	2201      	movs	r2, #1
 800406c:	409a      	lsls	r2, r3
 800406e:	4b3a      	ldr	r3, [pc, #232]	@ (8004158 <xTaskRemoveFromEventList+0x1ac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	4a38      	ldr	r2, [pc, #224]	@ (8004158 <xTaskRemoveFromEventList+0x1ac>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	4937      	ldr	r1, [pc, #220]	@ (800415c <xTaskRemoveFromEventList+0x1b0>)
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3304      	adds	r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	60da      	str	r2, [r3, #12]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	3204      	adds	r2, #4
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	1d1a      	adds	r2, r3, #4
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	609a      	str	r2, [r3, #8]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a28      	ldr	r2, [pc, #160]	@ (800415c <xTaskRemoveFromEventList+0x1b0>)
 80040bc:	441a      	add	r2, r3
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	615a      	str	r2, [r3, #20]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040c6:	4925      	ldr	r1, [pc, #148]	@ (800415c <xTaskRemoveFromEventList+0x1b0>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040d8:	1c59      	adds	r1, r3, #1
 80040da:	4820      	ldr	r0, [pc, #128]	@ (800415c <xTaskRemoveFromEventList+0x1b0>)
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4403      	add	r3, r0
 80040e6:	6019      	str	r1, [r3, #0]
 80040e8:	e01b      	b.n	8004122 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <xTaskRemoveFromEventList+0x1b4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	61da      	str	r2, [r3, #28]
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	621a      	str	r2, [r3, #32]
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	3218      	adds	r2, #24
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f103 0218 	add.w	r2, r3, #24
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	609a      	str	r2, [r3, #8]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	4a12      	ldr	r2, [pc, #72]	@ (8004160 <xTaskRemoveFromEventList+0x1b4>)
 8004116:	629a      	str	r2, [r3, #40]	@ 0x28
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <xTaskRemoveFromEventList+0x1b4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a10      	ldr	r2, [pc, #64]	@ (8004160 <xTaskRemoveFromEventList+0x1b4>)
 8004120:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004126:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <xTaskRemoveFromEventList+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	429a      	cmp	r2, r3
 800412e:	d905      	bls.n	800413c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <xTaskRemoveFromEventList+0x1bc>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e001      	b.n	8004140 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	4619      	mov	r1, r3
 8004144:	20e4      	movs	r0, #228	@ 0xe4
 8004146:	f002 fb5f 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800414c:	4618      	mov	r0, r3
 800414e:	3728      	adds	r7, #40	@ 0x28
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000270 	.word	0x20000270
 8004158:	20000250 	.word	0x20000250
 800415c:	20000174 	.word	0x20000174
 8004160:	20000208 	.word	0x20000208
 8004164:	20000170 	.word	0x20000170
 8004168:	2000025c 	.word	0x2000025c

0800416c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004174:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <vTaskInternalSetTimeOutState+0x28>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <vTaskInternalSetTimeOutState+0x2c>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004184:	20e7      	movs	r0, #231	@ 0xe7
 8004186:	f002 fb03 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000260 	.word	0x20000260
 8004198:	2000024c 	.word	0x2000024c

0800419c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	613b      	str	r3, [r7, #16]
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	60fb      	str	r3, [r7, #12]
}
 80041dc:	bf00      	nop
 80041de:	bf00      	nop
 80041e0:	e7fd      	b.n	80041de <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80041e2:	f000 fe7f 	bl	8004ee4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <xTaskCheckForTimeOut+0xd0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d102      	bne.n	8004206 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e026      	b.n	8004254 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <xTaskCheckForTimeOut+0xd4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d00a      	beq.n	8004228 <xTaskCheckForTimeOut+0x8c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d305      	bcc.n	8004228 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e015      	b.n	8004254 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	429a      	cmp	r2, r3
 8004230:	d20b      	bcs.n	800424a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff ff94 	bl	800416c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004244:	2300      	movs	r3, #0
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	e004      	b.n	8004254 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004254:	f000 fe78 	bl	8004f48 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4619      	mov	r1, r3
 800425c:	20e8      	movs	r0, #232	@ 0xe8
 800425e:	f002 fad3 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004262:	69fb      	ldr	r3, [r7, #28]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	2000024c 	.word	0x2000024c
 8004270:	20000260 	.word	0x20000260

08004274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <vTaskMissedYield+0x14>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800427e:	20e9      	movs	r0, #233	@ 0xe9
 8004280:	f002 fa86 	bl	8006790 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004284:	bf00      	nop
 8004286:	bd80      	pop	{r7, pc}
 8004288:	2000025c 	.word	0x2000025c

0800428c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004294:	f000 f852 	bl	800433c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004298:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <prvIdleTask+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d9f9      	bls.n	8004294 <prvIdleTask+0x8>
            {
                taskYIELD();
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <prvIdleTask+0x2c>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80042b0:	e7f0      	b.n	8004294 <prvIdleTask+0x8>
 80042b2:	bf00      	nop
 80042b4:	20000174 	.word	0x20000174
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	e00c      	b.n	80042e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a12      	ldr	r2, [pc, #72]	@ (800431c <prvInitialiseTaskLists+0x60>)
 80042d4:	4413      	add	r3, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fb6c 	bl	80029b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d9ef      	bls.n	80042c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80042e8:	480d      	ldr	r0, [pc, #52]	@ (8004320 <prvInitialiseTaskLists+0x64>)
 80042ea:	f7fe fb63 	bl	80029b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80042ee:	480d      	ldr	r0, [pc, #52]	@ (8004324 <prvInitialiseTaskLists+0x68>)
 80042f0:	f7fe fb60 	bl	80029b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80042f4:	480c      	ldr	r0, [pc, #48]	@ (8004328 <prvInitialiseTaskLists+0x6c>)
 80042f6:	f7fe fb5d 	bl	80029b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80042fa:	480c      	ldr	r0, [pc, #48]	@ (800432c <prvInitialiseTaskLists+0x70>)
 80042fc:	f7fe fb5a 	bl	80029b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004300:	480b      	ldr	r0, [pc, #44]	@ (8004330 <prvInitialiseTaskLists+0x74>)
 8004302:	f7fe fb57 	bl	80029b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <prvInitialiseTaskLists+0x78>)
 8004308:	4a05      	ldr	r2, [pc, #20]	@ (8004320 <prvInitialiseTaskLists+0x64>)
 800430a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <prvInitialiseTaskLists+0x7c>)
 800430e:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <prvInitialiseTaskLists+0x68>)
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000174 	.word	0x20000174
 8004320:	200001d8 	.word	0x200001d8
 8004324:	200001ec 	.word	0x200001ec
 8004328:	20000208 	.word	0x20000208
 800432c:	2000021c 	.word	0x2000021c
 8004330:	20000234 	.word	0x20000234
 8004334:	20000200 	.word	0x20000200
 8004338:	20000204 	.word	0x20000204

0800433c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004342:	e019      	b.n	8004378 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004344:	f000 fdce 	bl	8004ee4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <prvCheckTasksWaitingTermination+0x50>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fb99 	bl	8002a8c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <prvCheckTasksWaitingTermination+0x54>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a0b      	ldr	r2, [pc, #44]	@ (8004390 <prvCheckTasksWaitingTermination+0x54>)
 8004362:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004364:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	4a0a      	ldr	r2, [pc, #40]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800436c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800436e:	f000 fdeb 	bl	8004f48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f810 	bl	8004398 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2000021c 	.word	0x2000021c
 8004390:	20000248 	.word	0x20000248
 8004394:	20000230 	.word	0x20000230

08004398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fffd 	bl	80053a4 <vPortFree>
            vPortFree( pxTCB );
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fffa 	bl	80053a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043bc:	4b0a      	ldr	r3, [pc, #40]	@ (80043e8 <prvResetNextTaskUnblockTime+0x30>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <prvResetNextTaskUnblockTime+0x34>)
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80043ce:	e005      	b.n	80043dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <prvResetNextTaskUnblockTime+0x30>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a04      	ldr	r2, [pc, #16]	@ (80043ec <prvResetNextTaskUnblockTime+0x34>)
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000200 	.word	0x20000200
 80043ec:	20000268 	.word	0x20000268

080043f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80043f6:	4b0d      	ldr	r3, [pc, #52]	@ (800442c <xTaskGetSchedulerState+0x3c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80043fe:	2301      	movs	r3, #1
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	e008      	b.n	8004416 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004404:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <xTaskGetSchedulerState+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 800440c:	2302      	movs	r3, #2
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	e001      	b.n	8004416 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	20f5      	movs	r0, #245	@ 0xf5
 800441c:	f002 f9f4 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004420:	687b      	ldr	r3, [r7, #4]
    }
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000254 	.word	0x20000254
 8004430:	20000270 	.word	0x20000270

08004434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8094 	beq.w	8004574 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800444c:	4b4e      	ldr	r3, [pc, #312]	@ (8004588 <xTaskPriorityDisinherit+0x154>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d00b      	beq.n	800446e <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	613b      	str	r3, [r7, #16]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	60fb      	str	r3, [r7, #12]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	1e5a      	subs	r2, r3, #1
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d067      	beq.n	8004574 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d163      	bne.n	8004574 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe faeb 	bl	8002a8c <uxListRemove>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	2201      	movs	r2, #1
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43da      	mvns	r2, r3
 80044c8:	4b30      	ldr	r3, [pc, #192]	@ (800458c <xTaskPriorityDisinherit+0x158>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4013      	ands	r3, r2
 80044ce:	4a2f      	ldr	r2, [pc, #188]	@ (800458c <xTaskPriorityDisinherit+0x158>)
 80044d0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	f1c3 0205 	rsb	r2, r3, #5
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f002 fa85 	bl	80069f8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	4b25      	ldr	r3, [pc, #148]	@ (800458c <xTaskPriorityDisinherit+0x158>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	4a23      	ldr	r2, [pc, #140]	@ (800458c <xTaskPriorityDisinherit+0x158>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004504:	4922      	ldr	r1, [pc, #136]	@ (8004590 <xTaskPriorityDisinherit+0x15c>)
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	3304      	adds	r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	60da      	str	r2, [r3, #12]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	3204      	adds	r2, #4
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1d1a      	adds	r2, r3, #4
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4a13      	ldr	r2, [pc, #76]	@ (8004590 <xTaskPriorityDisinherit+0x15c>)
 8004544:	441a      	add	r2, r3
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	615a      	str	r2, [r3, #20]
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454e:	4910      	ldr	r1, [pc, #64]	@ (8004590 <xTaskPriorityDisinherit+0x15c>)
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004560:	1c59      	adds	r1, r3, #1
 8004562:	480b      	ldr	r0, [pc, #44]	@ (8004590 <xTaskPriorityDisinherit+0x15c>)
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4403      	add	r3, r0
 800456e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004570:	2301      	movs	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4619      	mov	r1, r3
 8004578:	20f7      	movs	r0, #247	@ 0xf7
 800457a:	f002 f945 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800457e:	69fb      	ldr	r3, [r7, #28]
    }
 8004580:	4618      	mov	r0, r3
 8004582:	3720      	adds	r7, #32
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000170 	.word	0x20000170
 800458c:	20000250 	.word	0x20000250
 8004590:	20000174 	.word	0x20000174

08004594 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800459e:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <prvAddCurrentTaskToDelayedList+0x100>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80045a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004698 <prvAddCurrentTaskToDelayedList+0x104>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80045aa:	4b3c      	ldr	r3, [pc, #240]	@ (800469c <prvAddCurrentTaskToDelayedList+0x108>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045b0:	4b3b      	ldr	r3, [pc, #236]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe fa68 	bl	8002a8c <uxListRemove>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10b      	bne.n	80045da <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80045c2:	4b37      	ldr	r3, [pc, #220]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	2201      	movs	r2, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	43da      	mvns	r2, r3
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <prvAddCurrentTaskToDelayedList+0x110>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4013      	ands	r3, r2
 80045d6:	4a33      	ldr	r2, [pc, #204]	@ (80046a4 <prvAddCurrentTaskToDelayedList+0x110>)
 80045d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d124      	bne.n	800462c <prvAddCurrentTaskToDelayedList+0x98>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d021      	beq.n	800462c <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045e8:	4b2f      	ldr	r3, [pc, #188]	@ (80046a8 <prvAddCurrentTaskToDelayedList+0x114>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	4b2c      	ldr	r3, [pc, #176]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	609a      	str	r2, [r3, #8]
 80045f6:	4b2a      	ldr	r3, [pc, #168]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	6892      	ldr	r2, [r2, #8]
 80045fe:	60da      	str	r2, [r3, #12]
 8004600:	4b27      	ldr	r3, [pc, #156]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	3204      	adds	r2, #4
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	1d1a      	adds	r2, r3, #4
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	609a      	str	r2, [r3, #8]
 8004616:	4b22      	ldr	r3, [pc, #136]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a23      	ldr	r2, [pc, #140]	@ (80046a8 <prvAddCurrentTaskToDelayedList+0x114>)
 800461c:	615a      	str	r2, [r3, #20]
 800461e:	4b22      	ldr	r3, [pc, #136]	@ (80046a8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a20      	ldr	r2, [pc, #128]	@ (80046a8 <prvAddCurrentTaskToDelayedList+0x114>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800462a:	e02e      	b.n	800468a <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004634:	4b1a      	ldr	r3, [pc, #104]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	429a      	cmp	r2, r3
 8004642:	d20d      	bcs.n	8004660 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2104      	movs	r1, #4
 800464a:	4618      	mov	r0, r3
 800464c:	f002 fa16 	bl	8006a7c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004650:	4b13      	ldr	r3, [pc, #76]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	6978      	ldr	r0, [r7, #20]
 800465a:	f7fe f9dc 	bl	8002a16 <vListInsert>
}
 800465e:	e014      	b.n	800468a <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004660:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2104      	movs	r1, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f002 fa08 	bl	8006a7c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800466c:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <prvAddCurrentTaskToDelayedList+0x10c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3304      	adds	r3, #4
 8004672:	4619      	mov	r1, r3
 8004674:	69b8      	ldr	r0, [r7, #24]
 8004676:	f7fe f9ce 	bl	8002a16 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <prvAddCurrentTaskToDelayedList+0x118>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d202      	bcs.n	800468a <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004684:	4a09      	ldr	r2, [pc, #36]	@ (80046ac <prvAddCurrentTaskToDelayedList+0x118>)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6013      	str	r3, [r2, #0]
}
 800468a:	bf00      	nop
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	2000024c 	.word	0x2000024c
 8004698:	20000200 	.word	0x20000200
 800469c:	20000204 	.word	0x20000204
 80046a0:	20000170 	.word	0x20000170
 80046a4:	20000250 	.word	0x20000250
 80046a8:	20000234 	.word	0x20000234
 80046ac:	20000268 	.word	0x20000268

080046b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80046ba:	f000 fa5b 	bl	8004b74 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80046be:	4b15      	ldr	r3, [pc, #84]	@ (8004714 <xTimerCreateTimerTask+0x64>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80046c6:	4b14      	ldr	r3, [pc, #80]	@ (8004718 <xTimerCreateTimerTask+0x68>)
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	2302      	movs	r3, #2
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2300      	movs	r3, #0
 80046d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80046d4:	4911      	ldr	r1, [pc, #68]	@ (800471c <xTimerCreateTimerTask+0x6c>)
 80046d6:	4812      	ldr	r0, [pc, #72]	@ (8004720 <xTimerCreateTimerTask+0x70>)
 80046d8:	f7fe ff0d 	bl	80034f6 <xTaskCreate>
 80046dc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	603b      	str	r3, [r7, #0]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4619      	mov	r1, r3
 8004700:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004704:	f002 f880 	bl	8006808 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004708:	687b      	ldr	r3, [r7, #4]
    }
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200002a4 	.word	0x200002a4
 8004718:	200002a8 	.word	0x200002a8
 800471c:	08007a28 	.word	0x08007a28
 8004720:	080047c9 	.word	0x080047c9

08004724 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004730:	e008      	b.n	8004744 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699a      	ldr	r2, [r3, #24]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	18d1      	adds	r1, r2, r3
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f8df 	bl	8004914 <prvInsertTimerInActiveList>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ea      	bne.n	8004732 <prvReloadTimer+0xe>
        }
    }
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004772:	4b14      	ldr	r3, [pc, #80]	@ (80047c4 <prvProcessExpiredTimer+0x5c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3304      	adds	r3, #4
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe f983 	bl	8002a8c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ffc3 	bl	8004724 <prvReloadTimer>
 800479e:	e008      	b.n	80047b2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	4798      	blx	r3
    }
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	2000029c 	.word	0x2000029c

080047c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047d0:	f107 0308 	add.w	r3, r7, #8
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 f859 	bl	800488c <prvGetNextExpireTime>
 80047da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4619      	mov	r1, r3
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f805 	bl	80047f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80047e6:	f000 f8d7 	bl	8004998 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047ea:	bf00      	nop
 80047ec:	e7f0      	b.n	80047d0 <prvTimerTask+0x8>
	...

080047f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80047fa:	f7ff f88f 	bl	800391c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f000 f866 	bl	80048d4 <prvSampleTimeNow>
 8004808:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d130      	bne.n	8004872 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <prvProcessTimerOrBlockTask+0x3c>
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	429a      	cmp	r2, r3
 800481c:	d806      	bhi.n	800482c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800481e:	f7ff f88b 	bl	8003938 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004822:	68f9      	ldr	r1, [r7, #12]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff ff9f 	bl	8004768 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800482a:	e024      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004832:	4b13      	ldr	r3, [pc, #76]	@ (8004880 <prvProcessTimerOrBlockTask+0x90>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <prvProcessTimerOrBlockTask+0x50>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <prvProcessTimerOrBlockTask+0x52>
 8004840:	2300      	movs	r3, #0
 8004842:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004844:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <prvProcessTimerOrBlockTask+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	f7fe fddd 	bl	8003410 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004856:	f7ff f86f 	bl	8003938 <xTaskResumeAll>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004860:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <prvProcessTimerOrBlockTask+0x98>)
 8004862:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
    }
 8004870:	e001      	b.n	8004876 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004872:	f7ff f861 	bl	8003938 <xTaskResumeAll>
    }
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200002a0 	.word	0x200002a0
 8004884:	200002a4 	.word	0x200002a4
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004894:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <prvGetNextExpireTime+0x44>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <prvGetNextExpireTime+0x16>
 800489e:	2201      	movs	r2, #1
 80048a0:	e000      	b.n	80048a4 <prvGetNextExpireTime+0x18>
 80048a2:	2200      	movs	r2, #0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b0:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <prvGetNextExpireTime+0x44>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	e001      	b.n	80048c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80048c0:	68fb      	ldr	r3, [r7, #12]
    }
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	2000029c 	.word	0x2000029c

080048d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80048dc:	f7ff f93e 	bl	8003b5c <xTaskGetTickCount>
 80048e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80048e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <prvSampleTimeNow+0x3c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d205      	bcs.n	80048f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80048ec:	f000 f91c 	bl	8004b28 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e002      	b.n	80048fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80048fe:	4a04      	ldr	r2, [pc, #16]	@ (8004910 <prvSampleTimeNow+0x3c>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004904:	68fb      	ldr	r3, [r7, #12]
    }
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200002ac 	.word	0x200002ac

08004914 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	d812      	bhi.n	8004960 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	1ad2      	subs	r2, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	429a      	cmp	r2, r3
 8004946:	d302      	bcc.n	800494e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e01b      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <prvInsertTimerInActiveList+0x7c>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3304      	adds	r3, #4
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fe f85c 	bl	8002a16 <vListInsert>
 800495e:	e012      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d206      	bcs.n	8004976 <prvInsertTimerInActiveList+0x62>
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e007      	b.n	8004986 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <prvInsertTimerInActiveList+0x80>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fe f848 	bl	8002a16 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004986:	697b      	ldr	r3, [r7, #20]
    }
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	200002a0 	.word	0x200002a0
 8004994:	2000029c 	.word	0x2000029c

08004998 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
 80049a8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80049aa:	e0a9      	b.n	8004b00 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f2c0 80a6 	blt.w	8004b00 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe f861 	bl	8002a8c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff ff81 	bl	80048d4 <prvSampleTimeNow>
 80049d2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	2b08      	cmp	r3, #8
 80049da:	f200 808e 	bhi.w	8004afa <prvProcessReceivedCommands+0x162>
 80049de:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <prvProcessReceivedCommands+0x4c>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004a09 	.word	0x08004a09
 80049e8:	08004a09 	.word	0x08004a09
 80049ec:	08004a71 	.word	0x08004a71
 80049f0:	08004a85 	.word	0x08004a85
 80049f4:	08004ad1 	.word	0x08004ad1
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a09 	.word	0x08004a09
 8004a00:	08004a71 	.word	0x08004a71
 8004a04:	08004a85 	.word	0x08004a85
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	18d1      	adds	r1, r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	69f8      	ldr	r0, [r7, #28]
 8004a28:	f7ff ff74 	bl	8004914 <prvInsertTimerInActiveList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d065      	beq.n	8004afe <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	4413      	add	r3, r2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	69f8      	ldr	r0, [r7, #28]
 8004a4e:	f7ff fe69 	bl	8004724 <prvReloadTimer>
 8004a52:	e008      	b.n	8004a66 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	69f8      	ldr	r0, [r7, #28]
 8004a6c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004a6e:	e046      	b.n	8004afe <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004a82:	e03d      	b.n	8004b00 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	617b      	str	r3, [r7, #20]
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	699a      	ldr	r2, [r3, #24]
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	18d1      	adds	r1, r2, r3
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	69f8      	ldr	r0, [r7, #28]
 8004aca:	f7ff ff23 	bl	8004914 <prvInsertTimerInActiveList>
                        break;
 8004ace:	e017      	b.n	8004b00 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004ade:	69f8      	ldr	r0, [r7, #28]
 8004ae0:	f000 fc60 	bl	80053a4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004ae4:	e00c      	b.n	8004b00 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004af8:	e002      	b.n	8004b00 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <prvProcessReceivedCommands+0x168>
                        break;
 8004afe:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004b00:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <prvProcessReceivedCommands+0x18c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f107 0108 	add.w	r1, r7, #8
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fa0e 	bl	8002f2c <xQueueReceive>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f47f af4a 	bne.w	80049ac <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200002a4 	.word	0x200002a4

08004b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b2e:	e009      	b.n	8004b44 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b30:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <prvSwitchTimerLists+0x44>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b3e:	6838      	ldr	r0, [r7, #0]
 8004b40:	f7ff fe12 	bl	8004768 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b44:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <prvSwitchTimerLists+0x44>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <prvSwitchTimerLists+0x44>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <prvSwitchTimerLists+0x48>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	@ (8004b6c <prvSwitchTimerLists+0x44>)
 8004b5a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004b5c:	4a04      	ldr	r2, [pc, #16]	@ (8004b70 <prvSwitchTimerLists+0x48>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6013      	str	r3, [r2, #0]
    }
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	2000029c 	.word	0x2000029c
 8004b70:	200002a0 	.word	0x200002a0

08004b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004b78:	f000 f9b4 	bl	8004ee4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <prvCheckForValidListAndQueue+0x54>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004b84:	4811      	ldr	r0, [pc, #68]	@ (8004bcc <prvCheckForValidListAndQueue+0x58>)
 8004b86:	f7fd ff15 	bl	80029b4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004b8a:	4811      	ldr	r0, [pc, #68]	@ (8004bd0 <prvCheckForValidListAndQueue+0x5c>)
 8004b8c:	f7fd ff12 	bl	80029b4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004b92:	4a0e      	ldr	r2, [pc, #56]	@ (8004bcc <prvCheckForValidListAndQueue+0x58>)
 8004b94:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004b96:	4b10      	ldr	r3, [pc, #64]	@ (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b98:	4a0d      	ldr	r2, [pc, #52]	@ (8004bd0 <prvCheckForValidListAndQueue+0x5c>)
 8004b9a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	210c      	movs	r1, #12
 8004ba0:	200a      	movs	r0, #10
 8004ba2:	f7fe f839 	bl	8002c18 <xQueueGenericCreate>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4a07      	ldr	r2, [pc, #28]	@ (8004bc8 <prvCheckForValidListAndQueue+0x54>)
 8004baa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <prvCheckForValidListAndQueue+0x54>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bb4:	4b04      	ldr	r3, [pc, #16]	@ (8004bc8 <prvCheckForValidListAndQueue+0x54>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fbd8 	bl	8003370 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004bc0:	f000 f9c2 	bl	8004f48 <vPortExitCritical>
    }
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200002a4 	.word	0x200002a4
 8004bcc:	20000274 	.word	0x20000274
 8004bd0:	20000288 	.word	0x20000288
 8004bd4:	2000029c 	.word	0x2000029c
 8004bd8:	200002a0 	.word	0x200002a0
 8004bdc:	08007a30 	.word	0x08007a30

08004be0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004bf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3b04      	subs	r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3b04      	subs	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004c10:	4a0c      	ldr	r2, [pc, #48]	@ (8004c44 <pxPortInitialiseStack+0x64>)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3b14      	subs	r3, #20
 8004c1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3b04      	subs	r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f06f 0202 	mvn.w	r2, #2
 8004c2e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3b20      	subs	r3, #32
 8004c34:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	08004c49 	.word	0x08004c49

08004c48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004c52:	4b13      	ldr	r3, [pc, #76]	@ (8004ca0 <prvTaskExitError+0x58>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d00b      	beq.n	8004c74 <prvTaskExitError+0x2c>
    __asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	60fb      	str	r3, [r7, #12]
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <prvTaskExitError+0x28>
    __asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	60bb      	str	r3, [r7, #8]
}
 8004c86:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004c88:	bf00      	nop
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0fc      	beq.n	8004c8a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004c90:	bf00      	nop
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000010 	.word	0x20000010
	...

08004cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004cb0:	4b07      	ldr	r3, [pc, #28]	@ (8004cd0 <pxCurrentTCBConst2>)
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	f380 8809 	msr	PSP, r0
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8811 	msr	BASEPRI, r0
 8004cca:	4770      	bx	lr
 8004ccc:	f3af 8000 	nop.w

08004cd0 <pxCurrentTCBConst2>:
 8004cd0:	20000170 	.word	0x20000170
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004cd8:	4808      	ldr	r0, [pc, #32]	@ (8004cfc <prvPortStartFirstTask+0x24>)
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	6800      	ldr	r0, [r0, #0]
 8004cde:	f380 8808 	msr	MSP, r0
 8004ce2:	f04f 0000 	mov.w	r0, #0
 8004ce6:	f380 8814 	msr	CONTROL, r0
 8004cea:	b662      	cpsie	i
 8004cec:	b661      	cpsie	f
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	df00      	svc	0
 8004cf8:	bf00      	nop
 8004cfa:	0000      	.short	0x0000
 8004cfc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop

08004d04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08c      	sub	sp, #48	@ 0x30
 8004d08:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d0a:	4b69      	ldr	r3, [pc, #420]	@ (8004eb0 <xPortStartScheduler+0x1ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a69      	ldr	r2, [pc, #420]	@ (8004eb4 <xPortStartScheduler+0x1b0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10b      	bne.n	8004d2c <xPortStartScheduler+0x28>
    __asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d2c:	4b60      	ldr	r3, [pc, #384]	@ (8004eb0 <xPortStartScheduler+0x1ac>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a61      	ldr	r2, [pc, #388]	@ (8004eb8 <xPortStartScheduler+0x1b4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10b      	bne.n	8004d4e <xPortStartScheduler+0x4a>
    __asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	623b      	str	r3, [r7, #32]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ebc <xPortStartScheduler+0x1b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	332c      	adds	r3, #44	@ 0x2c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a59      	ldr	r2, [pc, #356]	@ (8004ec0 <xPortStartScheduler+0x1bc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <xPortStartScheduler+0x74>
    __asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	61fb      	str	r3, [r7, #28]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	3338      	adds	r3, #56	@ 0x38
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a51      	ldr	r2, [pc, #324]	@ (8004ec4 <xPortStartScheduler+0x1c0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <xPortStartScheduler+0x98>
    __asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	61bb      	str	r3, [r7, #24]
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004da0:	4b49      	ldr	r3, [pc, #292]	@ (8004ec8 <xPortStartScheduler+0x1c4>)
 8004da2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	22ff      	movs	r2, #255	@ 0xff
 8004db0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <xPortStartScheduler+0x1c8>)
 8004dc6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004dc8:	4b40      	ldr	r3, [pc, #256]	@ (8004ecc <xPortStartScheduler+0x1c8>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10b      	bne.n	8004de8 <xPortStartScheduler+0xe4>
    __asm volatile
 8004dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	617b      	str	r3, [r7, #20]
}
 8004de2:	bf00      	nop
 8004de4:	bf00      	nop
 8004de6:	e7fd      	b.n	8004de4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d013      	beq.n	8004e1e <xPortStartScheduler+0x11a>
    __asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	613b      	str	r3, [r7, #16]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	3301      	adds	r3, #1
 8004e12:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e14:	79fb      	ldrb	r3, [r7, #7]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e26:	2b80      	cmp	r3, #128	@ 0x80
 8004e28:	d0f1      	beq.n	8004e0e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d103      	bne.n	8004e38 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004e30:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e004      	b.n	8004e42 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f1c3 0307 	rsb	r3, r3, #7
 8004e3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e40:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e42:	4b23      	ldr	r3, [pc, #140]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e4a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e4c:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e54:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed0 <xPortStartScheduler+0x1cc>)
 8004e56:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e60:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <xPortStartScheduler+0x1d0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed4 <xPortStartScheduler+0x1d0>)
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e6c:	4b19      	ldr	r3, [pc, #100]	@ (8004ed4 <xPortStartScheduler+0x1d0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a18      	ldr	r2, [pc, #96]	@ (8004ed4 <xPortStartScheduler+0x1d0>)
 8004e72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e76:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004e78:	4b17      	ldr	r3, [pc, #92]	@ (8004ed8 <xPortStartScheduler+0x1d4>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e7e:	f000 f8ed 	bl	800505c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e82:	4b16      	ldr	r3, [pc, #88]	@ (8004edc <xPortStartScheduler+0x1d8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004e88:	f000 f90c 	bl	80050a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ee0 <xPortStartScheduler+0x1dc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a13      	ldr	r2, [pc, #76]	@ (8004ee0 <xPortStartScheduler+0x1dc>)
 8004e92:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e96:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004e98:	f7ff ff1e 	bl	8004cd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004e9c:	f7fe ffa8 	bl	8003df0 <vTaskSwitchContext>
    prvTaskExitError();
 8004ea0:	f7ff fed2 	bl	8004c48 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3730      	adds	r7, #48	@ 0x30
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed00 	.word	0xe000ed00
 8004eb4:	410fc271 	.word	0x410fc271
 8004eb8:	410fc270 	.word	0x410fc270
 8004ebc:	e000ed08 	.word	0xe000ed08
 8004ec0:	08004cb1 	.word	0x08004cb1
 8004ec4:	08004fa1 	.word	0x08004fa1
 8004ec8:	e000e400 	.word	0xe000e400
 8004ecc:	200002b0 	.word	0x200002b0
 8004ed0:	200002b4 	.word	0x200002b4
 8004ed4:	e000ed20 	.word	0xe000ed20
 8004ed8:	e000ed1c 	.word	0xe000ed1c
 8004edc:	20000010 	.word	0x20000010
 8004ee0:	e000ef34 	.word	0xe000ef34

08004ee4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
    __asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	607b      	str	r3, [r7, #4]
}
 8004efc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004efe:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <vPortEnterCritical+0x5c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	4a0e      	ldr	r2, [pc, #56]	@ (8004f40 <vPortEnterCritical+0x5c>)
 8004f06:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f08:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <vPortEnterCritical+0x5c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d110      	bne.n	8004f32 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f10:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <vPortEnterCritical+0x60>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <vPortEnterCritical+0x4e>
    __asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	603b      	str	r3, [r7, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vPortEnterCritical+0x4a>
    }
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000010 	.word	0x20000010
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f4e:	4b12      	ldr	r3, [pc, #72]	@ (8004f98 <vPortExitCritical+0x50>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <vPortExitCritical+0x26>
    __asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	f383 8811 	msr	BASEPRI, r3
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f3bf 8f4f 	dsb	sy
 8004f66:	607b      	str	r3, [r7, #4]
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	e7fd      	b.n	8004f6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <vPortExitCritical+0x50>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	4a08      	ldr	r2, [pc, #32]	@ (8004f98 <vPortExitCritical+0x50>)
 8004f76:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f78:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <vPortExitCritical+0x50>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <vPortExitCritical+0x44>
 8004f80:	2300      	movs	r3, #0
 8004f82:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004f8a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000010 	.word	0x20000010
 8004f9c:	00000000 	.word	0x00000000

08004fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004fa0:	f3ef 8009 	mrs	r0, PSP
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <pxCurrentTCBConst>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f01e 0f10 	tst.w	lr, #16
 8004fb0:	bf08      	it	eq
 8004fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004fc4:	f380 8811 	msr	BASEPRI, r0
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f7fe ff0e 	bl	8003df0 <vTaskSwitchContext>
 8004fd4:	f04f 0000 	mov.w	r0, #0
 8004fd8:	f380 8811 	msr	BASEPRI, r0
 8004fdc:	bc09      	pop	{r0, r3}
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	6808      	ldr	r0, [r1, #0]
 8004fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe6:	f01e 0f10 	tst.w	lr, #16
 8004fea:	bf08      	it	eq
 8004fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ff0:	f380 8809 	msr	PSP, r0
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst>:
 8005000:	20000170 	.word	0x20000170
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
    __asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005022:	f001 fb3b 	bl	800669c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005026:	f7fe fdc1 	bl	8003bac <xTaskIncrementTick>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005030:	f001 fb92 	bl	8006758 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005034:	4b08      	ldr	r3, [pc, #32]	@ (8005058 <SysTick_Handler+0x50>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e001      	b.n	8005042 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800503e:	f001 fb6f 	bl	8006720 <SEGGER_SYSVIEW_RecordExitISR>
 8005042:	2300      	movs	r3, #0
 8005044:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f383 8811 	msr	BASEPRI, r3
}
 800504c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005066:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <vPortSetupTimerInterrupt+0x38>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800506c:	4b0a      	ldr	r3, [pc, #40]	@ (8005098 <vPortSetupTimerInterrupt+0x3c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <vPortSetupTimerInterrupt+0x40>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <vPortSetupTimerInterrupt+0x44>)
 800507a:	3b01      	subs	r3, #1
 800507c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <vPortSetupTimerInterrupt+0x34>)
 8005080:	2207      	movs	r2, #7
 8005082:	601a      	str	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	e000e010 	.word	0xe000e010
 8005094:	e000e018 	.word	0xe000e018
 8005098:	20000000 	.word	0x20000000
 800509c:	10624dd3 	.word	0x10624dd3
 80050a0:	e000e014 	.word	0xe000e014

080050a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80050a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80050b4 <vPortEnableVFP+0x10>
 80050a8:	6801      	ldr	r1, [r0, #0]
 80050aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80050ae:	6001      	str	r1, [r0, #0]
 80050b0:	4770      	bx	lr
 80050b2:	0000      	.short	0x0000
 80050b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop

080050bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80050c2:	f3ef 8305 	mrs	r3, IPSR
 80050c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b0f      	cmp	r3, #15
 80050cc:	d915      	bls.n	80050fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050ce:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <vPortValidateInterruptPriority+0x74>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80050d8:	4b16      	ldr	r3, [pc, #88]	@ (8005134 <vPortValidateInterruptPriority+0x78>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	7afa      	ldrb	r2, [r7, #11]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20b      	bcs.n	80050fa <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	607b      	str	r3, [r7, #4]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005138 <vPortValidateInterruptPriority+0x7c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005102:	4b0e      	ldr	r3, [pc, #56]	@ (800513c <vPortValidateInterruptPriority+0x80>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d90b      	bls.n	8005122 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <vPortValidateInterruptPriority+0x62>
    }
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e3f0 	.word	0xe000e3f0
 8005134:	200002b0 	.word	0x200002b0
 8005138:	e000ed0c 	.word	0xe000ed0c
 800513c:	200002b4 	.word	0x200002b4

08005140 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	@ 0x38
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d022      	beq.n	8005198 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005152:	2308      	movs	r3, #8
 8005154:	43db      	mvns	r3, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d81b      	bhi.n	8005194 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800515c:	2208      	movs	r2, #8
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4413      	add	r3, r2
 8005162:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d014      	beq.n	8005198 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	f1c3 0308 	rsb	r3, r3, #8
 8005178:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800517a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517c:	43db      	mvns	r3, r3
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	429a      	cmp	r2, r3
 8005182:	d804      	bhi.n	800518e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	4413      	add	r3, r2
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e004      	b.n	8005198 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	e001      	b.n	8005198 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005198:	f7fe fbc0 	bl	800391c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800519c:	4b7a      	ldr	r3, [pc, #488]	@ (8005388 <pvPortMalloc+0x248>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80051a4:	f000 f978 	bl	8005498 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f2c0 80d3 	blt.w	8005356 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 80cf 	beq.w	8005356 <pvPortMalloc+0x216>
 80051b8:	4b74      	ldr	r3, [pc, #464]	@ (800538c <pvPortMalloc+0x24c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	f200 80c9 	bhi.w	8005356 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80051c4:	4b72      	ldr	r3, [pc, #456]	@ (8005390 <pvPortMalloc+0x250>)
 80051c6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80051c8:	4b71      	ldr	r3, [pc, #452]	@ (8005390 <pvPortMalloc+0x250>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	4a70      	ldr	r2, [pc, #448]	@ (8005394 <pvPortMalloc+0x254>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d305      	bcc.n	80051e2 <pvPortMalloc+0xa2>
 80051d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d8:	4a6f      	ldr	r2, [pc, #444]	@ (8005398 <pvPortMalloc+0x258>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d801      	bhi.n	80051e2 <pvPortMalloc+0xa2>
 80051de:	2301      	movs	r3, #1
 80051e0:	e000      	b.n	80051e4 <pvPortMalloc+0xa4>
 80051e2:	2300      	movs	r3, #0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d129      	bne.n	800523c <pvPortMalloc+0xfc>
    __asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
 80051f8:	623b      	str	r3, [r7, #32]
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	e7fd      	b.n	80051fc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800520a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800520c:	4a61      	ldr	r2, [pc, #388]	@ (8005394 <pvPortMalloc+0x254>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d305      	bcc.n	800521e <pvPortMalloc+0xde>
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	4a60      	ldr	r2, [pc, #384]	@ (8005398 <pvPortMalloc+0x258>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d801      	bhi.n	800521e <pvPortMalloc+0xde>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <pvPortMalloc+0xe0>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <pvPortMalloc+0xfc>
    __asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	61fb      	str	r3, [r7, #28]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800523c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d903      	bls.n	800524e <pvPortMalloc+0x10e>
 8005246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1d8      	bne.n	8005200 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800524e:	4b4e      	ldr	r3, [pc, #312]	@ (8005388 <pvPortMalloc+0x248>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005254:	429a      	cmp	r2, r3
 8005256:	d07e      	beq.n	8005356 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	4413      	add	r3, r2
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005264:	4a4b      	ldr	r2, [pc, #300]	@ (8005394 <pvPortMalloc+0x254>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d305      	bcc.n	8005276 <pvPortMalloc+0x136>
 800526a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526c:	4a4a      	ldr	r2, [pc, #296]	@ (8005398 <pvPortMalloc+0x258>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d801      	bhi.n	8005276 <pvPortMalloc+0x136>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <pvPortMalloc+0x138>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <pvPortMalloc+0x154>
    __asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	61bb      	str	r3, [r7, #24]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800529c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90b      	bls.n	80052be <pvPortMalloc+0x17e>
    __asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	617b      	str	r3, [r7, #20]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	2308      	movs	r3, #8
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d924      	bls.n	8005318 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00b      	beq.n	80052f8 <pvPortMalloc+0x1b8>
    __asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	613b      	str	r3, [r7, #16]
}
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1ad2      	subs	r2, r2, r3
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005316:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005318:	4b1c      	ldr	r3, [pc, #112]	@ (800538c <pvPortMalloc+0x24c>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a1a      	ldr	r2, [pc, #104]	@ (800538c <pvPortMalloc+0x24c>)
 8005324:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005326:	4b19      	ldr	r3, [pc, #100]	@ (800538c <pvPortMalloc+0x24c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b1c      	ldr	r3, [pc, #112]	@ (800539c <pvPortMalloc+0x25c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d203      	bcs.n	800533a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005332:	4b16      	ldr	r3, [pc, #88]	@ (800538c <pvPortMalloc+0x24c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a19      	ldr	r2, [pc, #100]	@ (800539c <pvPortMalloc+0x25c>)
 8005338:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005344:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800534c:	4b14      	ldr	r3, [pc, #80]	@ (80053a0 <pvPortMalloc+0x260>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a13      	ldr	r2, [pc, #76]	@ (80053a0 <pvPortMalloc+0x260>)
 8005354:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005356:	f7fe faef 	bl	8003938 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <pvPortMalloc+0x23c>
    __asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <pvPortMalloc+0x238>
    return pvReturn;
 800537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800537e:	4618      	mov	r0, r3
 8005380:	3738      	adds	r7, #56	@ 0x38
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20012ec0 	.word	0x20012ec0
 800538c:	20012ec4 	.word	0x20012ec4
 8005390:	20012eb8 	.word	0x20012eb8
 8005394:	200002b8 	.word	0x200002b8
 8005398:	20012eb7 	.word	0x20012eb7
 800539c:	20012ec8 	.word	0x20012ec8
 80053a0:	20012ecc 	.word	0x20012ecc

080053a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d064      	beq.n	8005480 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80053b6:	2308      	movs	r3, #8
 80053b8:	425b      	negs	r3, r3
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	4a30      	ldr	r2, [pc, #192]	@ (8005488 <vPortFree+0xe4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d305      	bcc.n	80053d8 <vPortFree+0x34>
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	4a2f      	ldr	r2, [pc, #188]	@ (800548c <vPortFree+0xe8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d801      	bhi.n	80053d8 <vPortFree+0x34>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <vPortFree+0x36>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <vPortFree+0x52>
    __asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db0b      	blt.n	8005416 <vPortFree+0x72>
    __asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	613b      	str	r3, [r7, #16]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <vPortFree+0x92>
    __asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	60fb      	str	r3, [r7, #12]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	0fdb      	lsrs	r3, r3, #31
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01c      	beq.n	8005480 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d118      	bne.n	8005480 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800545a:	f7fe fa5f 	bl	800391c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <vPortFree+0xec>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4413      	add	r3, r2
 8005468:	4a09      	ldr	r2, [pc, #36]	@ (8005490 <vPortFree+0xec>)
 800546a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800546c:	69b8      	ldr	r0, [r7, #24]
 800546e:	f000 f86d 	bl	800554c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005472:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <vPortFree+0xf0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	4a06      	ldr	r2, [pc, #24]	@ (8005494 <vPortFree+0xf0>)
 800547a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800547c:	f7fe fa5c 	bl	8003938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005480:	bf00      	nop
 8005482:	3720      	adds	r7, #32
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	200002b8 	.word	0x200002b8
 800548c:	20012eb7 	.word	0x20012eb7
 8005490:	20012ec4 	.word	0x20012ec4
 8005494:	20012ed0 	.word	0x20012ed0

08005498 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800549e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80054a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80054a4:	4b24      	ldr	r3, [pc, #144]	@ (8005538 <prvHeapInit+0xa0>)
 80054a6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3307      	adds	r3, #7
 80054b6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005538 <prvHeapInit+0xa0>)
 80054c8:	4413      	add	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <prvHeapInit+0xa4>)
 80054d0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80054d2:	4b1a      	ldr	r3, [pc, #104]	@ (800553c <prvHeapInit+0xa4>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80054e0:	2208      	movs	r2, #8
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a13      	ldr	r2, [pc, #76]	@ (8005540 <prvHeapInit+0xa8>)
 80054f4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80054f6:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <prvHeapInit+0xa8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <prvHeapInit+0xa8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <prvHeapInit+0xa8>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a08      	ldr	r2, [pc, #32]	@ (8005544 <prvHeapInit+0xac>)
 8005522:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a07      	ldr	r2, [pc, #28]	@ (8005548 <prvHeapInit+0xb0>)
 800552a:	6013      	str	r3, [r2, #0]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	200002b8 	.word	0x200002b8
 800553c:	20012eb8 	.word	0x20012eb8
 8005540:	20012ec0 	.word	0x20012ec0
 8005544:	20012ec8 	.word	0x20012ec8
 8005548:	20012ec4 	.word	0x20012ec4

0800554c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005554:	4b36      	ldr	r3, [pc, #216]	@ (8005630 <prvInsertBlockIntoFreeList+0xe4>)
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e002      	b.n	8005560 <prvInsertBlockIntoFreeList+0x14>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d8f7      	bhi.n	800555a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	4a30      	ldr	r2, [pc, #192]	@ (8005630 <prvInsertBlockIntoFreeList+0xe4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d018      	beq.n	80055a4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	4a2f      	ldr	r2, [pc, #188]	@ (8005634 <prvInsertBlockIntoFreeList+0xe8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d305      	bcc.n	8005586 <prvInsertBlockIntoFreeList+0x3a>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	4a2e      	ldr	r2, [pc, #184]	@ (8005638 <prvInsertBlockIntoFreeList+0xec>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d801      	bhi.n	8005586 <prvInsertBlockIntoFreeList+0x3a>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <prvInsertBlockIntoFreeList+0x3c>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	60fb      	str	r3, [r7, #12]
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	e7fd      	b.n	80055a0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4413      	add	r3, r2
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d108      	bne.n	80055c8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	441a      	add	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	441a      	add	r2, r3
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d118      	bne.n	800560e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b16      	ldr	r3, [pc, #88]	@ (800563c <prvInsertBlockIntoFreeList+0xf0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d00d      	beq.n	8005604 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e008      	b.n	8005616 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005604:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <prvInsertBlockIntoFreeList+0xf0>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	e003      	b.n	8005616 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d002      	beq.n	8005624 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	20012eb8 	.word	0x20012eb8
 8005634:	200002b8 	.word	0x200002b8
 8005638:	20012eb7 	.word	0x20012eb7
 800563c:	20012ec0 	.word	0x20012ec0

08005640 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005644:	4803      	ldr	r0, [pc, #12]	@ (8005654 <_cbSendSystemDesc+0x14>)
 8005646:	f000 ffd3 	bl	80065f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800564a:	4803      	ldr	r0, [pc, #12]	@ (8005658 <_cbSendSystemDesc+0x18>)
 800564c:	f000 ffd0 	bl	80065f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}
 8005654:	08007a38 	.word	0x08007a38
 8005658:	08007a64 	.word	0x08007a64

0800565c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005660:	4b06      	ldr	r3, [pc, #24]	@ (800567c <SEGGER_SYSVIEW_Conf+0x20>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <SEGGER_SYSVIEW_Conf+0x20>)
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	4b05      	ldr	r3, [pc, #20]	@ (8005680 <SEGGER_SYSVIEW_Conf+0x24>)
 800566a:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <SEGGER_SYSVIEW_Conf+0x28>)
 800566c:	f000 fc46 	bl	8005efc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005670:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005674:	f000 fc86 	bl	8005f84 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005678:	bf00      	nop
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000000 	.word	0x20000000
 8005680:	08005641 	.word	0x08005641
 8005684:	08007b20 	.word	0x08007b20

08005688 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800568e:	4b26      	ldr	r3, [pc, #152]	@ (8005728 <_DoInit+0xa0>)
 8005690:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005692:	22a8      	movs	r2, #168	@ 0xa8
 8005694:	2100      	movs	r1, #0
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f001 fce8 	bl	800706c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2203      	movs	r2, #3
 80056a0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2203      	movs	r2, #3
 80056a6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4a20      	ldr	r2, [pc, #128]	@ (800572c <_DoInit+0xa4>)
 80056ac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005730 <_DoInit+0xa8>)
 80056b2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2200      	movs	r2, #0
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <_DoInit+0xa4>)
 80056d2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <_DoInit+0xac>)
 80056d8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2210      	movs	r2, #16
 80056de:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2200      	movs	r2, #0
 80056ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2200      	movs	r2, #0
 80056f0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80056f2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80056f6:	2300      	movs	r3, #0
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	e00c      	b.n	8005716 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1c3 030f 	rsb	r3, r3, #15
 8005702:	4a0d      	ldr	r2, [pc, #52]	@ (8005738 <_DoInit+0xb0>)
 8005704:	5cd1      	ldrb	r1, [r2, r3]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	460a      	mov	r2, r1
 800570e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3301      	adds	r3, #1
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d9ef      	bls.n	80056fc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800571c:	f3bf 8f5f 	dmb	sy
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20012ed4 	.word	0x20012ed4
 800572c:	08007a74 	.word	0x08007a74
 8005730:	20012f7c 	.word	0x20012f7c
 8005734:	2001337c 	.word	0x2001337c
 8005738:	08007b00 	.word	0x08007b00

0800573c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b08c      	sub	sp, #48	@ 0x30
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005748:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <SEGGER_RTT_ReadNoLock+0x108>)
 800574a:	623b      	str	r3, [r7, #32]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b53      	cmp	r3, #83	@ 0x53
 8005754:	d001      	beq.n	800575a <SEGGER_RTT_ReadNoLock+0x1e>
 8005756:	f7ff ff97 	bl	8005688 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	3360      	adds	r3, #96	@ 0x60
 8005766:	4a37      	ldr	r2, [pc, #220]	@ (8005844 <SEGGER_RTT_ReadNoLock+0x108>)
 8005768:	4413      	add	r3, r2
 800576a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800577c:	2300      	movs	r3, #0
 800577e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	429a      	cmp	r2, r3
 8005786:	d92b      	bls.n	80057e0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4293      	cmp	r3, r2
 8005798:	bf28      	it	cs
 800579a:	4613      	movcs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	4413      	add	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	6939      	ldr	r1, [r7, #16]
 80057ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80057ae:	f001 fc91 	bl	80070d4 <memcpy>
    NumBytesRead += NumBytesRem;
 80057b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4413      	add	r3, r2
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d8:	429a      	cmp	r2, r3
 80057da:	d101      	bne.n	80057e0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80057dc:	2300      	movs	r3, #0
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4293      	cmp	r3, r2
 80057ee:	bf28      	it	cs
 80057f0:	4613      	movcs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d019      	beq.n	800582e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	4413      	add	r3, r2
 8005802:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	6939      	ldr	r1, [r7, #16]
 8005808:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800580a:	f001 fc63 	bl	80070d4 <memcpy>
    NumBytesRead += NumBytesRem;
 800580e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	4413      	add	r3, r2
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005838:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800583c:	4618      	mov	r0, r3
 800583e:	3730      	adds	r7, #48	@ 0x30
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20012ed4 	.word	0x20012ed4

08005848 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005856:	4b3d      	ldr	r3, [pc, #244]	@ (800594c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b53      	cmp	r3, #83	@ 0x53
 8005862:	d001      	beq.n	8005868 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005864:	f7ff ff10 	bl	8005688 <_DoInit>
  SEGGER_RTT_LOCK();
 8005868:	f3ef 8311 	mrs	r3, BASEPRI
 800586c:	f04f 0120 	mov.w	r1, #32
 8005870:	f381 8811 	msr	BASEPRI, r1
 8005874:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005876:	4b35      	ldr	r3, [pc, #212]	@ (800594c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005878:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800587e:	6939      	ldr	r1, [r7, #16]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	4613      	mov	r3, r2
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4413      	add	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	440b      	add	r3, r1
 800588e:	3304      	adds	r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	3301      	adds	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	dbeb      	blt.n	800587e <SEGGER_RTT_AllocUpBuffer+0x36>
 80058a6:	e000      	b.n	80058aa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80058a8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	da3f      	bge.n	8005934 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80058b4:	6939      	ldr	r1, [r7, #16]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	4613      	mov	r3, r2
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	440b      	add	r3, r1
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80058c8:	6939      	ldr	r1, [r7, #16]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	4613      	mov	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	4413      	add	r3, r2
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	440b      	add	r3, r1
 80058d8:	3304      	adds	r3, #4
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80058de:	6939      	ldr	r1, [r7, #16]
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	440b      	add	r3, r1
 80058ec:	3320      	adds	r3, #32
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058f2:	6939      	ldr	r1, [r7, #16]
 80058f4:	69fa      	ldr	r2, [r7, #28]
 80058f6:	4613      	mov	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	3328      	adds	r3, #40	@ 0x28
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005906:	6939      	ldr	r1, [r7, #16]
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	440b      	add	r3, r1
 8005914:	3324      	adds	r3, #36	@ 0x24
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800591a:	6939      	ldr	r1, [r7, #16]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	440b      	add	r3, r1
 8005928:	332c      	adds	r3, #44	@ 0x2c
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800592e:	f3bf 8f5f 	dmb	sy
 8005932:	e002      	b.n	800593a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005940:	69fb      	ldr	r3, [r7, #28]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	20012ed4 	.word	0x20012ed4

08005950 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	@ 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800595e:	4b21      	ldr	r3, [pc, #132]	@ (80059e4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005960:	623b      	str	r3, [r7, #32]
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b53      	cmp	r3, #83	@ 0x53
 800596a:	d001      	beq.n	8005970 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800596c:	f7ff fe8c 	bl	8005688 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005970:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005972:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d82c      	bhi.n	80059d4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800597a:	f3ef 8311 	mrs	r3, BASEPRI
 800597e:	f04f 0120 	mov.w	r1, #32
 8005982:	f381 8811 	msr	BASEPRI, r1
 8005986:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	3360      	adds	r3, #96	@ 0x60
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00e      	beq.n	80059be <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	2200      	movs	r2, #0
 80059bc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059c4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d2:	e002      	b.n	80059da <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3728      	adds	r7, #40	@ 0x28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20012ed4 	.word	0x20012ed4

080059e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	60fa      	str	r2, [r7, #12]
 80059fe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b80      	cmp	r3, #128	@ 0x80
 8005a04:	d90a      	bls.n	8005a1c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005a06:	2380      	movs	r3, #128	@ 0x80
 8005a08:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005a0a:	e007      	b.n	8005a1c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	1c53      	adds	r3, r2, #1
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	60f9      	str	r1, [r7, #12]
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	1e5a      	subs	r2, r3, #1
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <_EncodeStr+0x46>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ee      	bne.n	8005a0c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3307      	adds	r3, #7
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005a66:	4b34      	ldr	r3, [pc, #208]	@ (8005b38 <_HandleIncomingPacket+0xd8>)
 8005a68:	7e1b      	ldrb	r3, [r3, #24]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	1cfb      	adds	r3, r7, #3
 8005a6e:	2201      	movs	r2, #1
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7ff fe63 	bl	800573c <SEGGER_RTT_ReadNoLock>
 8005a76:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d057      	beq.n	8005b2e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	2b80      	cmp	r3, #128	@ 0x80
 8005a82:	d031      	beq.n	8005ae8 <_HandleIncomingPacket+0x88>
 8005a84:	2b80      	cmp	r3, #128	@ 0x80
 8005a86:	dc40      	bgt.n	8005b0a <_HandleIncomingPacket+0xaa>
 8005a88:	2b07      	cmp	r3, #7
 8005a8a:	dc15      	bgt.n	8005ab8 <_HandleIncomingPacket+0x58>
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dd3c      	ble.n	8005b0a <_HandleIncomingPacket+0xaa>
 8005a90:	3b01      	subs	r3, #1
 8005a92:	2b06      	cmp	r3, #6
 8005a94:	d839      	bhi.n	8005b0a <_HandleIncomingPacket+0xaa>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <_HandleIncomingPacket+0x3c>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005abf 	.word	0x08005abf
 8005aa0:	08005ac5 	.word	0x08005ac5
 8005aa4:	08005acb 	.word	0x08005acb
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad7 	.word	0x08005ad7
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005ae3 	.word	0x08005ae3
 8005ab8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aba:	d033      	beq.n	8005b24 <_HandleIncomingPacket+0xc4>
 8005abc:	e025      	b.n	8005b0a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005abe:	f000 fb25 	bl	800610c <SEGGER_SYSVIEW_Start>
      break;
 8005ac2:	e034      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ac4:	f000 fbdc 	bl	8006280 <SEGGER_SYSVIEW_Stop>
      break;
 8005ac8:	e031      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005aca:	f000 fdb5 	bl	8006638 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005ace:	e02e      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ad0:	f000 fd7a 	bl	80065c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ad4:	e02b      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ad6:	f000 fbf9 	bl	80062cc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005ada:	e028      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005adc:	f001 f8e6 	bl	8006cac <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005ae0:	e025      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005ae2:	f001 f8c5 	bl	8006c70 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005ae6:	e022      	b.n	8005b2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ae8:	4b13      	ldr	r3, [pc, #76]	@ (8005b38 <_HandleIncomingPacket+0xd8>)
 8005aea:	7e1b      	ldrb	r3, [r3, #24]
 8005aec:	4618      	mov	r0, r3
 8005aee:	1cfb      	adds	r3, r7, #3
 8005af0:	2201      	movs	r2, #1
 8005af2:	4619      	mov	r1, r3
 8005af4:	f7ff fe22 	bl	800573c <SEGGER_RTT_ReadNoLock>
 8005af8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 f82a 	bl	8006b5c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b08:	e00e      	b.n	8005b28 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	da0c      	bge.n	8005b2c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <_HandleIncomingPacket+0xd8>)
 8005b14:	7e1b      	ldrb	r3, [r3, #24]
 8005b16:	4618      	mov	r0, r3
 8005b18:	1cfb      	adds	r3, r7, #3
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	f7ff fe0d 	bl	800573c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005b22:	e003      	b.n	8005b2c <_HandleIncomingPacket+0xcc>
      break;
 8005b24:	bf00      	nop
 8005b26:	e002      	b.n	8005b2e <_HandleIncomingPacket+0xce>
      break;
 8005b28:	bf00      	nop
 8005b2a:	e000      	b.n	8005b2e <_HandleIncomingPacket+0xce>
      break;
 8005b2c:	bf00      	nop
    }
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20019794 	.word	0x20019794

08005b3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08c      	sub	sp, #48	@ 0x30
 8005b40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005b42:	2301      	movs	r3, #1
 8005b44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	3301      	adds	r3, #1
 8005b4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b50:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b56:	e00b      	b.n	8005b70 <_TrySendOverflowPacket+0x34>
 8005b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b6c:	09db      	lsrs	r3, r3, #7
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b74:	d8f0      	bhi.n	8005b58 <_TrySendOverflowPacket+0x1c>
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005b86:	4b25      	ldr	r3, [pc, #148]	@ (8005c1c <_TrySendOverflowPacket+0xe0>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005b8c:	4b22      	ldr	r3, [pc, #136]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	e00b      	b.n	8005bb8 <_TrySendOverflowPacket+0x7c>
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	1c59      	adds	r1, r3, #1
 8005ba8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005baa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bae:	b2d2      	uxtb	r2, r2
 8005bb0:	701a      	strb	r2, [r3, #0]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	09db      	lsrs	r3, r3, #7
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bbc:	d8f0      	bhi.n	8005ba0 <_TrySendOverflowPacket+0x64>
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bc4:	6a3a      	ldr	r2, [r7, #32]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005bce:	4b12      	ldr	r3, [pc, #72]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fa faf6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005be4:	4603      	mov	r3, r0
 8005be6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005bee:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005bf4:	4b08      	ldr	r3, [pc, #32]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e004      	b.n	8005c0c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c02:	4b05      	ldr	r3, [pc, #20]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a03      	ldr	r2, [pc, #12]	@ (8005c18 <_TrySendOverflowPacket+0xdc>)
 8005c0a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005c0c:	693b      	ldr	r3, [r7, #16]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3730      	adds	r7, #48	@ 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20019794 	.word	0x20019794
 8005c1c:	e0001004 	.word	0xe0001004

08005c20 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b08a      	sub	sp, #40	@ 0x28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005c2c:	4b98      	ldr	r3, [pc, #608]	@ (8005e90 <_SendPacket+0x270>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d010      	beq.n	8005c56 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005c34:	4b96      	ldr	r3, [pc, #600]	@ (8005e90 <_SendPacket+0x270>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 812d 	beq.w	8005e98 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005c3e:	4b94      	ldr	r3, [pc, #592]	@ (8005e90 <_SendPacket+0x270>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d109      	bne.n	8005c5a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005c46:	f7ff ff79 	bl	8005b3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005c4a:	4b91      	ldr	r3, [pc, #580]	@ (8005e90 <_SendPacket+0x270>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	f040 8124 	bne.w	8005e9c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005c54:	e001      	b.n	8005c5a <_SendPacket+0x3a>
    goto Send;
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <_SendPacket+0x3c>
Send:
 8005c5a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b1f      	cmp	r3, #31
 8005c60:	d809      	bhi.n	8005c76 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005c62:	4b8b      	ldr	r3, [pc, #556]	@ (8005e90 <_SendPacket+0x270>)
 8005c64:	69da      	ldr	r2, [r3, #28]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8115 	bne.w	8005ea0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b17      	cmp	r3, #23
 8005c7a:	d807      	bhi.n	8005c8c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e0c4      	b.n	8005e16 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c98:	d912      	bls.n	8005cc0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	09da      	lsrs	r2, r3, #7
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	3a01      	subs	r2, #1
 8005cb2:	60fa      	str	r2, [r7, #12]
 8005cb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e006      	b.n	8005cce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8005cd2:	d807      	bhi.n	8005ce4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e098      	b.n	8005e16 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cea:	d212      	bcs.n	8005d12 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	09da      	lsrs	r2, r3, #7
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	3a01      	subs	r2, #1
 8005d04:	60fa      	str	r2, [r7, #12]
 8005d06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	e081      	b.n	8005e16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d18:	d21d      	bcs.n	8005d56 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0b9a      	lsrs	r2, r3, #14
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	09db      	lsrs	r3, r3, #7
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	3a01      	subs	r2, #1
 8005d34:	60fa      	str	r2, [r7, #12]
 8005d36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	60fa      	str	r2, [r7, #12]
 8005d4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	701a      	strb	r2, [r3, #0]
 8005d54:	e05f      	b.n	8005e16 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5c:	d228      	bcs.n	8005db0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0d5a      	lsrs	r2, r3, #21
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0b9b      	lsrs	r3, r3, #14
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	3a01      	subs	r2, #1
 8005d78:	60fa      	str	r2, [r7, #12]
 8005d7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	09db      	lsrs	r3, r3, #7
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	3a01      	subs	r2, #1
 8005d8e:	60fa      	str	r2, [r7, #12]
 8005d90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	3a01      	subs	r2, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	e032      	b.n	8005e16 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	0f1a      	lsrs	r2, r3, #28
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	0d5b      	lsrs	r3, r3, #21
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	3a01      	subs	r2, #1
 8005dca:	60fa      	str	r2, [r7, #12]
 8005dcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0b9b      	lsrs	r3, r3, #14
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	3a01      	subs	r2, #1
 8005de0:	60fa      	str	r2, [r7, #12]
 8005de2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	09db      	lsrs	r3, r3, #7
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	3a01      	subs	r2, #1
 8005df6:	60fa      	str	r2, [r7, #12]
 8005df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	3a01      	subs	r2, #1
 8005e0a:	60fa      	str	r2, [r7, #12]
 8005e0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e16:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <_SendPacket+0x274>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005e90 <_SendPacket+0x270>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	e00b      	b.n	8005e48 <_SendPacket+0x228>
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	1c59      	adds	r1, r3, #1
 8005e38:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	09db      	lsrs	r3, r3, #7
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e4c:	d8f0      	bhi.n	8005e30 <_SendPacket+0x210>
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <_SendPacket+0x270>)
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	4618      	mov	r0, r3
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68f9      	ldr	r1, [r7, #12]
 8005e6e:	f7fa f9af 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e72:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e7a:	4a05      	ldr	r2, [pc, #20]	@ (8005e90 <_SendPacket+0x270>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	60d3      	str	r3, [r2, #12]
 8005e80:	e00f      	b.n	8005ea2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e82:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <_SendPacket+0x270>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	3301      	adds	r3, #1
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	4b01      	ldr	r3, [pc, #4]	@ (8005e90 <_SendPacket+0x270>)
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e008      	b.n	8005ea2 <_SendPacket+0x282>
 8005e90:	20019794 	.word	0x20019794
 8005e94:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005e98:	bf00      	nop
 8005e9a:	e002      	b.n	8005ea2 <_SendPacket+0x282>
      goto SendDone;
 8005e9c:	bf00      	nop
 8005e9e:	e000      	b.n	8005ea2 <_SendPacket+0x282>
      goto SendDone;
 8005ea0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ea2:	4b14      	ldr	r3, [pc, #80]	@ (8005ef4 <_SendPacket+0x2d4>)
 8005ea4:	7e1b      	ldrb	r3, [r3, #24]
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4a13      	ldr	r2, [pc, #76]	@ (8005ef8 <_SendPacket+0x2d8>)
 8005eaa:	460b      	mov	r3, r1
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	440b      	add	r3, r1
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	336c      	adds	r3, #108	@ 0x6c
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef4 <_SendPacket+0x2d4>)
 8005eba:	7e1b      	ldrb	r3, [r3, #24]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	490e      	ldr	r1, [pc, #56]	@ (8005ef8 <_SendPacket+0x2d8>)
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4403      	add	r3, r0
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	440b      	add	r3, r1
 8005eca:	3370      	adds	r3, #112	@ 0x70
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d00b      	beq.n	8005eea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ed2:	4b08      	ldr	r3, [pc, #32]	@ (8005ef4 <_SendPacket+0x2d4>)
 8005ed4:	789b      	ldrb	r3, [r3, #2]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eda:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <_SendPacket+0x2d4>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ee0:	f7ff fdbe 	bl	8005a60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <_SendPacket+0x2d4>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005eea:	bf00      	nop
 8005eec:	3728      	adds	r7, #40	@ 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20019794 	.word	0x20019794
 8005ef8:	20012ed4 	.word	0x20012ed4

08005efc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8005f10:	4917      	ldr	r1, [pc, #92]	@ (8005f70 <SEGGER_SYSVIEW_Init+0x74>)
 8005f12:	4818      	ldr	r0, [pc, #96]	@ (8005f74 <SEGGER_SYSVIEW_Init+0x78>)
 8005f14:	f7ff fc98 	bl	8005848 <SEGGER_RTT_AllocUpBuffer>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f20:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f22:	785a      	ldrb	r2, [r3, #1]
 8005f24:	4b14      	ldr	r3, [pc, #80]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f26:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f28:	4b13      	ldr	r3, [pc, #76]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2a:	7e1b      	ldrb	r3, [r3, #24]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	2308      	movs	r3, #8
 8005f34:	4a11      	ldr	r2, [pc, #68]	@ (8005f7c <SEGGER_SYSVIEW_Init+0x80>)
 8005f36:	490f      	ldr	r1, [pc, #60]	@ (8005f74 <SEGGER_SYSVIEW_Init+0x78>)
 8005f38:	f7ff fd0a 	bl	8005950 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f42:	4b0f      	ldr	r3, [pc, #60]	@ (8005f80 <SEGGER_SYSVIEW_Init+0x84>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a0c      	ldr	r2, [pc, #48]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f48:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f50:	4a09      	ldr	r2, [pc, #36]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f56:	4a08      	ldr	r2, [pc, #32]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f5c:	4a06      	ldr	r2, [pc, #24]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f62:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2001338c 	.word	0x2001338c
 8005f74:	08007a88 	.word	0x08007a88
 8005f78:	20019794 	.word	0x20019794
 8005f7c:	2001978c 	.word	0x2001978c
 8005f80:	e0001004 	.word	0xe0001004

08005f84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f8c:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6113      	str	r3, [r2, #16]
}
 8005f92:	bf00      	nop
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20019794 	.word	0x20019794

08005fa4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fac:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb0:	f04f 0120 	mov.w	r1, #32
 8005fb4:	f381 8811 	msr	BASEPRI, r1
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	4808      	ldr	r0, [pc, #32]	@ (8005fdc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005fbc:	f7ff fd44 	bl	8005a48 <_PreparePacket>
 8005fc0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68b8      	ldr	r0, [r7, #8]
 8005fc8:	f7ff fe2a 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f383 8811 	msr	BASEPRI, r3
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	200197c4 	.word	0x200197c4

08005fe0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fea:	f3ef 8311 	mrs	r3, BASEPRI
 8005fee:	f04f 0120 	mov.w	r1, #32
 8005ff2:	f381 8811 	msr	BASEPRI, r1
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	4816      	ldr	r0, [pc, #88]	@ (8006054 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ffa:	f7ff fd25 	bl	8005a48 <_PreparePacket>
 8005ffe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	61fb      	str	r3, [r7, #28]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e00b      	b.n	8006026 <SEGGER_SYSVIEW_RecordU32+0x46>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	61f9      	str	r1, [r7, #28]
 8006018:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	09db      	lsrs	r3, r3, #7
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b7f      	cmp	r3, #127	@ 0x7f
 800602a:	d8f0      	bhi.n	800600e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	61fa      	str	r2, [r7, #28]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	6938      	ldr	r0, [r7, #16]
 8006042:	f7ff fded 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f383 8811 	msr	BASEPRI, r3
}
 800604c:	bf00      	nop
 800604e:	3720      	adds	r7, #32
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200197c4 	.word	0x200197c4

08006058 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006064:	f3ef 8311 	mrs	r3, BASEPRI
 8006068:	f04f 0120 	mov.w	r1, #32
 800606c:	f381 8811 	msr	BASEPRI, r1
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	4825      	ldr	r0, [pc, #148]	@ (8006108 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006074:	f7ff fce8 	bl	8005a48 <_PreparePacket>
 8006078:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006086:	e00b      	b.n	80060a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	b2da      	uxtb	r2, r3
 800608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608e:	1c59      	adds	r1, r3, #1
 8006090:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006092:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a4:	d8f0      	bhi.n	8006088 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	623b      	str	r3, [r7, #32]
 80060be:	e00b      	b.n	80060d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	b2da      	uxtb	r2, r3
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	1c59      	adds	r1, r3, #1
 80060c8:	6279      	str	r1, [r7, #36]	@ 0x24
 80060ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ce:	b2d2      	uxtb	r2, r2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	09db      	lsrs	r3, r3, #7
 80060d6:	623b      	str	r3, [r7, #32]
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	2b7f      	cmp	r3, #127	@ 0x7f
 80060dc:	d8f0      	bhi.n	80060c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80060e4:	6a3a      	ldr	r2, [r7, #32]
 80060e6:	b2d2      	uxtb	r2, r2
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	69b8      	ldr	r0, [r7, #24]
 80060f4:	f7ff fd94 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f383 8811 	msr	BASEPRI, r3
}
 80060fe:	bf00      	nop
 8006100:	3730      	adds	r7, #48	@ 0x30
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	200197c4 	.word	0x200197c4

0800610c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	@ 0x30
 8006110:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006112:	4b58      	ldr	r3, [pc, #352]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 8006114:	2201      	movs	r2, #1
 8006116:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006118:	f3ef 8311 	mrs	r3, BASEPRI
 800611c:	f04f 0120 	mov.w	r1, #32
 8006120:	f381 8811 	msr	BASEPRI, r1
 8006124:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006126:	4b53      	ldr	r3, [pc, #332]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	220a      	movs	r2, #10
 800612c:	4952      	ldr	r1, [pc, #328]	@ (8006278 <SEGGER_SYSVIEW_Start+0x16c>)
 800612e:	4618      	mov	r0, r3
 8006130:	f7fa f84e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800613a:	200a      	movs	r0, #10
 800613c:	f7ff ff32 	bl	8005fa4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006140:	f3ef 8311 	mrs	r3, BASEPRI
 8006144:	f04f 0120 	mov.w	r1, #32
 8006148:	f381 8811 	msr	BASEPRI, r1
 800614c:	60bb      	str	r3, [r7, #8]
 800614e:	484b      	ldr	r0, [pc, #300]	@ (800627c <SEGGER_SYSVIEW_Start+0x170>)
 8006150:	f7ff fc7a 	bl	8005a48 <_PreparePacket>
 8006154:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615e:	4b45      	ldr	r3, [pc, #276]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006164:	e00b      	b.n	800617e <SEGGER_SYSVIEW_Start+0x72>
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	b2da      	uxtb	r2, r3
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616c:	1c59      	adds	r1, r3, #1
 800616e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617a:	09db      	lsrs	r3, r3, #7
 800617c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800617e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006180:	2b7f      	cmp	r3, #127	@ 0x7f
 8006182:	d8f0      	bhi.n	8006166 <SEGGER_SYSVIEW_Start+0x5a>
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800618a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
 8006198:	4b36      	ldr	r3, [pc, #216]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	e00b      	b.n	80061b8 <SEGGER_SYSVIEW_Start+0xac>
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	1c59      	adds	r1, r3, #1
 80061a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80061aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	09db      	lsrs	r3, r3, #7
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80061bc:	d8f0      	bhi.n	80061a0 <SEGGER_SYSVIEW_Start+0x94>
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80061c4:	6a3a      	ldr	r2, [r7, #32]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	e00b      	b.n	80061f2 <SEGGER_SYSVIEW_Start+0xe6>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	61f9      	str	r1, [r7, #28]
 80061e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	09db      	lsrs	r3, r3, #7
 80061f0:	61bb      	str	r3, [r7, #24]
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061f6:	d8f0      	bhi.n	80061da <SEGGER_SYSVIEW_Start+0xce>
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	61fa      	str	r2, [r7, #28]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	e00b      	b.n	800622a <SEGGER_SYSVIEW_Start+0x11e>
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	1c59      	adds	r1, r3, #1
 800621a:	6179      	str	r1, [r7, #20]
 800621c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	09db      	lsrs	r3, r3, #7
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b7f      	cmp	r3, #127	@ 0x7f
 800622e:	d8f0      	bhi.n	8006212 <SEGGER_SYSVIEW_Start+0x106>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	617a      	str	r2, [r7, #20]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006240:	2218      	movs	r2, #24
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fceb 	bl	8005c20 <_SendPacket>
      RECORD_END();
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006250:	4b08      	ldr	r3, [pc, #32]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <SEGGER_SYSVIEW_Start+0x168>)
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800625e:	f000 f9eb 	bl	8006638 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006262:	f000 f9b1 	bl	80065c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006266:	f000 fd21 	bl	8006cac <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800626a:	bf00      	nop
 800626c:	3730      	adds	r7, #48	@ 0x30
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20019794 	.word	0x20019794
 8006278:	08007b14 	.word	0x08007b14
 800627c:	200197c4 	.word	0x200197c4

08006280 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006286:	f3ef 8311 	mrs	r3, BASEPRI
 800628a:	f04f 0120 	mov.w	r1, #32
 800628e:	f381 8811 	msr	BASEPRI, r1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	480b      	ldr	r0, [pc, #44]	@ (80062c4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006296:	f7ff fbd7 	bl	8005a48 <_PreparePacket>
 800629a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800629c:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <SEGGER_SYSVIEW_Stop+0x48>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80062a4:	220b      	movs	r2, #11
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6838      	ldr	r0, [r7, #0]
 80062aa:	f7ff fcb9 	bl	8005c20 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <SEGGER_SYSVIEW_Stop+0x48>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f383 8811 	msr	BASEPRI, r3
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200197c4 	.word	0x200197c4
 80062c8:	20019794 	.word	0x20019794

080062cc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	@ 0x30
 80062d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d2:	f3ef 8311 	mrs	r3, BASEPRI
 80062d6:	f04f 0120 	mov.w	r1, #32
 80062da:	f381 8811 	msr	BASEPRI, r1
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	4845      	ldr	r0, [pc, #276]	@ (80063f8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80062e2:	f7ff fbb1 	bl	8005a48 <_PreparePacket>
 80062e6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f0:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f6:	e00b      	b.n	8006310 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80062f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006302:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
 800630a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630c:	09db      	lsrs	r3, r3, #7
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006312:	2b7f      	cmp	r3, #127	@ 0x7f
 8006314:	d8f0      	bhi.n	80062f8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800631c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
 800632a:	4b34      	ldr	r3, [pc, #208]	@ (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	e00b      	b.n	800634a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	6279      	str	r1, [r7, #36]	@ 0x24
 800633c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	623b      	str	r3, [r7, #32]
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	2b7f      	cmp	r3, #127	@ 0x7f
 800634e:	d8f0      	bhi.n	8006332 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	627a      	str	r2, [r7, #36]	@ 0x24
 8006356:	6a3a      	ldr	r2, [r7, #32]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	4b25      	ldr	r3, [pc, #148]	@ (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	61bb      	str	r3, [r7, #24]
 800636a:	e00b      	b.n	8006384 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	61f9      	str	r1, [r7, #28]
 8006376:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	09db      	lsrs	r3, r3, #7
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b7f      	cmp	r3, #127	@ 0x7f
 8006388:	d8f0      	bhi.n	800636c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	61fa      	str	r2, [r7, #28]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	e00b      	b.n	80063bc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	1c59      	adds	r1, r3, #1
 80063ac:	6179      	str	r1, [r7, #20]
 80063ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	09db      	lsrs	r3, r3, #7
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b7f      	cmp	r3, #127	@ 0x7f
 80063c0:	d8f0      	bhi.n	80063a4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	617a      	str	r2, [r7, #20]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80063d2:	2218      	movs	r2, #24
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f7ff fc22 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063e2:	4b06      	ldr	r3, [pc, #24]	@ (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80063ea:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ee:	4798      	blx	r3
  }
}
 80063f0:	bf00      	nop
 80063f2:	3730      	adds	r7, #48	@ 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	200197c4 	.word	0x200197c4
 80063fc:	20019794 	.word	0x20019794

08006400 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b092      	sub	sp, #72	@ 0x48
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006408:	f3ef 8311 	mrs	r3, BASEPRI
 800640c:	f04f 0120 	mov.w	r1, #32
 8006410:	f381 8811 	msr	BASEPRI, r1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	486a      	ldr	r0, [pc, #424]	@ (80065c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006418:	f7ff fb16 	bl	8005a48 <_PreparePacket>
 800641c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	647b      	str	r3, [r7, #68]	@ 0x44
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b66      	ldr	r3, [pc, #408]	@ (80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	643b      	str	r3, [r7, #64]	@ 0x40
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6479      	str	r1, [r7, #68]	@ 0x44
 800643e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	643b      	str	r3, [r7, #64]	@ 0x40
 800644c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	647a      	str	r2, [r7, #68]	@ 0x44
 8006458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800646c:	e00b      	b.n	8006486 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800646e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	1c59      	adds	r1, r3, #1
 8006476:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006478:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006482:	09db      	lsrs	r3, r3, #7
 8006484:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	2b7f      	cmp	r3, #127	@ 0x7f
 800648a:	d8f0      	bhi.n	800646e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800648c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f7ff fa9f 	bl	80059e8 <_EncodeStr>
 80064aa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80064ac:	2209      	movs	r2, #9
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	6938      	ldr	r0, [r7, #16]
 80064b2:	f7ff fbb5 	bl	8005c20 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6379      	str	r1, [r7, #52]	@ 0x34
 80064d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	637a      	str	r2, [r7, #52]	@ 0x34
 80064f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006504:	e00b      	b.n	800651e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650c:	1c59      	adds	r1, r3, #1
 800650e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006510:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]
 8006518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651a:	09db      	lsrs	r3, r3, #7
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006520:	2b7f      	cmp	r3, #127	@ 0x7f
 8006522:	d8f0      	bhi.n	8006506 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800652a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006532:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	623b      	str	r3, [r7, #32]
 800653e:	e00b      	b.n	8006558 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006546:	1c59      	adds	r1, r3, #1
 8006548:	6279      	str	r1, [r7, #36]	@ 0x24
 800654a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	09db      	lsrs	r3, r3, #7
 8006556:	623b      	str	r3, [r7, #32]
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b7f      	cmp	r3, #127	@ 0x7f
 800655c:	d8f0      	bhi.n	8006540 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	627a      	str	r2, [r7, #36]	@ 0x24
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	61f9      	str	r1, [r7, #28]
 8006582:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b7f      	cmp	r3, #127	@ 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	61fa      	str	r2, [r7, #28]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80065a6:	2215      	movs	r2, #21
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	6938      	ldr	r0, [r7, #16]
 80065ac:	f7ff fb38 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f383 8811 	msr	BASEPRI, r3
}
 80065b6:	bf00      	nop
 80065b8:	3748      	adds	r7, #72	@ 0x48
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	200197c4 	.word	0x200197c4
 80065c4:	20019794 	.word	0x20019794

080065c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065ce:	6a1b      	ldr	r3, [r3, #32]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80065d4:	4b05      	ldr	r3, [pc, #20]	@ (80065ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80065de:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4798      	blx	r3
  }
}
 80065e6:	bf00      	nop
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20019794 	.word	0x20019794

080065f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065f8:	f3ef 8311 	mrs	r3, BASEPRI
 80065fc:	f04f 0120 	mov.w	r1, #32
 8006600:	f381 8811 	msr	BASEPRI, r1
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	480b      	ldr	r0, [pc, #44]	@ (8006634 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006608:	f7ff fa1e 	bl	8005a48 <_PreparePacket>
 800660c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800660e:	2280      	movs	r2, #128	@ 0x80
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	6938      	ldr	r0, [r7, #16]
 8006614:	f7ff f9e8 	bl	80059e8 <_EncodeStr>
 8006618:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800661a:	220e      	movs	r2, #14
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	6938      	ldr	r0, [r7, #16]
 8006620:	f7ff fafe 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f383 8811 	msr	BASEPRI, r3
}
 800662a:	bf00      	nop
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200197c4 	.word	0x200197c4

08006638 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800663e:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d01a      	beq.n	800667c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006646:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d015      	beq.n	800667c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006650:	4b10      	ldr	r3, [pc, #64]	@ (8006694 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4798      	blx	r3
 8006658:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800665c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800665e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006662:	f04f 0200 	mov.w	r2, #0
 8006666:	f04f 0300 	mov.w	r3, #0
 800666a:	000a      	movs	r2, r1
 800666c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800666e:	4613      	mov	r3, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4621      	mov	r1, r4
 8006674:	200d      	movs	r0, #13
 8006676:	f7ff fcef 	bl	8006058 <SEGGER_SYSVIEW_RecordU32x2>
 800667a:	e006      	b.n	800668a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800667c:	4b06      	ldr	r3, [pc, #24]	@ (8006698 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4619      	mov	r1, r3
 8006682:	200c      	movs	r0, #12
 8006684:	f7ff fcac 	bl	8005fe0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bd90      	pop	{r4, r7, pc}
 8006692:	bf00      	nop
 8006694:	20019794 	.word	0x20019794
 8006698:	e0001004 	.word	0xe0001004

0800669c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066a2:	f3ef 8311 	mrs	r3, BASEPRI
 80066a6:	f04f 0120 	mov.w	r1, #32
 80066aa:	f381 8811 	msr	BASEPRI, r1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	4819      	ldr	r0, [pc, #100]	@ (8006718 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80066b2:	f7ff f9c9 	bl	8005a48 <_PreparePacket>
 80066b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80066bc:	4b17      	ldr	r3, [pc, #92]	@ (800671c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e00b      	b.n	80066e8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	6179      	str	r1, [r7, #20]
 80066da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	09db      	lsrs	r3, r3, #7
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ec:	d8f0      	bhi.n	80066d0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	617a      	str	r2, [r7, #20]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80066fe:	2202      	movs	r2, #2
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	68b8      	ldr	r0, [r7, #8]
 8006704:	f7ff fa8c 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	200197c4 	.word	0x200197c4
 800671c:	e000ed04 	.word	0xe000ed04

08006720 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006726:	f3ef 8311 	mrs	r3, BASEPRI
 800672a:	f04f 0120 	mov.w	r1, #32
 800672e:	f381 8811 	msr	BASEPRI, r1
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	4807      	ldr	r0, [pc, #28]	@ (8006754 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006736:	f7ff f987 	bl	8005a48 <_PreparePacket>
 800673a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800673c:	2203      	movs	r2, #3
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6838      	ldr	r0, [r7, #0]
 8006742:	f7ff fa6d 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f383 8811 	msr	BASEPRI, r3
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200197c4 	.word	0x200197c4

08006758 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800675e:	f3ef 8311 	mrs	r3, BASEPRI
 8006762:	f04f 0120 	mov.w	r1, #32
 8006766:	f381 8811 	msr	BASEPRI, r1
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	4807      	ldr	r0, [pc, #28]	@ (800678c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800676e:	f7ff f96b 	bl	8005a48 <_PreparePacket>
 8006772:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006774:	2212      	movs	r2, #18
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6838      	ldr	r0, [r7, #0]
 800677a:	f7ff fa51 	bl	8005c20 <_SendPacket>
  RECORD_END();
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f383 8811 	msr	BASEPRI, r3
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	200197c4 	.word	0x200197c4

08006790 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	f04f 0120 	mov.w	r1, #32
 80067a0:	f381 8811 	msr	BASEPRI, r1
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	4817      	ldr	r0, [pc, #92]	@ (8006804 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80067a8:	f7ff f94e 	bl	8005a48 <_PreparePacket>
 80067ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e00b      	b.n	80067d4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	61f9      	str	r1, [r7, #28]
 80067c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	09db      	lsrs	r3, r3, #7
 80067d2:	61bb      	str	r3, [r7, #24]
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067d8:	d8f0      	bhi.n	80067bc <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	61fa      	str	r2, [r7, #28]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	b2d2      	uxtb	r2, r2
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80067ea:	221c      	movs	r2, #28
 80067ec:	68f9      	ldr	r1, [r7, #12]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f7ff fa16 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f383 8811 	msr	BASEPRI, r3
}
 80067fa:	bf00      	nop
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	200197c4 	.word	0x200197c4

08006808 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08a      	sub	sp, #40	@ 0x28
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006812:	f3ef 8311 	mrs	r3, BASEPRI
 8006816:	f04f 0120 	mov.w	r1, #32
 800681a:	f381 8811 	msr	BASEPRI, r1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	4824      	ldr	r0, [pc, #144]	@ (80068b4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006822:	f7ff f911 	bl	8005a48 <_PreparePacket>
 8006826:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e00b      	b.n	800684e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	1c59      	adds	r1, r3, #1
 800683e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006840:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2b7f      	cmp	r3, #127	@ 0x7f
 8006852:	d8f0      	bhi.n	8006836 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	627a      	str	r2, [r7, #36]	@ 0x24
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006862:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	61f9      	str	r1, [r7, #28]
 8006878:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b7f      	cmp	r3, #127	@ 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	61fa      	str	r2, [r7, #28]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800689c:	221c      	movs	r2, #28
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f7ff f9bd 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3728      	adds	r7, #40	@ 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200197c4 	.word	0x200197c4

080068b8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068be:	f3ef 8311 	mrs	r3, BASEPRI
 80068c2:	f04f 0120 	mov.w	r1, #32
 80068c6:	f381 8811 	msr	BASEPRI, r1
 80068ca:	607b      	str	r3, [r7, #4]
 80068cc:	4807      	ldr	r0, [pc, #28]	@ (80068ec <SEGGER_SYSVIEW_OnIdle+0x34>)
 80068ce:	f7ff f8bb 	bl	8005a48 <_PreparePacket>
 80068d2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80068d4:	2211      	movs	r2, #17
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6838      	ldr	r0, [r7, #0]
 80068da:	f7ff f9a1 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f383 8811 	msr	BASEPRI, r3
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200197c4 	.word	0x200197c4

080068f0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068f8:	f3ef 8311 	mrs	r3, BASEPRI
 80068fc:	f04f 0120 	mov.w	r1, #32
 8006900:	f381 8811 	msr	BASEPRI, r1
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	4819      	ldr	r0, [pc, #100]	@ (800696c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006908:	f7ff f89e 	bl	8005a48 <_PreparePacket>
 800690c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006912:	4b17      	ldr	r3, [pc, #92]	@ (8006970 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	e00b      	b.n	800693e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	b2da      	uxtb	r2, r3
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c59      	adds	r1, r3, #1
 800692e:	61f9      	str	r1, [r7, #28]
 8006930:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	09db      	lsrs	r3, r3, #7
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b7f      	cmp	r3, #127	@ 0x7f
 8006942:	d8f0      	bhi.n	8006926 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006954:	2208      	movs	r2, #8
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6938      	ldr	r0, [r7, #16]
 800695a:	f7ff f961 	bl	8005c20 <_SendPacket>
  RECORD_END();
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f383 8811 	msr	BASEPRI, r3
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200197c4 	.word	0x200197c4
 8006970:	20019794 	.word	0x20019794

08006974 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800697c:	f3ef 8311 	mrs	r3, BASEPRI
 8006980:	f04f 0120 	mov.w	r1, #32
 8006984:	f381 8811 	msr	BASEPRI, r1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	4819      	ldr	r0, [pc, #100]	@ (80069f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800698c:	f7ff f85c 	bl	8005a48 <_PreparePacket>
 8006990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006996:	4b17      	ldr	r3, [pc, #92]	@ (80069f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	61fb      	str	r3, [r7, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e00b      	b.n	80069c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	61f9      	str	r1, [r7, #28]
 80069b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	09db      	lsrs	r3, r3, #7
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c6:	d8f0      	bhi.n	80069aa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	b2d2      	uxtb	r2, r2
 80069d2:	701a      	strb	r2, [r3, #0]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80069d8:	2204      	movs	r2, #4
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6938      	ldr	r0, [r7, #16]
 80069de:	f7ff f91f 	bl	8005c20 <_SendPacket>
  RECORD_END();
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f383 8811 	msr	BASEPRI, r3
}
 80069e8:	bf00      	nop
 80069ea:	3720      	adds	r7, #32
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200197c4 	.word	0x200197c4
 80069f4:	20019794 	.word	0x20019794

080069f8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a00:	f3ef 8311 	mrs	r3, BASEPRI
 8006a04:	f04f 0120 	mov.w	r1, #32
 8006a08:	f381 8811 	msr	BASEPRI, r1
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	4819      	ldr	r0, [pc, #100]	@ (8006a74 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a10:	f7ff f81a 	bl	8005a48 <_PreparePacket>
 8006a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a1a:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	61f9      	str	r1, [r7, #28]
 8006a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	61bb      	str	r3, [r7, #24]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	61fa      	str	r2, [r7, #28]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a5c:	2206      	movs	r2, #6
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6938      	ldr	r0, [r7, #16]
 8006a62:	f7ff f8dd 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f383 8811 	msr	BASEPRI, r3
}
 8006a6c:	bf00      	nop
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	200197c4 	.word	0x200197c4
 8006a78:	20019794 	.word	0x20019794

08006a7c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	@ 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a86:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8a:	f04f 0120 	mov.w	r1, #32
 8006a8e:	f381 8811 	msr	BASEPRI, r1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	4827      	ldr	r0, [pc, #156]	@ (8006b34 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006a96:	f7fe ffd7 	bl	8005a48 <_PreparePacket>
 8006a9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aa0:	4b25      	ldr	r3, [pc, #148]	@ (8006b38 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	623b      	str	r3, [r7, #32]
 8006ab2:	e00b      	b.n	8006acc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006abe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad0:	d8f0      	bhi.n	8006ab4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	61fb      	str	r3, [r7, #28]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	e00b      	b.n	8006b04 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	61f9      	str	r1, [r7, #28]
 8006af6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	09db      	lsrs	r3, r3, #7
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b08:	d8f0      	bhi.n	8006aec <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	61fa      	str	r2, [r7, #28]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b1a:	2207      	movs	r2, #7
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	6938      	ldr	r0, [r7, #16]
 8006b20:	f7ff f87e 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f383 8811 	msr	BASEPRI, r3
}
 8006b2a:	bf00      	nop
 8006b2c:	3728      	adds	r7, #40	@ 0x28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200197c4 	.word	0x200197c4
 8006b38:	20019794 	.word	0x20019794

08006b3c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006b44:	4b04      	ldr	r3, [pc, #16]	@ (8006b58 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	1ad3      	subs	r3, r2, r3
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	20019794 	.word	0x20019794

08006b5c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08c      	sub	sp, #48	@ 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006b66:	4b40      	ldr	r3, [pc, #256]	@ (8006c68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d077      	beq.n	8006c5e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c68 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006b74:	2300      	movs	r3, #0
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b78:	e008      	b.n	8006b8c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b88:	3301      	adds	r3, #1
 8006b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d3f2      	bcc.n	8006b7a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006b94:	e000      	b.n	8006b98 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006b96:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d055      	beq.n	8006c4a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba2:	f04f 0120 	mov.w	r1, #32
 8006ba6:	f381 8811 	msr	BASEPRI, r1
 8006baa:	617b      	str	r3, [r7, #20]
 8006bac:	482f      	ldr	r0, [pc, #188]	@ (8006c6c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006bae:	f7fe ff4b 	bl	8005a48 <_PreparePacket>
 8006bb2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	623b      	str	r3, [r7, #32]
 8006bc0:	e00b      	b.n	8006bda <SEGGER_SYSVIEW_SendModule+0x7e>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc8:	1c59      	adds	r1, r3, #1
 8006bca:	6279      	str	r1, [r7, #36]	@ 0x24
 8006bcc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]
 8006bd4:	6a3b      	ldr	r3, [r7, #32]
 8006bd6:	09db      	lsrs	r3, r3, #7
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bde:	d8f0      	bhi.n	8006bc2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	b2d2      	uxtb	r2, r2
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	61fb      	str	r3, [r7, #28]
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	61bb      	str	r3, [r7, #24]
 8006bfa:	e00b      	b.n	8006c14 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	61f9      	str	r1, [r7, #28]
 8006c06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c0a:	b2d2      	uxtb	r2, r2
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	09db      	lsrs	r3, r3, #7
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c18:	d8f0      	bhi.n	8006bfc <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	61fa      	str	r2, [r7, #28]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2280      	movs	r2, #128	@ 0x80
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7fe fed8 	bl	80059e8 <_EncodeStr>
 8006c38:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c3a:	2216      	movs	r2, #22
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	6938      	ldr	r0, [r7, #16]
 8006c40:	f7fe ffee 	bl	8005c20 <_SendPacket>
      RECORD_END();
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d006      	beq.n	8006c5e <SEGGER_SYSVIEW_SendModule+0x102>
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	4798      	blx	r3
    }
  }
}
 8006c5e:	bf00      	nop
 8006c60:	3730      	adds	r7, #48	@ 0x30
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200197bc 	.word	0x200197bc
 8006c6c:	200197c4 	.word	0x200197c4

08006c70 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006c76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00f      	beq.n	8006c9e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ca8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f2      	bne.n	8006c84 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200197bc 	.word	0x200197bc

08006cac <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cb2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb6:	f04f 0120 	mov.w	r1, #32
 8006cba:	f381 8811 	msr	BASEPRI, r1
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	4817      	ldr	r0, [pc, #92]	@ (8006d20 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006cc2:	f7fe fec1 	bl	8005a48 <_PreparePacket>
 8006cc6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	e00b      	b.n	8006cf0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	6179      	str	r1, [r7, #20]
 8006ce2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	09db      	lsrs	r3, r3, #7
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf4:	d8f0      	bhi.n	8006cd8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	617a      	str	r2, [r7, #20]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d06:	221b      	movs	r2, #27
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	68b8      	ldr	r0, [r7, #8]
 8006d0c:	f7fe ff88 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f383 8811 	msr	BASEPRI, r3
}
 8006d16:	bf00      	nop
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	200197c4 	.word	0x200197c4
 8006d24:	200197c0 	.word	0x200197c0

08006d28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b08a      	sub	sp, #40	@ 0x28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d30:	f3ef 8311 	mrs	r3, BASEPRI
 8006d34:	f04f 0120 	mov.w	r1, #32
 8006d38:	f381 8811 	msr	BASEPRI, r1
 8006d3c:	617b      	str	r3, [r7, #20]
 8006d3e:	4827      	ldr	r0, [pc, #156]	@ (8006ddc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d40:	f7fe fe82 	bl	8005a48 <_PreparePacket>
 8006d44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d46:	2280      	movs	r2, #128	@ 0x80
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	6938      	ldr	r0, [r7, #16]
 8006d4c:	f7fe fe4c 	bl	80059e8 <_EncodeStr>
 8006d50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d56:	2301      	movs	r3, #1
 8006d58:	623b      	str	r3, [r7, #32]
 8006d5a:	e00b      	b.n	8006d74 <SEGGER_SYSVIEW_Warn+0x4c>
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	6a3b      	ldr	r3, [r7, #32]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	623b      	str	r3, [r7, #32]
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d78:	d8f0      	bhi.n	8006d5c <SEGGER_SYSVIEW_Warn+0x34>
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e00b      	b.n	8006dac <SEGGER_SYSVIEW_Warn+0x84>
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	61f9      	str	r1, [r7, #28]
 8006d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	09db      	lsrs	r3, r3, #7
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db0:	d8f0      	bhi.n	8006d94 <SEGGER_SYSVIEW_Warn+0x6c>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	61fa      	str	r2, [r7, #28]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006dc2:	221a      	movs	r2, #26
 8006dc4:	68f9      	ldr	r1, [r7, #12]
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f7fe ff2a 	bl	8005c20 <_SendPacket>
  RECORD_END();
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f383 8811 	msr	BASEPRI, r3
}
 8006dd2:	bf00      	nop
 8006dd4:	3728      	adds	r7, #40	@ 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	200197c4 	.word	0x200197c4

08006de0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	e033      	b.n	8006e54 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006dec:	491e      	ldr	r1, [pc, #120]	@ (8006e68 <_cbSendTaskList+0x88>)
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	491a      	ldr	r1, [pc, #104]	@ (8006e68 <_cbSendTaskList+0x88>)
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	4c16      	ldr	r4, [pc, #88]	@ (8006e68 <_cbSendTaskList+0x88>)
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4613      	mov	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4423      	add	r3, r4
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	681c      	ldr	r4, [r3, #0]
 8006e20:	4d11      	ldr	r5, [pc, #68]	@ (8006e68 <_cbSendTaskList+0x88>)
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	442b      	add	r3, r5
 8006e2e:	330c      	adds	r3, #12
 8006e30:	681d      	ldr	r5, [r3, #0]
 8006e32:	4e0d      	ldr	r6, [pc, #52]	@ (8006e68 <_cbSendTaskList+0x88>)
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4433      	add	r3, r6
 8006e40:	3310      	adds	r3, #16
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	462b      	mov	r3, r5
 8006e48:	4622      	mov	r2, r4
 8006e4a:	f000 f8bd 	bl	8006fc8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3301      	adds	r3, #1
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <_cbSendTaskList+0x8c>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3c6      	bcc.n	8006dec <_cbSendTaskList+0xc>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e68:	200198a8 	.word	0x200198a8
 8006e6c:	20019948 	.word	0x20019948

08006e70 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006e78:	f7fc fe82 	bl	8003b80 <xTaskGetTickCountFromISR>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2200      	movs	r2, #0
 8006e80:	469a      	mov	sl, r3
 8006e82:	4693      	mov	fp, r2
 8006e84:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	f04f 0b00 	mov.w	fp, #0
 8006e98:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006e9c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006ea0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006ea4:	4652      	mov	r2, sl
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	1a14      	subs	r4, r2, r0
 8006eaa:	eb63 0501 	sbc.w	r5, r3, r1
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	00ab      	lsls	r3, r5, #2
 8006eb8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006ebc:	00a2      	lsls	r2, r4, #2
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	eb14 0800 	adds.w	r8, r4, r0
 8006ec6:	eb45 0901 	adc.w	r9, r5, r1
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ede:	4690      	mov	r8, r2
 8006ee0:	4699      	mov	r9, r3
 8006ee2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006ef8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006f06:	2205      	movs	r2, #5
 8006f08:	492b      	ldr	r1, [pc, #172]	@ (8006fb8 <SYSVIEW_AddTask+0xc0>)
 8006f0a:	68b8      	ldr	r0, [r7, #8]
 8006f0c:	f000 f89e 	bl	800704c <memcmp>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d04b      	beq.n	8006fae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006f16:	4b29      	ldr	r3, [pc, #164]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b07      	cmp	r3, #7
 8006f1c:	d903      	bls.n	8006f26 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006f1e:	4828      	ldr	r0, [pc, #160]	@ (8006fc0 <SYSVIEW_AddTask+0xc8>)
 8006f20:	f7ff ff02 	bl	8006d28 <SEGGER_SYSVIEW_Warn>
    return;
 8006f24:	e044      	b.n	8006fb0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006f26:	4b25      	ldr	r3, [pc, #148]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4926      	ldr	r1, [pc, #152]	@ (8006fc4 <SYSVIEW_AddTask+0xcc>)
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006f3a:	4b20      	ldr	r3, [pc, #128]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4921      	ldr	r1, [pc, #132]	@ (8006fc4 <SYSVIEW_AddTask+0xcc>)
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006f50:	4b1a      	ldr	r3, [pc, #104]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	491b      	ldr	r1, [pc, #108]	@ (8006fc4 <SYSVIEW_AddTask+0xcc>)
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3308      	adds	r3, #8
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006f66:	4b15      	ldr	r3, [pc, #84]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4916      	ldr	r1, [pc, #88]	@ (8006fc4 <SYSVIEW_AddTask+0xcc>)
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	330c      	adds	r3, #12
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	4910      	ldr	r1, [pc, #64]	@ (8006fc4 <SYSVIEW_AddTask+0xcc>)
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3310      	adds	r3, #16
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3301      	adds	r3, #1
 8006f98:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <SYSVIEW_AddTask+0xc4>)
 8006f9a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 f80e 	bl	8006fc8 <SYSVIEW_SendTaskInfo>
 8006fac:	e000      	b.n	8006fb0 <SYSVIEW_AddTask+0xb8>
    return;
 8006fae:	bf00      	nop

}
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08007a90 	.word	0x08007a90
 8006fbc:	20019948 	.word	0x20019948
 8006fc0:	08007a98 	.word	0x08007a98
 8006fc4:	200198a8 	.word	0x200198a8

08006fc8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	@ 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
 8006fd4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006fd6:	f107 0314 	add.w	r3, r7, #20
 8006fda:	2214      	movs	r2, #20
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f844 	bl	800706c <memset>
  TaskInfo.TaskID     = TaskID;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff f9ff 	bl	8006400 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007002:	bf00      	nop
 8007004:	3728      	adds	r7, #40	@ 0x28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <siprintf>:
 800700c:	b40e      	push	{r1, r2, r3}
 800700e:	b500      	push	{lr}
 8007010:	b09c      	sub	sp, #112	@ 0x70
 8007012:	ab1d      	add	r3, sp, #116	@ 0x74
 8007014:	9002      	str	r0, [sp, #8]
 8007016:	9006      	str	r0, [sp, #24]
 8007018:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800701c:	4809      	ldr	r0, [pc, #36]	@ (8007044 <siprintf+0x38>)
 800701e:	9107      	str	r1, [sp, #28]
 8007020:	9104      	str	r1, [sp, #16]
 8007022:	4909      	ldr	r1, [pc, #36]	@ (8007048 <siprintf+0x3c>)
 8007024:	f853 2b04 	ldr.w	r2, [r3], #4
 8007028:	9105      	str	r1, [sp, #20]
 800702a:	6800      	ldr	r0, [r0, #0]
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	a902      	add	r1, sp, #8
 8007030:	f000 f9b2 	bl	8007398 <_svfiprintf_r>
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	701a      	strb	r2, [r3, #0]
 800703a:	b01c      	add	sp, #112	@ 0x70
 800703c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007040:	b003      	add	sp, #12
 8007042:	4770      	bx	lr
 8007044:	20000014 	.word	0x20000014
 8007048:	ffff0208 	.word	0xffff0208

0800704c <memcmp>:
 800704c:	b510      	push	{r4, lr}
 800704e:	3901      	subs	r1, #1
 8007050:	4402      	add	r2, r0
 8007052:	4290      	cmp	r0, r2
 8007054:	d101      	bne.n	800705a <memcmp+0xe>
 8007056:	2000      	movs	r0, #0
 8007058:	e005      	b.n	8007066 <memcmp+0x1a>
 800705a:	7803      	ldrb	r3, [r0, #0]
 800705c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007060:	42a3      	cmp	r3, r4
 8007062:	d001      	beq.n	8007068 <memcmp+0x1c>
 8007064:	1b18      	subs	r0, r3, r4
 8007066:	bd10      	pop	{r4, pc}
 8007068:	3001      	adds	r0, #1
 800706a:	e7f2      	b.n	8007052 <memcmp+0x6>

0800706c <memset>:
 800706c:	4402      	add	r2, r0
 800706e:	4603      	mov	r3, r0
 8007070:	4293      	cmp	r3, r2
 8007072:	d100      	bne.n	8007076 <memset+0xa>
 8007074:	4770      	bx	lr
 8007076:	f803 1b01 	strb.w	r1, [r3], #1
 800707a:	e7f9      	b.n	8007070 <memset+0x4>

0800707c <__errno>:
 800707c:	4b01      	ldr	r3, [pc, #4]	@ (8007084 <__errno+0x8>)
 800707e:	6818      	ldr	r0, [r3, #0]
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	20000014 	.word	0x20000014

08007088 <__libc_init_array>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4d0d      	ldr	r5, [pc, #52]	@ (80070c0 <__libc_init_array+0x38>)
 800708c:	4c0d      	ldr	r4, [pc, #52]	@ (80070c4 <__libc_init_array+0x3c>)
 800708e:	1b64      	subs	r4, r4, r5
 8007090:	10a4      	asrs	r4, r4, #2
 8007092:	2600      	movs	r6, #0
 8007094:	42a6      	cmp	r6, r4
 8007096:	d109      	bne.n	80070ac <__libc_init_array+0x24>
 8007098:	4d0b      	ldr	r5, [pc, #44]	@ (80070c8 <__libc_init_array+0x40>)
 800709a:	4c0c      	ldr	r4, [pc, #48]	@ (80070cc <__libc_init_array+0x44>)
 800709c:	f000 fc66 	bl	800796c <_init>
 80070a0:	1b64      	subs	r4, r4, r5
 80070a2:	10a4      	asrs	r4, r4, #2
 80070a4:	2600      	movs	r6, #0
 80070a6:	42a6      	cmp	r6, r4
 80070a8:	d105      	bne.n	80070b6 <__libc_init_array+0x2e>
 80070aa:	bd70      	pop	{r4, r5, r6, pc}
 80070ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b0:	4798      	blx	r3
 80070b2:	3601      	adds	r6, #1
 80070b4:	e7ee      	b.n	8007094 <__libc_init_array+0xc>
 80070b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ba:	4798      	blx	r3
 80070bc:	3601      	adds	r6, #1
 80070be:	e7f2      	b.n	80070a6 <__libc_init_array+0x1e>
 80070c0:	08007b64 	.word	0x08007b64
 80070c4:	08007b64 	.word	0x08007b64
 80070c8:	08007b64 	.word	0x08007b64
 80070cc:	08007b68 	.word	0x08007b68

080070d0 <__retarget_lock_acquire_recursive>:
 80070d0:	4770      	bx	lr

080070d2 <__retarget_lock_release_recursive>:
 80070d2:	4770      	bx	lr

080070d4 <memcpy>:
 80070d4:	440a      	add	r2, r1
 80070d6:	4291      	cmp	r1, r2
 80070d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070dc:	d100      	bne.n	80070e0 <memcpy+0xc>
 80070de:	4770      	bx	lr
 80070e0:	b510      	push	{r4, lr}
 80070e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ea:	4291      	cmp	r1, r2
 80070ec:	d1f9      	bne.n	80070e2 <memcpy+0xe>
 80070ee:	bd10      	pop	{r4, pc}

080070f0 <_free_r>:
 80070f0:	b538      	push	{r3, r4, r5, lr}
 80070f2:	4605      	mov	r5, r0
 80070f4:	2900      	cmp	r1, #0
 80070f6:	d041      	beq.n	800717c <_free_r+0x8c>
 80070f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fc:	1f0c      	subs	r4, r1, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfb8      	it	lt
 8007102:	18e4      	addlt	r4, r4, r3
 8007104:	f000 f8e0 	bl	80072c8 <__malloc_lock>
 8007108:	4a1d      	ldr	r2, [pc, #116]	@ (8007180 <_free_r+0x90>)
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	b933      	cbnz	r3, 800711c <_free_r+0x2c>
 800710e:	6063      	str	r3, [r4, #4]
 8007110:	6014      	str	r4, [r2, #0]
 8007112:	4628      	mov	r0, r5
 8007114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007118:	f000 b8dc 	b.w	80072d4 <__malloc_unlock>
 800711c:	42a3      	cmp	r3, r4
 800711e:	d908      	bls.n	8007132 <_free_r+0x42>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf01      	itttt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	1809      	addeq	r1, r1, r0
 800712e:	6021      	streq	r1, [r4, #0]
 8007130:	e7ed      	b.n	800710e <_free_r+0x1e>
 8007132:	461a      	mov	r2, r3
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	b10b      	cbz	r3, 800713c <_free_r+0x4c>
 8007138:	42a3      	cmp	r3, r4
 800713a:	d9fa      	bls.n	8007132 <_free_r+0x42>
 800713c:	6811      	ldr	r1, [r2, #0]
 800713e:	1850      	adds	r0, r2, r1
 8007140:	42a0      	cmp	r0, r4
 8007142:	d10b      	bne.n	800715c <_free_r+0x6c>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	4401      	add	r1, r0
 8007148:	1850      	adds	r0, r2, r1
 800714a:	4283      	cmp	r3, r0
 800714c:	6011      	str	r1, [r2, #0]
 800714e:	d1e0      	bne.n	8007112 <_free_r+0x22>
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	6053      	str	r3, [r2, #4]
 8007156:	4408      	add	r0, r1
 8007158:	6010      	str	r0, [r2, #0]
 800715a:	e7da      	b.n	8007112 <_free_r+0x22>
 800715c:	d902      	bls.n	8007164 <_free_r+0x74>
 800715e:	230c      	movs	r3, #12
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	e7d6      	b.n	8007112 <_free_r+0x22>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	1821      	adds	r1, r4, r0
 8007168:	428b      	cmp	r3, r1
 800716a:	bf04      	itt	eq
 800716c:	6819      	ldreq	r1, [r3, #0]
 800716e:	685b      	ldreq	r3, [r3, #4]
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	bf04      	itt	eq
 8007174:	1809      	addeq	r1, r1, r0
 8007176:	6021      	streq	r1, [r4, #0]
 8007178:	6054      	str	r4, [r2, #4]
 800717a:	e7ca      	b.n	8007112 <_free_r+0x22>
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	bf00      	nop
 8007180:	20019a90 	.word	0x20019a90

08007184 <sbrk_aligned>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	4e0f      	ldr	r6, [pc, #60]	@ (80071c4 <sbrk_aligned+0x40>)
 8007188:	460c      	mov	r4, r1
 800718a:	6831      	ldr	r1, [r6, #0]
 800718c:	4605      	mov	r5, r0
 800718e:	b911      	cbnz	r1, 8007196 <sbrk_aligned+0x12>
 8007190:	f000 fba6 	bl	80078e0 <_sbrk_r>
 8007194:	6030      	str	r0, [r6, #0]
 8007196:	4621      	mov	r1, r4
 8007198:	4628      	mov	r0, r5
 800719a:	f000 fba1 	bl	80078e0 <_sbrk_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	d103      	bne.n	80071aa <sbrk_aligned+0x26>
 80071a2:	f04f 34ff 	mov.w	r4, #4294967295
 80071a6:	4620      	mov	r0, r4
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	1cc4      	adds	r4, r0, #3
 80071ac:	f024 0403 	bic.w	r4, r4, #3
 80071b0:	42a0      	cmp	r0, r4
 80071b2:	d0f8      	beq.n	80071a6 <sbrk_aligned+0x22>
 80071b4:	1a21      	subs	r1, r4, r0
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 fb92 	bl	80078e0 <_sbrk_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	d1f2      	bne.n	80071a6 <sbrk_aligned+0x22>
 80071c0:	e7ef      	b.n	80071a2 <sbrk_aligned+0x1e>
 80071c2:	bf00      	nop
 80071c4:	20019a8c 	.word	0x20019a8c

080071c8 <_malloc_r>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	1ccd      	adds	r5, r1, #3
 80071ce:	f025 0503 	bic.w	r5, r5, #3
 80071d2:	3508      	adds	r5, #8
 80071d4:	2d0c      	cmp	r5, #12
 80071d6:	bf38      	it	cc
 80071d8:	250c      	movcc	r5, #12
 80071da:	2d00      	cmp	r5, #0
 80071dc:	4606      	mov	r6, r0
 80071de:	db01      	blt.n	80071e4 <_malloc_r+0x1c>
 80071e0:	42a9      	cmp	r1, r5
 80071e2:	d904      	bls.n	80071ee <_malloc_r+0x26>
 80071e4:	230c      	movs	r3, #12
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	2000      	movs	r0, #0
 80071ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072c4 <_malloc_r+0xfc>
 80071f2:	f000 f869 	bl	80072c8 <__malloc_lock>
 80071f6:	f8d8 3000 	ldr.w	r3, [r8]
 80071fa:	461c      	mov	r4, r3
 80071fc:	bb44      	cbnz	r4, 8007250 <_malloc_r+0x88>
 80071fe:	4629      	mov	r1, r5
 8007200:	4630      	mov	r0, r6
 8007202:	f7ff ffbf 	bl	8007184 <sbrk_aligned>
 8007206:	1c43      	adds	r3, r0, #1
 8007208:	4604      	mov	r4, r0
 800720a:	d158      	bne.n	80072be <_malloc_r+0xf6>
 800720c:	f8d8 4000 	ldr.w	r4, [r8]
 8007210:	4627      	mov	r7, r4
 8007212:	2f00      	cmp	r7, #0
 8007214:	d143      	bne.n	800729e <_malloc_r+0xd6>
 8007216:	2c00      	cmp	r4, #0
 8007218:	d04b      	beq.n	80072b2 <_malloc_r+0xea>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	4639      	mov	r1, r7
 800721e:	4630      	mov	r0, r6
 8007220:	eb04 0903 	add.w	r9, r4, r3
 8007224:	f000 fb5c 	bl	80078e0 <_sbrk_r>
 8007228:	4581      	cmp	r9, r0
 800722a:	d142      	bne.n	80072b2 <_malloc_r+0xea>
 800722c:	6821      	ldr	r1, [r4, #0]
 800722e:	1a6d      	subs	r5, r5, r1
 8007230:	4629      	mov	r1, r5
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffa6 	bl	8007184 <sbrk_aligned>
 8007238:	3001      	adds	r0, #1
 800723a:	d03a      	beq.n	80072b2 <_malloc_r+0xea>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	442b      	add	r3, r5
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	f8d8 3000 	ldr.w	r3, [r8]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	bb62      	cbnz	r2, 80072a4 <_malloc_r+0xdc>
 800724a:	f8c8 7000 	str.w	r7, [r8]
 800724e:	e00f      	b.n	8007270 <_malloc_r+0xa8>
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	1b52      	subs	r2, r2, r5
 8007254:	d420      	bmi.n	8007298 <_malloc_r+0xd0>
 8007256:	2a0b      	cmp	r2, #11
 8007258:	d917      	bls.n	800728a <_malloc_r+0xc2>
 800725a:	1961      	adds	r1, r4, r5
 800725c:	42a3      	cmp	r3, r4
 800725e:	6025      	str	r5, [r4, #0]
 8007260:	bf18      	it	ne
 8007262:	6059      	strne	r1, [r3, #4]
 8007264:	6863      	ldr	r3, [r4, #4]
 8007266:	bf08      	it	eq
 8007268:	f8c8 1000 	streq.w	r1, [r8]
 800726c:	5162      	str	r2, [r4, r5]
 800726e:	604b      	str	r3, [r1, #4]
 8007270:	4630      	mov	r0, r6
 8007272:	f000 f82f 	bl	80072d4 <__malloc_unlock>
 8007276:	f104 000b 	add.w	r0, r4, #11
 800727a:	1d23      	adds	r3, r4, #4
 800727c:	f020 0007 	bic.w	r0, r0, #7
 8007280:	1ac2      	subs	r2, r0, r3
 8007282:	bf1c      	itt	ne
 8007284:	1a1b      	subne	r3, r3, r0
 8007286:	50a3      	strne	r3, [r4, r2]
 8007288:	e7af      	b.n	80071ea <_malloc_r+0x22>
 800728a:	6862      	ldr	r2, [r4, #4]
 800728c:	42a3      	cmp	r3, r4
 800728e:	bf0c      	ite	eq
 8007290:	f8c8 2000 	streq.w	r2, [r8]
 8007294:	605a      	strne	r2, [r3, #4]
 8007296:	e7eb      	b.n	8007270 <_malloc_r+0xa8>
 8007298:	4623      	mov	r3, r4
 800729a:	6864      	ldr	r4, [r4, #4]
 800729c:	e7ae      	b.n	80071fc <_malloc_r+0x34>
 800729e:	463c      	mov	r4, r7
 80072a0:	687f      	ldr	r7, [r7, #4]
 80072a2:	e7b6      	b.n	8007212 <_malloc_r+0x4a>
 80072a4:	461a      	mov	r2, r3
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	42a3      	cmp	r3, r4
 80072aa:	d1fb      	bne.n	80072a4 <_malloc_r+0xdc>
 80072ac:	2300      	movs	r3, #0
 80072ae:	6053      	str	r3, [r2, #4]
 80072b0:	e7de      	b.n	8007270 <_malloc_r+0xa8>
 80072b2:	230c      	movs	r3, #12
 80072b4:	6033      	str	r3, [r6, #0]
 80072b6:	4630      	mov	r0, r6
 80072b8:	f000 f80c 	bl	80072d4 <__malloc_unlock>
 80072bc:	e794      	b.n	80071e8 <_malloc_r+0x20>
 80072be:	6005      	str	r5, [r0, #0]
 80072c0:	e7d6      	b.n	8007270 <_malloc_r+0xa8>
 80072c2:	bf00      	nop
 80072c4:	20019a90 	.word	0x20019a90

080072c8 <__malloc_lock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	@ (80072d0 <__malloc_lock+0x8>)
 80072ca:	f7ff bf01 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 80072ce:	bf00      	nop
 80072d0:	20019a88 	.word	0x20019a88

080072d4 <__malloc_unlock>:
 80072d4:	4801      	ldr	r0, [pc, #4]	@ (80072dc <__malloc_unlock+0x8>)
 80072d6:	f7ff befc 	b.w	80070d2 <__retarget_lock_release_recursive>
 80072da:	bf00      	nop
 80072dc:	20019a88 	.word	0x20019a88

080072e0 <__ssputs_r>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	688e      	ldr	r6, [r1, #8]
 80072e6:	461f      	mov	r7, r3
 80072e8:	42be      	cmp	r6, r7
 80072ea:	680b      	ldr	r3, [r1, #0]
 80072ec:	4682      	mov	sl, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	4690      	mov	r8, r2
 80072f2:	d82d      	bhi.n	8007350 <__ssputs_r+0x70>
 80072f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072fc:	d026      	beq.n	800734c <__ssputs_r+0x6c>
 80072fe:	6965      	ldr	r5, [r4, #20]
 8007300:	6909      	ldr	r1, [r1, #16]
 8007302:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007306:	eba3 0901 	sub.w	r9, r3, r1
 800730a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800730e:	1c7b      	adds	r3, r7, #1
 8007310:	444b      	add	r3, r9
 8007312:	106d      	asrs	r5, r5, #1
 8007314:	429d      	cmp	r5, r3
 8007316:	bf38      	it	cc
 8007318:	461d      	movcc	r5, r3
 800731a:	0553      	lsls	r3, r2, #21
 800731c:	d527      	bpl.n	800736e <__ssputs_r+0x8e>
 800731e:	4629      	mov	r1, r5
 8007320:	f7ff ff52 	bl	80071c8 <_malloc_r>
 8007324:	4606      	mov	r6, r0
 8007326:	b360      	cbz	r0, 8007382 <__ssputs_r+0xa2>
 8007328:	6921      	ldr	r1, [r4, #16]
 800732a:	464a      	mov	r2, r9
 800732c:	f7ff fed2 	bl	80070d4 <memcpy>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	6126      	str	r6, [r4, #16]
 800733e:	6165      	str	r5, [r4, #20]
 8007340:	444e      	add	r6, r9
 8007342:	eba5 0509 	sub.w	r5, r5, r9
 8007346:	6026      	str	r6, [r4, #0]
 8007348:	60a5      	str	r5, [r4, #8]
 800734a:	463e      	mov	r6, r7
 800734c:	42be      	cmp	r6, r7
 800734e:	d900      	bls.n	8007352 <__ssputs_r+0x72>
 8007350:	463e      	mov	r6, r7
 8007352:	6820      	ldr	r0, [r4, #0]
 8007354:	4632      	mov	r2, r6
 8007356:	4641      	mov	r1, r8
 8007358:	f000 faa8 	bl	80078ac <memmove>
 800735c:	68a3      	ldr	r3, [r4, #8]
 800735e:	1b9b      	subs	r3, r3, r6
 8007360:	60a3      	str	r3, [r4, #8]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	4433      	add	r3, r6
 8007366:	6023      	str	r3, [r4, #0]
 8007368:	2000      	movs	r0, #0
 800736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736e:	462a      	mov	r2, r5
 8007370:	f000 fac6 	bl	8007900 <_realloc_r>
 8007374:	4606      	mov	r6, r0
 8007376:	2800      	cmp	r0, #0
 8007378:	d1e0      	bne.n	800733c <__ssputs_r+0x5c>
 800737a:	6921      	ldr	r1, [r4, #16]
 800737c:	4650      	mov	r0, sl
 800737e:	f7ff feb7 	bl	80070f0 <_free_r>
 8007382:	230c      	movs	r3, #12
 8007384:	f8ca 3000 	str.w	r3, [sl]
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e7e9      	b.n	800736a <__ssputs_r+0x8a>
	...

08007398 <_svfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	4698      	mov	r8, r3
 800739e:	898b      	ldrh	r3, [r1, #12]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	b09d      	sub	sp, #116	@ 0x74
 80073a4:	4607      	mov	r7, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	d510      	bpl.n	80073ce <_svfiprintf_r+0x36>
 80073ac:	690b      	ldr	r3, [r1, #16]
 80073ae:	b973      	cbnz	r3, 80073ce <_svfiprintf_r+0x36>
 80073b0:	2140      	movs	r1, #64	@ 0x40
 80073b2:	f7ff ff09 	bl	80071c8 <_malloc_r>
 80073b6:	6028      	str	r0, [r5, #0]
 80073b8:	6128      	str	r0, [r5, #16]
 80073ba:	b930      	cbnz	r0, 80073ca <_svfiprintf_r+0x32>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	b01d      	add	sp, #116	@ 0x74
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	2340      	movs	r3, #64	@ 0x40
 80073cc:	616b      	str	r3, [r5, #20]
 80073ce:	2300      	movs	r3, #0
 80073d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d2:	2320      	movs	r3, #32
 80073d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80073dc:	2330      	movs	r3, #48	@ 0x30
 80073de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800757c <_svfiprintf_r+0x1e4>
 80073e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e6:	f04f 0901 	mov.w	r9, #1
 80073ea:	4623      	mov	r3, r4
 80073ec:	469a      	mov	sl, r3
 80073ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f2:	b10a      	cbz	r2, 80073f8 <_svfiprintf_r+0x60>
 80073f4:	2a25      	cmp	r2, #37	@ 0x25
 80073f6:	d1f9      	bne.n	80073ec <_svfiprintf_r+0x54>
 80073f8:	ebba 0b04 	subs.w	fp, sl, r4
 80073fc:	d00b      	beq.n	8007416 <_svfiprintf_r+0x7e>
 80073fe:	465b      	mov	r3, fp
 8007400:	4622      	mov	r2, r4
 8007402:	4629      	mov	r1, r5
 8007404:	4638      	mov	r0, r7
 8007406:	f7ff ff6b 	bl	80072e0 <__ssputs_r>
 800740a:	3001      	adds	r0, #1
 800740c:	f000 80a7 	beq.w	800755e <_svfiprintf_r+0x1c6>
 8007410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007412:	445a      	add	r2, fp
 8007414:	9209      	str	r2, [sp, #36]	@ 0x24
 8007416:	f89a 3000 	ldrb.w	r3, [sl]
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 809f 	beq.w	800755e <_svfiprintf_r+0x1c6>
 8007420:	2300      	movs	r3, #0
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800742a:	f10a 0a01 	add.w	sl, sl, #1
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	9307      	str	r3, [sp, #28]
 8007432:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007436:	931a      	str	r3, [sp, #104]	@ 0x68
 8007438:	4654      	mov	r4, sl
 800743a:	2205      	movs	r2, #5
 800743c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007440:	484e      	ldr	r0, [pc, #312]	@ (800757c <_svfiprintf_r+0x1e4>)
 8007442:	f7f8 ff15 	bl	8000270 <memchr>
 8007446:	9a04      	ldr	r2, [sp, #16]
 8007448:	b9d8      	cbnz	r0, 8007482 <_svfiprintf_r+0xea>
 800744a:	06d0      	lsls	r0, r2, #27
 800744c:	bf44      	itt	mi
 800744e:	2320      	movmi	r3, #32
 8007450:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007454:	0711      	lsls	r1, r2, #28
 8007456:	bf44      	itt	mi
 8007458:	232b      	movmi	r3, #43	@ 0x2b
 800745a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800745e:	f89a 3000 	ldrb.w	r3, [sl]
 8007462:	2b2a      	cmp	r3, #42	@ 0x2a
 8007464:	d015      	beq.n	8007492 <_svfiprintf_r+0xfa>
 8007466:	9a07      	ldr	r2, [sp, #28]
 8007468:	4654      	mov	r4, sl
 800746a:	2000      	movs	r0, #0
 800746c:	f04f 0c0a 	mov.w	ip, #10
 8007470:	4621      	mov	r1, r4
 8007472:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007476:	3b30      	subs	r3, #48	@ 0x30
 8007478:	2b09      	cmp	r3, #9
 800747a:	d94b      	bls.n	8007514 <_svfiprintf_r+0x17c>
 800747c:	b1b0      	cbz	r0, 80074ac <_svfiprintf_r+0x114>
 800747e:	9207      	str	r2, [sp, #28]
 8007480:	e014      	b.n	80074ac <_svfiprintf_r+0x114>
 8007482:	eba0 0308 	sub.w	r3, r0, r8
 8007486:	fa09 f303 	lsl.w	r3, r9, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	9304      	str	r3, [sp, #16]
 800748e:	46a2      	mov	sl, r4
 8007490:	e7d2      	b.n	8007438 <_svfiprintf_r+0xa0>
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	9103      	str	r1, [sp, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	bfbb      	ittet	lt
 800749e:	425b      	neglt	r3, r3
 80074a0:	f042 0202 	orrlt.w	r2, r2, #2
 80074a4:	9307      	strge	r3, [sp, #28]
 80074a6:	9307      	strlt	r3, [sp, #28]
 80074a8:	bfb8      	it	lt
 80074aa:	9204      	strlt	r2, [sp, #16]
 80074ac:	7823      	ldrb	r3, [r4, #0]
 80074ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80074b0:	d10a      	bne.n	80074c8 <_svfiprintf_r+0x130>
 80074b2:	7863      	ldrb	r3, [r4, #1]
 80074b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b6:	d132      	bne.n	800751e <_svfiprintf_r+0x186>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	1d1a      	adds	r2, r3, #4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	9203      	str	r2, [sp, #12]
 80074c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c4:	3402      	adds	r4, #2
 80074c6:	9305      	str	r3, [sp, #20]
 80074c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800758c <_svfiprintf_r+0x1f4>
 80074cc:	7821      	ldrb	r1, [r4, #0]
 80074ce:	2203      	movs	r2, #3
 80074d0:	4650      	mov	r0, sl
 80074d2:	f7f8 fecd 	bl	8000270 <memchr>
 80074d6:	b138      	cbz	r0, 80074e8 <_svfiprintf_r+0x150>
 80074d8:	9b04      	ldr	r3, [sp, #16]
 80074da:	eba0 000a 	sub.w	r0, r0, sl
 80074de:	2240      	movs	r2, #64	@ 0x40
 80074e0:	4082      	lsls	r2, r0
 80074e2:	4313      	orrs	r3, r2
 80074e4:	3401      	adds	r4, #1
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ec:	4824      	ldr	r0, [pc, #144]	@ (8007580 <_svfiprintf_r+0x1e8>)
 80074ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f2:	2206      	movs	r2, #6
 80074f4:	f7f8 febc 	bl	8000270 <memchr>
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d036      	beq.n	800756a <_svfiprintf_r+0x1d2>
 80074fc:	4b21      	ldr	r3, [pc, #132]	@ (8007584 <_svfiprintf_r+0x1ec>)
 80074fe:	bb1b      	cbnz	r3, 8007548 <_svfiprintf_r+0x1b0>
 8007500:	9b03      	ldr	r3, [sp, #12]
 8007502:	3307      	adds	r3, #7
 8007504:	f023 0307 	bic.w	r3, r3, #7
 8007508:	3308      	adds	r3, #8
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750e:	4433      	add	r3, r6
 8007510:	9309      	str	r3, [sp, #36]	@ 0x24
 8007512:	e76a      	b.n	80073ea <_svfiprintf_r+0x52>
 8007514:	fb0c 3202 	mla	r2, ip, r2, r3
 8007518:	460c      	mov	r4, r1
 800751a:	2001      	movs	r0, #1
 800751c:	e7a8      	b.n	8007470 <_svfiprintf_r+0xd8>
 800751e:	2300      	movs	r3, #0
 8007520:	3401      	adds	r4, #1
 8007522:	9305      	str	r3, [sp, #20]
 8007524:	4619      	mov	r1, r3
 8007526:	f04f 0c0a 	mov.w	ip, #10
 800752a:	4620      	mov	r0, r4
 800752c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007530:	3a30      	subs	r2, #48	@ 0x30
 8007532:	2a09      	cmp	r2, #9
 8007534:	d903      	bls.n	800753e <_svfiprintf_r+0x1a6>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0c6      	beq.n	80074c8 <_svfiprintf_r+0x130>
 800753a:	9105      	str	r1, [sp, #20]
 800753c:	e7c4      	b.n	80074c8 <_svfiprintf_r+0x130>
 800753e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007542:	4604      	mov	r4, r0
 8007544:	2301      	movs	r3, #1
 8007546:	e7f0      	b.n	800752a <_svfiprintf_r+0x192>
 8007548:	ab03      	add	r3, sp, #12
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	462a      	mov	r2, r5
 800754e:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <_svfiprintf_r+0x1f0>)
 8007550:	a904      	add	r1, sp, #16
 8007552:	4638      	mov	r0, r7
 8007554:	f3af 8000 	nop.w
 8007558:	1c42      	adds	r2, r0, #1
 800755a:	4606      	mov	r6, r0
 800755c:	d1d6      	bne.n	800750c <_svfiprintf_r+0x174>
 800755e:	89ab      	ldrh	r3, [r5, #12]
 8007560:	065b      	lsls	r3, r3, #25
 8007562:	f53f af2d 	bmi.w	80073c0 <_svfiprintf_r+0x28>
 8007566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007568:	e72c      	b.n	80073c4 <_svfiprintf_r+0x2c>
 800756a:	ab03      	add	r3, sp, #12
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	462a      	mov	r2, r5
 8007570:	4b05      	ldr	r3, [pc, #20]	@ (8007588 <_svfiprintf_r+0x1f0>)
 8007572:	a904      	add	r1, sp, #16
 8007574:	4638      	mov	r0, r7
 8007576:	f000 f879 	bl	800766c <_printf_i>
 800757a:	e7ed      	b.n	8007558 <_svfiprintf_r+0x1c0>
 800757c:	08007b28 	.word	0x08007b28
 8007580:	08007b32 	.word	0x08007b32
 8007584:	00000000 	.word	0x00000000
 8007588:	080072e1 	.word	0x080072e1
 800758c:	08007b2e 	.word	0x08007b2e

08007590 <_printf_common>:
 8007590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	4616      	mov	r6, r2
 8007596:	4698      	mov	r8, r3
 8007598:	688a      	ldr	r2, [r1, #8]
 800759a:	690b      	ldr	r3, [r1, #16]
 800759c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bfb8      	it	lt
 80075a4:	4613      	movlt	r3, r2
 80075a6:	6033      	str	r3, [r6, #0]
 80075a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075ac:	4607      	mov	r7, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	b10a      	cbz	r2, 80075b6 <_printf_common+0x26>
 80075b2:	3301      	adds	r3, #1
 80075b4:	6033      	str	r3, [r6, #0]
 80075b6:	6823      	ldr	r3, [r4, #0]
 80075b8:	0699      	lsls	r1, r3, #26
 80075ba:	bf42      	ittt	mi
 80075bc:	6833      	ldrmi	r3, [r6, #0]
 80075be:	3302      	addmi	r3, #2
 80075c0:	6033      	strmi	r3, [r6, #0]
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	f015 0506 	ands.w	r5, r5, #6
 80075c8:	d106      	bne.n	80075d8 <_printf_common+0x48>
 80075ca:	f104 0a19 	add.w	sl, r4, #25
 80075ce:	68e3      	ldr	r3, [r4, #12]
 80075d0:	6832      	ldr	r2, [r6, #0]
 80075d2:	1a9b      	subs	r3, r3, r2
 80075d4:	42ab      	cmp	r3, r5
 80075d6:	dc26      	bgt.n	8007626 <_printf_common+0x96>
 80075d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075dc:	6822      	ldr	r2, [r4, #0]
 80075de:	3b00      	subs	r3, #0
 80075e0:	bf18      	it	ne
 80075e2:	2301      	movne	r3, #1
 80075e4:	0692      	lsls	r2, r2, #26
 80075e6:	d42b      	bmi.n	8007640 <_printf_common+0xb0>
 80075e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075ec:	4641      	mov	r1, r8
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c8      	blx	r9
 80075f2:	3001      	adds	r0, #1
 80075f4:	d01e      	beq.n	8007634 <_printf_common+0xa4>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	6922      	ldr	r2, [r4, #16]
 80075fa:	f003 0306 	and.w	r3, r3, #6
 80075fe:	2b04      	cmp	r3, #4
 8007600:	bf02      	ittt	eq
 8007602:	68e5      	ldreq	r5, [r4, #12]
 8007604:	6833      	ldreq	r3, [r6, #0]
 8007606:	1aed      	subeq	r5, r5, r3
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	bf0c      	ite	eq
 800760c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007610:	2500      	movne	r5, #0
 8007612:	4293      	cmp	r3, r2
 8007614:	bfc4      	itt	gt
 8007616:	1a9b      	subgt	r3, r3, r2
 8007618:	18ed      	addgt	r5, r5, r3
 800761a:	2600      	movs	r6, #0
 800761c:	341a      	adds	r4, #26
 800761e:	42b5      	cmp	r5, r6
 8007620:	d11a      	bne.n	8007658 <_printf_common+0xc8>
 8007622:	2000      	movs	r0, #0
 8007624:	e008      	b.n	8007638 <_printf_common+0xa8>
 8007626:	2301      	movs	r3, #1
 8007628:	4652      	mov	r2, sl
 800762a:	4641      	mov	r1, r8
 800762c:	4638      	mov	r0, r7
 800762e:	47c8      	blx	r9
 8007630:	3001      	adds	r0, #1
 8007632:	d103      	bne.n	800763c <_printf_common+0xac>
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763c:	3501      	adds	r5, #1
 800763e:	e7c6      	b.n	80075ce <_printf_common+0x3e>
 8007640:	18e1      	adds	r1, r4, r3
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	2030      	movs	r0, #48	@ 0x30
 8007646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800764a:	4422      	add	r2, r4
 800764c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007654:	3302      	adds	r3, #2
 8007656:	e7c7      	b.n	80075e8 <_printf_common+0x58>
 8007658:	2301      	movs	r3, #1
 800765a:	4622      	mov	r2, r4
 800765c:	4641      	mov	r1, r8
 800765e:	4638      	mov	r0, r7
 8007660:	47c8      	blx	r9
 8007662:	3001      	adds	r0, #1
 8007664:	d0e6      	beq.n	8007634 <_printf_common+0xa4>
 8007666:	3601      	adds	r6, #1
 8007668:	e7d9      	b.n	800761e <_printf_common+0x8e>
	...

0800766c <_printf_i>:
 800766c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007670:	7e0f      	ldrb	r7, [r1, #24]
 8007672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007674:	2f78      	cmp	r7, #120	@ 0x78
 8007676:	4691      	mov	r9, r2
 8007678:	4680      	mov	r8, r0
 800767a:	460c      	mov	r4, r1
 800767c:	469a      	mov	sl, r3
 800767e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007682:	d807      	bhi.n	8007694 <_printf_i+0x28>
 8007684:	2f62      	cmp	r7, #98	@ 0x62
 8007686:	d80a      	bhi.n	800769e <_printf_i+0x32>
 8007688:	2f00      	cmp	r7, #0
 800768a:	f000 80d2 	beq.w	8007832 <_printf_i+0x1c6>
 800768e:	2f58      	cmp	r7, #88	@ 0x58
 8007690:	f000 80b9 	beq.w	8007806 <_printf_i+0x19a>
 8007694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800769c:	e03a      	b.n	8007714 <_printf_i+0xa8>
 800769e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076a2:	2b15      	cmp	r3, #21
 80076a4:	d8f6      	bhi.n	8007694 <_printf_i+0x28>
 80076a6:	a101      	add	r1, pc, #4	@ (adr r1, 80076ac <_printf_i+0x40>)
 80076a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076ac:	08007705 	.word	0x08007705
 80076b0:	08007719 	.word	0x08007719
 80076b4:	08007695 	.word	0x08007695
 80076b8:	08007695 	.word	0x08007695
 80076bc:	08007695 	.word	0x08007695
 80076c0:	08007695 	.word	0x08007695
 80076c4:	08007719 	.word	0x08007719
 80076c8:	08007695 	.word	0x08007695
 80076cc:	08007695 	.word	0x08007695
 80076d0:	08007695 	.word	0x08007695
 80076d4:	08007695 	.word	0x08007695
 80076d8:	08007819 	.word	0x08007819
 80076dc:	08007743 	.word	0x08007743
 80076e0:	080077d3 	.word	0x080077d3
 80076e4:	08007695 	.word	0x08007695
 80076e8:	08007695 	.word	0x08007695
 80076ec:	0800783b 	.word	0x0800783b
 80076f0:	08007695 	.word	0x08007695
 80076f4:	08007743 	.word	0x08007743
 80076f8:	08007695 	.word	0x08007695
 80076fc:	08007695 	.word	0x08007695
 8007700:	080077db 	.word	0x080077db
 8007704:	6833      	ldr	r3, [r6, #0]
 8007706:	1d1a      	adds	r2, r3, #4
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6032      	str	r2, [r6, #0]
 800770c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007714:	2301      	movs	r3, #1
 8007716:	e09d      	b.n	8007854 <_printf_i+0x1e8>
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	6820      	ldr	r0, [r4, #0]
 800771c:	1d19      	adds	r1, r3, #4
 800771e:	6031      	str	r1, [r6, #0]
 8007720:	0606      	lsls	r6, r0, #24
 8007722:	d501      	bpl.n	8007728 <_printf_i+0xbc>
 8007724:	681d      	ldr	r5, [r3, #0]
 8007726:	e003      	b.n	8007730 <_printf_i+0xc4>
 8007728:	0645      	lsls	r5, r0, #25
 800772a:	d5fb      	bpl.n	8007724 <_printf_i+0xb8>
 800772c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007730:	2d00      	cmp	r5, #0
 8007732:	da03      	bge.n	800773c <_printf_i+0xd0>
 8007734:	232d      	movs	r3, #45	@ 0x2d
 8007736:	426d      	negs	r5, r5
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773c:	4859      	ldr	r0, [pc, #356]	@ (80078a4 <_printf_i+0x238>)
 800773e:	230a      	movs	r3, #10
 8007740:	e011      	b.n	8007766 <_printf_i+0xfa>
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	6833      	ldr	r3, [r6, #0]
 8007746:	0608      	lsls	r0, r1, #24
 8007748:	f853 5b04 	ldr.w	r5, [r3], #4
 800774c:	d402      	bmi.n	8007754 <_printf_i+0xe8>
 800774e:	0649      	lsls	r1, r1, #25
 8007750:	bf48      	it	mi
 8007752:	b2ad      	uxthmi	r5, r5
 8007754:	2f6f      	cmp	r7, #111	@ 0x6f
 8007756:	4853      	ldr	r0, [pc, #332]	@ (80078a4 <_printf_i+0x238>)
 8007758:	6033      	str	r3, [r6, #0]
 800775a:	bf14      	ite	ne
 800775c:	230a      	movne	r3, #10
 800775e:	2308      	moveq	r3, #8
 8007760:	2100      	movs	r1, #0
 8007762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007766:	6866      	ldr	r6, [r4, #4]
 8007768:	60a6      	str	r6, [r4, #8]
 800776a:	2e00      	cmp	r6, #0
 800776c:	bfa2      	ittt	ge
 800776e:	6821      	ldrge	r1, [r4, #0]
 8007770:	f021 0104 	bicge.w	r1, r1, #4
 8007774:	6021      	strge	r1, [r4, #0]
 8007776:	b90d      	cbnz	r5, 800777c <_printf_i+0x110>
 8007778:	2e00      	cmp	r6, #0
 800777a:	d04b      	beq.n	8007814 <_printf_i+0x1a8>
 800777c:	4616      	mov	r6, r2
 800777e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007782:	fb03 5711 	mls	r7, r3, r1, r5
 8007786:	5dc7      	ldrb	r7, [r0, r7]
 8007788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800778c:	462f      	mov	r7, r5
 800778e:	42bb      	cmp	r3, r7
 8007790:	460d      	mov	r5, r1
 8007792:	d9f4      	bls.n	800777e <_printf_i+0x112>
 8007794:	2b08      	cmp	r3, #8
 8007796:	d10b      	bne.n	80077b0 <_printf_i+0x144>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	07df      	lsls	r7, r3, #31
 800779c:	d508      	bpl.n	80077b0 <_printf_i+0x144>
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	6861      	ldr	r1, [r4, #4]
 80077a2:	4299      	cmp	r1, r3
 80077a4:	bfde      	ittt	le
 80077a6:	2330      	movle	r3, #48	@ 0x30
 80077a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077b0:	1b92      	subs	r2, r2, r6
 80077b2:	6122      	str	r2, [r4, #16]
 80077b4:	f8cd a000 	str.w	sl, [sp]
 80077b8:	464b      	mov	r3, r9
 80077ba:	aa03      	add	r2, sp, #12
 80077bc:	4621      	mov	r1, r4
 80077be:	4640      	mov	r0, r8
 80077c0:	f7ff fee6 	bl	8007590 <_printf_common>
 80077c4:	3001      	adds	r0, #1
 80077c6:	d14a      	bne.n	800785e <_printf_i+0x1f2>
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	b004      	add	sp, #16
 80077ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	f043 0320 	orr.w	r3, r3, #32
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	4833      	ldr	r0, [pc, #204]	@ (80078a8 <_printf_i+0x23c>)
 80077dc:	2778      	movs	r7, #120	@ 0x78
 80077de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6831      	ldr	r1, [r6, #0]
 80077e6:	061f      	lsls	r7, r3, #24
 80077e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80077ec:	d402      	bmi.n	80077f4 <_printf_i+0x188>
 80077ee:	065f      	lsls	r7, r3, #25
 80077f0:	bf48      	it	mi
 80077f2:	b2ad      	uxthmi	r5, r5
 80077f4:	6031      	str	r1, [r6, #0]
 80077f6:	07d9      	lsls	r1, r3, #31
 80077f8:	bf44      	itt	mi
 80077fa:	f043 0320 	orrmi.w	r3, r3, #32
 80077fe:	6023      	strmi	r3, [r4, #0]
 8007800:	b11d      	cbz	r5, 800780a <_printf_i+0x19e>
 8007802:	2310      	movs	r3, #16
 8007804:	e7ac      	b.n	8007760 <_printf_i+0xf4>
 8007806:	4827      	ldr	r0, [pc, #156]	@ (80078a4 <_printf_i+0x238>)
 8007808:	e7e9      	b.n	80077de <_printf_i+0x172>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	f023 0320 	bic.w	r3, r3, #32
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	e7f6      	b.n	8007802 <_printf_i+0x196>
 8007814:	4616      	mov	r6, r2
 8007816:	e7bd      	b.n	8007794 <_printf_i+0x128>
 8007818:	6833      	ldr	r3, [r6, #0]
 800781a:	6825      	ldr	r5, [r4, #0]
 800781c:	6961      	ldr	r1, [r4, #20]
 800781e:	1d18      	adds	r0, r3, #4
 8007820:	6030      	str	r0, [r6, #0]
 8007822:	062e      	lsls	r6, r5, #24
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	d501      	bpl.n	800782c <_printf_i+0x1c0>
 8007828:	6019      	str	r1, [r3, #0]
 800782a:	e002      	b.n	8007832 <_printf_i+0x1c6>
 800782c:	0668      	lsls	r0, r5, #25
 800782e:	d5fb      	bpl.n	8007828 <_printf_i+0x1bc>
 8007830:	8019      	strh	r1, [r3, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	4616      	mov	r6, r2
 8007838:	e7bc      	b.n	80077b4 <_printf_i+0x148>
 800783a:	6833      	ldr	r3, [r6, #0]
 800783c:	1d1a      	adds	r2, r3, #4
 800783e:	6032      	str	r2, [r6, #0]
 8007840:	681e      	ldr	r6, [r3, #0]
 8007842:	6862      	ldr	r2, [r4, #4]
 8007844:	2100      	movs	r1, #0
 8007846:	4630      	mov	r0, r6
 8007848:	f7f8 fd12 	bl	8000270 <memchr>
 800784c:	b108      	cbz	r0, 8007852 <_printf_i+0x1e6>
 800784e:	1b80      	subs	r0, r0, r6
 8007850:	6060      	str	r0, [r4, #4]
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	2300      	movs	r3, #0
 8007858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800785c:	e7aa      	b.n	80077b4 <_printf_i+0x148>
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	4632      	mov	r2, r6
 8007862:	4649      	mov	r1, r9
 8007864:	4640      	mov	r0, r8
 8007866:	47d0      	blx	sl
 8007868:	3001      	adds	r0, #1
 800786a:	d0ad      	beq.n	80077c8 <_printf_i+0x15c>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	079b      	lsls	r3, r3, #30
 8007870:	d413      	bmi.n	800789a <_printf_i+0x22e>
 8007872:	68e0      	ldr	r0, [r4, #12]
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	4298      	cmp	r0, r3
 8007878:	bfb8      	it	lt
 800787a:	4618      	movlt	r0, r3
 800787c:	e7a6      	b.n	80077cc <_printf_i+0x160>
 800787e:	2301      	movs	r3, #1
 8007880:	4632      	mov	r2, r6
 8007882:	4649      	mov	r1, r9
 8007884:	4640      	mov	r0, r8
 8007886:	47d0      	blx	sl
 8007888:	3001      	adds	r0, #1
 800788a:	d09d      	beq.n	80077c8 <_printf_i+0x15c>
 800788c:	3501      	adds	r5, #1
 800788e:	68e3      	ldr	r3, [r4, #12]
 8007890:	9903      	ldr	r1, [sp, #12]
 8007892:	1a5b      	subs	r3, r3, r1
 8007894:	42ab      	cmp	r3, r5
 8007896:	dcf2      	bgt.n	800787e <_printf_i+0x212>
 8007898:	e7eb      	b.n	8007872 <_printf_i+0x206>
 800789a:	2500      	movs	r5, #0
 800789c:	f104 0619 	add.w	r6, r4, #25
 80078a0:	e7f5      	b.n	800788e <_printf_i+0x222>
 80078a2:	bf00      	nop
 80078a4:	08007b39 	.word	0x08007b39
 80078a8:	08007b4a 	.word	0x08007b4a

080078ac <memmove>:
 80078ac:	4288      	cmp	r0, r1
 80078ae:	b510      	push	{r4, lr}
 80078b0:	eb01 0402 	add.w	r4, r1, r2
 80078b4:	d902      	bls.n	80078bc <memmove+0x10>
 80078b6:	4284      	cmp	r4, r0
 80078b8:	4623      	mov	r3, r4
 80078ba:	d807      	bhi.n	80078cc <memmove+0x20>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	42a1      	cmp	r1, r4
 80078c0:	d008      	beq.n	80078d4 <memmove+0x28>
 80078c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078ca:	e7f8      	b.n	80078be <memmove+0x12>
 80078cc:	4402      	add	r2, r0
 80078ce:	4601      	mov	r1, r0
 80078d0:	428a      	cmp	r2, r1
 80078d2:	d100      	bne.n	80078d6 <memmove+0x2a>
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078de:	e7f7      	b.n	80078d0 <memmove+0x24>

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	@ (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 f99e 	bl	8000c2c <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20019a84 	.word	0x20019a84

08007900 <_realloc_r>:
 8007900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	4680      	mov	r8, r0
 8007906:	4615      	mov	r5, r2
 8007908:	460c      	mov	r4, r1
 800790a:	b921      	cbnz	r1, 8007916 <_realloc_r+0x16>
 800790c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007910:	4611      	mov	r1, r2
 8007912:	f7ff bc59 	b.w	80071c8 <_malloc_r>
 8007916:	b92a      	cbnz	r2, 8007924 <_realloc_r+0x24>
 8007918:	f7ff fbea 	bl	80070f0 <_free_r>
 800791c:	2400      	movs	r4, #0
 800791e:	4620      	mov	r0, r4
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	f000 f81a 	bl	800795c <_malloc_usable_size_r>
 8007928:	4285      	cmp	r5, r0
 800792a:	4606      	mov	r6, r0
 800792c:	d802      	bhi.n	8007934 <_realloc_r+0x34>
 800792e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007932:	d8f4      	bhi.n	800791e <_realloc_r+0x1e>
 8007934:	4629      	mov	r1, r5
 8007936:	4640      	mov	r0, r8
 8007938:	f7ff fc46 	bl	80071c8 <_malloc_r>
 800793c:	4607      	mov	r7, r0
 800793e:	2800      	cmp	r0, #0
 8007940:	d0ec      	beq.n	800791c <_realloc_r+0x1c>
 8007942:	42b5      	cmp	r5, r6
 8007944:	462a      	mov	r2, r5
 8007946:	4621      	mov	r1, r4
 8007948:	bf28      	it	cs
 800794a:	4632      	movcs	r2, r6
 800794c:	f7ff fbc2 	bl	80070d4 <memcpy>
 8007950:	4621      	mov	r1, r4
 8007952:	4640      	mov	r0, r8
 8007954:	f7ff fbcc 	bl	80070f0 <_free_r>
 8007958:	463c      	mov	r4, r7
 800795a:	e7e0      	b.n	800791e <_realloc_r+0x1e>

0800795c <_malloc_usable_size_r>:
 800795c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007960:	1f18      	subs	r0, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfbc      	itt	lt
 8007966:	580b      	ldrlt	r3, [r1, r0]
 8007968:	18c0      	addlt	r0, r0, r3
 800796a:	4770      	bx	lr

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
