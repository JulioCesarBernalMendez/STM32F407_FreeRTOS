
App_011_Example_4.8_Changing_Task_Priorities.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c44  08004c44  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004c44  08004c44  00005c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c4c  08004c4c  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c4c  08004c4c  00005c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004c54  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00012e44  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e58  20012e58  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ea4  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000294b  00000000  00000000  00017ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  0001a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d41  00000000  00000000  0001b928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000203db  00000000  00000000  0001c669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013a3b  00000000  00000000  0003ca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9cf7  00000000  00000000  0005047f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a176  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004724  00000000  00000000  0012a1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0012e8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b74 	.word	0x08004b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004b74 	.word	0x08004b74

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f103 0208 	add.w	r2, r3, #8
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d103      	bne.n	800053a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e00c      	b.n	8000554 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e002      	b.n	8000548 <vListInsert+0x2e>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	d2f6      	bcs.n	8000542 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6892      	ldr	r2, [r2, #8]
 80005a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d103      	bne.n	80005c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05d      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800061a:	2b00      	cmp	r3, #0
 800061c:	d059      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <xQueueGenericReset+0x52>
 8000630:	2101      	movs	r1, #1
 8000632:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14c      	bne.n	80006d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000638:	f001 ffa4 	bl	8002584 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000668:	3b01      	subs	r3, #1
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	22ff      	movs	r2, #255	@ 0xff
 800067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d114      	bne.n	80006b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3310      	adds	r3, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f8ac 	bl	80017f8 <xTaskRemoveFromEventList>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <xQueueGenericReset+0x120>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	e009      	b.n	80006cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feff 	bl	80004c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3324      	adds	r3, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fefa 	bl	80004c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006cc:	f001 ff8c 	bl	80025e8 <vPortExitCritical>
 80006d0:	e001      	b.n	80006d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <xQueueGenericReset+0x114>
    __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	60bb      	str	r3, [r7, #8]
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80006f4:	697b      	ldr	r3, [r7, #20]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02e      	beq.n	800077a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071c:	2100      	movs	r1, #0
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericCreate+0x28>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d123      	bne.n	800077a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800073e:	d81c      	bhi.n	800077a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3350      	adds	r3, #80	@ 0x50
 800074e:	4618      	mov	r0, r3
 8000750:	f001 fffc 	bl	800274c <pvPortMalloc>
 8000754:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3350      	adds	r3, #80	@ 0x50
 8000764:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f815 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000778:	e00e      	b.n	8000798 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10b      	bne.n	8000798 <xQueueGenericCreate+0x94>
    __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff04 	bl	80005e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80007fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10b      	bne.n	800081a <xQueueReceive+0x32>
    __asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	623b      	str	r3, [r7, #32]
}
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d103      	bne.n	8000828 <xQueueReceive+0x40>
 8000820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <xQueueReceive+0x44>
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <xQueueReceive+0x46>
 800082c:	2300      	movs	r3, #0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10b      	bne.n	800084a <xQueueReceive+0x62>
    __asm volatile
 8000832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000836:	f383 8811 	msr	BASEPRI, r3
 800083a:	f3bf 8f6f 	isb	sy
 800083e:	f3bf 8f4f 	dsb	sy
 8000842:	61fb      	str	r3, [r7, #28]
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	e7fd      	b.n	8000846 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800084a:	f001 f9eb 	bl	8001c24 <xTaskGetSchedulerState>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d102      	bne.n	800085a <xQueueReceive+0x72>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <xQueueReceive+0x76>
 800085a:	2301      	movs	r3, #1
 800085c:	e000      	b.n	8000860 <xQueueReceive+0x78>
 800085e:	2300      	movs	r3, #0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10b      	bne.n	800087c <xQueueReceive+0x94>
    __asm volatile
 8000864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000868:	f383 8811 	msr	BASEPRI, r3
 800086c:	f3bf 8f6f 	isb	sy
 8000870:	f3bf 8f4f 	dsb	sy
 8000874:	61bb      	str	r3, [r7, #24]
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800087c:	f001 fe82 	bl	8002584 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01f      	beq.n	80008cc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800088c:	68b9      	ldr	r1, [r7, #8]
 800088e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000890:	f000 f88c 	bl	80009ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000896:	1e5a      	subs	r2, r3, #1
 8000898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800089c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d00f      	beq.n	80008c4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008a6:	3310      	adds	r3, #16
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ffa5 	bl	80017f8 <xTaskRemoveFromEventList>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d007      	beq.n	80008c4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80008b4:	4b3c      	ldr	r3, [pc, #240]	@ (80009a8 <xQueueReceive+0x1c0>)
 80008b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80008c4:	f001 fe90 	bl	80025e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e069      	b.n	80009a0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d103      	bne.n	80008da <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80008d2:	f001 fe89 	bl	80025e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80008d6:	2300      	movs	r3, #0
 80008d8:	e062      	b.n	80009a0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80008da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f861 	bl	80019ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008ee:	f001 fe7b 	bl	80025e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008f2:	f000 fc77 	bl	80011e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008f6:	f001 fe45 	bl	8002584 <vPortEnterCritical>
 80008fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000900:	b25b      	sxtb	r3, r3
 8000902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000906:	d103      	bne.n	8000910 <xQueueReceive+0x128>
 8000908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000916:	b25b      	sxtb	r3, r3
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d103      	bne.n	8000926 <xQueueReceive+0x13e>
 800091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000926:	f001 fe5f 	bl	80025e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800092a:	1d3a      	adds	r2, r7, #4
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f850 	bl	80019d8 <xTaskCheckForTimeOut>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d123      	bne.n	8000986 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800093e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000940:	f000 f8ac 	bl	8000a9c <prvIsQueueEmpty>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d017      	beq.n	800097a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094c:	3324      	adds	r3, #36	@ 0x24
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 fee4 	bl	8001720 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800095a:	f000 f84d 	bl	80009f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800095e:	f000 fc4f 	bl	8001200 <xTaskResumeAll>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d189      	bne.n	800087c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <xQueueReceive+0x1c0>)
 800096a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	e780      	b.n	800087c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800097a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800097c:	f000 f83c 	bl	80009f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000980:	f000 fc3e 	bl	8001200 <xTaskResumeAll>
 8000984:	e77a      	b.n	800087c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000988:	f000 f836 	bl	80009f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800098c:	f000 fc38 	bl	8001200 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000992:	f000 f883 	bl	8000a9c <prvIsQueueEmpty>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	f43f af6f 	beq.w	800087c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800099e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3730      	adds	r7, #48	@ 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	e000ed04 	.word	0xe000ed04

080009ac <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d018      	beq.n	80009f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	441a      	add	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d303      	bcc.n	80009e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68d9      	ldr	r1, [r3, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	461a      	mov	r2, r3
 80009ea:	6838      	ldr	r0, [r7, #0]
 80009ec:	f004 f8b4 	bl	8004b58 <memcpy>
    }
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000a00:	f001 fdc0 	bl	8002584 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a0a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a0c:	e011      	b.n	8000a32 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d012      	beq.n	8000a3c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3324      	adds	r3, #36	@ 0x24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 feec 	bl	80017f8 <xTaskRemoveFromEventList>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000a26:	f001 f83f 	bl	8001aa8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dce9      	bgt.n	8000a0e <prvUnlockQueue+0x16>
 8000a3a:	e000      	b.n	8000a3e <prvUnlockQueue+0x46>
                    break;
 8000a3c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	22ff      	movs	r2, #255	@ 0xff
 8000a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000a46:	f001 fdcf 	bl	80025e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000a4a:	f001 fd9b 	bl	8002584 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a54:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a56:	e011      	b.n	8000a7c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d012      	beq.n	8000a86 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3310      	adds	r3, #16
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fec7 	bl	80017f8 <xTaskRemoveFromEventList>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000a70:	f001 f81a 	bl	8001aa8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000a7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	dce9      	bgt.n	8000a58 <prvUnlockQueue+0x60>
 8000a84:	e000      	b.n	8000a88 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000a86:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	22ff      	movs	r2, #255	@ 0xff
 8000a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000a90:	f001 fdaa 	bl	80025e8 <vPortExitCritical>
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000aa4:	f001 fd6e 	bl	8002584 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e001      	b.n	8000aba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000aba:	f001 fd95 	bl	80025e8 <vPortExitCritical>

    return xReturn;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000ac8:	b480      	push	{r7}
 8000aca:	b087      	sub	sp, #28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d10b      	bne.n	8000af4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ae0:	f383 8811 	msr	BASEPRI, r3
 8000ae4:	f3bf 8f6f 	isb	sy
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	60fb      	str	r3, [r7, #12]
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d024      	beq.n	8000b44 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e01e      	b.n	8000b3e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000b00:	4a18      	ldr	r2, [pc, #96]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4413      	add	r3, r2
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d105      	bne.n	8000b1c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b16:	4413      	add	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
                    break;
 8000b1a:	e013      	b.n	8000b44 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d10a      	bne.n	8000b38 <vQueueAddToRegistry+0x70>
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d104      	bne.n	8000b38 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4a0c      	ldr	r2, [pc, #48]	@ (8000b64 <vQueueAddToRegistry+0x9c>)
 8000b34:	4413      	add	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	d9dd      	bls.n	8000b00 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000b56:	bf00      	nop
 8000b58:	371c      	adds	r7, #28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000030 	.word	0x20000030

08000b68 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000b78:	f001 fd04 	bl	8002584 <vPortEnterCritical>
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b88:	d103      	bne.n	8000b92 <vQueueWaitForMessageRestricted+0x2a>
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d103      	bne.n	8000ba8 <vQueueWaitForMessageRestricted+0x40>
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ba8:	f001 fd1e 	bl	80025e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d106      	bne.n	8000bc2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3324      	adds	r3, #36	@ 0x24
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fdd5 	bl	800176c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff18 	bl	80009f8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af04      	add	r7, sp, #16
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fdb2 	bl	800274c <pvPortMalloc>
 8000be8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d013      	beq.n	8000c18 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000bf0:	2058      	movs	r0, #88	@ 0x58
 8000bf2:	f001 fdab 	bl	800274c <pvPortMalloc>
 8000bf6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000bfe:	2258      	movs	r2, #88	@ 0x58
 8000c00:	2100      	movs	r1, #0
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f003 ff7c 	bl	8004b00 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c0e:	e005      	b.n	8000c1c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000c10:	6938      	ldr	r0, [r7, #16]
 8000c12:	f001 fdef 	bl	80027f4 <vPortFree>
 8000c16:	e001      	b.n	8000c1c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00d      	beq.n	8000c3e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c22:	2300      	movs	r3, #0
 8000c24:	9303      	str	r3, [sp, #12]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	68b9      	ldr	r1, [r7, #8]
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f000 f828 	bl	8000c8e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000c3e:	697b      	ldr	r3, [r7, #20]
    }
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	9301      	str	r3, [sp, #4]
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff ffb3 	bl	8000bd0 <prvCreateTask>
 8000c6a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000c72:	6938      	ldr	r0, [r7, #16]
 8000c74:	f000 f89c 	bl	8000db0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e002      	b.n	8000c84 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000c84:	697b      	ldr	r3, [r7, #20]
    }
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b088      	sub	sp, #32
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c9e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	21a5      	movs	r1, #165	@ 0xa5
 8000ca8:	f003 ff2a 	bl	8004b00 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f023 0307 	bic.w	r3, r3, #7
 8000cc4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	f003 0307 	and.w	r3, r3, #7
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00b      	beq.n	8000ce8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	617b      	str	r3, [r7, #20]
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01e      	beq.n	8000d2c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e012      	b.n	8000d1a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	7819      	ldrb	r1, [r3, #0]
 8000cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	4413      	add	r3, r2
 8000d02:	3334      	adds	r3, #52	@ 0x34
 8000d04:	460a      	mov	r2, r1
 8000d06:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d9e9      	bls.n	8000cf4 <prvInitialiseNewTask+0x66>
 8000d20:	e000      	b.n	8000d24 <prvInitialiseNewTask+0x96>
            {
                break;
 8000d22:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d90b      	bls.n	8000d4a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d36:	f383 8811 	msr	BASEPRI, r3
 8000d3a:	f3bf 8f6f 	isb	sy
 8000d3e:	f3bf 8f4f 	dsb	sy
 8000d42:	613b      	str	r3, [r7, #16]
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	e7fd      	b.n	8000d46 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d901      	bls.n	8000d54 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d50:	2304      	movs	r3, #4
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d58:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d62:	3304      	adds	r3, #4
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fbcb 	bl	8000500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d6c:	3318      	adds	r3, #24
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fbc6 	bl	8000500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d78:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d7c:	f1c3 0205 	rsb	r2, r3, #5
 8000d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d82:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d88:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	69b8      	ldr	r0, [r7, #24]
 8000d90:	f001 fa7a 	bl	8002288 <pxPortInitialiseStack>
 8000d94:	4602      	mov	r2, r0
 8000d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d98:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000db8:	f001 fbe4 	bl	8002584 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000dbc:	4b41      	ldr	r3, [pc, #260]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a40      	ldr	r2, [pc, #256]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dc4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000dc6:	4b40      	ldr	r3, [pc, #256]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000dce:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ec4 <prvAddNewTaskToReadyList+0x114>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000ddc:	f000 fe88 	bl	8001af0 <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000de2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b37      	ldr	r3, [pc, #220]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000df8:	4a33      	ldr	r2, [pc, #204]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000dfe:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a32      	ldr	r2, [pc, #200]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e06:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e08:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <prvAddNewTaskToReadyList+0x120>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <prvAddNewTaskToReadyList+0x124>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <prvAddNewTaskToReadyList+0x124>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e26:	492c      	ldr	r1, [pc, #176]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	3204      	adds	r2, #4
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e66:	441a      	add	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e70:	4919      	ldr	r1, [pc, #100]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000e82:	1c59      	adds	r1, r3, #1
 8000e84:	4814      	ldr	r0, [pc, #80]	@ (8000ed8 <prvAddNewTaskToReadyList+0x128>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4403      	add	r3, r0
 8000e90:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000e92:	f001 fba9 	bl	80025e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <prvAddNewTaskToReadyList+0x11c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00e      	beq.n	8000ebc <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <prvAddNewTaskToReadyList+0x118>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <prvAddNewTaskToReadyList+0x10c>
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <prvAddNewTaskToReadyList+0x12c>)
 8000eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000148 	.word	0x20000148
 8000ec8:	20000070 	.word	0x20000070
 8000ecc:	20000154 	.word	0x20000154
 8000ed0:	20000164 	.word	0x20000164
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	20000074 	.word	0x20000074
 8000edc:	e000ed04 	.word	0xe000ed04

08000ee0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        taskENTER_CRITICAL();
 8000ee8:	f001 fb4c 	bl	8002584 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <uxTaskPriorityGet+0x18>
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <uxTaskPriorityGet+0x30>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	e000      	b.n	8000efa <uxTaskPriorityGet+0x1a>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f00:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8000f02:	f001 fb71 	bl	80025e8 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );

        return uxReturn;
 8000f06:	68bb      	ldr	r3, [r7, #8]
    }
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000070 	.word	0x20000070

08000f14 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d90b      	bls.n	8000f40 <vTaskPrioritySet+0x2c>
    __asm volatile
 8000f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f2c:	f383 8811 	msr	BASEPRI, r3
 8000f30:	f3bf 8f6f 	isb	sy
 8000f34:	f3bf 8f4f 	dsb	sy
 8000f38:	60bb      	str	r3, [r7, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d901      	bls.n	8000f4a <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f46:	2304      	movs	r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8000f4a:	f001 fb1b 	bl	8002584 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <vTaskPrioritySet+0x46>
 8000f54:	4b58      	ldr	r3, [pc, #352]	@ (80010b8 <vTaskPrioritySet+0x1a4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	e000      	b.n	8000f5c <vTaskPrioritySet+0x48>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f62:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f000 809f 	beq.w	80010ac <vTaskPrioritySet+0x198>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d90d      	bls.n	8000f92 <vTaskPrioritySet+0x7e>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 8000f76:	4b50      	ldr	r3, [pc, #320]	@ (80010b8 <vTaskPrioritySet+0x1a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d00f      	beq.n	8000fa0 <vTaskPrioritySet+0x8c>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 8000f80:	4b4d      	ldr	r3, [pc, #308]	@ (80010b8 <vTaskPrioritySet+0x1a4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f86:	683a      	ldr	r2, [r7, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d909      	bls.n	8000fa0 <vTaskPrioritySet+0x8c>
                            {
                                xYieldRequired = pdTRUE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	e006      	b.n	8000fa0 <vTaskPrioritySet+0x8c>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8000f92:	4b49      	ldr	r3, [pc, #292]	@ (80010b8 <vTaskPrioritySet+0x1a4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d101      	bne.n	8000fa0 <vTaskPrioritySet+0x8c>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa4:	613b      	str	r3, [r7, #16]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d004      	beq.n	8000fbc <vTaskPrioritySet+0xa8>
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d902      	bls.n	8000fc2 <vTaskPrioritySet+0xae>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	683a      	ldr	r2, [r7, #0]
 8000fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db04      	blt.n	8000fda <vTaskPrioritySet+0xc6>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	f1c3 0205 	rsb	r2, r3, #5
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6959      	ldr	r1, [r3, #20]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4a34      	ldr	r2, [pc, #208]	@ (80010bc <vTaskPrioritySet+0x1a8>)
 8000fea:	4413      	add	r3, r2
 8000fec:	4299      	cmp	r1, r3
 8000fee:	d152      	bne.n	8001096 <vTaskPrioritySet+0x182>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fac9 	bl	800058c <uxListRemove>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <vTaskPrioritySet+0x100>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001000:	2201      	movs	r2, #1
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43da      	mvns	r2, r3
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <vTaskPrioritySet+0x1ac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4013      	ands	r3, r2
 8001010:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <vTaskPrioritySet+0x1ac>)
 8001012:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001018:	2201      	movs	r2, #1
 800101a:	409a      	lsls	r2, r3
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <vTaskPrioritySet+0x1ac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4313      	orrs	r3, r2
 8001022:	4a27      	ldr	r2, [pc, #156]	@ (80010c0 <vTaskPrioritySet+0x1ac>)
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800102a:	4924      	ldr	r1, [pc, #144]	@ (80010bc <vTaskPrioritySet+0x1a8>)
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	3204      	adds	r2, #4
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <vTaskPrioritySet+0x1a8>)
 800106a:	441a      	add	r2, r3
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	615a      	str	r2, [r3, #20]
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001074:	4911      	ldr	r1, [pc, #68]	@ (80010bc <vTaskPrioritySet+0x1a8>)
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001086:	1c59      	adds	r1, r3, #1
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <vTaskPrioritySet+0x1a8>)
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4403      	add	r3, r0
 8001094:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <vTaskPrioritySet+0x198>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <vTaskPrioritySet+0x1b0>)
 800109e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	f3bf 8f4f 	dsb	sy
 80010a8:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80010ac:	f001 fa9c 	bl	80025e8 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
    }
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000070 	.word	0x20000070
 80010bc:	20000074 	.word	0x20000074
 80010c0:	20000150 	.word	0x20000150
 80010c4:	e000ed04 	.word	0xe000ed04

080010c8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	@ 0x28
 80010cc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	e011      	b.n	8001100 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80010dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <prvCreateIdleTasks+0x88>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	7819      	ldrb	r1, [r3, #0]
 80010e4:	1d3a      	adds	r2, r7, #4
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4413      	add	r3, r2
 80010ea:	460a      	mov	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2b09      	cmp	r3, #9
 8001104:	ddea      	ble.n	80010dc <prvCreateIdleTasks+0x14>
 8001106:	e000      	b.n	800110a <prvCreateIdleTasks+0x42>
        {
            break;
 8001108:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
 800110e:	e015      	b.n	800113c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <prvCreateIdleTasks+0x8c>)
 8001112:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <prvCreateIdleTasks+0x90>)
 800111a:	4413      	add	r3, r2
 800111c:	1d39      	adds	r1, r7, #4
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	2282      	movs	r2, #130	@ 0x82
 8001128:	6938      	ldr	r0, [r7, #16]
 800112a:	f7ff fd8d 	bl	8000c48 <xTaskCreate>
 800112e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	3301      	adds	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	2b00      	cmp	r3, #0
 8001140:	dde6      	ble.n	8001110 <prvCreateIdleTasks+0x48>
 8001142:	e000      	b.n	8001146 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001144:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001146:	69fb      	ldr	r3, [r7, #28]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	08004b8c 	.word	0x08004b8c
 8001154:	08001ac1 	.word	0x08001ac1
 8001158:	2000016c 	.word	0x2000016c

0800115c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001162:	f7ff ffb1 	bl	80010c8 <prvCreateIdleTasks>
 8001166:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d102      	bne.n	8001174 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800116e:	f000 fdf9 	bl	8001d64 <xTimerCreateTimerTask>
 8001172:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d116      	bne.n	80011a8 <vTaskStartScheduler+0x4c>
    __asm volatile
 800117a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800117e:	f383 8811 	msr	BASEPRI, r3
 8001182:	f3bf 8f6f 	isb	sy
 8001186:	f3bf 8f4f 	dsb	sy
 800118a:	60bb      	str	r3, [r7, #8]
}
 800118c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <vTaskStartScheduler+0x78>)
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <vTaskStartScheduler+0x7c>)
 8001198:	2201      	movs	r2, #1
 800119a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <vTaskStartScheduler+0x80>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80011a2:	f001 f8ff 	bl	80023a4 <xPortStartScheduler>
 80011a6:	e00f      	b.n	80011c8 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	d10b      	bne.n	80011c8 <vTaskStartScheduler+0x6c>
    __asm volatile
 80011b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011b4:	f383 8811 	msr	BASEPRI, r3
 80011b8:	f3bf 8f6f 	isb	sy
 80011bc:	f3bf 8f4f 	dsb	sy
 80011c0:	607b      	str	r3, [r7, #4]
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <vTaskStartScheduler+0x84>)
 80011ca:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000168 	.word	0x20000168
 80011d8:	20000154 	.word	0x20000154
 80011dc:	2000014c 	.word	0x2000014c
 80011e0:	20000000 	.word	0x20000000

080011e4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <vTaskSuspendAll+0x18>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a03      	ldr	r2, [pc, #12]	@ (80011fc <vTaskSuspendAll+0x18>)
 80011f0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	20000170 	.word	0x20000170

08001200 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800120e:	f001 f9b9 	bl	8002584 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8001216:	4b75      	ldr	r3, [pc, #468]	@ (80013ec <xTaskResumeAll+0x1ec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10b      	bne.n	8001236 <xTaskResumeAll+0x36>
    __asm volatile
 800121e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001222:	f383 8811 	msr	BASEPRI, r3
 8001226:	f3bf 8f6f 	isb	sy
 800122a:	f3bf 8f4f 	dsb	sy
 800122e:	603b      	str	r3, [r7, #0]
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	e7fd      	b.n	8001232 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001236:	4b6d      	ldr	r3, [pc, #436]	@ (80013ec <xTaskResumeAll+0x1ec>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3b01      	subs	r3, #1
 800123c:	4a6b      	ldr	r2, [pc, #428]	@ (80013ec <xTaskResumeAll+0x1ec>)
 800123e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001240:	4b6a      	ldr	r3, [pc, #424]	@ (80013ec <xTaskResumeAll+0x1ec>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 80ca 	bne.w	80013de <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800124a:	4b69      	ldr	r3, [pc, #420]	@ (80013f0 <xTaskResumeAll+0x1f0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80c5 	beq.w	80013de <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001254:	e08e      	b.n	8001374 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001256:	4b67      	ldr	r3, [pc, #412]	@ (80013f4 <xTaskResumeAll+0x1f4>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	6a12      	ldr	r2, [r2, #32]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	69d2      	ldr	r2, [r2, #28]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	3318      	adds	r3, #24
 8001280:	429a      	cmp	r2, r3
 8001282:	d103      	bne.n	800128c <xTaskResumeAll+0x8c>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	6a1a      	ldr	r2, [r3, #32]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	68d2      	ldr	r2, [r2, #12]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	6892      	ldr	r2, [r2, #8]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	429a      	cmp	r2, r3
 80012c0:	d103      	bne.n	80012ca <xTaskResumeAll+0xca>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012de:	2201      	movs	r2, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	4b45      	ldr	r3, [pc, #276]	@ (80013f8 <xTaskResumeAll+0x1f8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	4a43      	ldr	r2, [pc, #268]	@ (80013f8 <xTaskResumeAll+0x1f8>)
 80012ea:	6013      	str	r3, [r2, #0]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f0:	4942      	ldr	r1, [pc, #264]	@ (80013fc <xTaskResumeAll+0x1fc>)
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	440b      	add	r3, r1
 80012fc:	3304      	adds	r3, #4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	3204      	adds	r2, #4
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	1d1a      	adds	r2, r3, #4
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4a33      	ldr	r2, [pc, #204]	@ (80013fc <xTaskResumeAll+0x1fc>)
 8001330:	441a      	add	r2, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800133a:	4930      	ldr	r1, [pc, #192]	@ (80013fc <xTaskResumeAll+0x1fc>)
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800134c:	1c59      	adds	r1, r3, #1
 800134e:	482b      	ldr	r0, [pc, #172]	@ (80013fc <xTaskResumeAll+0x1fc>)
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4403      	add	r3, r0
 800135a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001360:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <xTaskResumeAll+0x200>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001366:	429a      	cmp	r2, r3
 8001368:	d904      	bls.n	8001374 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800136a:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <xTaskResumeAll+0x204>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	2101      	movs	r1, #1
 8001370:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001374:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <xTaskResumeAll+0x1f4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f47f af6c 	bne.w	8001256 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001384:	f000 fc32 	bl	8001bec <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001388:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <xTaskResumeAll+0x208>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001394:	f000 f84c 	bl	8001430 <xTaskIncrementTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800139e:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <xTaskResumeAll+0x204>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2101      	movs	r1, #1
 80013a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1ef      	bne.n	8001394 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <xTaskResumeAll+0x208>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <xTaskResumeAll+0x204>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <xTaskResumeAll+0x200>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <xTaskResumeAll+0x20c>)
 80013d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	f3bf 8f4f 	dsb	sy
 80013da:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80013de:	f001 f903 	bl	80025e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80013e2:	69bb      	ldr	r3, [r7, #24]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3720      	adds	r7, #32
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000170 	.word	0x20000170
 80013f0:	20000148 	.word	0x20000148
 80013f4:	20000108 	.word	0x20000108
 80013f8:	20000150 	.word	0x20000150
 80013fc:	20000074 	.word	0x20000074
 8001400:	20000070 	.word	0x20000070
 8001404:	2000015c 	.word	0x2000015c
 8001408:	20000158 	.word	0x20000158
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001416:	4b05      	ldr	r3, [pc, #20]	@ (800142c <xTaskGetTickCount+0x1c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000014c 	.word	0x2000014c

08001430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800143a:	4b7f      	ldr	r3, [pc, #508]	@ (8001638 <xTaskIncrementTick+0x208>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80ef 	bne.w	8001622 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001444:	4b7d      	ldr	r3, [pc, #500]	@ (800163c <xTaskIncrementTick+0x20c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800144c:	4a7b      	ldr	r2, [pc, #492]	@ (800163c <xTaskIncrementTick+0x20c>)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d121      	bne.n	800149c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001458:	4b79      	ldr	r3, [pc, #484]	@ (8001640 <xTaskIncrementTick+0x210>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001466:	f383 8811 	msr	BASEPRI, r3
 800146a:	f3bf 8f6f 	isb	sy
 800146e:	f3bf 8f4f 	dsb	sy
 8001472:	607b      	str	r3, [r7, #4]
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	e7fd      	b.n	8001476 <xTaskIncrementTick+0x46>
 800147a:	4b71      	ldr	r3, [pc, #452]	@ (8001640 <xTaskIncrementTick+0x210>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	4b70      	ldr	r3, [pc, #448]	@ (8001644 <xTaskIncrementTick+0x214>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6e      	ldr	r2, [pc, #440]	@ (8001640 <xTaskIncrementTick+0x210>)
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4a6e      	ldr	r2, [pc, #440]	@ (8001644 <xTaskIncrementTick+0x214>)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b6e      	ldr	r3, [pc, #440]	@ (8001648 <xTaskIncrementTick+0x218>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	4a6c      	ldr	r2, [pc, #432]	@ (8001648 <xTaskIncrementTick+0x218>)
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	f000 fba8 	bl	8001bec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800149c:	4b6b      	ldr	r3, [pc, #428]	@ (800164c <xTaskIncrementTick+0x21c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a3a      	ldr	r2, [r7, #32]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	f0c0 80a8 	bcc.w	80015f8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <xTaskIncrementTick+0x210>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80014b2:	4b66      	ldr	r3, [pc, #408]	@ (800164c <xTaskIncrementTick+0x21c>)
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	601a      	str	r2, [r3, #0]
                    break;
 80014ba:	e09d      	b.n	80015f8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <xTaskIncrementTick+0x210>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d203      	bcs.n	80014dc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80014d4:	4a5d      	ldr	r2, [pc, #372]	@ (800164c <xTaskIncrementTick+0x21c>)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	6013      	str	r3, [r2, #0]
                        break;
 80014da:	e08d      	b.n	80015f8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	68d2      	ldr	r2, [r2, #12]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	6892      	ldr	r2, [r2, #8]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3304      	adds	r3, #4
 80014fe:	429a      	cmp	r2, r3
 8001500:	d103      	bne.n	800150a <xTaskIncrementTick+0xda>
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1e5a      	subs	r2, r3, #1
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151e:	2b00      	cmp	r3, #0
 8001520:	d01e      	beq.n	8001560 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	6a12      	ldr	r2, [r2, #32]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	69d2      	ldr	r2, [r2, #28]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	3318      	adds	r3, #24
 8001544:	429a      	cmp	r2, r3
 8001546:	d103      	bne.n	8001550 <xTaskIncrementTick+0x120>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2200      	movs	r2, #0
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001564:	2201      	movs	r2, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	4b39      	ldr	r3, [pc, #228]	@ (8001650 <xTaskIncrementTick+0x220>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4313      	orrs	r3, r2
 800156e:	4a38      	ldr	r2, [pc, #224]	@ (8001650 <xTaskIncrementTick+0x220>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001576:	4937      	ldr	r1, [pc, #220]	@ (8001654 <xTaskIncrementTick+0x224>)
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	3204      	adds	r2, #4
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	1d1a      	adds	r2, r3, #4
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <xTaskIncrementTick+0x224>)
 80015b6:	441a      	add	r2, r3
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	615a      	str	r2, [r3, #20]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c0:	4924      	ldr	r1, [pc, #144]	@ (8001654 <xTaskIncrementTick+0x224>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	481f      	ldr	r0, [pc, #124]	@ (8001654 <xTaskIncrementTick+0x224>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4403      	add	r3, r0
 80015e0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <xTaskIncrementTick+0x228>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f67f af5b 	bls.w	80014a8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80015f2:	2301      	movs	r3, #1
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015f6:	e757      	b.n	80014a8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <xTaskIncrementTick+0x228>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015fe:	4915      	ldr	r1, [pc, #84]	@ (8001654 <xTaskIncrementTick+0x224>)
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d901      	bls.n	8001614 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001610:	2301      	movs	r3, #1
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <xTaskIncrementTick+0x22c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001620:	e004      	b.n	800162c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <xTaskIncrementTick+0x230>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <xTaskIncrementTick+0x230>)
 800162a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800162e:	4618      	mov	r0, r3
 8001630:	3728      	adds	r7, #40	@ 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000170 	.word	0x20000170
 800163c:	2000014c 	.word	0x2000014c
 8001640:	20000100 	.word	0x20000100
 8001644:	20000104 	.word	0x20000104
 8001648:	20000160 	.word	0x20000160
 800164c:	20000168 	.word	0x20000168
 8001650:	20000150 	.word	0x20000150
 8001654:	20000074 	.word	0x20000074
 8001658:	20000070 	.word	0x20000070
 800165c:	2000015c 	.word	0x2000015c
 8001660:	20000158 	.word	0x20000158

08001664 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800166a:	4b28      	ldr	r3, [pc, #160]	@ (800170c <vTaskSwitchContext+0xa8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <vTaskSwitchContext+0xac>)
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001678:	e041      	b.n	80016fe <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800167a:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <vTaskSwitchContext+0xac>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <vTaskSwitchContext+0xb0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	fab3 f383 	clz	r3, r3
 800168c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800168e:	7afb      	ldrb	r3, [r7, #11]
 8001690:	f1c3 031f 	rsb	r3, r3, #31
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	4920      	ldr	r1, [pc, #128]	@ (8001718 <vTaskSwitchContext+0xb4>)
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <vTaskSwitchContext+0x5e>
    __asm volatile
 80016aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	607b      	str	r3, [r7, #4]
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	e7fd      	b.n	80016be <vTaskSwitchContext+0x5a>
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <vTaskSwitchContext+0xb4>)
 80016ce:	4413      	add	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	3308      	adds	r3, #8
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d103      	bne.n	80016f0 <vTaskSwitchContext+0x8c>
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a09      	ldr	r2, [pc, #36]	@ (800171c <vTaskSwitchContext+0xb8>)
 80016f8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <vTaskSwitchContext+0xb8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
    }
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000170 	.word	0x20000170
 8001710:	2000015c 	.word	0x2000015c
 8001714:	20000150 	.word	0x20000150
 8001718:	20000074 	.word	0x20000074
 800171c:	20000070 	.word	0x20000070

08001720 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10b      	bne.n	8001748 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	60fb      	str	r3, [r7, #12]
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <vTaskPlaceOnEventList+0x48>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3318      	adds	r3, #24
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fee2 	bl	800051a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001756:	2101      	movs	r1, #1
 8001758:	6838      	ldr	r0, [r7, #0]
 800175a:	f000 fa81 	bl	8001c60 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000070 	.word	0x20000070

0800176c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10b      	bne.n	8001796 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800177e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	613b      	str	r3, [r7, #16]
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	e7fd      	b.n	8001792 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <vTaskPlaceOnEventListRestricted+0x88>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	61da      	str	r2, [r3, #28]
 80017a4:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	6892      	ldr	r2, [r2, #8]
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	3218      	adds	r2, #24
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f103 0218 	add.w	r2, r3, #24
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f000 fa3a 	bl	8001c60 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000070 	.word	0x20000070

080017f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	@ 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10b      	bne.n	8001826 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800180e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001812:	f383 8811 	msr	BASEPRI, r3
 8001816:	f3bf 8f6f 	isb	sy
 800181a:	f3bf 8f4f 	dsb	sy
 800181e:	60fb      	str	r3, [r7, #12]
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	6a3a      	ldr	r2, [r7, #32]
 8001832:	6a12      	ldr	r2, [r2, #32]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	6a3a      	ldr	r2, [r7, #32]
 800183c:	69d2      	ldr	r2, [r2, #28]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	3318      	adds	r3, #24
 8001848:	429a      	cmp	r2, r3
 800184a:	d103      	bne.n	8001854 <xTaskRemoveFromEventList+0x5c>
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	6a1a      	ldr	r2, [r3, #32]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	@ 0x28
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1e5a      	subs	r2, r3, #1
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001864:	4b4b      	ldr	r3, [pc, #300]	@ (8001994 <xTaskRemoveFromEventList+0x19c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d160      	bne.n	800192e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	6a3a      	ldr	r2, [r7, #32]
 8001878:	68d2      	ldr	r2, [r2, #12]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	6892      	ldr	r2, [r2, #8]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	3304      	adds	r3, #4
 800188e:	429a      	cmp	r2, r3
 8001890:	d103      	bne.n	800189a <xTaskRemoveFromEventList+0xa2>
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	2201      	movs	r2, #1
 80018b0:	409a      	lsls	r2, r3
 80018b2:	4b39      	ldr	r3, [pc, #228]	@ (8001998 <xTaskRemoveFromEventList+0x1a0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <xTaskRemoveFromEventList+0x1a0>)
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c0:	4936      	ldr	r1, [pc, #216]	@ (800199c <xTaskRemoveFromEventList+0x1a4>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	3204      	adds	r2, #4
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	1d1a      	adds	r2, r3, #4
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4a27      	ldr	r2, [pc, #156]	@ (800199c <xTaskRemoveFromEventList+0x1a4>)
 8001900:	441a      	add	r2, r3
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	615a      	str	r2, [r3, #20]
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800190a:	4924      	ldr	r1, [pc, #144]	@ (800199c <xTaskRemoveFromEventList+0x1a4>)
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6a3a      	ldr	r2, [r7, #32]
 800191a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800191c:	1c59      	adds	r1, r3, #1
 800191e:	481f      	ldr	r0, [pc, #124]	@ (800199c <xTaskRemoveFromEventList+0x1a4>)
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4403      	add	r3, r0
 800192a:	6019      	str	r1, [r3, #0]
 800192c:	e01b      	b.n	8001966 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <xTaskRemoveFromEventList+0x1a8>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	61da      	str	r2, [r3, #28]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	6a3b      	ldr	r3, [r7, #32]
 8001940:	621a      	str	r2, [r3, #32]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	6a3a      	ldr	r2, [r7, #32]
 8001948:	3218      	adds	r2, #24
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f103 0218 	add.w	r2, r3, #24
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <xTaskRemoveFromEventList+0x1a8>)
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <xTaskRemoveFromEventList+0x1a8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3301      	adds	r3, #1
 8001962:	4a0f      	ldr	r2, [pc, #60]	@ (80019a0 <xTaskRemoveFromEventList+0x1a8>)
 8001964:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001966:	6a3b      	ldr	r3, [r7, #32]
 8001968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <xTaskRemoveFromEventList+0x1ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	429a      	cmp	r2, r3
 8001972:	d905      	bls.n	8001980 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <xTaskRemoveFromEventList+0x1b0>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e001      	b.n	8001984 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001986:	4618      	mov	r0, r3
 8001988:	372c      	adds	r7, #44	@ 0x2c
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000170 	.word	0x20000170
 8001998:	20000150 	.word	0x20000150
 800199c:	20000074 	.word	0x20000074
 80019a0:	20000108 	.word	0x20000108
 80019a4:	20000070 	.word	0x20000070
 80019a8:	2000015c 	.word	0x2000015c

080019ac <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <vTaskInternalSetTimeOutState+0x24>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <vTaskInternalSetTimeOutState+0x28>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000160 	.word	0x20000160
 80019d4:	2000014c 	.word	0x2000014c

080019d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80019e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
 80019f8:	613b      	str	r3, [r7, #16]
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10b      	bne.n	8001a1e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	60fb      	str	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	e7fd      	b.n	8001a1a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001a1e:	f000 fdb1 	bl	8002584 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa0 <xTaskCheckForTimeOut+0xc8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d102      	bne.n	8001a42 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e026      	b.n	8001a90 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <xTaskCheckForTimeOut+0xcc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d00a      	beq.n	8001a64 <xTaskCheckForTimeOut+0x8c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d305      	bcc.n	8001a64 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e015      	b.n	8001a90 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d20b      	bcs.n	8001a86 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	1ad2      	subs	r2, r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ff96 	bl	80019ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e004      	b.n	8001a90 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001a90:	f000 fdaa 	bl	80025e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001a94:	69fb      	ldr	r3, [r7, #28]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3720      	adds	r7, #32
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	2000014c 	.word	0x2000014c
 8001aa4:	20000160 	.word	0x20000160

08001aa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <vTaskMissedYield+0x14>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	2000015c 	.word	0x2000015c

08001ac0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001ac8:	f000 f852 	bl	8001b70 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <prvIdleTask+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d9f9      	bls.n	8001ac8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <prvIdleTask+0x2c>)
 8001ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ae4:	e7f0      	b.n	8001ac8 <prvIdleTask+0x8>
 8001ae6:	bf00      	nop
 8001ae8:	20000074 	.word	0x20000074
 8001aec:	e000ed04 	.word	0xe000ed04

08001af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	e00c      	b.n	8001b16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <prvInitialiseTaskLists+0x60>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcd8 	bl	80004c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3301      	adds	r3, #1
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d9ef      	bls.n	8001afc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <prvInitialiseTaskLists+0x64>)
 8001b1e:	f7fe fccf 	bl	80004c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001b22:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <prvInitialiseTaskLists+0x68>)
 8001b24:	f7fe fccc 	bl	80004c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001b28:	480c      	ldr	r0, [pc, #48]	@ (8001b5c <prvInitialiseTaskLists+0x6c>)
 8001b2a:	f7fe fcc9 	bl	80004c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001b2e:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <prvInitialiseTaskLists+0x70>)
 8001b30:	f7fe fcc6 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001b34:	480b      	ldr	r0, [pc, #44]	@ (8001b64 <prvInitialiseTaskLists+0x74>)
 8001b36:	f7fe fcc3 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <prvInitialiseTaskLists+0x78>)
 8001b3c:	4a05      	ldr	r2, [pc, #20]	@ (8001b54 <prvInitialiseTaskLists+0x64>)
 8001b3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <prvInitialiseTaskLists+0x7c>)
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <prvInitialiseTaskLists+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000074 	.word	0x20000074
 8001b54:	200000d8 	.word	0x200000d8
 8001b58:	200000ec 	.word	0x200000ec
 8001b5c:	20000108 	.word	0x20000108
 8001b60:	2000011c 	.word	0x2000011c
 8001b64:	20000134 	.word	0x20000134
 8001b68:	20000100 	.word	0x20000100
 8001b6c:	20000104 	.word	0x20000104

08001b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b76:	e019      	b.n	8001bac <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001b78:	f000 fd04 	bl	8002584 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b7c:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <prvCheckTasksWaitingTermination+0x50>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fcff 	bl	800058c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <prvCheckTasksWaitingTermination+0x54>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc4 <prvCheckTasksWaitingTermination+0x54>)
 8001b96:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001ba0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001ba2:	f000 fd21 	bl	80025e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f810 	bl	8001bcc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <prvCheckTasksWaitingTermination+0x58>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e1      	bne.n	8001b78 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000011c 	.word	0x2000011c
 8001bc4:	20000148 	.word	0x20000148
 8001bc8:	20000130 	.word	0x20000130

08001bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fe0b 	bl	80027f4 <vPortFree>
            vPortFree( pxTCB );
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fe08 	bl	80027f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <prvResetNextTaskUnblockTime+0x30>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <prvResetNextTaskUnblockTime+0x34>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001c02:	e005      	b.n	8001c10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <prvResetNextTaskUnblockTime+0x30>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <prvResetNextTaskUnblockTime+0x34>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000100 	.word	0x20000100
 8001c20:	20000168 	.word	0x20000168

08001c24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <xTaskGetSchedulerState+0x34>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001c32:	2301      	movs	r3, #1
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e008      	b.n	8001c4a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <xTaskGetSchedulerState+0x38>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001c40:	2302      	movs	r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e001      	b.n	8001c4a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001c4a:	687b      	ldr	r3, [r7, #4]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	20000154 	.word	0x20000154
 8001c5c:	20000170 	.word	0x20000170

08001c60 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001c6a:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001c70:	4b36      	ldr	r3, [pc, #216]	@ (8001d4c <prvAddCurrentTaskToDelayedList+0xec>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001c76:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c7c:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3304      	adds	r3, #4
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc82 	bl	800058c <uxListRemove>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10b      	bne.n	8001ca6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	2201      	movs	r2, #1
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d58 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d58 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001ca4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d124      	bne.n	8001cf8 <prvAddCurrentTaskToDelayedList+0x98>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d021      	beq.n	8001cf8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cb4:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	6892      	ldr	r2, [r2, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	3204      	adds	r2, #4
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	1d1a      	adds	r2, r3, #4
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ce8:	615a      	str	r2, [r3, #20]
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001cf6:	e022      	b.n	8001d3e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f7fe fbfe 	bl	800051a <vListInsert>
}
 8001d1e:	e00e      	b.n	8001d3e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	69b8      	ldr	r0, [r7, #24]
 8001d2a:	f7fe fbf6 	bl	800051a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <prvAddCurrentTaskToDelayedList+0x100>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d202      	bcs.n	8001d3e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001d38:	4a09      	ldr	r2, [pc, #36]	@ (8001d60 <prvAddCurrentTaskToDelayedList+0x100>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6013      	str	r3, [r2, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3720      	adds	r7, #32
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000014c 	.word	0x2000014c
 8001d4c:	20000100 	.word	0x20000100
 8001d50:	20000104 	.word	0x20000104
 8001d54:	20000070 	.word	0x20000070
 8001d58:	20000150 	.word	0x20000150
 8001d5c:	20000134 	.word	0x20000134
 8001d60:	20000168 	.word	0x20000168

08001d64 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001d6e:	f000 fa55 	bl	800221c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <xTimerCreateTimerTask+0x58>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <xTimerCreateTimerTask+0x5c>)
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d88:	490e      	ldr	r1, [pc, #56]	@ (8001dc4 <xTimerCreateTimerTask+0x60>)
 8001d8a:	480f      	ldr	r0, [pc, #60]	@ (8001dc8 <xTimerCreateTimerTask+0x64>)
 8001d8c:	f7fe ff5c 	bl	8000c48 <xTaskCreate>
 8001d90:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10b      	bne.n	8001db0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8001d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d9c:	f383 8811 	msr	BASEPRI, r3
 8001da0:	f3bf 8f6f 	isb	sy
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	603b      	str	r3, [r7, #0]
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8001db0:	687b      	ldr	r3, [r7, #4]
    }
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001a4 	.word	0x200001a4
 8001dc0:	200001a8 	.word	0x200001a8
 8001dc4:	08004b94 	.word	0x08004b94
 8001dc8:	08001e71 	.word	0x08001e71

08001dcc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001dd8:	e008      	b.n	8001dec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	18d1      	adds	r1, r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f8df 	bl	8001fbc <prvInsertTimerInActiveList>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1ea      	bne.n	8001dda <prvReloadTimer+0xe>
        }
    }
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <prvProcessExpiredTimer+0x5c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fbaf 	bl	800058c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff ffc3 	bl	8001dcc <prvReloadTimer>
 8001e46:	e008      	b.n	8001e5a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	4798      	blx	r3
    }
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000019c 	.word	0x2000019c

08001e70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e78:	f107 0308 	add.w	r3, r7, #8
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 f859 	bl	8001f34 <prvGetNextExpireTime>
 8001e82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f805 	bl	8001e98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001e8e:	f000 f8d7 	bl	8002040 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001e92:	bf00      	nop
 8001e94:	e7f0      	b.n	8001e78 <prvTimerTask+0x8>
	...

08001e98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001ea2:	f7ff f99f 	bl	80011e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f866 	bl	8001f7c <prvSampleTimeNow>
 8001eb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d130      	bne.n	8001f1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <prvProcessTimerOrBlockTask+0x3c>
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d806      	bhi.n	8001ed4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001ec6:	f7ff f99b 	bl	8001200 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001eca:	68f9      	ldr	r1, [r7, #12]
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff9f 	bl	8001e10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001ed2:	e024      	b.n	8001f1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d008      	beq.n	8001eec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <prvProcessTimerOrBlockTask+0x90>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <prvProcessTimerOrBlockTask+0x50>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <prvProcessTimerOrBlockTask+0x52>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001eec:	4b0f      	ldr	r3, [pc, #60]	@ (8001f2c <prvProcessTimerOrBlockTask+0x94>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe35 	bl	8000b68 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001efe:	f7ff f97f 	bl	8001200 <xTaskResumeAll>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10a      	bne.n	8001f1e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8001f08:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <prvProcessTimerOrBlockTask+0x98>)
 8001f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f3bf 8f4f 	dsb	sy
 8001f14:	f3bf 8f6f 	isb	sy
    }
 8001f18:	e001      	b.n	8001f1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001f1a:	f7ff f971 	bl	8001200 <xTaskResumeAll>
    }
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200001a0 	.word	0x200001a0
 8001f2c:	200001a4 	.word	0x200001a4
 8001f30:	e000ed04 	.word	0xe000ed04

08001f34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <prvGetNextExpireTime+0x44>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <prvGetNextExpireTime+0x16>
 8001f46:	2201      	movs	r2, #1
 8001f48:	e000      	b.n	8001f4c <prvGetNextExpireTime+0x18>
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <prvGetNextExpireTime+0x44>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	e001      	b.n	8001f68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001f68:	68fb      	ldr	r3, [r7, #12]
    }
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	2000019c 	.word	0x2000019c

08001f7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8001f84:	f7ff fa44 	bl	8001410 <xTaskGetTickCount>
 8001f88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <prvSampleTimeNow+0x3c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d205      	bcs.n	8001fa0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001f94:	f000 f91c 	bl	80021d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e002      	b.n	8001fa6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <prvSampleTimeNow+0x3c>)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001fac:	68fb      	ldr	r3, [r7, #12]
    }
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200001ac 	.word	0x200001ac

08001fbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d812      	bhi.n	8002008 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	1ad2      	subs	r2, r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d302      	bcc.n	8001ff6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e01b      	b.n	800202e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <prvInsertTimerInActiveList+0x7c>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f7fe fa8a 	bl	800051a <vListInsert>
 8002006:	e012      	b.n	800202e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d206      	bcs.n	800201e <prvInsertTimerInActiveList+0x62>
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d302      	bcc.n	800201e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002018:	2301      	movs	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e007      	b.n	800202e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <prvInsertTimerInActiveList+0x80>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f7fe fa76 	bl	800051a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800202e:	697b      	ldr	r3, [r7, #20]
    }
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200001a0 	.word	0x200001a0
 800203c:	2000019c 	.word	0x2000019c

08002040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002046:	f107 0308 	add.w	r3, r7, #8
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002052:	e0a9      	b.n	80021a8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f2c0 80a6 	blt.w	80021a8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	3304      	adds	r3, #4
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa8d 	bl	800058c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff81 	bl	8001f7c <prvSampleTimeNow>
 800207a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3b01      	subs	r3, #1
 8002080:	2b08      	cmp	r3, #8
 8002082:	f200 808e 	bhi.w	80021a2 <prvProcessReceivedCommands+0x162>
 8002086:	a201      	add	r2, pc, #4	@ (adr r2, 800208c <prvProcessReceivedCommands+0x4c>)
 8002088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208c:	080020b1 	.word	0x080020b1
 8002090:	080020b1 	.word	0x080020b1
 8002094:	08002119 	.word	0x08002119
 8002098:	0800212d 	.word	0x0800212d
 800209c:	08002179 	.word	0x08002179
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020b1 	.word	0x080020b1
 80020a8:	08002119 	.word	0x08002119
 80020ac:	0800212d 	.word	0x0800212d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	18d1      	adds	r1, r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	69f8      	ldr	r0, [r7, #28]
 80020d0:	f7ff ff74 	bl	8001fbc <prvInsertTimerInActiveList>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d065      	beq.n	80021a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4619      	mov	r1, r3
 80020f4:	69f8      	ldr	r0, [r7, #28]
 80020f6:	f7ff fe69 	bl	8001dcc <prvReloadTimer>
 80020fa:	e008      	b.n	800210e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	69f8      	ldr	r0, [r7, #28]
 8002114:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002116:	e046      	b.n	80021a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800212a:	e03d      	b.n	80021a8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	617b      	str	r3, [r7, #20]
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	18d1      	adds	r1, r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	69f8      	ldr	r0, [r7, #28]
 8002172:	f7ff ff23 	bl	8001fbc <prvInsertTimerInActiveList>
                        break;
 8002176:	e017      	b.n	80021a8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002186:	69f8      	ldr	r0, [r7, #28]
 8002188:	f000 fb34 	bl	80027f4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800218c:	e00c      	b.n	80021a8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80021a0:	e002      	b.n	80021a8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <prvProcessReceivedCommands+0x168>
                        break;
 80021a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <prvProcessReceivedCommands+0x18c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f107 0108 	add.w	r1, r7, #8
 80021b0:	2200      	movs	r2, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fb18 	bl	80007e8 <xQueueReceive>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f47f af4a 	bne.w	8002054 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200001a4 	.word	0x200001a4

080021d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021d6:	e009      	b.n	80021ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <prvSwitchTimerLists+0x44>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80021e2:	f04f 31ff 	mov.w	r1, #4294967295
 80021e6:	6838      	ldr	r0, [r7, #0]
 80021e8:	f7ff fe12 	bl	8001e10 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <prvSwitchTimerLists+0x44>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80021f6:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <prvSwitchTimerLists+0x44>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <prvSwitchTimerLists+0x48>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <prvSwitchTimerLists+0x44>)
 8002202:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <prvSwitchTimerLists+0x48>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
    }
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000019c 	.word	0x2000019c
 8002218:	200001a0 	.word	0x200001a0

0800221c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002220:	f000 f9b0 	bl	8002584 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <prvCheckForValidListAndQueue+0x54>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11d      	bne.n	8002268 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800222c:	4811      	ldr	r0, [pc, #68]	@ (8002274 <prvCheckForValidListAndQueue+0x58>)
 800222e:	f7fe f947 	bl	80004c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002232:	4811      	ldr	r0, [pc, #68]	@ (8002278 <prvCheckForValidListAndQueue+0x5c>)
 8002234:	f7fe f944 	bl	80004c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002238:	4b10      	ldr	r3, [pc, #64]	@ (800227c <prvCheckForValidListAndQueue+0x60>)
 800223a:	4a0e      	ldr	r2, [pc, #56]	@ (8002274 <prvCheckForValidListAndQueue+0x58>)
 800223c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800223e:	4b10      	ldr	r3, [pc, #64]	@ (8002280 <prvCheckForValidListAndQueue+0x64>)
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <prvCheckForValidListAndQueue+0x5c>)
 8002242:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002244:	2200      	movs	r2, #0
 8002246:	210c      	movs	r1, #12
 8002248:	200a      	movs	r0, #10
 800224a:	f7fe fa5b 	bl	8000704 <xQueueGenericCreate>
 800224e:	4603      	mov	r3, r0
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <prvCheckForValidListAndQueue+0x54>)
 8002252:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <prvCheckForValidListAndQueue+0x54>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <prvCheckForValidListAndQueue+0x54>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4908      	ldr	r1, [pc, #32]	@ (8002284 <prvCheckForValidListAndQueue+0x68>)
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fc30 	bl	8000ac8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002268:	f000 f9be 	bl	80025e8 <vPortExitCritical>
    }
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	200001a4 	.word	0x200001a4
 8002274:	20000174 	.word	0x20000174
 8002278:	20000188 	.word	0x20000188
 800227c:	2000019c 	.word	0x2000019c
 8002280:	200001a0 	.word	0x200001a0
 8002284:	08004b9c 	.word	0x08004b9c

08002288 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b04      	subs	r3, #4
 8002298:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b04      	subs	r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f023 0201 	bic.w	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3b04      	subs	r3, #4
 80022b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80022b8:	4a0c      	ldr	r2, [pc, #48]	@ (80022ec <pxPortInitialiseStack+0x64>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3b14      	subs	r3, #20
 80022c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f06f 0202 	mvn.w	r2, #2
 80022d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3b20      	subs	r3, #32
 80022dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80022de:	68fb      	ldr	r3, [r7, #12]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	080022f1 	.word	0x080022f1

080022f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80022fa:	4b13      	ldr	r3, [pc, #76]	@ (8002348 <prvTaskExitError+0x58>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002302:	d00b      	beq.n	800231c <prvTaskExitError+0x2c>
    __asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	60fb      	str	r3, [r7, #12]
}
 8002316:	bf00      	nop
 8002318:	bf00      	nop
 800231a:	e7fd      	b.n	8002318 <prvTaskExitError+0x28>
    __asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	60bb      	str	r3, [r7, #8]
}
 800232e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002330:	bf00      	nop
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0fc      	beq.n	8002332 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000004 	.word	0x20000004
 800234c:	00000000 	.word	0x00000000

08002350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002350:	4b07      	ldr	r3, [pc, #28]	@ (8002370 <pxCurrentTCBConst2>)
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	6808      	ldr	r0, [r1, #0]
 8002356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800235a:	f380 8809 	msr	PSP, r0
 800235e:	f3bf 8f6f 	isb	sy
 8002362:	f04f 0000 	mov.w	r0, #0
 8002366:	f380 8811 	msr	BASEPRI, r0
 800236a:	4770      	bx	lr
 800236c:	f3af 8000 	nop.w

08002370 <pxCurrentTCBConst2>:
 8002370:	20000070 	.word	0x20000070
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop

08002378 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002378:	4808      	ldr	r0, [pc, #32]	@ (800239c <prvPortStartFirstTask+0x24>)
 800237a:	6800      	ldr	r0, [r0, #0]
 800237c:	6800      	ldr	r0, [r0, #0]
 800237e:	f380 8808 	msr	MSP, r0
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f380 8814 	msr	CONTROL, r0
 800238a:	b662      	cpsie	i
 800238c:	b661      	cpsie	f
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	df00      	svc	0
 8002398:	bf00      	nop
 800239a:	0000      	.short	0x0000
 800239c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop

080023a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	@ 0x30
 80023a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80023aa:	4b69      	ldr	r3, [pc, #420]	@ (8002550 <xPortStartScheduler+0x1ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a69      	ldr	r2, [pc, #420]	@ (8002554 <xPortStartScheduler+0x1b0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10b      	bne.n	80023cc <xPortStartScheduler+0x28>
    __asm volatile
 80023b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80023cc:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <xPortStartScheduler+0x1ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a61      	ldr	r2, [pc, #388]	@ (8002558 <xPortStartScheduler+0x1b4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d10b      	bne.n	80023ee <xPortStartScheduler+0x4a>
    __asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	623b      	str	r3, [r7, #32]
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80023ee:	4b5b      	ldr	r3, [pc, #364]	@ (800255c <xPortStartScheduler+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	332c      	adds	r3, #44	@ 0x2c
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a59      	ldr	r2, [pc, #356]	@ (8002560 <xPortStartScheduler+0x1bc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00b      	beq.n	8002418 <xPortStartScheduler+0x74>
    __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	61fb      	str	r3, [r7, #28]
}
 8002412:	bf00      	nop
 8002414:	bf00      	nop
 8002416:	e7fd      	b.n	8002414 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800241a:	3338      	adds	r3, #56	@ 0x38
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a51      	ldr	r2, [pc, #324]	@ (8002564 <xPortStartScheduler+0x1c0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00b      	beq.n	800243c <xPortStartScheduler+0x98>
    __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	61bb      	str	r3, [r7, #24]
}
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002440:	4b49      	ldr	r3, [pc, #292]	@ (8002568 <xPortStartScheduler+0x1c4>)
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	22ff      	movs	r2, #255	@ 0xff
 8002450:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b41      	ldr	r3, [pc, #260]	@ (800256c <xPortStartScheduler+0x1c8>)
 8002466:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002468:	4b40      	ldr	r3, [pc, #256]	@ (800256c <xPortStartScheduler+0x1c8>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <xPortStartScheduler+0xe4>
    __asm volatile
 8002470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	617b      	str	r3, [r7, #20]
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002492:	2b00      	cmp	r3, #0
 8002494:	d013      	beq.n	80024be <xPortStartScheduler+0x11a>
    __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	613b      	str	r3, [r7, #16]
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3301      	adds	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c6:	2b80      	cmp	r3, #128	@ 0x80
 80024c8:	d0f1      	beq.n	80024ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d103      	bne.n	80024d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80024d0:	4b27      	ldr	r3, [pc, #156]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e004      	b.n	80024e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f1c3 0307 	rsb	r3, r3, #7
 80024de:	4a24      	ldr	r2, [pc, #144]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024e2:	4b23      	ldr	r3, [pc, #140]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	4a21      	ldr	r2, [pc, #132]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024ec:	4b20      	ldr	r3, [pc, #128]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002570 <xPortStartScheduler+0x1cc>)
 80024f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002500:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <xPortStartScheduler+0x1d0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <xPortStartScheduler+0x1d0>)
 8002506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800250a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800250c:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <xPortStartScheduler+0x1d0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <xPortStartScheduler+0x1d0>)
 8002512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002516:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002518:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <xPortStartScheduler+0x1d4>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800251e:	f000 f8e5 	bl	80026ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002522:	4b16      	ldr	r3, [pc, #88]	@ (800257c <xPortStartScheduler+0x1d8>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002528:	f000 f904 	bl	8002734 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <xPortStartScheduler+0x1dc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <xPortStartScheduler+0x1dc>)
 8002532:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002538:	f7ff ff1e 	bl	8002378 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800253c:	f7ff f892 	bl	8001664 <vTaskSwitchContext>
    prvTaskExitError();
 8002540:	f7ff fed6 	bl	80022f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3730      	adds	r7, #48	@ 0x30
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00
 8002554:	410fc271 	.word	0x410fc271
 8002558:	410fc270 	.word	0x410fc270
 800255c:	e000ed08 	.word	0xe000ed08
 8002560:	08002351 	.word	0x08002351
 8002564:	08002641 	.word	0x08002641
 8002568:	e000e400 	.word	0xe000e400
 800256c:	200001b0 	.word	0x200001b0
 8002570:	200001b4 	.word	0x200001b4
 8002574:	e000ed20 	.word	0xe000ed20
 8002578:	e000ed1c 	.word	0xe000ed1c
 800257c:	20000004 	.word	0x20000004
 8002580:	e000ef34 	.word	0xe000ef34

08002584 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
    __asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	607b      	str	r3, [r7, #4]
}
 800259c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <vPortEnterCritical+0x5c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <vPortEnterCritical+0x5c>)
 80025a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <vPortEnterCritical+0x5c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d110      	bne.n	80025d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80025b0:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <vPortEnterCritical+0x60>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80025ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	603b      	str	r3, [r7, #0]
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	e7fd      	b.n	80025ce <vPortEnterCritical+0x4a>
    }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000004 	.word	0x20000004
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <vPortExitCritical+0x50>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <vPortExitCritical+0x26>
    __asm volatile
 80025f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fa:	f383 8811 	msr	BASEPRI, r3
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	607b      	str	r3, [r7, #4]
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	e7fd      	b.n	800260a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <vPortExitCritical+0x50>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3b01      	subs	r3, #1
 8002614:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <vPortExitCritical+0x50>)
 8002616:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002618:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <vPortExitCritical+0x50>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <vPortExitCritical+0x44>
 8002620:	2300      	movs	r3, #0
 8002622:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800262a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	20000004 	.word	0x20000004
 800263c:	00000000 	.word	0x00000000

08002640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002640:	f3ef 8009 	mrs	r0, PSP
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <pxCurrentTCBConst>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	f01e 0f10 	tst.w	lr, #16
 8002650:	bf08      	it	eq
 8002652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800265a:	6010      	str	r0, [r2, #0]
 800265c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002664:	f380 8811 	msr	BASEPRI, r0
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	f3bf 8f6f 	isb	sy
 8002670:	f7fe fff8 	bl	8001664 <vTaskSwitchContext>
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f380 8811 	msr	BASEPRI, r0
 800267c:	bc09      	pop	{r0, r3}
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	6808      	ldr	r0, [r1, #0]
 8002682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002686:	f01e 0f10 	tst.w	lr, #16
 800268a:	bf08      	it	eq
 800268c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002690:	f380 8809 	msr	PSP, r0
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w

080026a0 <pxCurrentTCBConst>:
 80026a0:	20000070 	.word	0x20000070
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80026a4:	bf00      	nop
 80026a6:	bf00      	nop

080026a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
    __asm volatile
 80026ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	607b      	str	r3, [r7, #4]
}
 80026c0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80026c2:	f7fe feb5 	bl	8001430 <xTaskIncrementTick>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <SysTick_Handler+0x40>)
 80026ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f383 8811 	msr	BASEPRI, r3
}
 80026de:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80026f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002720 <vPortSetupTimerInterrupt+0x34>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <vPortSetupTimerInterrupt+0x38>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <vPortSetupTimerInterrupt+0x3c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <vPortSetupTimerInterrupt+0x40>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	4a09      	ldr	r2, [pc, #36]	@ (8002730 <vPortSetupTimerInterrupt+0x44>)
 800270a:	3b01      	subs	r3, #1
 800270c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800270e:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <vPortSetupTimerInterrupt+0x34>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010
 8002724:	e000e018 	.word	0xe000e018
 8002728:	20000008 	.word	0x20000008
 800272c:	10624dd3 	.word	0x10624dd3
 8002730:	e000e014 	.word	0xe000e014

08002734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002744 <vPortEnableVFP+0x10>
 8002738:	6801      	ldr	r1, [r0, #0]
 800273a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800273e:	6001      	str	r1, [r0, #0]
 8002740:	4770      	bx	lr
 8002742:	0000      	.short	0x0000
 8002744:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop

0800274c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00e      	beq.n	8002780 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f023 0307 	bic.w	r3, r3, #7
 8002768:	3308      	adds	r3, #8
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d205      	bcs.n	800277c <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	3308      	adds	r3, #8
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e001      	b.n	8002780 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8002780:	f7fe fd30 	bl	80011e4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8002784:	4b17      	ldr	r3, [pc, #92]	@ (80027e4 <pvPortMalloc+0x98>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <pvPortMalloc+0x9c>)
 800278e:	f023 0307 	bic.w	r3, r3, #7
 8002792:	461a      	mov	r2, r3
 8002794:	4b13      	ldr	r3, [pc, #76]	@ (80027e4 <pvPortMalloc+0x98>)
 8002796:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d01a      	beq.n	80027d4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <pvPortMalloc+0xa0>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80027a6:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <pvPortMalloc+0xa4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d813      	bhi.n	80027d4 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <pvPortMalloc+0xa0>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	441a      	add	r2, r3
 80027b4:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <pvPortMalloc+0xa0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d90b      	bls.n	80027d4 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <pvPortMalloc+0x98>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0a      	ldr	r3, [pc, #40]	@ (80027ec <pvPortMalloc+0xa0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <pvPortMalloc+0xa0>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a06      	ldr	r2, [pc, #24]	@ (80027ec <pvPortMalloc+0xa0>)
 80027d2:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80027d4:	f7fe fd14 	bl	8001200 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80027d8:	68fb      	ldr	r3, [r7, #12]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20012dbc 	.word	0x20012dbc
 80027e8:	200001bf 	.word	0x200001bf
 80027ec:	20012db8 	.word	0x20012db8
 80027f0:	00012bf7 	.word	0x00012bf7

080027f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <vPortFree+0x26>
    __asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	60fb      	str	r3, [r7, #12]
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <vPortFree+0x22>
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282e:	f000 fb15 	bl	8002e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002832:	f000 f829 	bl	8002888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002836:	f000 f8bb 	bl	80029b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800283a:	f000 f88f 	bl	800295c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Create the first task at priority 2. The task parameter is not used and set to NULL.
     The task handle is also not used so is also set to NULL */
  xTaskCreate( vTask1,   /* pointer to the function that implements the task */
 800283e:	2300      	movs	r3, #0
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	2302      	movs	r3, #2
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800284c:	4909      	ldr	r1, [pc, #36]	@ (8002874 <main+0x4c>)
 800284e:	480a      	ldr	r0, [pc, #40]	@ (8002878 <main+0x50>)
 8002850:	f7fe f9fa 	bl	8000c48 <xTaskCreate>
               NULL );   /* this example does not use the task handle */

  /* Create the second task at priority 1 - which is lower than the priority given to Task 1.
     Again the task handle is not used so is set to NULL - BUT this time the task handle is
     required so the address of xTask2Handle is passed in the last parameter */
  xTaskCreate( vTask2, "Task 2", 1000, ( void* ) NULL, 1, &xTask2Handle );
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <main+0x54>)
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2301      	movs	r3, #1
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002862:	4907      	ldr	r1, [pc, #28]	@ (8002880 <main+0x58>)
 8002864:	4807      	ldr	r0, [pc, #28]	@ (8002884 <main+0x5c>)
 8002866:	f7fe f9ef 	bl	8000c48 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 800286a:	f7fe fc77 	bl	800115c <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 800286e:	bf00      	nop
 8002870:	e7fd      	b.n	800286e <main+0x46>
 8002872:	bf00      	nop
 8002874:	08004ba4 	.word	0x08004ba4
 8002878:	08002b11 	.word	0x08002b11
 800287c:	20012e08 	.word	0x20012e08
 8002880:	08004bac 	.word	0x08004bac
 8002884:	08002b55 	.word	0x08002b55

08002888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b094      	sub	sp, #80	@ 0x50
 800288c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2230      	movs	r2, #48	@ 0x30
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f002 f932 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	4b28      	ldr	r3, [pc, #160]	@ (8002954 <SystemClock_Config+0xcc>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	4a27      	ldr	r2, [pc, #156]	@ (8002954 <SystemClock_Config+0xcc>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80028bc:	4b25      	ldr	r3, [pc, #148]	@ (8002954 <SystemClock_Config+0xcc>)
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c8:	2300      	movs	r3, #0
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	4b22      	ldr	r3, [pc, #136]	@ (8002958 <SystemClock_Config+0xd0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a21      	ldr	r2, [pc, #132]	@ (8002958 <SystemClock_Config+0xd0>)
 80028d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <SystemClock_Config+0xd0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028e4:	2302      	movs	r3, #2
 80028e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028ec:	2310      	movs	r3, #16
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028f0:	2302      	movs	r3, #2
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028f8:	2308      	movs	r3, #8
 80028fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80028fc:	2332      	movs	r3, #50	@ 0x32
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002900:	2304      	movs	r3, #4
 8002902:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002904:	2307      	movs	r3, #7
 8002906:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002908:	f107 0320 	add.w	r3, r7, #32
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fd7f 	bl	8003410 <HAL_RCC_OscConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002918:	f000 f94c 	bl	8002bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800291c:	230f      	movs	r3, #15
 800291e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002920:	2302      	movs	r3, #2
 8002922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002928:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800292c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800292e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ffe0 	bl	8003900 <HAL_RCC_ClockConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002946:	f000 f935 	bl	8002bb4 <Error_Handler>
  }
}
 800294a:	bf00      	nop
 800294c:	3750      	adds	r7, #80	@ 0x50
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <MX_USART2_UART_Init+0x50>)
 8002964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800296c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800297a:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002982:	220c      	movs	r2, #12
 8002984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800298c:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002992:	4805      	ldr	r0, [pc, #20]	@ (80029a8 <MX_USART2_UART_Init+0x4c>)
 8002994:	f001 fca8 	bl	80042e8 <HAL_UART_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800299e:	f000 f909 	bl	8002bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20012dc0 	.word	0x20012dc0
 80029ac:	40004400 	.word	0x40004400

080029b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b6:	f107 0314 	add.w	r3, r7, #20
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b3c      	ldr	r3, [pc, #240]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	4a3b      	ldr	r2, [pc, #236]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d6:	4b39      	ldr	r3, [pc, #228]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b35      	ldr	r3, [pc, #212]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a34      	ldr	r2, [pc, #208]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <MX_GPIO_Init+0x10c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b2e      	ldr	r3, [pc, #184]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a2d      	ldr	r2, [pc, #180]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <MX_GPIO_Init+0x10c>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002a3c:	4820      	ldr	r0, [pc, #128]	@ (8002ac0 <MX_GPIO_Init+0x110>)
 8002a3e:	f000 fccd 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a50:	f107 0314 	add.w	r3, r7, #20
 8002a54:	4619      	mov	r1, r3
 8002a56:	481b      	ldr	r0, [pc, #108]	@ (8002ac4 <MX_GPIO_Init+0x114>)
 8002a58:	f000 fb24 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4816      	ldr	r0, [pc, #88]	@ (8002ac8 <MX_GPIO_Init+0x118>)
 8002a70:	f000 fb18 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002a74:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <MX_GPIO_Init+0x110>)
 8002a8e:	f000 fb09 	bl	80030a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4807      	ldr	r0, [pc, #28]	@ (8002acc <MX_GPIO_Init+0x11c>)
 8002aae:	f000 faf9 	bl	80030a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ab2:	bf00      	nop
 8002ab4:	3728      	adds	r7, #40	@ 0x28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800

08002ad0 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8002ada:	2300      	movs	r3, #0
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e00b      	b.n	8002af8 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	18d1      	adds	r1, r2, r3
 8002ae6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002aea:	2201      	movs	r2, #1
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 fc4b 	bl	8004388 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	3301      	adds	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1ed      	bne.n	8002ae0 <UART2_Print_Text+0x10>
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <vTask1>:

void vTask1( void *pvParameters )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
     priority. Neither Task 1 nor Task 2 ever block so both will always be in
     either Running or Ready state */

  /* Query the priority at which this task is running - passing in NULL means
     "return the calling task's priority" */
  UBaseType_t uxPriority = uxTaskPriorityGet( NULL );
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe f9e1 	bl	8000ee0 <uxTaskPriorityGet>
 8002b1e:	60f8      	str	r0, [r7, #12]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* print out the name of this task */
    UART2_Print_Text( &huart2, "Task 1 is running\n\r" );
 8002b20:	4908      	ldr	r1, [pc, #32]	@ (8002b44 <vTask1+0x34>)
 8002b22:	4809      	ldr	r0, [pc, #36]	@ (8002b48 <vTask1+0x38>)
 8002b24:	f7ff ffd4 	bl	8002ad0 <UART2_Print_Text>

    /* Setting the Task 2 priority above the Task 1 priority will cause Task 2 to
       immmediately start running (as then Task 2 will have the higher priority of the
       two created tasks).
       Note the use of the handle to task 2 (xTask2Handle) in the call to vTaskPrioritySet() */
    UART2_Print_Text( &huart2, "About to raise the Task 2 priority\n\r" );
 8002b28:	4908      	ldr	r1, [pc, #32]	@ (8002b4c <vTask1+0x3c>)
 8002b2a:	4807      	ldr	r0, [pc, #28]	@ (8002b48 <vTask1+0x38>)
 8002b2c:	f7ff ffd0 	bl	8002ad0 <UART2_Print_Text>
    vTaskPrioritySet( xTask2Handle, ( uxPriority + 1 ) );
 8002b30:	4b07      	ldr	r3, [pc, #28]	@ (8002b50 <vTask1+0x40>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f7fe f9ea 	bl	8000f14 <vTaskPrioritySet>
    UART2_Print_Text( &huart2, "Task 1 is running\n\r" );
 8002b40:	bf00      	nop
 8002b42:	e7ed      	b.n	8002b20 <vTask1+0x10>
 8002b44:	08004bb4 	.word	0x08004bb4
 8002b48:	20012dc0 	.word	0x20012dc0
 8002b4c:	08004bc8 	.word	0x08004bc8
 8002b50:	20012e08 	.word	0x20012e08

08002b54 <vTask2>:
  }
}

void vTask2( void *pvParameters )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Task 1 will always run before this task as Task 1 is created with the higher priority.
     Neither Task 1 nor Task 2 ever block so will always be in either Running or Ready state */

  /* Query the priority at which this task is running - passing in NULL means
     "return the calling task's priority" */
  UBaseType_t uxPriority = uxTaskPriorityGet( NULL );
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fe f9bf 	bl	8000ee0 <uxTaskPriorityGet>
 8002b62:	60f8      	str	r0, [r7, #12]
  {
    /* for this task to reach this point, Task 1 must have already run and
       set the priority of this task (vTask2) higher than its own (vTask1) */

    /* print out the name of this task */
    UART2_Print_Text( &huart2, "Task 2 is running\n\r" );
 8002b64:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <vTask2+0x30>)
 8002b66:	4808      	ldr	r0, [pc, #32]	@ (8002b88 <vTask2+0x34>)
 8002b68:	f7ff ffb2 	bl	8002ad0 <UART2_Print_Text>
    /* Set the priority of this task back down to its original value.
       Passing in NULL as the task handle means "change the priority of the
       calling task".
       Setting the priority below that of Task 1 will cause Task 1 to immediately
       start running again - preempting this task */
    UART2_Print_Text( &huart2, "About to lower the Task 2 priority\n\r" );
 8002b6c:	4907      	ldr	r1, [pc, #28]	@ (8002b8c <vTask2+0x38>)
 8002b6e:	4806      	ldr	r0, [pc, #24]	@ (8002b88 <vTask2+0x34>)
 8002b70:	f7ff ffae 	bl	8002ad0 <UART2_Print_Text>
    vTaskPrioritySet( NULL, ( uxPriority - 2 ) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b02      	subs	r3, #2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f9ca 	bl	8000f14 <vTaskPrioritySet>
    UART2_Print_Text( &huart2, "Task 2 is running\n\r" );
 8002b80:	bf00      	nop
 8002b82:	e7ef      	b.n	8002b64 <vTask2+0x10>
 8002b84:	08004bf0 	.word	0x08004bf0
 8002b88:	20012dc0 	.word	0x20012dc0
 8002b8c:	08004c04 	.word	0x08004c04

08002b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a04      	ldr	r2, [pc, #16]	@ (8002bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ba2:	f000 f97d 	bl	8002ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40001000 	.word	0x40001000

08002bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb8:	b672      	cpsid	i
}
 8002bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <Error_Handler+0x8>

08002bc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	4a0f      	ldr	r2, [pc, #60]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <HAL_MspInit+0x4c>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a19      	ldr	r2, [pc, #100]	@ (8002c94 <HAL_UART_MspInit+0x84>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d12b      	bne.n	8002c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b18      	ldr	r3, [pc, #96]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a17      	ldr	r2, [pc, #92]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <HAL_UART_MspInit+0x88>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c76:	2303      	movs	r3, #3
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	4619      	mov	r1, r3
 8002c84:	4805      	ldr	r0, [pc, #20]	@ (8002c9c <HAL_UART_MspInit+0x8c>)
 8002c86:	f000 fa0d 	bl	80030a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	@ 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40004400 	.word	0x40004400
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	@ 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4b33      	ldr	r3, [pc, #204]	@ (8002d84 <HAL_InitTick+0xe4>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	4a32      	ldr	r2, [pc, #200]	@ (8002d84 <HAL_InitTick+0xe4>)
 8002cba:	f043 0310 	orr.w	r3, r3, #16
 8002cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc0:	4b30      	ldr	r3, [pc, #192]	@ (8002d84 <HAL_InitTick+0xe4>)
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ccc:	f107 0210 	add.w	r2, r7, #16
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f832 	bl	8003d40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ce6:	f001 f803 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8002cea:	6378      	str	r0, [r7, #52]	@ 0x34
 8002cec:	e004      	b.n	8002cf8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cee:	f000 ffff 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfa:	4a23      	ldr	r2, [pc, #140]	@ (8002d88 <HAL_InitTick+0xe8>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	0c9b      	lsrs	r3, r3, #18
 8002d02:	3b01      	subs	r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d06:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d08:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <HAL_InitTick+0xf0>)
 8002d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d14:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d26:	4b19      	ldr	r3, [pc, #100]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002d2c:	4817      	ldr	r0, [pc, #92]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d2e:	f001 f839 	bl	8003da4 <HAL_TIM_Base_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11b      	bne.n	8002d78 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d40:	4812      	ldr	r0, [pc, #72]	@ (8002d8c <HAL_InitTick+0xec>)
 8002d42:	f001 f889 	bl	8003e58 <HAL_TIM_Base_Start_IT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d111      	bne.n	8002d78 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d54:	2036      	movs	r0, #54	@ 0x36
 8002d56:	f000 f997 	bl	8003088 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b0f      	cmp	r3, #15
 8002d5e:	d808      	bhi.n	8002d72 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d60:	2200      	movs	r2, #0
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	2036      	movs	r0, #54	@ 0x36
 8002d66:	f000 f973 	bl	8003050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <HAL_InitTick+0xf4>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e002      	b.n	8002d78 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3738      	adds	r7, #56	@ 0x38
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40023800 	.word	0x40023800
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	20012e0c 	.word	0x20012e0c
 8002d90:	40001000 	.word	0x40001000
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <NMI_Handler+0x4>

08002da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <HardFault_Handler+0x4>

08002da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <MemManage_Handler+0x4>

08002db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <BusFault_Handler+0x4>

08002db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <UsageFault_Handler+0x4>

08002dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dd4:	4802      	ldr	r0, [pc, #8]	@ (8002de0 <TIM6_DAC_IRQHandler+0x10>)
 8002dd6:	f001 f8af 	bl	8003f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20012e0c 	.word	0x20012e0c

08002de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <SystemInit+0x20>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	4a05      	ldr	r2, [pc, #20]	@ (8002e04 <SystemInit+0x20>)
 8002df0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002df4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e0c:	f7ff ffea 	bl	8002de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e10:	480c      	ldr	r0, [pc, #48]	@ (8002e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e12:	490d      	ldr	r1, [pc, #52]	@ (8002e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e14:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e28:	4c0a      	ldr	r4, [pc, #40]	@ (8002e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e36:	f001 fe6b 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3a:	f7ff fcf5 	bl	8002828 <main>
  bx  lr    
 8002e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002e4c:	08004c54 	.word	0x08004c54
  ldr r2, =_sbss
 8002e50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002e54:	20012e58 	.word	0x20012e58

08002e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e58:	e7fe      	b.n	8002e58 <ADC_IRQHandler>
	...

08002e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e60:	4b0e      	ldr	r3, [pc, #56]	@ (8002e9c <HAL_Init+0x40>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <HAL_Init+0x40>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_Init+0x40>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	@ (8002e9c <HAL_Init+0x40>)
 8002e72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e78:	4b08      	ldr	r3, [pc, #32]	@ (8002e9c <HAL_Init+0x40>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a07      	ldr	r2, [pc, #28]	@ (8002e9c <HAL_Init+0x40>)
 8002e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e84:	2003      	movs	r0, #3
 8002e86:	f000 f8d8 	bl	800303a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7ff ff08 	bl	8002ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e90:	f7ff fe96 	bl	8002bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023c00 	.word	0x40023c00

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000010 	.word	0x20000010
 8002ec4:	20012e54 	.word	0x20012e54

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20012e54 	.word	0x20012e54

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff4c 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003062:	f7ff ff61 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 8003066:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7ff ffb1 	bl	8002fd4 <NVIC_EncodePriority>
 8003072:	4602      	mov	r2, r0
 8003074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff80 	bl	8002f80 <__NVIC_SetPriority>
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff54 	bl	8002f44 <__NVIC_EnableIRQ>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	e16b      	b.n	8003398 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	429a      	cmp	r2, r3
 80030da:	f040 815a 	bne.w	8003392 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d005      	beq.n	80030f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d130      	bne.n	8003158 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	2203      	movs	r2, #3
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312c:	2201      	movs	r2, #1
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f003 0201 	and.w	r2, r3, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b03      	cmp	r3, #3
 8003162:	d017      	beq.n	8003194 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	2203      	movs	r2, #3
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d123      	bne.n	80031e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	08da      	lsrs	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3208      	adds	r2, #8
 80031a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	220f      	movs	r2, #15
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	08da      	lsrs	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3208      	adds	r2, #8
 80031e2:	69b9      	ldr	r1, [r7, #24]
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0203 	and.w	r2, r3, #3
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80b4 	beq.w	8003392 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b60      	ldr	r3, [pc, #384]	@ (80033b0 <HAL_GPIO_Init+0x30c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4a5f      	ldr	r2, [pc, #380]	@ (80033b0 <HAL_GPIO_Init+0x30c>)
 8003234:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003238:	6453      	str	r3, [r2, #68]	@ 0x44
 800323a:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <HAL_GPIO_Init+0x30c>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003246:	4a5b      	ldr	r2, [pc, #364]	@ (80033b4 <HAL_GPIO_Init+0x310>)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a52      	ldr	r2, [pc, #328]	@ (80033b8 <HAL_GPIO_Init+0x314>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d02b      	beq.n	80032ca <HAL_GPIO_Init+0x226>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a51      	ldr	r2, [pc, #324]	@ (80033bc <HAL_GPIO_Init+0x318>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d025      	beq.n	80032c6 <HAL_GPIO_Init+0x222>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a50      	ldr	r2, [pc, #320]	@ (80033c0 <HAL_GPIO_Init+0x31c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d01f      	beq.n	80032c2 <HAL_GPIO_Init+0x21e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4f      	ldr	r2, [pc, #316]	@ (80033c4 <HAL_GPIO_Init+0x320>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d019      	beq.n	80032be <HAL_GPIO_Init+0x21a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4e      	ldr	r2, [pc, #312]	@ (80033c8 <HAL_GPIO_Init+0x324>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0x216>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4d      	ldr	r2, [pc, #308]	@ (80033cc <HAL_GPIO_Init+0x328>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00d      	beq.n	80032b6 <HAL_GPIO_Init+0x212>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4c      	ldr	r2, [pc, #304]	@ (80033d0 <HAL_GPIO_Init+0x32c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <HAL_GPIO_Init+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	@ (80033d4 <HAL_GPIO_Init+0x330>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d101      	bne.n	80032ae <HAL_GPIO_Init+0x20a>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e00e      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032ae:	2308      	movs	r3, #8
 80032b0:	e00c      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032b2:	2306      	movs	r3, #6
 80032b4:	e00a      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032b6:	2305      	movs	r3, #5
 80032b8:	e008      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032ba:	2304      	movs	r3, #4
 80032bc:	e006      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032be:	2303      	movs	r3, #3
 80032c0:	e004      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e002      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x228>
 80032ca:	2300      	movs	r3, #0
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	f002 0203 	and.w	r2, r2, #3
 80032d2:	0092      	lsls	r2, r2, #2
 80032d4:	4093      	lsls	r3, r2
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032dc:	4935      	ldr	r1, [pc, #212]	@ (80033b4 <HAL_GPIO_Init+0x310>)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3302      	adds	r3, #2
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ea:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330e:	4a32      	ldr	r2, [pc, #200]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003314:	4b30      	ldr	r3, [pc, #192]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	43db      	mvns	r3, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4013      	ands	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003338:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333e:	4b26      	ldr	r3, [pc, #152]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003362:	4a1d      	ldr	r2, [pc, #116]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003368:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800338c:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <HAL_GPIO_Init+0x334>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2b0f      	cmp	r3, #15
 800339c:	f67f ae90 	bls.w	80030c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	bf00      	nop
 80033a4:	3724      	adds	r7, #36	@ 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40013800 	.word	0x40013800
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40020800 	.word	0x40020800
 80033c4:	40020c00 	.word	0x40020c00
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40021400 	.word	0x40021400
 80033d0:	40021800 	.word	0x40021800
 80033d4:	40021c00 	.word	0x40021c00
 80033d8:	40013c00 	.word	0x40013c00

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f8:	e003      	b.n	8003402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	041a      	lsls	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e267      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d075      	beq.n	800351a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b04      	cmp	r3, #4
 8003438:	d00c      	beq.n	8003454 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d112      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003446:	4b82      	ldr	r3, [pc, #520]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800344e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b7e      	ldr	r3, [pc, #504]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05b      	beq.n	8003518 <HAL_RCC_OscConfig+0x108>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d157      	bne.n	8003518 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e242      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x74>
 8003476:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a75      	ldr	r2, [pc, #468]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01d      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x98>
 800348e:	4b70      	ldr	r3, [pc, #448]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6f      	ldr	r2, [pc, #444]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b6d      	ldr	r3, [pc, #436]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a6c      	ldr	r2, [pc, #432]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0xb0>
 80034a8:	4b69      	ldr	r3, [pc, #420]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a68      	ldr	r2, [pc, #416]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034b2:	6013      	str	r3, [r2, #0]
 80034b4:	4b66      	ldr	r3, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a65      	ldr	r2, [pc, #404]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d013      	beq.n	80034f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7ff fcfe 	bl	8002ec8 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7ff fcfa 	bl	8002ec8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	@ 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e207      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0xc0>
 80034ee:	e014      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7ff fcea 	bl	8002ec8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff fce6 	bl	8002ec8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e1f3      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0xe8>
 8003516:	e000      	b.n	800351a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d063      	beq.n	80035ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003526:	4b4a      	ldr	r3, [pc, #296]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00b      	beq.n	800354a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800353a:	2b08      	cmp	r3, #8
 800353c:	d11c      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353e:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d116      	bne.n	8003578 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d001      	beq.n	8003562 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e1c7      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4937      	ldr	r1, [pc, #220]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003576:	e03a      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003580:	4b34      	ldr	r3, [pc, #208]	@ (8003654 <HAL_RCC_OscConfig+0x244>)
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7ff fc9f 	bl	8002ec8 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358e:	f7ff fc9b 	bl	8002ec8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e1a8      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ac:	4b28      	ldr	r3, [pc, #160]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4925      	ldr	r1, [pc, #148]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	e015      	b.n	80035ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c2:	4b24      	ldr	r3, [pc, #144]	@ (8003654 <HAL_RCC_OscConfig+0x244>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7ff fc7e 	bl	8002ec8 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d0:	f7ff fc7a 	bl	8002ec8 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e187      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0308 	and.w	r3, r3, #8
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d036      	beq.n	8003668 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003602:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <HAL_RCC_OscConfig+0x248>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7ff fc5e 	bl	8002ec8 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003610:	f7ff fc5a 	bl	8002ec8 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e167      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003622:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <HAL_RCC_OscConfig+0x240>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0x200>
 800362e:	e01b      	b.n	8003668 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003630:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <HAL_RCC_OscConfig+0x248>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003636:	f7ff fc47 	bl	8002ec8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800363c:	e00e      	b.n	800365c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800363e:	f7ff fc43 	bl	8002ec8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d907      	bls.n	800365c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e150      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	42470000 	.word	0x42470000
 8003658:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	4b88      	ldr	r3, [pc, #544]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800365e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ea      	bne.n	800363e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8097 	beq.w	80037a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367a:	4b81      	ldr	r3, [pc, #516]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b7d      	ldr	r3, [pc, #500]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a7c      	ldr	r2, [pc, #496]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b7a      	ldr	r3, [pc, #488]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a6:	4b77      	ldr	r3, [pc, #476]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d118      	bne.n	80036e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b2:	4b74      	ldr	r3, [pc, #464]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a73      	ldr	r2, [pc, #460]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036be:	f7ff fc03 	bl	8002ec8 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c6:	f7ff fbff 	bl	8002ec8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e10c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003884 <HAL_RCC_OscConfig+0x474>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d106      	bne.n	80036fa <HAL_RCC_OscConfig+0x2ea>
 80036ec:	4b64      	ldr	r3, [pc, #400]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80036ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f0:	4a63      	ldr	r2, [pc, #396]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x30c>
 8003702:	4b5f      	ldr	r3, [pc, #380]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	4a5e      	ldr	r2, [pc, #376]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	@ 0x70
 800370e:	4b5c      	ldr	r3, [pc, #368]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	4a5b      	ldr	r2, [pc, #364]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0x324>
 800371c:	4b58      	ldr	r3, [pc, #352]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003720:	4a57      	ldr	r2, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	@ 0x70
 8003728:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	4a54      	ldr	r2, [pc, #336]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800372e:	f023 0304 	bic.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d015      	beq.n	8003768 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7ff fbc4 	bl	8002ec8 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7ff fbc0 	bl	8002ec8 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0cb      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800375a:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0ee      	beq.n	8003744 <HAL_RCC_OscConfig+0x334>
 8003766:	e014      	b.n	8003792 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7ff fbae 	bl	8002ec8 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7ff fbaa 	bl	8002ec8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e0b5      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003786:	4b3e      	ldr	r3, [pc, #248]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1ee      	bne.n	8003770 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b39      	ldr	r3, [pc, #228]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	4a38      	ldr	r2, [pc, #224]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a1 	beq.w	80038f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ae:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d05c      	beq.n	8003874 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d141      	bne.n	8003846 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7ff fb7e 	bl	8002ec8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7ff fb7a 	bl	8002ec8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e087      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b27      	ldr	r3, [pc, #156]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69da      	ldr	r2, [r3, #28]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	491b      	ldr	r1, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b1b      	ldr	r3, [pc, #108]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381e:	f7ff fb53 	bl	8002ec8 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003826:	f7ff fb4f 	bl	8002ec8 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e05c      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003838:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x416>
 8003844:	e054      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b10      	ldr	r3, [pc, #64]	@ (8003888 <HAL_RCC_OscConfig+0x478>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7ff fb3c 	bl	8002ec8 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7ff fb38 	bl	8002ec8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e045      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <HAL_RCC_OscConfig+0x470>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x444>
 8003872:	e03d      	b.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e038      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
 8003880:	40023800 	.word	0x40023800
 8003884:	40007000 	.word	0x40007000
 8003888:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388c:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4ec>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d028      	beq.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d121      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d11a      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d111      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	085b      	lsrs	r3, r3, #1
 80038d4:	3b01      	subs	r3, #1
 80038d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d107      	bne.n	80038ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800

08003900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0cc      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003914:	4b68      	ldr	r3, [pc, #416]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d90c      	bls.n	800393c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b65      	ldr	r3, [pc, #404]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b63      	ldr	r3, [pc, #396]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0b8      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003954:	4b59      	ldr	r3, [pc, #356]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a58      	ldr	r2, [pc, #352]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800395e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800396c:	4b53      	ldr	r3, [pc, #332]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a52      	ldr	r2, [pc, #328]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003976:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003978:	4b50      	ldr	r3, [pc, #320]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	494d      	ldr	r1, [pc, #308]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d044      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4b47      	ldr	r3, [pc, #284]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d119      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e07f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039be:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e06f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ce:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e067      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f023 0203 	bic.w	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	4934      	ldr	r1, [pc, #208]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f0:	f7ff fa6a 	bl	8002ec8 <HAL_GetTick>
 80039f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7ff fa66 	bl	8002ec8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e04f      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 020c 	and.w	r2, r3, #12
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d1eb      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a20:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d20c      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e032      	b.n	8003aae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4916      	ldr	r1, [pc, #88]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	490e      	ldr	r1, [pc, #56]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a86:	f000 f821 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	091b      	lsrs	r3, r3, #4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	490a      	ldr	r1, [pc, #40]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	5ccb      	ldrb	r3, [r1, r3]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff f8fa 	bl	8002ca0 <HAL_InitTick>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023c00 	.word	0x40023c00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	08004c2c 	.word	0x08004c2c
 8003ac4:	20000008 	.word	0x20000008
 8003ac8:	2000000c 	.word	0x2000000c

08003acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b094      	sub	sp, #80	@ 0x50
 8003ad2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad8:	2300      	movs	r3, #0
 8003ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003adc:	2300      	movs	r3, #0
 8003ade:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae4:	4b79      	ldr	r3, [pc, #484]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d00d      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x40>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	f200 80e1 	bhi.w	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x34>
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003afe:	e0db      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b73      	ldr	r3, [pc, #460]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b04:	e0db      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b06:	4b73      	ldr	r3, [pc, #460]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b0a:	e0d8      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b16:	4b6d      	ldr	r3, [pc, #436]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d063      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b36:	2300      	movs	r3, #0
 8003b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b3e:	4622      	mov	r2, r4
 8003b40:	462b      	mov	r3, r5
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	0159      	lsls	r1, r3, #5
 8003b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b50:	0150      	lsls	r0, r2, #5
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4621      	mov	r1, r4
 8003b58:	1a51      	subs	r1, r2, r1
 8003b5a:	6139      	str	r1, [r7, #16]
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b70:	4659      	mov	r1, fp
 8003b72:	018b      	lsls	r3, r1, #6
 8003b74:	4651      	mov	r1, sl
 8003b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b7a:	4651      	mov	r1, sl
 8003b7c:	018a      	lsls	r2, r1, #6
 8003b7e:	4651      	mov	r1, sl
 8003b80:	ebb2 0801 	subs.w	r8, r2, r1
 8003b84:	4659      	mov	r1, fp
 8003b86:	eb63 0901 	sbc.w	r9, r3, r1
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b9e:	4690      	mov	r8, r2
 8003ba0:	4699      	mov	r9, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	eb18 0303 	adds.w	r3, r8, r3
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	462b      	mov	r3, r5
 8003bac:	eb49 0303 	adc.w	r3, r9, r3
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	024b      	lsls	r3, r1, #9
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc8:	4621      	mov	r1, r4
 8003bca:	024a      	lsls	r2, r1, #9
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bdc:	f7fc faf8 	bl	80001d0 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be8:	e058      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b38      	ldr	r3, [pc, #224]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c04:	4642      	mov	r2, r8
 8003c06:	464b      	mov	r3, r9
 8003c08:	f04f 0000 	mov.w	r0, #0
 8003c0c:	f04f 0100 	mov.w	r1, #0
 8003c10:	0159      	lsls	r1, r3, #5
 8003c12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c16:	0150      	lsls	r0, r2, #5
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c40:	eb63 050b 	sbc.w	r5, r3, fp
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	00eb      	lsls	r3, r5, #3
 8003c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c52:	00e2      	lsls	r2, r4, #3
 8003c54:	4614      	mov	r4, r2
 8003c56:	461d      	mov	r5, r3
 8003c58:	4643      	mov	r3, r8
 8003c5a:	18e3      	adds	r3, r4, r3
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	464b      	mov	r3, r9
 8003c60:	eb45 0303 	adc.w	r3, r5, r3
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c72:	4629      	mov	r1, r5
 8003c74:	028b      	lsls	r3, r1, #10
 8003c76:	4621      	mov	r1, r4
 8003c78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	028a      	lsls	r2, r1, #10
 8003c80:	4610      	mov	r0, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c86:	2200      	movs	r2, #0
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	61fa      	str	r2, [r7, #28]
 8003c8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c90:	f7fc fa9e 	bl	80001d0 <__aeabi_uldivmod>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4613      	mov	r3, r2
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	0c1b      	lsrs	r3, r3, #16
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003cac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb8:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3750      	adds	r7, #80	@ 0x50
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	007a1200 	.word	0x007a1200

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	20000008 	.word	0x20000008

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf4:	f7ff fff0 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0a9b      	lsrs	r3, r3, #10
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4903      	ldr	r1, [pc, #12]	@ (8003d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40023800 	.word	0x40023800
 8003d14:	08004c3c 	.word	0x08004c3c

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d1c:	f7ff ffdc 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0b5b      	lsrs	r3, r3, #13
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4903      	ldr	r1, [pc, #12]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08004c3c 	.word	0x08004c3c

08003d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	220f      	movs	r2, #15
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <HAL_RCC_GetClockConfig+0x5c>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <HAL_RCC_GetClockConfig+0x5c>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <HAL_RCC_GetClockConfig+0x5c>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d74:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_GetClockConfig+0x5c>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	08db      	lsrs	r3, r3, #3
 8003d7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d82:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <HAL_RCC_GetClockConfig+0x60>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0207 	and.w	r2, r3, #7
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e041      	b.n	8003e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f839 	bl	8003e42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	4619      	mov	r1, r3
 8003de2:	4610      	mov	r0, r2
 8003de4:	f000 f9c0 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04e      	b.n	8003f0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a23      	ldr	r2, [pc, #140]	@ (8003f1c <HAL_TIM_Base_Start_IT+0xc4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d022      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e9a:	d01d      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f20 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d018      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_TIM_Base_Start_IT+0xcc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00e      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	@ (8003f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIM_Base_Start_IT+0x80>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	@ (8003f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d111      	bne.n	8003efc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b06      	cmp	r3, #6
 8003ee8:	d010      	beq.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	e007      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40010400 	.word	0x40010400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40001800 	.word	0x40001800

08003f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0202 	mvn.w	r2, #2
 8003f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8d2 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f8c4 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8d5 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0204 	mvn.w	r2, #4
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8ac 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f89e 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8af 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0208 	mvn.w	r2, #8
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f886 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f878 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f889 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0210 	mvn.w	r2, #16
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2208      	movs	r2, #8
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	69db      	ldr	r3, [r3, #28]
 800405e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f860 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f852 	bl	8004118 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f863 	bl	8004140 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0201 	mvn.w	r2, #1
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fe fd76 	bl	8002b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f906 	bl	80042d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f834 	bl	8004154 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f06f 0220 	mvn.w	r2, #32
 8004108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8d8 	bl	80042c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a46      	ldr	r2, [pc, #280]	@ (8004294 <TIM_Base_SetConfig+0x12c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a43      	ldr	r2, [pc, #268]	@ (8004298 <TIM_Base_SetConfig+0x130>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a42      	ldr	r2, [pc, #264]	@ (800429c <TIM_Base_SetConfig+0x134>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a41      	ldr	r2, [pc, #260]	@ (80042a0 <TIM_Base_SetConfig+0x138>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a40      	ldr	r2, [pc, #256]	@ (80042a4 <TIM_Base_SetConfig+0x13c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a35      	ldr	r2, [pc, #212]	@ (8004294 <TIM_Base_SetConfig+0x12c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d027      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a32      	ldr	r2, [pc, #200]	@ (8004298 <TIM_Base_SetConfig+0x130>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d023      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a31      	ldr	r2, [pc, #196]	@ (800429c <TIM_Base_SetConfig+0x134>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a30      	ldr	r2, [pc, #192]	@ (80042a0 <TIM_Base_SetConfig+0x138>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <TIM_Base_SetConfig+0x13c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <TIM_Base_SetConfig+0x140>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	@ (80042ac <TIM_Base_SetConfig+0x144>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a2c      	ldr	r2, [pc, #176]	@ (80042b0 <TIM_Base_SetConfig+0x148>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <TIM_Base_SetConfig+0x14c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2a      	ldr	r2, [pc, #168]	@ (80042b8 <TIM_Base_SetConfig+0x150>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <TIM_Base_SetConfig+0x154>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a10      	ldr	r2, [pc, #64]	@ (8004294 <TIM_Base_SetConfig+0x12c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a12      	ldr	r2, [pc, #72]	@ (80042a4 <TIM_Base_SetConfig+0x13c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	611a      	str	r2, [r3, #16]
  }
}
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40010400 	.word	0x40010400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800
 80042b4:	40001800 	.word	0x40001800
 80042b8:	40001c00 	.word	0x40001c00
 80042bc:	40002000 	.word	0x40002000

080042c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e042      	b.n	8004380 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fe fc7e 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	@ 0x24
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800432a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f973 	bl	8004618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695a      	ldr	r2, [r3, #20]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	@ 0x28
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	4613      	mov	r3, r2
 8004396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d175      	bne.n	8004494 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_UART_Transmit+0x2c>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e06e      	b.n	8004496 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2221      	movs	r2, #33	@ 0x21
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043c6:	f7fe fd7f 	bl	8002ec8 <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	88fa      	ldrh	r2, [r7, #6]
 80043d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	88fa      	ldrh	r2, [r7, #6]
 80043d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e0:	d108      	bne.n	80043f4 <HAL_UART_Transmit+0x6c>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e003      	b.n	80043fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043fc:	e02e      	b.n	800445c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2180      	movs	r1, #128	@ 0x80
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f848 	bl	800449e <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e03a      	b.n	8004496 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3302      	adds	r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e007      	b.n	800444e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1cb      	bne.n	80043fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2140      	movs	r1, #64	@ 0x40
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f814 	bl	800449e <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ae:	e03b      	b.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d037      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b8:	f7fe fd06 	bl	8002ec8 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	6a3a      	ldr	r2, [r7, #32]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d302      	bcc.n	80044ce <UART_WaitOnFlagUntilTimeout+0x30>
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e03a      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d023      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b80      	cmp	r3, #128	@ 0x80
 80044e4:	d020      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b40      	cmp	r3, #64	@ 0x40
 80044ea:	d01d      	beq.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d116      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f81d 	bl	8004550 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2208      	movs	r2, #8
 800451a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e00f      	b.n	8004548 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf0c      	ite	eq
 8004538:	2301      	moveq	r3, #1
 800453a:	2300      	movne	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	429a      	cmp	r2, r3
 8004544:	d0b4      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b095      	sub	sp, #84	@ 0x54
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	330c      	adds	r3, #12
 800455e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004562:	e853 3f00 	ldrex	r3, [r3]
 8004566:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800456e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	330c      	adds	r3, #12
 8004576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004578:	643a      	str	r2, [r7, #64]	@ 0x40
 800457a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800457e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e5      	bne.n	8004558 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	61fb      	str	r3, [r7, #28]
   return(result);
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045b4:	e841 2300 	strex	r3, r2, [r1]
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e5      	bne.n	800458c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d119      	bne.n	80045fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	647b      	str	r3, [r7, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	330c      	adds	r3, #12
 80045e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e8:	61ba      	str	r2, [r7, #24]
 80045ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800460a:	bf00      	nop
 800460c:	3754      	adds	r7, #84	@ 0x54
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b0c0      	sub	sp, #256	@ 0x100
 800461e:	af00      	add	r7, sp, #0
 8004620:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	ea40 0301 	orr.w	r3, r0, r1
 8004640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	431a      	orrs	r2, r3
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	431a      	orrs	r2, r3
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004670:	f021 010c 	bic.w	r1, r1, #12
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800467e:	430b      	orrs	r3, r1
 8004680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800468e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004692:	6999      	ldr	r1, [r3, #24]
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	ea40 0301 	orr.w	r3, r0, r1
 800469e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b8f      	ldr	r3, [pc, #572]	@ (80048e4 <UART_SetConfig+0x2cc>)
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d005      	beq.n	80046b8 <UART_SetConfig+0xa0>
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b8d      	ldr	r3, [pc, #564]	@ (80048e8 <UART_SetConfig+0x2d0>)
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d104      	bne.n	80046c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046b8:	f7ff fb2e 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 80046bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046c0:	e003      	b.n	80046ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c2:	f7ff fb15 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80046c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046d4:	f040 810c 	bne.w	80048f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046dc:	2200      	movs	r2, #0
 80046de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80046e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80046e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	1891      	adds	r1, r2, r2
 80046f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80046f2:	415b      	adcs	r3, r3
 80046f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80046fa:	4621      	mov	r1, r4
 80046fc:	eb12 0801 	adds.w	r8, r2, r1
 8004700:	4629      	mov	r1, r5
 8004702:	eb43 0901 	adc.w	r9, r3, r1
 8004706:	f04f 0200 	mov.w	r2, #0
 800470a:	f04f 0300 	mov.w	r3, #0
 800470e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800471a:	4690      	mov	r8, r2
 800471c:	4699      	mov	r9, r3
 800471e:	4623      	mov	r3, r4
 8004720:	eb18 0303 	adds.w	r3, r8, r3
 8004724:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004728:	462b      	mov	r3, r5
 800472a:	eb49 0303 	adc.w	r3, r9, r3
 800472e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800473e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004746:	460b      	mov	r3, r1
 8004748:	18db      	adds	r3, r3, r3
 800474a:	653b      	str	r3, [r7, #80]	@ 0x50
 800474c:	4613      	mov	r3, r2
 800474e:	eb42 0303 	adc.w	r3, r2, r3
 8004752:	657b      	str	r3, [r7, #84]	@ 0x54
 8004754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800475c:	f7fb fd38 	bl	80001d0 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4b61      	ldr	r3, [pc, #388]	@ (80048ec <UART_SetConfig+0x2d4>)
 8004766:	fba3 2302 	umull	r2, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004778:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800477c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004788:	415b      	adcs	r3, r3
 800478a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800478c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004790:	4641      	mov	r1, r8
 8004792:	eb12 0a01 	adds.w	sl, r2, r1
 8004796:	4649      	mov	r1, r9
 8004798:	eb43 0b01 	adc.w	fp, r3, r1
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b0:	4692      	mov	sl, r2
 80047b2:	469b      	mov	fp, r3
 80047b4:	4643      	mov	r3, r8
 80047b6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047be:	464b      	mov	r3, r9
 80047c0:	eb4b 0303 	adc.w	r3, fp, r3
 80047c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80047dc:	460b      	mov	r3, r1
 80047de:	18db      	adds	r3, r3, r3
 80047e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e2:	4613      	mov	r3, r2
 80047e4:	eb42 0303 	adc.w	r3, r2, r3
 80047e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80047ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80047f2:	f7fb fced 	bl	80001d0 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <UART_SetConfig+0x2d4>)
 80047fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2264      	movs	r2, #100	@ 0x64
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	1acb      	subs	r3, r1, r3
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004812:	4b36      	ldr	r3, [pc, #216]	@ (80048ec <UART_SetConfig+0x2d4>)
 8004814:	fba3 2302 	umull	r2, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004820:	441c      	add	r4, r3
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800482c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800483c:	415b      	adcs	r3, r3
 800483e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004844:	4641      	mov	r1, r8
 8004846:	1851      	adds	r1, r2, r1
 8004848:	6339      	str	r1, [r7, #48]	@ 0x30
 800484a:	4649      	mov	r1, r9
 800484c:	414b      	adcs	r3, r1
 800484e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800485c:	4659      	mov	r1, fp
 800485e:	00cb      	lsls	r3, r1, #3
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004866:	4651      	mov	r1, sl
 8004868:	00ca      	lsls	r2, r1, #3
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	4603      	mov	r3, r0
 8004870:	4642      	mov	r2, r8
 8004872:	189b      	adds	r3, r3, r2
 8004874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004890:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004898:	460b      	mov	r3, r1
 800489a:	18db      	adds	r3, r3, r3
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800489e:	4613      	mov	r3, r2
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048ae:	f7fb fc8f 	bl	80001d0 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4b0d      	ldr	r3, [pc, #52]	@ (80048ec <UART_SetConfig+0x2d4>)
 80048b8:	fba3 1302 	umull	r1, r3, r3, r2
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	2164      	movs	r1, #100	@ 0x64
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3332      	adds	r3, #50	@ 0x32
 80048ca:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <UART_SetConfig+0x2d4>)
 80048cc:	fba2 2303 	umull	r2, r3, r2, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	f003 0207 	and.w	r2, r3, #7
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4422      	add	r2, r4
 80048de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e0:	e106      	b.n	8004af0 <UART_SetConfig+0x4d8>
 80048e2:	bf00      	nop
 80048e4:	40011000 	.word	0x40011000
 80048e8:	40011400 	.word	0x40011400
 80048ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80048fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004902:	4642      	mov	r2, r8
 8004904:	464b      	mov	r3, r9
 8004906:	1891      	adds	r1, r2, r2
 8004908:	6239      	str	r1, [r7, #32]
 800490a:	415b      	adcs	r3, r3
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
 800490e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004912:	4641      	mov	r1, r8
 8004914:	1854      	adds	r4, r2, r1
 8004916:	4649      	mov	r1, r9
 8004918:	eb43 0501 	adc.w	r5, r3, r1
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	00eb      	lsls	r3, r5, #3
 8004926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800492a:	00e2      	lsls	r2, r4, #3
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	4643      	mov	r3, r8
 8004932:	18e3      	adds	r3, r4, r3
 8004934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004938:	464b      	mov	r3, r9
 800493a:	eb45 0303 	adc.w	r3, r5, r3
 800493e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800495e:	4629      	mov	r1, r5
 8004960:	008b      	lsls	r3, r1, #2
 8004962:	4621      	mov	r1, r4
 8004964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004968:	4621      	mov	r1, r4
 800496a:	008a      	lsls	r2, r1, #2
 800496c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004970:	f7fb fc2e 	bl	80001d0 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4b60      	ldr	r3, [pc, #384]	@ (8004afc <UART_SetConfig+0x4e4>)
 800497a:	fba3 2302 	umull	r2, r3, r3, r2
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	011c      	lsls	r4, r3, #4
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800498c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004994:	4642      	mov	r2, r8
 8004996:	464b      	mov	r3, r9
 8004998:	1891      	adds	r1, r2, r2
 800499a:	61b9      	str	r1, [r7, #24]
 800499c:	415b      	adcs	r3, r3
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049a4:	4641      	mov	r1, r8
 80049a6:	1851      	adds	r1, r2, r1
 80049a8:	6139      	str	r1, [r7, #16]
 80049aa:	4649      	mov	r1, r9
 80049ac:	414b      	adcs	r3, r1
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049bc:	4659      	mov	r1, fp
 80049be:	00cb      	lsls	r3, r1, #3
 80049c0:	4651      	mov	r1, sl
 80049c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c6:	4651      	mov	r1, sl
 80049c8:	00ca      	lsls	r2, r1, #3
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	4642      	mov	r2, r8
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049d8:	464b      	mov	r3, r9
 80049da:	460a      	mov	r2, r1
 80049dc:	eb42 0303 	adc.w	r3, r2, r3
 80049e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80049fc:	4649      	mov	r1, r9
 80049fe:	008b      	lsls	r3, r1, #2
 8004a00:	4641      	mov	r1, r8
 8004a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a06:	4641      	mov	r1, r8
 8004a08:	008a      	lsls	r2, r1, #2
 8004a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a0e:	f7fb fbdf 	bl	80001d0 <__aeabi_uldivmod>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4611      	mov	r1, r2
 8004a18:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <UART_SetConfig+0x4e4>)
 8004a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	2264      	movs	r2, #100	@ 0x64
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	1acb      	subs	r3, r1, r3
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	3332      	adds	r3, #50	@ 0x32
 8004a2c:	4a33      	ldr	r2, [pc, #204]	@ (8004afc <UART_SetConfig+0x4e4>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a38:	441c      	add	r4, r3
 8004a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a3e:	2200      	movs	r2, #0
 8004a40:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a42:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	415b      	adcs	r3, r3
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	eb42 0303 	adc.w	r3, r2, r3
 8004a92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004aac:	4649      	mov	r1, r9
 8004aae:	008b      	lsls	r3, r1, #2
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	008a      	lsls	r2, r1, #2
 8004aba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004abe:	f7fb fb87 	bl	80001d0 <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <UART_SetConfig+0x4e4>)
 8004ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	2164      	movs	r1, #100	@ 0x64
 8004ad0:	fb01 f303 	mul.w	r3, r1, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	3332      	adds	r3, #50	@ 0x32
 8004ada:	4a08      	ldr	r2, [pc, #32]	@ (8004afc <UART_SetConfig+0x4e4>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	095b      	lsrs	r3, r3, #5
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4422      	add	r2, r4
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004af6:	46bd      	mov	sp, r7
 8004af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afc:	51eb851f 	.word	0x51eb851f

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4d0d      	ldr	r5, [pc, #52]	@ (8004b48 <__libc_init_array+0x38>)
 8004b14:	4c0d      	ldr	r4, [pc, #52]	@ (8004b4c <__libc_init_array+0x3c>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	4d0b      	ldr	r5, [pc, #44]	@ (8004b50 <__libc_init_array+0x40>)
 8004b22:	4c0c      	ldr	r4, [pc, #48]	@ (8004b54 <__libc_init_array+0x44>)
 8004b24:	f000 f826 	bl	8004b74 <_init>
 8004b28:	1b64      	subs	r4, r4, r5
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08004c4c 	.word	0x08004c4c
 8004b4c:	08004c4c 	.word	0x08004c4c
 8004b50:	08004c4c 	.word	0x08004c4c
 8004b54:	08004c50 	.word	0x08004c50

08004b58 <memcpy>:
 8004b58:	440a      	add	r2, r1
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b60:	d100      	bne.n	8004b64 <memcpy+0xc>
 8004b62:	4770      	bx	lr
 8004b64:	b510      	push	{r4, lr}
 8004b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	d1f9      	bne.n	8004b66 <memcpy+0xe>
 8004b72:	bd10      	pop	{r4, pc}

08004b74 <_init>:
 8004b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b76:	bf00      	nop
 8004b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7a:	bc08      	pop	{r3}
 8004b7c:	469e      	mov	lr, r3
 8004b7e:	4770      	bx	lr

08004b80 <_fini>:
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b82:	bf00      	nop
 8004b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b86:	bc08      	pop	{r3}
 8004b88:	469e      	mov	lr, r3
 8004b8a:	4770      	bx	lr
