
App_016_Example_5.X_Pointer_To_Queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d70  08005d70  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005d70  08005d70  00006d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d78  08005d78  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d78  08005d78  00006d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d7c  08005d7c  00006d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005d80  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          00012fa4  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013008  20013008  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012501  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b26  00000000  00000000  00019595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  0001c0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d76  00000000  00000000  0001d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207a9  00000000  00000000  0001df6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014303  00000000  00000000  0003e717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da6d4  00000000  00000000  00052a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d0ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d30  00000000  00000000  0012d134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00131e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c68 	.word	0x08005c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005c68 	.word	0x08005c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d103      	bne.n	80005da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00c      	b.n	80005f4 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3308      	adds	r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <vListInsert+0x2e>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d2f6      	bcs.n	80005e2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05d      	beq.n	8000772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d059      	beq.n	8000772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c6:	2100      	movs	r1, #0
 80006c8:	fba3 2302 	umull	r2, r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <xQueueGenericReset+0x52>
 80006d0:	2101      	movs	r1, #1
 80006d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006d8:	f002 f8dc 	bl	8002894 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006e8:	fb01 f303 	mul.w	r3, r1, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2200      	movs	r2, #0
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	3b01      	subs	r3, #1
 800070a:	6939      	ldr	r1, [r7, #16]
 800070c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01a      	beq.n	800076c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3310      	adds	r3, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 f93c 	bl	80019b8 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <xQueueGenericReset+0x120>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	e009      	b.n	800076c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3324      	adds	r3, #36	@ 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fefa 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800076c:	f002 f8c4 	bl	80028f8 <vPortExitCritical>
 8000770:	e001      	b.n	8000776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <xQueueGenericReset+0x114>
    __asm volatile
 800077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	60bb      	str	r3, [r7, #8]
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d02e      	beq.n	800081a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007bc:	2100      	movs	r1, #0
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <xQueueGenericCreate+0x28>
 80007ca:	2101      	movs	r1, #1
 80007cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007da:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007de:	d81c      	bhi.n	800081a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3350      	adds	r3, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f934 	bl	8002a5c <pvPortMalloc>
 80007f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01d      	beq.n	8000838 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3350      	adds	r3, #80	@ 0x50
 8000804:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f815 	bl	8000842 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000818:	e00e      	b.n	8000838 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <xQueueGenericCreate+0x94>
    __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
    }
 800083a:	4618      	mov	r0, r3
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e002      	b.n	8000864 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000870:	2101      	movs	r1, #1
 8000872:	69b8      	ldr	r0, [r7, #24]
 8000874:	f7ff ff04 	bl	8000680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <xQueueGenericSend+0x34>
    __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <xQueueGenericSend+0x42>
 80008c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <xQueueGenericSend+0x46>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <xQueueGenericSend+0x48>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <xQueueGenericSend+0x64>
    __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d103      	bne.n	80008fa <xQueueGenericSend+0x72>
 80008f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <xQueueGenericSend+0x76>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <xQueueGenericSend+0x78>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <xQueueGenericSend+0x94>
    __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	623b      	str	r3, [r7, #32]
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800091c:	f001 fa62 	bl	8001de4 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <xQueueGenericSend+0xa4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <xQueueGenericSend+0xa8>
 800092c:	2301      	movs	r3, #1
 800092e:	e000      	b.n	8000932 <xQueueGenericSend+0xaa>
 8000930:	2300      	movs	r3, #0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10b      	bne.n	800094e <xQueueGenericSend+0xc6>
    __asm volatile
 8000936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	61fb      	str	r3, [r7, #28]
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	e7fd      	b.n	800094a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800094e:	f001 ffa1 	bl	8002894 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800095a:	429a      	cmp	r2, r3
 800095c:	d302      	bcc.n	8000964 <xQueueGenericSend+0xdc>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d129      	bne.n	80009b8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800096a:	f000 f971 	bl	8000c50 <prvCopyDataToQueue>
 800096e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	d010      	beq.n	800099a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097a:	3324      	adds	r3, #36	@ 0x24
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f81b 	bl	80019b8 <xTaskRemoveFromEventList>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d013      	beq.n	80009b0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000988:	4b3f      	ldr	r3, [pc, #252]	@ (8000a88 <xQueueGenericSend+0x200>)
 800098a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	e00a      	b.n	80009b0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d007      	beq.n	80009b0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <xQueueGenericSend+0x200>)
 80009a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009b0:	f001 ffa2 	bl	80028f8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e063      	b.n	8000a80 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009be:	f001 ff9b 	bl	80028f8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e05c      	b.n	8000a80 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f8cb 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009da:	f001 ff8d 	bl	80028f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009de:	f000 fce1 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009e2:	f001 ff57 	bl	8002894 <vPortEnterCritical>
 80009e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d103      	bne.n	80009fc <xQueueGenericSend+0x174>
 80009f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d103      	bne.n	8000a12 <xQueueGenericSend+0x18a>
 8000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a12:	f001 ff71 	bl	80028f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 f8ba 	bl	8001b98 <xTaskCheckForTimeOut>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d124      	bne.n	8000a74 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a2c:	f000 fa08 	bl	8000e40 <prvIsQueueFull>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d018      	beq.n	8000a68 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a38:	3310      	adds	r3, #16
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 ff4e 	bl	80018e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a46:	f000 f993 	bl	8000d70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a4a:	f000 fcb9 	bl	80013c0 <xTaskResumeAll>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f47f af7c 	bne.w	800094e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <xQueueGenericSend+0x200>)
 8000a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	f3bf 8f4f 	dsb	sy
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	e772      	b.n	800094e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a6a:	f000 f981 	bl	8000d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a6e:	f000 fca7 	bl	80013c0 <xTaskResumeAll>
 8000a72:	e76c      	b.n	800094e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a76:	f000 f97b 	bl	8000d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a7a:	f000 fca1 	bl	80013c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a7e:	2300      	movs	r3, #0
        }
    }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	e000ed04 	.word	0xe000ed04

08000a8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10b      	bne.n	8000abe <xQueueReceive+0x32>
    __asm volatile
 8000aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aaa:	f383 8811 	msr	BASEPRI, r3
 8000aae:	f3bf 8f6f 	isb	sy
 8000ab2:	f3bf 8f4f 	dsb	sy
 8000ab6:	623b      	str	r3, [r7, #32]
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	e7fd      	b.n	8000aba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d103      	bne.n	8000acc <xQueueReceive+0x40>
 8000ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d101      	bne.n	8000ad0 <xQueueReceive+0x44>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <xQueueReceive+0x46>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10b      	bne.n	8000aee <xQueueReceive+0x62>
    __asm volatile
 8000ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ada:	f383 8811 	msr	BASEPRI, r3
 8000ade:	f3bf 8f6f 	isb	sy
 8000ae2:	f3bf 8f4f 	dsb	sy
 8000ae6:	61fb      	str	r3, [r7, #28]
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	e7fd      	b.n	8000aea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000aee:	f001 f979 	bl	8001de4 <xTaskGetSchedulerState>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <xQueueReceive+0x72>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <xQueueReceive+0x76>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <xQueueReceive+0x78>
 8000b02:	2300      	movs	r3, #0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10b      	bne.n	8000b20 <xQueueReceive+0x94>
    __asm volatile
 8000b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b0c:	f383 8811 	msr	BASEPRI, r3
 8000b10:	f3bf 8f6f 	isb	sy
 8000b14:	f3bf 8f4f 	dsb	sy
 8000b18:	61bb      	str	r3, [r7, #24]
}
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b20:	f001 feb8 	bl	8002894 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01f      	beq.n	8000b70 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b34:	f000 f8f6 	bl	8000d24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d00f      	beq.n	8000b68 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 ff33 	bl	80019b8 <xTaskRemoveFromEventList>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000b58:	4b3c      	ldr	r3, [pc, #240]	@ (8000c4c <xQueueReceive+0x1c0>)
 8000b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b68:	f001 fec6 	bl	80028f8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e069      	b.n	8000c44 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b76:	f001 febf 	bl	80028f8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e062      	b.n	8000c44 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 ffef 	bl	8001b6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b92:	f001 feb1 	bl	80028f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b96:	f000 fc05 	bl	80013a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b9a:	f001 fe7b 	bl	8002894 <vPortEnterCritical>
 8000b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000baa:	d103      	bne.n	8000bb4 <xQueueReceive+0x128>
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d103      	bne.n	8000bca <xQueueReceive+0x13e>
 8000bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000bca:	f001 fe95 	bl	80028f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 ffde 	bl	8001b98 <xTaskCheckForTimeOut>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d123      	bne.n	8000c2a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000be2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000be4:	f000 f916 	bl	8000e14 <prvIsQueueEmpty>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d017      	beq.n	8000c1e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	3324      	adds	r3, #36	@ 0x24
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fe72 	bl	80018e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000bfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bfe:	f000 f8b7 	bl	8000d70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c02:	f000 fbdd 	bl	80013c0 <xTaskResumeAll>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d189      	bne.n	8000b20 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <xQueueReceive+0x1c0>)
 8000c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	f3bf 8f4f 	dsb	sy
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	e780      	b.n	8000b20 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c20:	f000 f8a6 	bl	8000d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c24:	f000 fbcc 	bl	80013c0 <xTaskResumeAll>
 8000c28:	e77a      	b.n	8000b20 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c2c:	f000 f8a0 	bl	8000d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c30:	f000 fbc6 	bl	80013c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c36:	f000 f8ed 	bl	8000e14 <prvIsQueueEmpty>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f43f af6f 	beq.w	8000b20 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000c42:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3730      	adds	r7, #48	@ 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	e000ed04 	.word	0xe000ed04

08000c50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d10d      	bne.n	8000c8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14d      	bne.n	8000d12 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f8d0 	bl	8001e20 <xTaskPriorityDisinherit>
 8000c80:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	e043      	b.n	8000d12 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d119      	bne.n	8000cc4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6858      	ldr	r0, [r3, #4]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	f004 fb98 	bl	80053d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	441a      	add	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d32b      	bcc.n	8000d12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	e026      	b.n	8000d12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	68d8      	ldr	r0, [r3, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	461a      	mov	r2, r3
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	f004 fb7e 	bl	80053d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cdc:	425b      	negs	r3, r3
 8000cde:	441a      	add	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	425b      	negs	r3, r3
 8000cfa:	441a      	add	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d105      	bne.n	8000d12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000d1a:	697b      	ldr	r3, [r7, #20]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d018      	beq.n	8000d68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	441a      	add	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d303      	bcc.n	8000d58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68d9      	ldr	r1, [r3, #12]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	461a      	mov	r2, r3
 8000d62:	6838      	ldr	r0, [r7, #0]
 8000d64:	f004 fb34 	bl	80053d0 <memcpy>
    }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d78:	f001 fd8c 	bl	8002894 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d84:	e011      	b.n	8000daa <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d012      	beq.n	8000db4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3324      	adds	r3, #36	@ 0x24
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fe10 	bl	80019b8 <xTaskRemoveFromEventList>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000d9e:	f000 ff63 	bl	8001c68 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	dce9      	bgt.n	8000d86 <prvUnlockQueue+0x16>
 8000db2:	e000      	b.n	8000db6 <prvUnlockQueue+0x46>
                    break;
 8000db4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	22ff      	movs	r2, #255	@ 0xff
 8000dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000dbe:	f001 fd9b 	bl	80028f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000dc2:	f001 fd67 	bl	8002894 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dce:	e011      	b.n	8000df4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d012      	beq.n	8000dfe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3310      	adds	r3, #16
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 fdeb 	bl	80019b8 <xTaskRemoveFromEventList>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000de8:	f000 ff3e 	bl	8001c68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	dce9      	bgt.n	8000dd0 <prvUnlockQueue+0x60>
 8000dfc:	e000      	b.n	8000e00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000dfe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	22ff      	movs	r2, #255	@ 0xff
 8000e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000e08:	f001 fd76 	bl	80028f8 <vPortExitCritical>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e1c:	f001 fd3a 	bl	8002894 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	e001      	b.n	8000e32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e32:	f001 fd61 	bl	80028f8 <vPortExitCritical>

    return xReturn;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e48:	f001 fd24 	bl	8002894 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d102      	bne.n	8000e5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	e001      	b.n	8000e62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e62:	f001 fd49 	bl	80028f8 <vPortExitCritical>

    return xReturn;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10b      	bne.n	8000e9c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e88:	f383 8811 	msr	BASEPRI, r3
 8000e8c:	f3bf 8f6f 	isb	sy
 8000e90:	f3bf 8f4f 	dsb	sy
 8000e94:	60fb      	str	r3, [r7, #12]
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d024      	beq.n	8000eec <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e01e      	b.n	8000ee6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000ea8:	4a18      	ldr	r2, [pc, #96]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d105      	bne.n	8000ec4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4a13      	ldr	r2, [pc, #76]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
                    break;
 8000ec2:	e013      	b.n	8000eec <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10a      	bne.n	8000ee0 <vQueueAddToRegistry+0x70>
 8000eca:	4a10      	ldr	r2, [pc, #64]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d104      	bne.n	8000ee0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <vQueueAddToRegistry+0x9c>)
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	d9dd      	bls.n	8000ea8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000080 	.word	0x20000080

08000f10 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000f20:	f001 fcb8 	bl	8002894 <vPortEnterCritical>
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f30:	d103      	bne.n	8000f3a <vQueueWaitForMessageRestricted+0x2a>
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f46:	d103      	bne.n	8000f50 <vQueueWaitForMessageRestricted+0x40>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f50:	f001 fcd2 	bl	80028f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3324      	adds	r3, #36	@ 0x24
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fce1 	bl	800192c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff00 	bl	8000d70 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fd66 	bl	8002a5c <pvPortMalloc>
 8000f90:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000f98:	2058      	movs	r0, #88	@ 0x58
 8000f9a:	f001 fd5f 	bl	8002a5c <pvPortMalloc>
 8000f9e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000fa6:	2258      	movs	r2, #88	@ 0x58
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f004 f9dc 	bl	8005368 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fb6:	e005      	b.n	8000fc4 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000fb8:	6938      	ldr	r0, [r7, #16]
 8000fba:	f001 fe81 	bl	8002cc0 <vPortFree>
 8000fbe:	e001      	b.n	8000fc4 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00d      	beq.n	8000fe6 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9303      	str	r3, [sp, #12]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	68b9      	ldr	r1, [r7, #8]
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f000 f828 	bl	8001036 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000fe6:	697b      	ldr	r3, [r7, #20]
    }
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	f7ff ffb3 	bl	8000f78 <prvCreateTask>
 8001012:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800101a:	6938      	ldr	r0, [r7, #16]
 800101c:	f000 f89c 	bl	8001158 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001020:	2301      	movs	r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	e002      	b.n	800102c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800102c:	697b      	ldr	r3, [r7, #20]
    }
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b088      	sub	sp, #32
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8001044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001046:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	21a5      	movs	r1, #165	@ 0xa5
 8001050:	f004 f98a 	bl	8005368 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8001054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001056:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800105e:	3b01      	subs	r3, #1
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f023 0307 	bic.w	r3, r3, #7
 800106c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800107c:	f383 8811 	msr	BASEPRI, r3
 8001080:	f3bf 8f6f 	isb	sy
 8001084:	f3bf 8f4f 	dsb	sy
 8001088:	617b      	str	r3, [r7, #20]
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01e      	beq.n	80010d4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	e012      	b.n	80010c2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	7819      	ldrb	r1, [r3, #0]
 80010a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	4413      	add	r3, r2
 80010aa:	3334      	adds	r3, #52	@ 0x34
 80010ac:	460a      	mov	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	4413      	add	r3, r2
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3301      	adds	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d9e9      	bls.n	800109c <prvInitialiseNewTask+0x66>
 80010c8:	e000      	b.n	80010cc <prvInitialiseNewTask+0x96>
            {
                break;
 80010ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80010d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d90b      	bls.n	80010f2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	613b      	str	r3, [r7, #16]
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	e7fd      	b.n	80010ee <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80010f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d901      	bls.n	80010fc <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80010f8:	2304      	movs	r3, #4
 80010fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80010fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001100:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001106:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110a:	3304      	adds	r3, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa47 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	3318      	adds	r3, #24
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa42 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800111c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800111e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001120:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8001122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001124:	f1c3 0205 	rsb	r2, r3, #5
 8001128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800112c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	68f9      	ldr	r1, [r7, #12]
 8001136:	69b8      	ldr	r0, [r7, #24]
 8001138:	f001 fa2e 	bl	8002598 <pxPortInitialiseStack>
 800113c:	4602      	mov	r2, r0
 800113e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001140:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8001142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800114a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800114c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001160:	f001 fb98 	bl	8002894 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001164:	4b41      	ldr	r3, [pc, #260]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a40      	ldr	r2, [pc, #256]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 800116c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800116e:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001176:	4a3e      	ldr	r2, [pc, #248]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800117c:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <prvAddNewTaskToReadyList+0x114>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d110      	bne.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001184:	f000 fd94 	bl	8001cb0 <prvInitialiseTaskLists>
 8001188:	e00d      	b.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800118a:	4b3a      	ldr	r3, [pc, #232]	@ (8001274 <prvAddNewTaskToReadyList+0x11c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001192:	4b37      	ldr	r3, [pc, #220]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119c:	429a      	cmp	r2, r3
 800119e:	d802      	bhi.n	80011a6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80011a0:	4a33      	ldr	r2, [pc, #204]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80011a6:	4b34      	ldr	r3, [pc, #208]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	4a32      	ldr	r2, [pc, #200]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011ae:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80011b0:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <prvAddNewTaskToReadyList+0x120>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011bc:	2201      	movs	r2, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <prvAddNewTaskToReadyList+0x124>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <prvAddNewTaskToReadyList+0x124>)
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ce:	492c      	ldr	r1, [pc, #176]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3204      	adds	r2, #4
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1d1a      	adds	r2, r3, #4
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4a1c      	ldr	r2, [pc, #112]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800120e:	441a      	add	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001218:	4919      	ldr	r1, [pc, #100]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800122a:	1c59      	adds	r1, r3, #1
 800122c:	4814      	ldr	r0, [pc, #80]	@ (8001280 <prvAddNewTaskToReadyList+0x128>)
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4403      	add	r3, r0
 8001238:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800123a:	f001 fb5d 	bl	80028f8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <prvAddNewTaskToReadyList+0x11c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00e      	beq.n	8001264 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <prvAddNewTaskToReadyList+0x118>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <prvAddNewTaskToReadyList+0x10c>
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <prvAddNewTaskToReadyList+0x12c>)
 8001256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f3bf 8f4f 	dsb	sy
 8001260:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000198 	.word	0x20000198
 8001270:	200000c0 	.word	0x200000c0
 8001274:	200001a4 	.word	0x200001a4
 8001278:	200001b4 	.word	0x200001b4
 800127c:	200001a0 	.word	0x200001a0
 8001280:	200000c4 	.word	0x200000c4
 8001284:	e000ed04 	.word	0xe000ed04

08001288 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800128e:	2301      	movs	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e011      	b.n	80012c0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800129c:	4a1c      	ldr	r2, [pc, #112]	@ (8001310 <prvCreateIdleTasks+0x88>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	7819      	ldrb	r1, [r3, #0]
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4413      	add	r3, r2
 80012aa:	460a      	mov	r2, r1
 80012ac:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80012ae:	1d3a      	adds	r2, r7, #4
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b09      	cmp	r3, #9
 80012c4:	ddea      	ble.n	800129c <prvCreateIdleTasks+0x14>
 80012c6:	e000      	b.n	80012ca <prvCreateIdleTasks+0x42>
        {
            break;
 80012c8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	e015      	b.n	80012fc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <prvCreateIdleTasks+0x8c>)
 80012d2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <prvCreateIdleTasks+0x90>)
 80012da:	4413      	add	r3, r2
 80012dc:	1d39      	adds	r1, r7, #4
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	2300      	movs	r3, #0
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	2282      	movs	r2, #130	@ 0x82
 80012e8:	6938      	ldr	r0, [r7, #16]
 80012ea:	f7ff fe81 	bl	8000ff0 <xTaskCreate>
 80012ee:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dde6      	ble.n	80012d0 <prvCreateIdleTasks+0x48>
 8001302:	e000      	b.n	8001306 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001304:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001306:	69fb      	ldr	r3, [r7, #28]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08005c80 	.word	0x08005c80
 8001314:	08001c81 	.word	0x08001c81
 8001318:	200001bc 	.word	0x200001bc

0800131c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001322:	f7ff ffb1 	bl	8001288 <prvCreateIdleTasks>
 8001326:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800132e:	f000 fea1 	bl	8002074 <xTimerCreateTimerTask>
 8001332:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d116      	bne.n	8001368 <vTaskStartScheduler+0x4c>
    __asm volatile
 800133a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800133e:	f383 8811 	msr	BASEPRI, r3
 8001342:	f3bf 8f6f 	isb	sy
 8001346:	f3bf 8f4f 	dsb	sy
 800134a:	60bb      	str	r3, [r7, #8]
}
 800134c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <vTaskStartScheduler+0x78>)
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <vTaskStartScheduler+0x7c>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <vTaskStartScheduler+0x80>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001362:	f001 f9a7 	bl	80026b4 <xPortStartScheduler>
 8001366:	e00f      	b.n	8001388 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136e:	d10b      	bne.n	8001388 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001374:	f383 8811 	msr	BASEPRI, r3
 8001378:	f3bf 8f6f 	isb	sy
 800137c:	f3bf 8f4f 	dsb	sy
 8001380:	607b      	str	r3, [r7, #4]
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <vTaskStartScheduler+0x84>)
 800138a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200001b8 	.word	0x200001b8
 8001398:	200001a4 	.word	0x200001a4
 800139c:	2000019c 	.word	0x2000019c
 80013a0:	20000000 	.word	0x20000000

080013a4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80013a8:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <vTaskSuspendAll+0x18>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a03      	ldr	r2, [pc, #12]	@ (80013bc <vTaskSuspendAll+0x18>)
 80013b0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	200001c0 	.word	0x200001c0

080013c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80013ce:	f001 fa61 	bl	8002894 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80013d6:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10b      	bne.n	80013f6 <xTaskResumeAll+0x36>
    __asm volatile
 80013de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013e2:	f383 8811 	msr	BASEPRI, r3
 80013e6:	f3bf 8f6f 	isb	sy
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	603b      	str	r3, [r7, #0]
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80013f6:	4b6d      	ldr	r3, [pc, #436]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a6b      	ldr	r2, [pc, #428]	@ (80015ac <xTaskResumeAll+0x1ec>)
 80013fe:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001400:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <xTaskResumeAll+0x1ec>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f040 80ca 	bne.w	800159e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800140a:	4b69      	ldr	r3, [pc, #420]	@ (80015b0 <xTaskResumeAll+0x1f0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80c5 	beq.w	800159e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001414:	e08e      	b.n	8001534 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001416:	4b67      	ldr	r3, [pc, #412]	@ (80015b4 <xTaskResumeAll+0x1f4>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	6a12      	ldr	r2, [r2, #32]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	69d2      	ldr	r2, [r2, #28]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	3318      	adds	r3, #24
 8001440:	429a      	cmp	r2, r3
 8001442:	d103      	bne.n	800144c <xTaskResumeAll+0x8c>
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2200      	movs	r2, #0
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	68d2      	ldr	r2, [r2, #12]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	6892      	ldr	r2, [r2, #8]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	429a      	cmp	r2, r3
 8001480:	d103      	bne.n	800148a <xTaskResumeAll+0xca>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	1e5a      	subs	r2, r3, #1
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800149e:	2201      	movs	r2, #1
 80014a0:	409a      	lsls	r2, r3
 80014a2:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <xTaskResumeAll+0x1f8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	4a43      	ldr	r2, [pc, #268]	@ (80015b8 <xTaskResumeAll+0x1f8>)
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b0:	4942      	ldr	r1, [pc, #264]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	3304      	adds	r3, #4
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	3204      	adds	r2, #4
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	1d1a      	adds	r2, r3, #4
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4a33      	ldr	r2, [pc, #204]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014f0:	441a      	add	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fa:	4930      	ldr	r1, [pc, #192]	@ (80015bc <xTaskResumeAll+0x1fc>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800150c:	1c59      	adds	r1, r3, #1
 800150e:	482b      	ldr	r0, [pc, #172]	@ (80015bc <xTaskResumeAll+0x1fc>)
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <xTaskResumeAll+0x200>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001526:	429a      	cmp	r2, r3
 8001528:	d904      	bls.n	8001534 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <xTaskResumeAll+0x204>)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2101      	movs	r1, #1
 8001530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001534:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <xTaskResumeAll+0x1f4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	f47f af6c 	bne.w	8001416 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001544:	f000 fc32 	bl	8001dac <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001548:	4b1f      	ldr	r3, [pc, #124]	@ (80015c8 <xTaskResumeAll+0x208>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001554:	f000 f84c 	bl	80015f0 <xTaskIncrementTick>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800155e:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <xTaskResumeAll+0x204>)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2101      	movs	r1, #1
 8001564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b01      	subs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1ef      	bne.n	8001554 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <xTaskResumeAll+0x208>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <xTaskResumeAll+0x204>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001586:	2301      	movs	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <xTaskResumeAll+0x200>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <xTaskResumeAll+0x20c>)
 8001590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f3bf 8f4f 	dsb	sy
 800159a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800159e:	f001 f9ab 	bl	80028f8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80015a2:	69bb      	ldr	r3, [r7, #24]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200001c0 	.word	0x200001c0
 80015b0:	20000198 	.word	0x20000198
 80015b4:	20000158 	.word	0x20000158
 80015b8:	200001a0 	.word	0x200001a0
 80015bc:	200000c4 	.word	0x200000c4
 80015c0:	200000c0 	.word	0x200000c0
 80015c4:	200001ac 	.word	0x200001ac
 80015c8:	200001a8 	.word	0x200001a8
 80015cc:	e000ed04 	.word	0xe000ed04

080015d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <xTaskGetTickCount+0x1c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2000019c 	.word	0x2000019c

080015f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	@ 0x28
 80015f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80015fa:	4b7f      	ldr	r3, [pc, #508]	@ (80017f8 <xTaskIncrementTick+0x208>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 80ef 	bne.w	80017e2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001604:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <xTaskIncrementTick+0x20c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800160c:	4a7b      	ldr	r2, [pc, #492]	@ (80017fc <xTaskIncrementTick+0x20c>)
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d121      	bne.n	800165c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001618:	4b79      	ldr	r3, [pc, #484]	@ (8001800 <xTaskIncrementTick+0x210>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	607b      	str	r3, [r7, #4]
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	e7fd      	b.n	8001636 <xTaskIncrementTick+0x46>
 800163a:	4b71      	ldr	r3, [pc, #452]	@ (8001800 <xTaskIncrementTick+0x210>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	4b70      	ldr	r3, [pc, #448]	@ (8001804 <xTaskIncrementTick+0x214>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a6e      	ldr	r2, [pc, #440]	@ (8001800 <xTaskIncrementTick+0x210>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <xTaskIncrementTick+0x214>)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b6e      	ldr	r3, [pc, #440]	@ (8001808 <xTaskIncrementTick+0x218>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a6c      	ldr	r2, [pc, #432]	@ (8001808 <xTaskIncrementTick+0x218>)
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	f000 fba8 	bl	8001dac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800165c:	4b6b      	ldr	r3, [pc, #428]	@ (800180c <xTaskIncrementTick+0x21c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6a3a      	ldr	r2, [r7, #32]
 8001662:	429a      	cmp	r2, r3
 8001664:	f0c0 80a8 	bcc.w	80017b8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001668:	4b65      	ldr	r3, [pc, #404]	@ (8001800 <xTaskIncrementTick+0x210>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d104      	bne.n	800167c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001672:	4b66      	ldr	r3, [pc, #408]	@ (800180c <xTaskIncrementTick+0x21c>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	601a      	str	r2, [r3, #0]
                    break;
 800167a:	e09d      	b.n	80017b8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800167c:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <xTaskIncrementTick+0x210>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	429a      	cmp	r2, r3
 8001692:	d203      	bcs.n	800169c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001694:	4a5d      	ldr	r2, [pc, #372]	@ (800180c <xTaskIncrementTick+0x21c>)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6013      	str	r3, [r2, #0]
                        break;
 800169a:	e08d      	b.n	80017b8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	6892      	ldr	r2, [r2, #8]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3304      	adds	r3, #4
 80016be:	429a      	cmp	r2, r3
 80016c0:	d103      	bne.n	80016ca <xTaskIncrementTick+0xda>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d01e      	beq.n	8001720 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	6a12      	ldr	r2, [r2, #32]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	69d2      	ldr	r2, [r2, #28]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	3318      	adds	r3, #24
 8001704:	429a      	cmp	r2, r3
 8001706:	d103      	bne.n	8001710 <xTaskIncrementTick+0x120>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	605a      	str	r2, [r3, #4]
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2200      	movs	r2, #0
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001724:	2201      	movs	r2, #1
 8001726:	409a      	lsls	r2, r3
 8001728:	4b39      	ldr	r3, [pc, #228]	@ (8001810 <xTaskIncrementTick+0x220>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4313      	orrs	r3, r2
 800172e:	4a38      	ldr	r2, [pc, #224]	@ (8001810 <xTaskIncrementTick+0x220>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001736:	4937      	ldr	r1, [pc, #220]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	3204      	adds	r2, #4
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1d1a      	adds	r2, r3, #4
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4a27      	ldr	r2, [pc, #156]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001776:	441a      	add	r2, r3
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001780:	4924      	ldr	r1, [pc, #144]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001792:	1c59      	adds	r1, r3, #1
 8001794:	481f      	ldr	r0, [pc, #124]	@ (8001814 <xTaskIncrementTick+0x224>)
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4403      	add	r3, r0
 80017a0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001818 <xTaskIncrementTick+0x228>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f67f af5b 	bls.w	8001668 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017b6:	e757      	b.n	8001668 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80017b8:	4b17      	ldr	r3, [pc, #92]	@ (8001818 <xTaskIncrementTick+0x228>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017be:	4915      	ldr	r1, [pc, #84]	@ (8001814 <xTaskIncrementTick+0x224>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d901      	bls.n	80017d4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 80017d0:	2301      	movs	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <xTaskIncrementTick+0x22c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	e004      	b.n	80017ec <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <xTaskIncrementTick+0x230>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001820 <xTaskIncrementTick+0x230>)
 80017ea:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200001c0 	.word	0x200001c0
 80017fc:	2000019c 	.word	0x2000019c
 8001800:	20000150 	.word	0x20000150
 8001804:	20000154 	.word	0x20000154
 8001808:	200001b0 	.word	0x200001b0
 800180c:	200001b8 	.word	0x200001b8
 8001810:	200001a0 	.word	0x200001a0
 8001814:	200000c4 	.word	0x200000c4
 8001818:	200000c0 	.word	0x200000c0
 800181c:	200001ac 	.word	0x200001ac
 8001820:	200001a8 	.word	0x200001a8

08001824 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800182a:	4b28      	ldr	r3, [pc, #160]	@ (80018cc <vTaskSwitchContext+0xa8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <vTaskSwitchContext+0xac>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001838:	e041      	b.n	80018be <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <vTaskSwitchContext+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <vTaskSwitchContext+0xb0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	fab3 f383 	clz	r3, r3
 800184c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800184e:	7afb      	ldrb	r3, [r7, #11]
 8001850:	f1c3 031f 	rsb	r3, r3, #31
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	4920      	ldr	r1, [pc, #128]	@ (80018d8 <vTaskSwitchContext+0xb4>)
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <vTaskSwitchContext+0x5e>
    __asm volatile
 800186a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	607b      	str	r3, [r7, #4]
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	e7fd      	b.n	800187e <vTaskSwitchContext+0x5a>
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <vTaskSwitchContext+0xb4>)
 800188e:	4413      	add	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	3308      	adds	r3, #8
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d103      	bne.n	80018b0 <vTaskSwitchContext+0x8c>
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <vTaskSwitchContext+0xb8>)
 80018b8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80018ba:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <vTaskSwitchContext+0xb8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
    }
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	200001ac 	.word	0x200001ac
 80018d4:	200001a0 	.word	0x200001a0
 80018d8:	200000c4 	.word	0x200000c4
 80018dc:	200000c0 	.word	0x200000c0

080018e0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10b      	bne.n	8001908 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80018f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018f4:	f383 8811 	msr	BASEPRI, r3
 80018f8:	f3bf 8f6f 	isb	sy
 80018fc:	f3bf 8f4f 	dsb	sy
 8001900:	60fb      	str	r3, [r7, #12]
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001908:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <vTaskPlaceOnEventList+0x48>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3318      	adds	r3, #24
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7fe fe52 	bl	80005ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001916:	2101      	movs	r1, #1
 8001918:	6838      	ldr	r0, [r7, #0]
 800191a:	f000 fb29 	bl	8001f70 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000c0 	.word	0x200000c0

0800192c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10b      	bne.n	8001956 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800193e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001942:	f383 8811 	msr	BASEPRI, r3
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	613b      	str	r3, [r7, #16]
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	e7fd      	b.n	8001952 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	61da      	str	r2, [r3, #28]
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	6892      	ldr	r2, [r2, #8]
 800196c:	621a      	str	r2, [r3, #32]
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	3218      	adds	r2, #24
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f103 0218 	add.w	r2, r3, #24
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	68b8      	ldr	r0, [r7, #8]
 80019a8:	f000 fae2 	bl	8001f70 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80019ac:	bf00      	nop
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200000c0 	.word	0x200000c0

080019b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	@ 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10b      	bne.n	80019e6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80019ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d2:	f383 8811 	msr	BASEPRI, r3
 80019d6:	f3bf 8f6f 	isb	sy
 80019da:	f3bf 8f4f 	dsb	sy
 80019de:	60fb      	str	r3, [r7, #12]
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	6a3a      	ldr	r2, [r7, #32]
 80019f2:	6a12      	ldr	r2, [r2, #32]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	6a3a      	ldr	r2, [r7, #32]
 80019fc:	69d2      	ldr	r2, [r2, #28]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	3318      	adds	r3, #24
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d103      	bne.n	8001a14 <xTaskRemoveFromEventList+0x5c>
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	6a1a      	ldr	r2, [r3, #32]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001a24:	4b4b      	ldr	r3, [pc, #300]	@ (8001b54 <xTaskRemoveFromEventList+0x19c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d160      	bne.n	8001aee <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	68d2      	ldr	r2, [r2, #12]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	6892      	ldr	r2, [r2, #8]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d103      	bne.n	8001a5a <xTaskRemoveFromEventList+0xa2>
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6e:	2201      	movs	r2, #1
 8001a70:	409a      	lsls	r2, r3
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <xTaskRemoveFromEventList+0x1a0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	4a37      	ldr	r2, [pc, #220]	@ (8001b58 <xTaskRemoveFromEventList+0x1a0>)
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a80:	4936      	ldr	r1, [pc, #216]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	6a3a      	ldr	r2, [r7, #32]
 8001aa6:	3204      	adds	r2, #4
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	1d1a      	adds	r2, r3, #4
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	609a      	str	r2, [r3, #8]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001ac0:	441a      	add	r2, r3
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	615a      	str	r2, [r3, #20]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aca:	4924      	ldr	r1, [pc, #144]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a3a      	ldr	r2, [r7, #32]
 8001ada:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001adc:	1c59      	adds	r1, r3, #1
 8001ade:	481f      	ldr	r0, [pc, #124]	@ (8001b5c <xTaskRemoveFromEventList+0x1a4>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4403      	add	r3, r0
 8001aea:	6019      	str	r1, [r3, #0]
 8001aec:	e01b      	b.n	8001b26 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001aee:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	621a      	str	r2, [r3, #32]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	3218      	adds	r2, #24
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f103 0218 	add.w	r2, r3, #24
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b1c:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a0f      	ldr	r2, [pc, #60]	@ (8001b60 <xTaskRemoveFromEventList+0x1a8>)
 8001b24:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <xTaskRemoveFromEventList+0x1ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d905      	bls.n	8001b40 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <xTaskRemoveFromEventList+0x1b0>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	e001      	b.n	8001b44 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	372c      	adds	r7, #44	@ 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200001c0 	.word	0x200001c0
 8001b58:	200001a0 	.word	0x200001a0
 8001b5c:	200000c4 	.word	0x200000c4
 8001b60:	20000158 	.word	0x20000158
 8001b64:	200000c0 	.word	0x200000c0
 8001b68:	200001ac 	.word	0x200001ac

08001b6c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001b74:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <vTaskInternalSetTimeOutState+0x24>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <vTaskInternalSetTimeOutState+0x28>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200001b0 	.word	0x200001b0
 8001b94:	2000019c 	.word	0x2000019c

08001b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10b      	bne.n	8001bc0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bac:	f383 8811 	msr	BASEPRI, r3
 8001bb0:	f3bf 8f6f 	isb	sy
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	613b      	str	r3, [r7, #16]
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
 8001bd6:	60fb      	str	r3, [r7, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	e7fd      	b.n	8001bda <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001bde:	f000 fe59 	bl	8002894 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001be2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <xTaskCheckForTimeOut+0xc8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d102      	bne.n	8001c02 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
 8001c00:	e026      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <xTaskCheckForTimeOut+0xcc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d00a      	beq.n	8001c24 <xTaskCheckForTimeOut+0x8c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d305      	bcc.n	8001c24 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	e015      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d20b      	bcs.n	8001c46 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	1ad2      	subs	r2, r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff96 	bl	8001b6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	e004      	b.n	8001c50 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001c50:	f000 fe52 	bl	80028f8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001c54:	69fb      	ldr	r3, [r7, #28]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000019c 	.word	0x2000019c
 8001c64:	200001b0 	.word	0x200001b0

08001c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <vTaskMissedYield+0x14>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	200001ac 	.word	0x200001ac

08001c80 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001c88:	f000 f852 	bl	8001d30 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <prvIdleTask+0x28>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d9f9      	bls.n	8001c88 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <prvIdleTask+0x2c>)
 8001c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001ca4:	e7f0      	b.n	8001c88 <prvIdleTask+0x8>
 8001ca6:	bf00      	nop
 8001ca8:	200000c4 	.word	0x200000c4
 8001cac:	e000ed04 	.word	0xe000ed04

08001cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e00c      	b.n	8001cd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <prvInitialiseTaskLists+0x60>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc48 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b04      	cmp	r3, #4
 8001cda:	d9ef      	bls.n	8001cbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <prvInitialiseTaskLists+0x64>)
 8001cde:	f7fe fc3f 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001ce2:	480d      	ldr	r0, [pc, #52]	@ (8001d18 <prvInitialiseTaskLists+0x68>)
 8001ce4:	f7fe fc3c 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <prvInitialiseTaskLists+0x6c>)
 8001cea:	f7fe fc39 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001cee:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <prvInitialiseTaskLists+0x70>)
 8001cf0:	f7fe fc36 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001cf4:	480b      	ldr	r0, [pc, #44]	@ (8001d24 <prvInitialiseTaskLists+0x74>)
 8001cf6:	f7fe fc33 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <prvInitialiseTaskLists+0x78>)
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <prvInitialiseTaskLists+0x64>)
 8001cfe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <prvInitialiseTaskLists+0x7c>)
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <prvInitialiseTaskLists+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000c4 	.word	0x200000c4
 8001d14:	20000128 	.word	0x20000128
 8001d18:	2000013c 	.word	0x2000013c
 8001d1c:	20000158 	.word	0x20000158
 8001d20:	2000016c 	.word	0x2000016c
 8001d24:	20000184 	.word	0x20000184
 8001d28:	20000150 	.word	0x20000150
 8001d2c:	20000154 	.word	0x20000154

08001d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d36:	e019      	b.n	8001d6c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001d38:	f000 fdac 	bl	8002894 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d3c:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <prvCheckTasksWaitingTermination+0x50>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc6f 	bl	800062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <prvCheckTasksWaitingTermination+0x54>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	4a0b      	ldr	r2, [pc, #44]	@ (8001d84 <prvCheckTasksWaitingTermination+0x54>)
 8001d56:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d60:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001d62:	f000 fdc9 	bl	80028f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f810 	bl	8001d8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <prvCheckTasksWaitingTermination+0x58>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e1      	bne.n	8001d38 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000016c 	.word	0x2000016c
 8001d84:	20000198 	.word	0x20000198
 8001d88:	20000180 	.word	0x20000180

08001d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 ff91 	bl	8002cc0 <vPortFree>
            vPortFree( pxTCB );
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 ff8e 	bl	8002cc0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <prvResetNextTaskUnblockTime+0x30>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d104      	bne.n	8001dc4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <prvResetNextTaskUnblockTime+0x34>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001dc2:	e005      	b.n	8001dd0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <prvResetNextTaskUnblockTime+0x30>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <prvResetNextTaskUnblockTime+0x34>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000150 	.word	0x20000150
 8001de0:	200001b8 	.word	0x200001b8

08001de4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <xTaskGetSchedulerState+0x34>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001df2:	2301      	movs	r3, #1
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e008      	b.n	8001e0a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <xTaskGetSchedulerState+0x38>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001e00:	2302      	movs	r3, #2
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	e001      	b.n	8001e0a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001e0a:	687b      	ldr	r3, [r7, #4]
    }
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	200001a4 	.word	0x200001a4
 8001e1c:	200001c0 	.word	0x200001c0

08001e20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8090 	beq.w	8001f58 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001e38:	4b4a      	ldr	r3, [pc, #296]	@ (8001f64 <xTaskPriorityDisinherit+0x144>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d00b      	beq.n	8001e5a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8001e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	613b      	str	r3, [r7, #16]
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	e7fd      	b.n	8001e56 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8001e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e66:	f383 8811 	msr	BASEPRI, r3
 8001e6a:	f3bf 8f6f 	isb	sy
 8001e6e:	f3bf 8f4f 	dsb	sy
 8001e72:	60fb      	str	r3, [r7, #12]
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	e7fd      	b.n	8001e76 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7e:	1e5a      	subs	r2, r3, #1
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d063      	beq.n	8001f58 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d15f      	bne.n	8001f58 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fbc5 	bl	800062c <uxListRemove>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10a      	bne.n	8001ebe <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	2201      	movs	r2, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001ebc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	f1c3 0205 	rsb	r2, r3, #5
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4a21      	ldr	r2, [pc, #132]	@ (8001f68 <xTaskPriorityDisinherit+0x148>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee8:	4920      	ldr	r1, [pc, #128]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	3204      	adds	r2, #4
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	1d1a      	adds	r2, r3, #4
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f28:	441a      	add	r2, r3
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f32:	490e      	ldr	r1, [pc, #56]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f44:	1c59      	adds	r1, r3, #1
 8001f46:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <xTaskPriorityDisinherit+0x14c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4403      	add	r3, r0
 8001f52:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8001f58:	69fb      	ldr	r3, [r7, #28]
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200000c0 	.word	0x200000c0
 8001f68:	200001a0 	.word	0x200001a0
 8001f6c:	200000c4 	.word	0x200000c4

08001f70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <prvAddCurrentTaskToDelayedList+0xec>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001f86:	4b36      	ldr	r3, [pc, #216]	@ (8002060 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f8c:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fb4a 	bl	800062c <uxListRemove>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001f9e:	4b31      	ldr	r3, [pc, #196]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001fb4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d124      	bne.n	8002008 <prvAddCurrentTaskToDelayedList+0x98>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	6892      	ldr	r2, [r2, #8]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	3204      	adds	r2, #4
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1d1a      	adds	r2, r3, #4
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3301      	adds	r3, #1
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002006:	e022      	b.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002010:	4b14      	ldr	r3, [pc, #80]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	4619      	mov	r1, r3
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7fe fac6 	bl	80005ba <vListInsert>
}
 800202e:	e00e      	b.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3304      	adds	r3, #4
 8002036:	4619      	mov	r1, r3
 8002038:	69b8      	ldr	r0, [r7, #24]
 800203a:	f7fe fabe 	bl	80005ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <prvAddCurrentTaskToDelayedList+0x100>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d202      	bcs.n	800204e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002048:	4a09      	ldr	r2, [pc, #36]	@ (8002070 <prvAddCurrentTaskToDelayedList+0x100>)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000019c 	.word	0x2000019c
 800205c:	20000150 	.word	0x20000150
 8002060:	20000154 	.word	0x20000154
 8002064:	200000c0 	.word	0x200000c0
 8002068:	200001a0 	.word	0x200001a0
 800206c:	20000184 	.word	0x20000184
 8002070:	200001b8 	.word	0x200001b8

08002074 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800207e:	f000 fa55 	bl	800252c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002082:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <xTimerCreateTimerTask+0x58>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <xTimerCreateTimerTask+0x5c>)
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	2302      	movs	r3, #2
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2300      	movs	r3, #0
 8002094:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002098:	490e      	ldr	r1, [pc, #56]	@ (80020d4 <xTimerCreateTimerTask+0x60>)
 800209a:	480f      	ldr	r0, [pc, #60]	@ (80020d8 <xTimerCreateTimerTask+0x64>)
 800209c:	f7fe ffa8 	bl	8000ff0 <xTaskCreate>
 80020a0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	603b      	str	r3, [r7, #0]
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80020c0:	687b      	ldr	r3, [r7, #4]
    }
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001f4 	.word	0x200001f4
 80020d0:	200001f8 	.word	0x200001f8
 80020d4:	08005c88 	.word	0x08005c88
 80020d8:	08002181 	.word	0x08002181

080020dc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020e8:	e008      	b.n	80020fc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	18d1      	adds	r1, r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f000 f8df 	bl	80022cc <prvInsertTimerInActiveList>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ea      	bne.n	80020ea <prvReloadTimer+0xe>
        }
    }
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <prvProcessExpiredTimer+0x5c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3304      	adds	r3, #4
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa77 	bl	800062c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ffc3 	bl	80020dc <prvReloadTimer>
 8002156:	e008      	b.n	800216a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	4798      	blx	r3
    }
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200001ec 	.word	0x200001ec

08002180 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002188:	f107 0308 	add.w	r3, r7, #8
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f859 	bl	8002244 <prvGetNextExpireTime>
 8002192:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4619      	mov	r1, r3
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f805 	bl	80021a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800219e:	f000 f8d7 	bl	8002350 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80021a2:	bf00      	nop
 80021a4:	e7f0      	b.n	8002188 <prvTimerTask+0x8>
	...

080021a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80021b2:	f7ff f8f7 	bl	80013a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f866 	bl	800228c <prvSampleTimeNow>
 80021c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d130      	bne.n	800222a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10a      	bne.n	80021e4 <prvProcessTimerOrBlockTask+0x3c>
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d806      	bhi.n	80021e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80021d6:	f7ff f8f3 	bl	80013c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff9f 	bl	8002120 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80021e2:	e024      	b.n	800222e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <prvProcessTimerOrBlockTask+0x90>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <prvProcessTimerOrBlockTask+0x50>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <prvProcessTimerOrBlockTask+0x52>
 80021f8:	2300      	movs	r3, #0
 80021fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <prvProcessTimerOrBlockTask+0x94>)
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fe81 	bl	8000f10 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800220e:	f7ff f8d7 	bl	80013c0 <xTaskResumeAll>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <prvProcessTimerOrBlockTask+0x98>)
 800221a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	f3bf 8f4f 	dsb	sy
 8002224:	f3bf 8f6f 	isb	sy
    }
 8002228:	e001      	b.n	800222e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800222a:	f7ff f8c9 	bl	80013c0 <xTaskResumeAll>
    }
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200001f0 	.word	0x200001f0
 800223c:	200001f4 	.word	0x200001f4
 8002240:	e000ed04 	.word	0xe000ed04

08002244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <prvGetNextExpireTime+0x44>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <prvGetNextExpireTime+0x16>
 8002256:	2201      	movs	r2, #1
 8002258:	e000      	b.n	800225c <prvGetNextExpireTime+0x18>
 800225a:	2200      	movs	r2, #0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002268:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <prvGetNextExpireTime+0x44>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e001      	b.n	8002278 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002278:	68fb      	ldr	r3, [r7, #12]
    }
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	200001ec 	.word	0x200001ec

0800228c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002294:	f7ff f99c 	bl	80015d0 <xTaskGetTickCount>
 8002298:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800229a:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <prvSampleTimeNow+0x3c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d205      	bcs.n	80022b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80022a4:	f000 f91c 	bl	80024e0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e002      	b.n	80022b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80022b6:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <prvSampleTimeNow+0x3c>)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80022bc:	68fb      	ldr	r3, [r7, #12]
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200001fc 	.word	0x200001fc

080022cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d812      	bhi.n	8002318 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002300:	2301      	movs	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e01b      	b.n	800233e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <prvInsertTimerInActiveList+0x7c>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3304      	adds	r3, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7fe f952 	bl	80005ba <vListInsert>
 8002316:	e012      	b.n	800233e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d206      	bcs.n	800232e <prvInsertTimerInActiveList+0x62>
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002328:	2301      	movs	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e007      	b.n	800233e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800232e:	4b07      	ldr	r3, [pc, #28]	@ (800234c <prvInsertTimerInActiveList+0x80>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3304      	adds	r3, #4
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f7fe f93e 	bl	80005ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 800233e:	697b      	ldr	r3, [r7, #20]
    }
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200001f0 	.word	0x200001f0
 800234c:	200001ec 	.word	0x200001ec

08002350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002362:	e0a9      	b.n	80024b8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f2c0 80a6 	blt.w	80024b8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3304      	adds	r3, #4
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f955 	bl	800062c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff81 	bl	800228c <prvSampleTimeNow>
 800238a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3b01      	subs	r3, #1
 8002390:	2b08      	cmp	r3, #8
 8002392:	f200 808e 	bhi.w	80024b2 <prvProcessReceivedCommands+0x162>
 8002396:	a201      	add	r2, pc, #4	@ (adr r2, 800239c <prvProcessReceivedCommands+0x4c>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023c1 	.word	0x080023c1
 80023a0:	080023c1 	.word	0x080023c1
 80023a4:	08002429 	.word	0x08002429
 80023a8:	0800243d 	.word	0x0800243d
 80023ac:	08002489 	.word	0x08002489
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023c1 	.word	0x080023c1
 80023b8:	08002429 	.word	0x08002429
 80023bc:	0800243d 	.word	0x0800243d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	18d1      	adds	r1, r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	69f8      	ldr	r0, [r7, #28]
 80023e0:	f7ff ff74 	bl	80022cc <prvInsertTimerInActiveList>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d065      	beq.n	80024b6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4413      	add	r3, r2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4619      	mov	r1, r3
 8002404:	69f8      	ldr	r0, [r7, #28]
 8002406:	f7ff fe69 	bl	80020dc <prvReloadTimer>
 800240a:	e008      	b.n	800241e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	b2da      	uxtb	r2, r3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	69f8      	ldr	r0, [r7, #28]
 8002424:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002426:	e046      	b.n	80024b6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800242e:	f023 0301 	bic.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800243a:	e03d      	b.n	80024b8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10b      	bne.n	8002474 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	617b      	str	r3, [r7, #20]
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	18d1      	adds	r1, r2, r3
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	69f8      	ldr	r0, [r7, #28]
 8002482:	f7ff ff23 	bl	80022cc <prvInsertTimerInActiveList>
                        break;
 8002486:	e017      	b.n	80024b8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002496:	69f8      	ldr	r0, [r7, #28]
 8002498:	f000 fc12 	bl	8002cc0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800249c:	e00c      	b.n	80024b8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80024b0:	e002      	b.n	80024b8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <prvProcessReceivedCommands+0x168>
                        break;
 80024b6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <prvProcessReceivedCommands+0x18c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f107 0108 	add.w	r1, r7, #8
 80024c0:	2200      	movs	r2, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fae2 	bl	8000a8c <xQueueReceive>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f af4a 	bne.w	8002364 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200001f4 	.word	0x200001f4

080024e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024e6:	e009      	b.n	80024fc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <prvSwitchTimerLists+0x44>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80024f2:	f04f 31ff 	mov.w	r1, #4294967295
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f7ff fe12 	bl	8002120 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <prvSwitchTimerLists+0x44>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <prvSwitchTimerLists+0x44>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <prvSwitchTimerLists+0x48>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <prvSwitchTimerLists+0x44>)
 8002512:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <prvSwitchTimerLists+0x48>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
    }
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200001ec 	.word	0x200001ec
 8002528:	200001f0 	.word	0x200001f0

0800252c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002530:	f000 f9b0 	bl	8002894 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <prvCheckForValidListAndQueue+0x54>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11d      	bne.n	8002578 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800253c:	4811      	ldr	r0, [pc, #68]	@ (8002584 <prvCheckForValidListAndQueue+0x58>)
 800253e:	f7fe f80f 	bl	8000560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002542:	4811      	ldr	r0, [pc, #68]	@ (8002588 <prvCheckForValidListAndQueue+0x5c>)
 8002544:	f7fe f80c 	bl	8000560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002548:	4b10      	ldr	r3, [pc, #64]	@ (800258c <prvCheckForValidListAndQueue+0x60>)
 800254a:	4a0e      	ldr	r2, [pc, #56]	@ (8002584 <prvCheckForValidListAndQueue+0x58>)
 800254c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <prvCheckForValidListAndQueue+0x64>)
 8002550:	4a0d      	ldr	r2, [pc, #52]	@ (8002588 <prvCheckForValidListAndQueue+0x5c>)
 8002552:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002554:	2200      	movs	r2, #0
 8002556:	210c      	movs	r1, #12
 8002558:	200a      	movs	r0, #10
 800255a:	f7fe f923 	bl	80007a4 <xQueueGenericCreate>
 800255e:	4603      	mov	r3, r0
 8002560:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <prvCheckForValidListAndQueue+0x54>)
 8002562:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <prvCheckForValidListAndQueue+0x54>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <prvCheckForValidListAndQueue+0x54>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4908      	ldr	r1, [pc, #32]	@ (8002594 <prvCheckForValidListAndQueue+0x68>)
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fc7c 	bl	8000e70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002578:	f000 f9be 	bl	80028f8 <vPortExitCritical>
    }
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200001f4 	.word	0x200001f4
 8002584:	200001c4 	.word	0x200001c4
 8002588:	200001d8 	.word	0x200001d8
 800258c:	200001ec 	.word	0x200001ec
 8002590:	200001f0 	.word	0x200001f0
 8002594:	08005c90 	.word	0x08005c90

08002598 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	3b04      	subs	r3, #4
 80025a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f023 0201 	bic.w	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3b04      	subs	r3, #4
 80025c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80025c8:	4a0c      	ldr	r2, [pc, #48]	@ (80025fc <pxPortInitialiseStack+0x64>)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3b14      	subs	r3, #20
 80025d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3b04      	subs	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f06f 0202 	mvn.w	r2, #2
 80025e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3b20      	subs	r3, #32
 80025ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	08002601 	.word	0x08002601

08002600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <prvTaskExitError+0x58>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d00b      	beq.n	800262c <prvTaskExitError+0x2c>
    __asm volatile
 8002614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002618:	f383 8811 	msr	BASEPRI, r3
 800261c:	f3bf 8f6f 	isb	sy
 8002620:	f3bf 8f4f 	dsb	sy
 8002624:	60fb      	str	r3, [r7, #12]
}
 8002626:	bf00      	nop
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <prvTaskExitError+0x28>
    __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	60bb      	str	r3, [r7, #8]
}
 800263e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002640:	bf00      	nop
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0fc      	beq.n	8002642 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000004 	.word	0x20000004
 800265c:	00000000 	.word	0x00000000

08002660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002660:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <pxCurrentTCBConst2>)
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	6808      	ldr	r0, [r1, #0]
 8002666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266a:	f380 8809 	msr	PSP, r0
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f380 8811 	msr	BASEPRI, r0
 800267a:	4770      	bx	lr
 800267c:	f3af 8000 	nop.w

08002680 <pxCurrentTCBConst2>:
 8002680:	200000c0 	.word	0x200000c0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop

08002688 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002688:	4808      	ldr	r0, [pc, #32]	@ (80026ac <prvPortStartFirstTask+0x24>)
 800268a:	6800      	ldr	r0, [r0, #0]
 800268c:	6800      	ldr	r0, [r0, #0]
 800268e:	f380 8808 	msr	MSP, r0
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f380 8814 	msr	CONTROL, r0
 800269a:	b662      	cpsie	i
 800269c:	b661      	cpsie	f
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	df00      	svc	0
 80026a8:	bf00      	nop
 80026aa:	0000      	.short	0x0000
 80026ac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop

080026b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	@ 0x30
 80026b8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80026ba:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <xPortStartScheduler+0x1ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a69      	ldr	r2, [pc, #420]	@ (8002864 <xPortStartScheduler+0x1b0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d10b      	bne.n	80026dc <xPortStartScheduler+0x28>
    __asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80026dc:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <xPortStartScheduler+0x1ac>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a61      	ldr	r2, [pc, #388]	@ (8002868 <xPortStartScheduler+0x1b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10b      	bne.n	80026fe <xPortStartScheduler+0x4a>
    __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	623b      	str	r3, [r7, #32]
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	e7fd      	b.n	80026fa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80026fe:	4b5b      	ldr	r3, [pc, #364]	@ (800286c <xPortStartScheduler+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002706:	332c      	adds	r3, #44	@ 0x2c
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a59      	ldr	r2, [pc, #356]	@ (8002870 <xPortStartScheduler+0x1bc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00b      	beq.n	8002728 <xPortStartScheduler+0x74>
    __asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61fb      	str	r3, [r7, #28]
}
 8002722:	bf00      	nop
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272a:	3338      	adds	r3, #56	@ 0x38
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a51      	ldr	r2, [pc, #324]	@ (8002874 <xPortStartScheduler+0x1c0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00b      	beq.n	800274c <xPortStartScheduler+0x98>
    __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	61bb      	str	r3, [r7, #24]
}
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002750:	4b49      	ldr	r3, [pc, #292]	@ (8002878 <xPortStartScheduler+0x1c4>)
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	22ff      	movs	r2, #255	@ 0xff
 8002760:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	b2db      	uxtb	r3, r3
 8002768:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b41      	ldr	r3, [pc, #260]	@ (800287c <xPortStartScheduler+0x1c8>)
 8002776:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002778:	4b40      	ldr	r3, [pc, #256]	@ (800287c <xPortStartScheduler+0x1c8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <xPortStartScheduler+0xe4>
    __asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	617b      	str	r3, [r7, #20]
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d013      	beq.n	80027ce <xPortStartScheduler+0x11a>
    __asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	613b      	str	r3, [r7, #16]
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	e7fd      	b.n	80027ba <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3301      	adds	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	2b80      	cmp	r3, #128	@ 0x80
 80027d8:	d0f1      	beq.n	80027be <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d103      	bne.n	80027e8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80027e0:	4b27      	ldr	r3, [pc, #156]	@ (8002880 <xPortStartScheduler+0x1cc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	e004      	b.n	80027f2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	4a24      	ldr	r2, [pc, #144]	@ (8002880 <xPortStartScheduler+0x1cc>)
 80027f0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80027f2:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <xPortStartScheduler+0x1cc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <xPortStartScheduler+0x1cc>)
 80027fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80027fc:	4b20      	ldr	r3, [pc, #128]	@ (8002880 <xPortStartScheduler+0x1cc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002804:	4a1e      	ldr	r2, [pc, #120]	@ (8002880 <xPortStartScheduler+0x1cc>)
 8002806:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002810:	4b1c      	ldr	r3, [pc, #112]	@ (8002884 <xPortStartScheduler+0x1d0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1b      	ldr	r2, [pc, #108]	@ (8002884 <xPortStartScheduler+0x1d0>)
 8002816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800281a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800281c:	4b19      	ldr	r3, [pc, #100]	@ (8002884 <xPortStartScheduler+0x1d0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <xPortStartScheduler+0x1d0>)
 8002822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002826:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <xPortStartScheduler+0x1d4>)
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800282e:	f000 f8e5 	bl	80029fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <xPortStartScheduler+0x1d8>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002838:	f000 f904 	bl	8002a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <xPortStartScheduler+0x1dc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <xPortStartScheduler+0x1dc>)
 8002842:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002848:	f7ff ff1e 	bl	8002688 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800284c:	f7fe ffea 	bl	8001824 <vTaskSwitchContext>
    prvTaskExitError();
 8002850:	f7ff fed6 	bl	8002600 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3730      	adds	r7, #48	@ 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00
 8002864:	410fc271 	.word	0x410fc271
 8002868:	410fc270 	.word	0x410fc270
 800286c:	e000ed08 	.word	0xe000ed08
 8002870:	08002661 	.word	0x08002661
 8002874:	08002951 	.word	0x08002951
 8002878:	e000e400 	.word	0xe000e400
 800287c:	20000200 	.word	0x20000200
 8002880:	20000204 	.word	0x20000204
 8002884:	e000ed20 	.word	0xe000ed20
 8002888:	e000ed1c 	.word	0xe000ed1c
 800288c:	20000004 	.word	0x20000004
 8002890:	e000ef34 	.word	0xe000ef34

08002894 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
    __asm volatile
 800289a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	607b      	str	r3, [r7, #4]
}
 80028ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <vPortEnterCritical+0x5c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a0e      	ldr	r2, [pc, #56]	@ (80028f0 <vPortEnterCritical+0x5c>)
 80028b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80028b8:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <vPortEnterCritical+0x5c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d110      	bne.n	80028e2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028c0:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <vPortEnterCritical+0x60>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <vPortEnterCritical+0x4e>
    __asm volatile
 80028ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ce:	f383 8811 	msr	BASEPRI, r3
 80028d2:	f3bf 8f6f 	isb	sy
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	603b      	str	r3, [r7, #0]
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	e7fd      	b.n	80028de <vPortEnterCritical+0x4a>
    }
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000004 	.word	0x20000004
 80028f4:	e000ed04 	.word	0xe000ed04

080028f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80028fe:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <vPortExitCritical+0x50>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10b      	bne.n	800291e <vPortExitCritical+0x26>
    __asm volatile
 8002906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800290a:	f383 8811 	msr	BASEPRI, r3
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	607b      	str	r3, [r7, #4]
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	e7fd      	b.n	800291a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800291e:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <vPortExitCritical+0x50>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3b01      	subs	r3, #1
 8002924:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <vPortExitCritical+0x50>)
 8002926:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002928:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <vPortExitCritical+0x50>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <vPortExitCritical+0x44>
 8002930:	2300      	movs	r3, #0
 8002932:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800293a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	20000004 	.word	0x20000004
 800294c:	00000000 	.word	0x00000000

08002950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002950:	f3ef 8009 	mrs	r0, PSP
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <pxCurrentTCBConst>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	f01e 0f10 	tst.w	lr, #16
 8002960:	bf08      	it	eq
 8002962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800296a:	6010      	str	r0, [r2, #0]
 800296c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002974:	f380 8811 	msr	BASEPRI, r0
 8002978:	f3bf 8f4f 	dsb	sy
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f7fe ff50 	bl	8001824 <vTaskSwitchContext>
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f380 8811 	msr	BASEPRI, r0
 800298c:	bc09      	pop	{r0, r3}
 800298e:	6819      	ldr	r1, [r3, #0]
 8002990:	6808      	ldr	r0, [r1, #0]
 8002992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002996:	f01e 0f10 	tst.w	lr, #16
 800299a:	bf08      	it	eq
 800299c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029a0:	f380 8809 	msr	PSP, r0
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	f3af 8000 	nop.w

080029b0 <pxCurrentTCBConst>:
 80029b0:	200000c0 	.word	0x200000c0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
    __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	607b      	str	r3, [r7, #4]
}
 80029d0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80029d2:	f7fe fe0d 	bl	80015f0 <xTaskIncrementTick>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <SysTick_Handler+0x40>)
 80029de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	f383 8811 	msr	BASEPRI, r3
}
 80029ee:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <vPortSetupTimerInterrupt+0x38>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <vPortSetupTimerInterrupt+0x3c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	@ (8002a3c <vPortSetupTimerInterrupt+0x40>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	4a09      	ldr	r2, [pc, #36]	@ (8002a40 <vPortSetupTimerInterrupt+0x44>)
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a1e:	4b04      	ldr	r3, [pc, #16]	@ (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010
 8002a34:	e000e018 	.word	0xe000e018
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	10624dd3 	.word	0x10624dd3
 8002a40:	e000e014 	.word	0xe000e014

08002a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002a54 <vPortEnableVFP+0x10>
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002a4e:	6001      	str	r1, [r0, #0]
 8002a50:	4770      	bx	lr
 8002a52:	0000      	.short	0x0000
 8002a54:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop

08002a5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	@ 0x38
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d022      	beq.n	8002ab4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002a6e:	2308      	movs	r3, #8
 8002a70:	43db      	mvns	r3, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d81b      	bhi.n	8002ab0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002a78:	2208      	movs	r2, #8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d014      	beq.n	8002ab4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	f1c3 0308 	rsb	r3, r3, #8
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d804      	bhi.n	8002aaa <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	4413      	add	r3, r2
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	e004      	b.n	8002ab4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	e001      	b.n	8002ab4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002ab4:	f7fe fc76 	bl	80013a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002ab8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca4 <pvPortMalloc+0x248>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002ac0:	f000 f978 	bl	8002db4 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f2c0 80d3 	blt.w	8002c72 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80cf 	beq.w	8002c72 <pvPortMalloc+0x216>
 8002ad4:	4b74      	ldr	r3, [pc, #464]	@ (8002ca8 <pvPortMalloc+0x24c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f200 80c9 	bhi.w	8002c72 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ae0:	4b72      	ldr	r3, [pc, #456]	@ (8002cac <pvPortMalloc+0x250>)
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002ae4:	4b71      	ldr	r3, [pc, #452]	@ (8002cac <pvPortMalloc+0x250>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aec:	4a70      	ldr	r2, [pc, #448]	@ (8002cb0 <pvPortMalloc+0x254>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d305      	bcc.n	8002afe <pvPortMalloc+0xa2>
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	4a6f      	ldr	r2, [pc, #444]	@ (8002cb4 <pvPortMalloc+0x258>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d801      	bhi.n	8002afe <pvPortMalloc+0xa2>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <pvPortMalloc+0xa4>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d129      	bne.n	8002b58 <pvPortMalloc+0xfc>
    __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	623b      	str	r3, [r7, #32]
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b28:	4a61      	ldr	r2, [pc, #388]	@ (8002cb0 <pvPortMalloc+0x254>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d305      	bcc.n	8002b3a <pvPortMalloc+0xde>
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	4a60      	ldr	r2, [pc, #384]	@ (8002cb4 <pvPortMalloc+0x258>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d801      	bhi.n	8002b3a <pvPortMalloc+0xde>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <pvPortMalloc+0xe0>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <pvPortMalloc+0xfc>
    __asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61fb      	str	r3, [r7, #28]
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d903      	bls.n	8002b6a <pvPortMalloc+0x10e>
 8002b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d8      	bne.n	8002b1c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca4 <pvPortMalloc+0x248>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d07e      	beq.n	8002c72 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	4413      	add	r3, r2
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b80:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb0 <pvPortMalloc+0x254>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d305      	bcc.n	8002b92 <pvPortMalloc+0x136>
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb4 <pvPortMalloc+0x258>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d801      	bhi.n	8002b92 <pvPortMalloc+0x136>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <pvPortMalloc+0x138>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <pvPortMalloc+0x154>
    __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	61bb      	str	r3, [r7, #24]
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d90b      	bls.n	8002bda <pvPortMalloc+0x17e>
    __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	617b      	str	r3, [r7, #20]
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	e7fd      	b.n	8002bd6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	2308      	movs	r3, #8
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d924      	bls.n	8002c34 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002bea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <pvPortMalloc+0x1b8>
    __asm volatile
 8002bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	613b      	str	r3, [r7, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c32:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ca8 <pvPortMalloc+0x24c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca8 <pvPortMalloc+0x24c>)
 8002c40:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c42:	4b19      	ldr	r3, [pc, #100]	@ (8002ca8 <pvPortMalloc+0x24c>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb8 <pvPortMalloc+0x25c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d203      	bcs.n	8002c56 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <pvPortMalloc+0x24c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a19      	ldr	r2, [pc, #100]	@ (8002cb8 <pvPortMalloc+0x25c>)
 8002c54:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c68:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <pvPortMalloc+0x260>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <pvPortMalloc+0x260>)
 8002c70:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c72:	f7fe fba5 	bl	80013c0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <pvPortMalloc+0x23c>
    __asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	60fb      	str	r3, [r7, #12]
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <pvPortMalloc+0x238>
    return pvReturn;
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3738      	adds	r7, #56	@ 0x38
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20012e10 	.word	0x20012e10
 8002ca8:	20012e14 	.word	0x20012e14
 8002cac:	20012e08 	.word	0x20012e08
 8002cb0:	20000208 	.word	0x20000208
 8002cb4:	20012e07 	.word	0x20012e07
 8002cb8:	20012e18 	.word	0x20012e18
 8002cbc:	20012e1c 	.word	0x20012e1c

08002cc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d064      	beq.n	8002d9c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4a30      	ldr	r2, [pc, #192]	@ (8002da4 <vPortFree+0xe4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d305      	bcc.n	8002cf4 <vPortFree+0x34>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4a2f      	ldr	r2, [pc, #188]	@ (8002da8 <vPortFree+0xe8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d801      	bhi.n	8002cf4 <vPortFree+0x34>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <vPortFree+0x36>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <vPortFree+0x52>
    __asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	617b      	str	r3, [r7, #20]
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <vPortFree+0x72>
    __asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	613b      	str	r3, [r7, #16]
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	e7fd      	b.n	8002d2e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <vPortFree+0x92>
    __asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	60fb      	str	r3, [r7, #12]
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0fdb      	lsrs	r3, r3, #31
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01c      	beq.n	8002d9c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d118      	bne.n	8002d9c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002d76:	f7fe fb15 	bl	80013a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dac <vPortFree+0xec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <vPortFree+0xec>)
 8002d86:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d88:	69b8      	ldr	r0, [r7, #24]
 8002d8a:	f000 f86d 	bl	8002e68 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <vPortFree+0xf0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	4a06      	ldr	r2, [pc, #24]	@ (8002db0 <vPortFree+0xf0>)
 8002d96:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002d98:	f7fe fb12 	bl	80013c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000208 	.word	0x20000208
 8002da8:	20012e07 	.word	0x20012e07
 8002dac:	20012e14 	.word	0x20012e14
 8002db0:	20012e20 	.word	0x20012e20

08002db4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002dba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002dbe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <prvHeapInit+0xa0>)
 8002dc2:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3307      	adds	r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0307 	bic.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e54 <prvHeapInit+0xa0>)
 8002de4:	4413      	add	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <prvHeapInit+0xa4>)
 8002dec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <prvHeapInit+0xa4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4413      	add	r3, r2
 8002dfa:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <prvHeapInit+0xa8>)
 8002e10:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002e12:	4b12      	ldr	r3, [pc, #72]	@ (8002e5c <prvHeapInit+0xa8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002e1a:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <prvHeapInit+0xa8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <prvHeapInit+0xa8>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a08      	ldr	r2, [pc, #32]	@ (8002e60 <prvHeapInit+0xac>)
 8002e3e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a07      	ldr	r2, [pc, #28]	@ (8002e64 <prvHeapInit+0xb0>)
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000208 	.word	0x20000208
 8002e58:	20012e08 	.word	0x20012e08
 8002e5c:	20012e10 	.word	0x20012e10
 8002e60:	20012e18 	.word	0x20012e18
 8002e64:	20012e14 	.word	0x20012e14

08002e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <prvInsertBlockIntoFreeList+0xe4>)
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	e002      	b.n	8002e7c <prvInsertBlockIntoFreeList+0x14>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d8f7      	bhi.n	8002e76 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	4a30      	ldr	r2, [pc, #192]	@ (8002f4c <prvInsertBlockIntoFreeList+0xe4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	4a2f      	ldr	r2, [pc, #188]	@ (8002f50 <prvInsertBlockIntoFreeList+0xe8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d305      	bcc.n	8002ea2 <prvInsertBlockIntoFreeList+0x3a>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a2e      	ldr	r2, [pc, #184]	@ (8002f54 <prvInsertBlockIntoFreeList+0xec>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d801      	bhi.n	8002ea2 <prvInsertBlockIntoFreeList+0x3a>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <prvInsertBlockIntoFreeList+0x3c>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	60fb      	str	r3, [r7, #12]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d108      	bne.n	8002ee4 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	441a      	add	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	441a      	add	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d118      	bne.n	8002f2a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <prvInsertBlockIntoFreeList+0xf0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d00d      	beq.n	8002f20 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	441a      	add	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	e008      	b.n	8002f32 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <prvInsertBlockIntoFreeList+0xf0>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e003      	b.n	8002f32 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d002      	beq.n	8002f40 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20012e08 	.word	0x20012e08
 8002f50:	20000208 	.word	0x20000208
 8002f54:	20012e07 	.word	0x20012e07
 8002f58:	20012e10 	.word	0x20012e10

08002f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f62:	f000 fb7b 	bl	800365c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f66:	f000 f831 	bl	8002fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f6a:	f000 f8c3 	bl	80030f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002f6e:	f000 f897 	bl	80030a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* create a queue that can hold a maximum of 5 pointers, in this case
   character pointers (i.e. 5 strings) */
  xQueueOfPointers = xQueueCreate( 5, sizeof ( char * ) );
 8002f72:	2200      	movs	r2, #0
 8002f74:	2104      	movs	r1, #4
 8002f76:	2005      	movs	r0, #5
 8002f78:	f7fd fc14 	bl	80007a4 <xQueueGenericCreate>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb8 <main+0x5c>)
 8002f80:	6013      	str	r3, [r2, #0]

  /* Create the task that will write to the queue.
     The task is created with priority 1, so below the priority of the receiver task */
  xTaskCreate( vStringSendingTask, "Sending Task", 1000, NULL, 1, NULL );
 8002f82:	2300      	movs	r3, #0
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	2301      	movs	r3, #1
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f90:	490a      	ldr	r1, [pc, #40]	@ (8002fbc <main+0x60>)
 8002f92:	480b      	ldr	r0, [pc, #44]	@ (8002fc0 <main+0x64>)
 8002f94:	f7fe f82c 	bl	8000ff0 <xTaskCreate>

  /* Create the task that will read from the queue.
     The task is created with priority 2, so above the priority of the sender task */
  xTaskCreate( vStringReceivingTask, "Receiving Task", 1000, NULL, 2, NULL );
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fa6:	4907      	ldr	r1, [pc, #28]	@ (8002fc4 <main+0x68>)
 8002fa8:	4807      	ldr	r0, [pc, #28]	@ (8002fc8 <main+0x6c>)
 8002faa:	f7fe f821 	bl	8000ff0 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 8002fae:	f7fe f9b5 	bl	800131c <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <main+0x56>
 8002fb6:	bf00      	nop
 8002fb8:	20012e6c 	.word	0x20012e6c
 8002fbc:	08005c98 	.word	0x08005c98
 8002fc0:	08003255 	.word	0x08003255
 8002fc4:	08005ca8 	.word	0x08005ca8
 8002fc8:	080032cd 	.word	0x080032cd

08002fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b094      	sub	sp, #80	@ 0x50
 8002fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd2:	f107 0320 	add.w	r3, r7, #32
 8002fd6:	2230      	movs	r2, #48	@ 0x30
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f002 f9c4 	bl	8005368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <SystemClock_Config+0xcc>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <SystemClock_Config+0xcc>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003000:	4b25      	ldr	r3, [pc, #148]	@ (8003098 <SystemClock_Config+0xcc>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	4b22      	ldr	r3, [pc, #136]	@ (800309c <SystemClock_Config+0xd0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a21      	ldr	r2, [pc, #132]	@ (800309c <SystemClock_Config+0xd0>)
 8003016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b1f      	ldr	r3, [pc, #124]	@ (800309c <SystemClock_Config+0xd0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003024:	607b      	str	r3, [r7, #4]
 8003026:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800302c:	2301      	movs	r3, #1
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003030:	2310      	movs	r3, #16
 8003032:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003034:	2302      	movs	r3, #2
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003038:	2300      	movs	r3, #0
 800303a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800303c:	2308      	movs	r3, #8
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003040:	2332      	movs	r3, #50	@ 0x32
 8003042:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003044:	2304      	movs	r3, #4
 8003046:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003048:	2307      	movs	r3, #7
 800304a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800304c:	f107 0320 	add.w	r3, r7, #32
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fddd 	bl	8003c10 <HAL_RCC_OscConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800305c:	f000 f974 	bl	8003348 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003060:	230f      	movs	r3, #15
 8003062:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003064:	2302      	movs	r3, #2
 8003066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800306c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003072:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f83e 	bl	8004100 <HAL_RCC_ClockConfig>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800308a:	f000 f95d 	bl	8003348 <Error_Handler>
  }
}
 800308e:	bf00      	nop
 8003090:	3750      	adds	r7, #80	@ 0x50
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000

080030a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	@ (80030f0 <MX_USART2_UART_Init+0x50>)
 80030a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030be:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030c4:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030c6:	220c      	movs	r2, #12
 80030c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ca:	4b08      	ldr	r3, [pc, #32]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d0:	4b06      	ldr	r3, [pc, #24]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030d6:	4805      	ldr	r0, [pc, #20]	@ (80030ec <MX_USART2_UART_Init+0x4c>)
 80030d8:	f001 fd06 	bl	8004ae8 <HAL_UART_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030e2:	f000 f931 	bl	8003348 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20012e24 	.word	0x20012e24
 80030f0:	40004400 	.word	0x40004400

080030f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	@ 0x28
 80030f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a3b      	ldr	r2, [pc, #236]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b39      	ldr	r3, [pc, #228]	@ (8003200 <MX_GPIO_Init+0x10c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b35      	ldr	r3, [pc, #212]	@ (8003200 <MX_GPIO_Init+0x10c>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a34      	ldr	r2, [pc, #208]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b32      	ldr	r3, [pc, #200]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	4b2e      	ldr	r3, [pc, #184]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	4a2d      	ldr	r2, [pc, #180]	@ (8003200 <MX_GPIO_Init+0x10c>)
 800314c:	f043 0308 	orr.w	r3, r3, #8
 8003150:	6313      	str	r3, [r2, #48]	@ 0x30
 8003152:	4b2b      	ldr	r3, [pc, #172]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f003 0308 	and.w	r3, r3, #8
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	4b27      	ldr	r3, [pc, #156]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b24      	ldr	r3, [pc, #144]	@ (8003200 <MX_GPIO_Init+0x10c>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800317a:	2200      	movs	r2, #0
 800317c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003180:	4820      	ldr	r0, [pc, #128]	@ (8003204 <MX_GPIO_Init+0x110>)
 8003182:	f000 fd2b 	bl	8003bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003186:	2301      	movs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800318a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800318e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	481b      	ldr	r0, [pc, #108]	@ (8003208 <MX_GPIO_Init+0x114>)
 800319c:	f000 fb82 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80031a0:	2304      	movs	r3, #4
 80031a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4816      	ldr	r0, [pc, #88]	@ (800320c <MX_GPIO_Init+0x118>)
 80031b4:	f000 fb76 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80031b8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80031bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480c      	ldr	r0, [pc, #48]	@ (8003204 <MX_GPIO_Init+0x110>)
 80031d2:	f000 fb67 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031e6:	2306      	movs	r3, #6
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	4807      	ldr	r0, [pc, #28]	@ (8003210 <MX_GPIO_Init+0x11c>)
 80031f2:	f000 fb57 	bl	80038a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031f6:	bf00      	nop
 80031f8:	3728      	adds	r7, #40	@ 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40020c00 	.word	0x40020c00
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800

08003214 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
 8003222:	e00b      	b.n	800323c <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	18d1      	adds	r1, r2, r3
 800322a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800322e:	2201      	movs	r2, #1
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f001 fca9 	bl	8004b88 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	3301      	adds	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ed      	bne.n	8003224 <UART2_Print_Text+0x10>
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <vStringSendingTask>:

/* a task that obtains a buffer, writes a string to the buffer, then
   sends the address of the buffer to the globally created queue of pointers */
static void vStringSendingTask( void *pvParameters )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  /* declare the variable that will hold the status of xQueueSendToBack() */
  BaseType_t xStatus;

  /* declare the variable that contains the maximum amount of characters the string can hold */
  const size_t xMaxStringLength = 50;
 800325c:	2332      	movs	r3, #50	@ 0x32
 800325e:	613b      	str	r3, [r7, #16]

  /* declare the string counter, used to indicate the string number that was sent */
  uint8_t xStringNumber = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* obtain (dynamically) a buffer that is at least xMaxStringLength (50) characters big */
    pcStringToSend = ( char * ) pvPortMalloc( xMaxStringLength );
 8003264:	6938      	ldr	r0, [r7, #16]
 8003266:	f7ff fbf9 	bl	8002a5c <pvPortMalloc>
 800326a:	4603      	mov	r3, r0
 800326c:	60bb      	str	r3, [r7, #8]

    /* write a string into the buffer */
    ( void ) snprintf( pcStringToSend, xMaxStringLength, "String number = %d\n\r", xStringNumber );
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	4a11      	ldr	r2, [pc, #68]	@ (80032b8 <vStringSendingTask+0x64>)
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	f002 f843 	bl	8005300 <sniprintf>

    /* increment the counter so the string is different on each iteration of this task */
    xStringNumber++;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	3301      	adds	r3, #1
 800327e:	75fb      	strb	r3, [r7, #23]
       The third parameter is the Block time - the maximum amount of time
       the task should be kept in the Blocked state to wait for space to become available on
       the queue if it is already full.
       In this case the block time will cause the task to wait indefinitely since portMAX_DELAY
       is used and INCLUDE_vTaskSuspend is set to 1 */
    xStatus = xQueueSendToBack( xQueueOfPointers, &pcStringToSend, portMAX_DELAY );
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <vStringSendingTask+0x68>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f107 0108 	add.w	r1, r7, #8
 8003288:	2300      	movs	r3, #0
 800328a:	f04f 32ff 	mov.w	r2, #4294967295
 800328e:	f7fd fafb 	bl	8000888 <xQueueGenericSend>
 8003292:	60f8      	str	r0, [r7, #12]

    if ( xStatus == pdPASS )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d109      	bne.n	80032ae <vStringSendingTask+0x5a>
    {
      /* data (pointer) was successfully sent to the queue,
         print out the string it points to */
      UART2_Print_Text( &huart2, "Sent:     " );
 800329a:	4909      	ldr	r1, [pc, #36]	@ (80032c0 <vStringSendingTask+0x6c>)
 800329c:	4809      	ldr	r0, [pc, #36]	@ (80032c4 <vStringSendingTask+0x70>)
 800329e:	f7ff ffb9 	bl	8003214 <UART2_Print_Text>
      UART2_Print_Text( &huart2, ( const char * ) pcStringToSend );
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4619      	mov	r1, r3
 80032a6:	4807      	ldr	r0, [pc, #28]	@ (80032c4 <vStringSendingTask+0x70>)
 80032a8:	f7ff ffb4 	bl	8003214 <UART2_Print_Text>
 80032ac:	e7da      	b.n	8003264 <vStringSendingTask+0x10>
    }
    else
    {
      /* data (pointer) could not be sent to the queue,
         print error message */
      UART2_Print_Text( &huart2, "Write to queue error!\n\r" );
 80032ae:	4906      	ldr	r1, [pc, #24]	@ (80032c8 <vStringSendingTask+0x74>)
 80032b0:	4804      	ldr	r0, [pc, #16]	@ (80032c4 <vStringSendingTask+0x70>)
 80032b2:	f7ff ffaf 	bl	8003214 <UART2_Print_Text>
    pcStringToSend = ( char * ) pvPortMalloc( xMaxStringLength );
 80032b6:	e7d5      	b.n	8003264 <vStringSendingTask+0x10>
 80032b8:	08005cb8 	.word	0x08005cb8
 80032bc:	20012e6c 	.word	0x20012e6c
 80032c0:	08005cd0 	.word	0x08005cd0
 80032c4:	20012e24 	.word	0x20012e24
 80032c8:	08005cdc 	.word	0x08005cdc

080032cc <vStringReceivingTask>:
}

/* A task that receives the address of a buffer from the globally created queue.
   The buffer contains a string, which is printed out */
static void vStringReceivingTask( void *pvParameters )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
       that the task should be kept in the Blocked state to wait for data to
       be available if it is already empty.
       
       In this case the block time will cause the task to wait indefinitely since portMAX_DELAY
       is used and INCLUDE_vTaskSuspend is set to 1 */
    xStatus = xQueueReceive( xQueueOfPointers, &pcReceivedString, portMAX_DELAY );
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <vStringReceivingTask+0x48>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f107 0108 	add.w	r1, r7, #8
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fbd3 	bl	8000a8c <xQueueReceive>
 80032e6:	60f8      	str	r0, [r7, #12]

    if ( xStatus == pdPASS )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d10d      	bne.n	800330a <vStringReceivingTask+0x3e>
    {
      /* data (pointer) was successfully received from the queue,
         print out the string it points to */
      UART2_Print_Text( &huart2, "Received: " );
 80032ee:	490a      	ldr	r1, [pc, #40]	@ (8003318 <vStringReceivingTask+0x4c>)
 80032f0:	480a      	ldr	r0, [pc, #40]	@ (800331c <vStringReceivingTask+0x50>)
 80032f2:	f7ff ff8f 	bl	8003214 <UART2_Print_Text>
      UART2_Print_Text( &huart2, ( const char * ) pcReceivedString );
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	4619      	mov	r1, r3
 80032fa:	4808      	ldr	r0, [pc, #32]	@ (800331c <vStringReceivingTask+0x50>)
 80032fc:	f7ff ff8a 	bl	8003214 <UART2_Print_Text>

      vPortFree( pcReceivedString );
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fcdc 	bl	8002cc0 <vPortFree>
 8003308:	e7e4      	b.n	80032d4 <vStringReceivingTask+0x8>
    else
    {
      /* Data was not received from the queue even after waiting indefinitely.
        This must be an error as the sending task is free running and will
        be continuously writing to the queue */
      UART2_Print_Text( &huart2, "Could not receive from the queue\n\r" );
 800330a:	4905      	ldr	r1, [pc, #20]	@ (8003320 <vStringReceivingTask+0x54>)
 800330c:	4803      	ldr	r0, [pc, #12]	@ (800331c <vStringReceivingTask+0x50>)
 800330e:	f7ff ff81 	bl	8003214 <UART2_Print_Text>
    xStatus = xQueueReceive( xQueueOfPointers, &pcReceivedString, portMAX_DELAY );
 8003312:	e7df      	b.n	80032d4 <vStringReceivingTask+0x8>
 8003314:	20012e6c 	.word	0x20012e6c
 8003318:	08005cf4 	.word	0x08005cf4
 800331c:	20012e24 	.word	0x20012e24
 8003320:	08005d00 	.word	0x08005d00

08003324 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003336:	f000 f9b3 	bl	80036a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40001000 	.word	0x40001000

08003348 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800334c:	b672      	cpsid	i
}
 800334e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <Error_Handler+0x8>

08003354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <HAL_MspInit+0x4c>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003362:	4a0f      	ldr	r2, [pc, #60]	@ (80033a0 <HAL_MspInit+0x4c>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003368:	6453      	str	r3, [r2, #68]	@ 0x44
 800336a:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <HAL_MspInit+0x4c>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003372:	607b      	str	r3, [r7, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <HAL_MspInit+0x4c>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	4a08      	ldr	r2, [pc, #32]	@ (80033a0 <HAL_MspInit+0x4c>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003384:	6413      	str	r3, [r2, #64]	@ 0x40
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_MspInit+0x4c>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <HAL_UART_MspInit+0x84>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12b      	bne.n	800341e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a17      	ldr	r2, [pc, #92]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a10      	ldr	r2, [pc, #64]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033fe:	230c      	movs	r3, #12
 8003400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800340e:	2307      	movs	r3, #7
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <HAL_UART_MspInit+0x8c>)
 800341a:	f000 fa43 	bl	80038a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	@ 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40004400 	.word	0x40004400
 800342c:	40023800 	.word	0x40023800
 8003430:	40020000 	.word	0x40020000

08003434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08e      	sub	sp, #56	@ 0x38
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	4b33      	ldr	r3, [pc, #204]	@ (8003518 <HAL_InitTick+0xe4>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	4a32      	ldr	r2, [pc, #200]	@ (8003518 <HAL_InitTick+0xe4>)
 800344e:	f043 0310 	orr.w	r3, r3, #16
 8003452:	6413      	str	r3, [r2, #64]	@ 0x40
 8003454:	4b30      	ldr	r3, [pc, #192]	@ (8003518 <HAL_InitTick+0xe4>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003460:	f107 0210 	add.w	r2, r7, #16
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4611      	mov	r1, r2
 800346a:	4618      	mov	r0, r3
 800346c:	f001 f868 	bl	8004540 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800347a:	f001 f839 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 800347e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003480:	e004      	b.n	800348c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003482:	f001 f835 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8003486:	4603      	mov	r3, r0
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	4a23      	ldr	r2, [pc, #140]	@ (800351c <HAL_InitTick+0xe8>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9b      	lsrs	r3, r3, #18
 8003496:	3b01      	subs	r3, #1
 8003498:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800349a:	4b21      	ldr	r3, [pc, #132]	@ (8003520 <HAL_InitTick+0xec>)
 800349c:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <HAL_InitTick+0xf0>)
 800349e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003520 <HAL_InitTick+0xec>)
 80034a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_InitTick+0xec>)
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <HAL_InitTick+0xec>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <HAL_InitTick+0xec>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ba:	4b19      	ldr	r3, [pc, #100]	@ (8003520 <HAL_InitTick+0xec>)
 80034bc:	2200      	movs	r2, #0
 80034be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80034c0:	4817      	ldr	r0, [pc, #92]	@ (8003520 <HAL_InitTick+0xec>)
 80034c2:	f001 f86f 	bl	80045a4 <HAL_TIM_Base_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80034cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11b      	bne.n	800350c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034d4:	4812      	ldr	r0, [pc, #72]	@ (8003520 <HAL_InitTick+0xec>)
 80034d6:	f001 f8bf 	bl	8004658 <HAL_TIM_Base_Start_IT>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80034e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034e8:	2036      	movs	r0, #54	@ 0x36
 80034ea:	f000 f9cd 	bl	8003888 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d808      	bhi.n	8003506 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	2036      	movs	r0, #54	@ 0x36
 80034fa:	f000 f9a9 	bl	8003850 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <HAL_InitTick+0xf4>)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e002      	b.n	800350c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800350c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003510:	4618      	mov	r0, r3
 8003512:	3738      	adds	r7, #56	@ 0x38
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40023800 	.word	0x40023800
 800351c:	431bde83 	.word	0x431bde83
 8003520:	20012e70 	.word	0x20012e70
 8003524:	40001000 	.word	0x40001000
 8003528:	2000000c 	.word	0x2000000c

0800352c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <NMI_Handler+0x4>

08003534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <HardFault_Handler+0x4>

0800353c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <MemManage_Handler+0x4>

08003544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <BusFault_Handler+0x4>

0800354c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <UsageFault_Handler+0x4>

08003554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003568:	4802      	ldr	r0, [pc, #8]	@ (8003574 <TIM6_DAC_IRQHandler+0x10>)
 800356a:	f001 f8e5 	bl	8004738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20012e70 	.word	0x20012e70

08003578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003580:	4a14      	ldr	r2, [pc, #80]	@ (80035d4 <_sbrk+0x5c>)
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <_sbrk+0x60>)
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800358c:	4b13      	ldr	r3, [pc, #76]	@ (80035dc <_sbrk+0x64>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <_sbrk+0x64>)
 8003596:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <_sbrk+0x68>)
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <_sbrk+0x64>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d207      	bcs.n	80035b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035a8:	f001 fee6 	bl	8005378 <__errno>
 80035ac:	4603      	mov	r3, r0
 80035ae:	220c      	movs	r2, #12
 80035b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	e009      	b.n	80035cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035b8:	4b08      	ldr	r3, [pc, #32]	@ (80035dc <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035be:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <_sbrk+0x64>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <_sbrk+0x64>)
 80035c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20020000 	.word	0x20020000
 80035d8:	00000400 	.word	0x00000400
 80035dc:	20012eb8 	.word	0x20012eb8
 80035e0:	20013008 	.word	0x20013008

080035e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e8:	4b06      	ldr	r3, [pc, #24]	@ (8003604 <SystemInit+0x20>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ee:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <SystemInit+0x20>)
 80035f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003640 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800360c:	f7ff ffea 	bl	80035e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003610:	480c      	ldr	r0, [pc, #48]	@ (8003644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003612:	490d      	ldr	r1, [pc, #52]	@ (8003648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003614:	4a0d      	ldr	r2, [pc, #52]	@ (800364c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003618:	e002      	b.n	8003620 <LoopCopyDataInit>

0800361a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800361c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361e:	3304      	adds	r3, #4

08003620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003624:	d3f9      	bcc.n	800361a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003626:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003628:	4c0a      	ldr	r4, [pc, #40]	@ (8003654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800362c:	e001      	b.n	8003632 <LoopFillZerobss>

0800362e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003630:	3204      	adds	r2, #4

08003632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003634:	d3fb      	bcc.n	800362e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003636:	f001 fea5 	bl	8005384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800363a:	f7ff fc8f 	bl	8002f5c <main>
  bx  lr    
 800363e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003648:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800364c:	08005d80 	.word	0x08005d80
  ldr r2, =_sbss
 8003650:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003654:	20013008 	.word	0x20013008

08003658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003658:	e7fe      	b.n	8003658 <ADC_IRQHandler>
	...

0800365c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003660:	4b0e      	ldr	r3, [pc, #56]	@ (800369c <HAL_Init+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <HAL_Init+0x40>)
 8003666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800366a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0a      	ldr	r2, [pc, #40]	@ (800369c <HAL_Init+0x40>)
 8003672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003678:	4b08      	ldr	r3, [pc, #32]	@ (800369c <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a07      	ldr	r2, [pc, #28]	@ (800369c <HAL_Init+0x40>)
 800367e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003684:	2003      	movs	r0, #3
 8003686:	f000 f8d8 	bl	800383a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800368a:	2000      	movs	r0, #0
 800368c:	f7ff fed2 	bl	8003434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003690:	f7ff fe60 	bl	8003354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023c00 	.word	0x40023c00

080036a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <HAL_IncTick+0x20>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_IncTick+0x24>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	@ (80036c4 <HAL_IncTick+0x24>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000010 	.word	0x20000010
 80036c4:	20012ebc 	.word	0x20012ebc

080036c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_GetTick+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20012ebc 	.word	0x20012ebc

080036e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036fc:	4013      	ands	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800370c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003712:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <__NVIC_SetPriorityGrouping+0x44>)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800372c:	4b04      	ldr	r3, [pc, #16]	@ (8003740 <__NVIC_GetPriorityGrouping+0x18>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	0a1b      	lsrs	r3, r3, #8
 8003732:	f003 0307 	and.w	r3, r3, #7
}
 8003736:	4618      	mov	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	2b00      	cmp	r3, #0
 8003754:	db0b      	blt.n	800376e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003756:	79fb      	ldrb	r3, [r7, #7]
 8003758:	f003 021f 	and.w	r2, r3, #31
 800375c:	4907      	ldr	r1, [pc, #28]	@ (800377c <__NVIC_EnableIRQ+0x38>)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	2001      	movs	r0, #1
 8003766:	fa00 f202 	lsl.w	r2, r0, r2
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000e100 	.word	0xe000e100

08003780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	6039      	str	r1, [r7, #0]
 800378a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db0a      	blt.n	80037aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	490c      	ldr	r1, [pc, #48]	@ (80037cc <__NVIC_SetPriority+0x4c>)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	440b      	add	r3, r1
 80037a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a8:	e00a      	b.n	80037c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4908      	ldr	r1, [pc, #32]	@ (80037d0 <__NVIC_SetPriority+0x50>)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3b04      	subs	r3, #4
 80037b8:	0112      	lsls	r2, r2, #4
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	440b      	add	r3, r1
 80037be:	761a      	strb	r2, [r3, #24]
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	e000e100 	.word	0xe000e100
 80037d0:	e000ed00 	.word	0xe000ed00

080037d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f1c3 0307 	rsb	r3, r3, #7
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	bf28      	it	cs
 80037f2:	2304      	movcs	r3, #4
 80037f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3304      	adds	r3, #4
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d902      	bls.n	8003804 <NVIC_EncodePriority+0x30>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3b03      	subs	r3, #3
 8003802:	e000      	b.n	8003806 <NVIC_EncodePriority+0x32>
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003808:	f04f 32ff 	mov.w	r2, #4294967295
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800381c:	f04f 31ff 	mov.w	r1, #4294967295
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	43d9      	mvns	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800382c:	4313      	orrs	r3, r2
         );
}
 800382e:	4618      	mov	r0, r3
 8003830:	3724      	adds	r7, #36	@ 0x24
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff4c 	bl	80036e0 <__NVIC_SetPriorityGrouping>
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003862:	f7ff ff61 	bl	8003728 <__NVIC_GetPriorityGrouping>
 8003866:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	6978      	ldr	r0, [r7, #20]
 800386e:	f7ff ffb1 	bl	80037d4 <NVIC_EncodePriority>
 8003872:	4602      	mov	r2, r0
 8003874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff80 	bl	8003780 <__NVIC_SetPriority>
}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff54 	bl	8003744 <__NVIC_EnableIRQ>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	@ 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e16b      	b.n	8003b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c0:	2201      	movs	r2, #1
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	f040 815a 	bne.w	8003b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d005      	beq.n	80038f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d130      	bne.n	8003958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	2203      	movs	r2, #3
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800392c:	2201      	movs	r2, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4013      	ands	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 0201 	and.w	r2, r3, #1
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b03      	cmp	r3, #3
 8003962:	d017      	beq.n	8003994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d123      	bne.n	80039e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	08da      	lsrs	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3208      	adds	r2, #8
 80039e2:	69b9      	ldr	r1, [r7, #24]
 80039e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4013      	ands	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80b4 	beq.w	8003b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	4b60      	ldr	r3, [pc, #384]	@ (8003bb0 <HAL_GPIO_Init+0x30c>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a32:	4a5f      	ldr	r2, [pc, #380]	@ (8003bb0 <HAL_GPIO_Init+0x30c>)
 8003a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bb0 <HAL_GPIO_Init+0x30c>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a46:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb4 <HAL_GPIO_Init+0x310>)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	089b      	lsrs	r3, r3, #2
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	@ (8003bb8 <HAL_GPIO_Init+0x314>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02b      	beq.n	8003aca <HAL_GPIO_Init+0x226>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a51      	ldr	r2, [pc, #324]	@ (8003bbc <HAL_GPIO_Init+0x318>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d025      	beq.n	8003ac6 <HAL_GPIO_Init+0x222>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	@ (8003bc0 <HAL_GPIO_Init+0x31c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <HAL_GPIO_Init+0x21e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc4 <HAL_GPIO_Init+0x320>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d019      	beq.n	8003abe <HAL_GPIO_Init+0x21a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc8 <HAL_GPIO_Init+0x324>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_GPIO_Init+0x216>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a4d      	ldr	r2, [pc, #308]	@ (8003bcc <HAL_GPIO_Init+0x328>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00d      	beq.n	8003ab6 <HAL_GPIO_Init+0x212>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd0 <HAL_GPIO_Init+0x32c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <HAL_GPIO_Init+0x20e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd4 <HAL_GPIO_Init+0x330>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_GPIO_Init+0x20a>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e00e      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	e00c      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e00a      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e008      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e006      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e004      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e002      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_GPIO_Init+0x228>
 8003aca:	2300      	movs	r3, #0
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	f002 0203 	and.w	r2, r2, #3
 8003ad2:	0092      	lsls	r2, r2, #2
 8003ad4:	4093      	lsls	r3, r2
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003adc:	4935      	ldr	r1, [pc, #212]	@ (8003bb4 <HAL_GPIO_Init+0x310>)
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aea:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0e:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b14:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b38:	4a27      	ldr	r2, [pc, #156]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3e:	4b26      	ldr	r3, [pc, #152]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b62:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b8c:	4a12      	ldr	r2, [pc, #72]	@ (8003bd8 <HAL_GPIO_Init+0x334>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	3301      	adds	r3, #1
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f ae90 	bls.w	80038c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	3724      	adds	r7, #36	@ 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40020000 	.word	0x40020000
 8003bbc:	40020400 	.word	0x40020400
 8003bc0:	40020800 	.word	0x40020800
 8003bc4:	40020c00 	.word	0x40020c00
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40021800 	.word	0x40021800
 8003bd4:	40021c00 	.word	0x40021c00
 8003bd8:	40013c00 	.word	0x40013c00

08003bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
 8003be8:	4613      	mov	r3, r2
 8003bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bec:	787b      	ldrb	r3, [r7, #1]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf8:	e003      	b.n	8003c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bfa:	887b      	ldrh	r3, [r7, #2]
 8003bfc:	041a      	lsls	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	619a      	str	r2, [r3, #24]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e267      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d075      	beq.n	8003d1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	4b88      	ldr	r3, [pc, #544]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d00c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3a:	4b85      	ldr	r3, [pc, #532]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d112      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c46:	4b82      	ldr	r3, [pc, #520]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b7e      	ldr	r3, [pc, #504]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05b      	beq.n	8003d18 <HAL_RCC_OscConfig+0x108>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d157      	bne.n	8003d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e242      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x74>
 8003c76:	4b76      	ldr	r3, [pc, #472]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a75      	ldr	r2, [pc, #468]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x98>
 8003c8e:	4b70      	ldr	r3, [pc, #448]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6f      	ldr	r2, [pc, #444]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xb0>
 8003ca8:	4b69      	ldr	r3, [pc, #420]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a68      	ldr	r2, [pc, #416]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b66      	ldr	r3, [pc, #408]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff fcfe 	bl	80036c8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7ff fcfa 	bl	80036c8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	@ 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e207      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xc0>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7ff fcea 	bl	80036c8 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7ff fce6 	bl	80036c8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1f3      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b51      	ldr	r3, [pc, #324]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0xe8>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d063      	beq.n	8003dee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	4b4a      	ldr	r3, [pc, #296]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d32:	4b47      	ldr	r3, [pc, #284]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3e:	4b44      	ldr	r3, [pc, #272]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1c7      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b3b      	ldr	r3, [pc, #236]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4937      	ldr	r1, [pc, #220]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e03a      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <HAL_RCC_OscConfig+0x244>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d86:	f7ff fc9f 	bl	80036c8 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7ff fc9b 	bl	80036c8 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1a8      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b28      	ldr	r3, [pc, #160]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4925      	ldr	r1, [pc, #148]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	e015      	b.n	8003dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b24      	ldr	r3, [pc, #144]	@ (8003e54 <HAL_RCC_OscConfig+0x244>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7ff fc7e 	bl	80036c8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7ff fc7a 	bl	80036c8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e187      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d036      	beq.n	8003e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d016      	beq.n	8003e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b15      	ldr	r3, [pc, #84]	@ (8003e58 <HAL_RCC_OscConfig+0x248>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7ff fc5e 	bl	80036c8 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e10:	f7ff fc5a 	bl	80036c8 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e167      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_RCC_OscConfig+0x240>)
 8003e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x200>
 8003e2e:	e01b      	b.n	8003e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e30:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCC_OscConfig+0x248>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7ff fc47 	bl	80036c8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	e00e      	b.n	8003e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e3e:	f7ff fc43 	bl	80036c8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d907      	bls.n	8003e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e150      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470000 	.word	0x42470000
 8003e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	4b88      	ldr	r3, [pc, #544]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1ea      	bne.n	8003e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f000 8097 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e7a:	4b81      	ldr	r3, [pc, #516]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e86:	2300      	movs	r3, #0
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e96:	4b7a      	ldr	r3, [pc, #488]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	60bb      	str	r3, [r7, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	4b77      	ldr	r3, [pc, #476]	@ (8004084 <HAL_RCC_OscConfig+0x474>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d118      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb2:	4b74      	ldr	r3, [pc, #464]	@ (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a73      	ldr	r2, [pc, #460]	@ (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ebe:	f7ff fc03 	bl	80036c8 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec6:	f7ff fbff 	bl	80036c8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e10c      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8004084 <HAL_RCC_OscConfig+0x474>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x2ea>
 8003eec:	4b64      	ldr	r3, [pc, #400]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	4a63      	ldr	r2, [pc, #396]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef8:	e01c      	b.n	8003f34 <HAL_RCC_OscConfig+0x324>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d10c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x30c>
 8003f02:	4b5f      	ldr	r3, [pc, #380]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	4a5e      	ldr	r2, [pc, #376]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0e:	4b5c      	ldr	r3, [pc, #368]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f12:	4a5b      	ldr	r2, [pc, #364]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f1a:	e00b      	b.n	8003f34 <HAL_RCC_OscConfig+0x324>
 8003f1c:	4b58      	ldr	r3, [pc, #352]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f20:	4a57      	ldr	r2, [pc, #348]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f28:	4b55      	ldr	r3, [pc, #340]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4a54      	ldr	r2, [pc, #336]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f023 0304 	bic.w	r3, r3, #4
 8003f32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d015      	beq.n	8003f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7ff fbc4 	bl	80036c8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	e00a      	b.n	8003f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f44:	f7ff fbc0 	bl	80036c8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e0cb      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5a:	4b49      	ldr	r3, [pc, #292]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0ee      	beq.n	8003f44 <HAL_RCC_OscConfig+0x334>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7ff fbae 	bl	80036c8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7ff fbaa 	bl	80036c8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0b5      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f86:	4b3e      	ldr	r3, [pc, #248]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ee      	bne.n	8003f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b39      	ldr	r3, [pc, #228]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	4a38      	ldr	r2, [pc, #224]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a1 	beq.w	80040f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fae:	4b34      	ldr	r3, [pc, #208]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f003 030c 	and.w	r3, r3, #12
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d05c      	beq.n	8004074 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d141      	bne.n	8004046 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_OscConfig+0x478>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7ff fb7e 	bl	80036c8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7ff fb7a 	bl	80036c8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e087      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	4b27      	ldr	r3, [pc, #156]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	019b      	lsls	r3, r3, #6
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	061b      	lsls	r3, r3, #24
 8004012:	491b      	ldr	r1, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x478>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7ff fb53 	bl	80036c8 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7ff fb4f 	bl	80036c8 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e05c      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x416>
 8004044:	e054      	b.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <HAL_RCC_OscConfig+0x478>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7ff fb3c 	bl	80036c8 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004054:	f7ff fb38 	bl	80036c8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e045      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCC_OscConfig+0x470>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x444>
 8004072:	e03d      	b.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e038      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
 8004088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x4ec>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d028      	beq.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d121      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d11a      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d001      	beq.n	80040f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023800 	.word	0x40023800

08004100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cc      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b68      	ldr	r3, [pc, #416]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d90c      	bls.n	800413c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b65      	ldr	r3, [pc, #404]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b63      	ldr	r3, [pc, #396]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e0b8      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d020      	beq.n	800418a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004154:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a58      	ldr	r2, [pc, #352]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800415e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800416c:	4b53      	ldr	r3, [pc, #332]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004178:	4b50      	ldr	r3, [pc, #320]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	494d      	ldr	r1, [pc, #308]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d044      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d107      	bne.n	80041ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419e:	4b47      	ldr	r3, [pc, #284]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d119      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b3f      	ldr	r3, [pc, #252]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3b      	ldr	r3, [pc, #236]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e067      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b37      	ldr	r3, [pc, #220]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4934      	ldr	r1, [pc, #208]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7ff fa6a 	bl	80036c8 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7ff fa66 	bl	80036c8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e04f      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d20c      	bcs.n	8004248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b22      	ldr	r3, [pc, #136]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e032      	b.n	80042ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4916      	ldr	r1, [pc, #88]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004272:	4b12      	ldr	r3, [pc, #72]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	490e      	ldr	r1, [pc, #56]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004286:	f000 f821 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 800428a:	4602      	mov	r2, r0
 800428c:	4b0b      	ldr	r3, [pc, #44]	@ (80042bc <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	490a      	ldr	r1, [pc, #40]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	5ccb      	ldrb	r3, [r1, r3]
 800429a:	fa22 f303 	lsr.w	r3, r2, r3
 800429e:	4a09      	ldr	r2, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042a2:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff f8c4 	bl	8003434 <HAL_InitTick>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	40023800 	.word	0x40023800
 80042c0:	08005d24 	.word	0x08005d24
 80042c4:	20000008 	.word	0x20000008
 80042c8:	2000000c 	.word	0x2000000c

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b094      	sub	sp, #80	@ 0x50
 80042d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d8:	2300      	movs	r3, #0
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042dc:	2300      	movs	r3, #0
 80042de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e4:	4b79      	ldr	r3, [pc, #484]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d00d      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x40>
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	f200 80e1 	bhi.w	80044b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x34>
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d003      	beq.n	8004306 <HAL_RCC_GetSysClockFreq+0x3a>
 80042fe:	e0db      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004300:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004304:	e0db      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004306:	4b73      	ldr	r3, [pc, #460]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004308:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800430a:	e0d8      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800430c:	4b6f      	ldr	r3, [pc, #444]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004316:	4b6d      	ldr	r3, [pc, #436]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d063      	beq.n	80043ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004322:	4b6a      	ldr	r3, [pc, #424]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	2200      	movs	r2, #0
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800432c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
 800433a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	0159      	lsls	r1, r3, #5
 800434c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004350:	0150      	lsls	r0, r2, #5
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4621      	mov	r1, r4
 8004358:	1a51      	subs	r1, r2, r1
 800435a:	6139      	str	r1, [r7, #16]
 800435c:	4629      	mov	r1, r5
 800435e:	eb63 0301 	sbc.w	r3, r3, r1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004370:	4659      	mov	r1, fp
 8004372:	018b      	lsls	r3, r1, #6
 8004374:	4651      	mov	r1, sl
 8004376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437a:	4651      	mov	r1, sl
 800437c:	018a      	lsls	r2, r1, #6
 800437e:	4651      	mov	r1, sl
 8004380:	ebb2 0801 	subs.w	r8, r2, r1
 8004384:	4659      	mov	r1, fp
 8004386:	eb63 0901 	sbc.w	r9, r3, r1
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800439a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439e:	4690      	mov	r8, r2
 80043a0:	4699      	mov	r9, r3
 80043a2:	4623      	mov	r3, r4
 80043a4:	eb18 0303 	adds.w	r3, r8, r3
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	462b      	mov	r3, r5
 80043ac:	eb49 0303 	adc.w	r3, r9, r3
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043be:	4629      	mov	r1, r5
 80043c0:	024b      	lsls	r3, r1, #9
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043c8:	4621      	mov	r1, r4
 80043ca:	024a      	lsls	r2, r1, #9
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d2:	2200      	movs	r2, #0
 80043d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043dc:	f7fb ff48 	bl	8000270 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e8:	e058      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ea:	4b38      	ldr	r3, [pc, #224]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	099b      	lsrs	r3, r3, #6
 80043f0:	2200      	movs	r2, #0
 80043f2:	4618      	mov	r0, r3
 80043f4:	4611      	mov	r1, r2
 80043f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043fa:	623b      	str	r3, [r7, #32]
 80043fc:	2300      	movs	r3, #0
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004404:	4642      	mov	r2, r8
 8004406:	464b      	mov	r3, r9
 8004408:	f04f 0000 	mov.w	r0, #0
 800440c:	f04f 0100 	mov.w	r1, #0
 8004410:	0159      	lsls	r1, r3, #5
 8004412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004416:	0150      	lsls	r0, r2, #5
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4641      	mov	r1, r8
 800441e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb63 0b01 	sbc.w	fp, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800443c:	ebb2 040a 	subs.w	r4, r2, sl
 8004440:	eb63 050b 	sbc.w	r5, r3, fp
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	00eb      	lsls	r3, r5, #3
 800444e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004452:	00e2      	lsls	r2, r4, #3
 8004454:	4614      	mov	r4, r2
 8004456:	461d      	mov	r5, r3
 8004458:	4643      	mov	r3, r8
 800445a:	18e3      	adds	r3, r4, r3
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	464b      	mov	r3, r9
 8004460:	eb45 0303 	adc.w	r3, r5, r3
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	f04f 0200 	mov.w	r2, #0
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004472:	4629      	mov	r1, r5
 8004474:	028b      	lsls	r3, r1, #10
 8004476:	4621      	mov	r1, r4
 8004478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800447c:	4621      	mov	r1, r4
 800447e:	028a      	lsls	r2, r1, #10
 8004480:	4610      	mov	r0, r2
 8004482:	4619      	mov	r1, r3
 8004484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004486:	2200      	movs	r2, #0
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	61fa      	str	r2, [r7, #28]
 800448c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004490:	f7fb feee 	bl	8000270 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800449c:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	3301      	adds	r3, #1
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80044ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b6:	e002      	b.n	80044be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b8:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3750      	adds	r7, #80	@ 0x50
 80044c4:	46bd      	mov	sp, r7
 80044c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000008 	.word	0x20000008

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a9b      	lsrs	r3, r3, #10
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4903      	ldr	r1, [pc, #12]	@ (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800450c:	4618      	mov	r0, r3
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	08005d34 	.word	0x08005d34

08004518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800451c:	f7ff ffdc 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0b5b      	lsrs	r3, r3, #13
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	@ (800453c <HAL_RCC_GetPCLK2Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	08005d34 	.word	0x08005d34

08004540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	220f      	movs	r2, #15
 800454e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004550:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800455c:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004568:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004574:	4b09      	ldr	r3, [pc, #36]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	08db      	lsrs	r3, r3, #3
 800457a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004582:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <HAL_RCC_GetClockConfig+0x60>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0207 	and.w	r2, r3, #7
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	40023c00 	.word	0x40023c00

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e041      	b.n	800463a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f839 	bl	8004642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 f9c0 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
	...

08004658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d001      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04e      	b.n	800470e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a23      	ldr	r2, [pc, #140]	@ (800471c <HAL_TIM_Base_Start_IT+0xc4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d022      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469a:	d01d      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <HAL_TIM_Base_Start_IT+0xc8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d018      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_TIM_Base_Start_IT+0xcc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_TIM_Base_Start_IT+0xd0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <HAL_TIM_Base_Start_IT+0xd4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_TIM_Base_Start_IT+0x80>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_TIM_Base_Start_IT+0xdc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d111      	bne.n	80046fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d010      	beq.n	800470c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 0201 	orr.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fa:	e007      	b.n	800470c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40001800 	.word	0x40001800

08004738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d020      	beq.n	800479c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0202 	mvn.w	r2, #2
 800476c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f8d2 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 8004788:	e005      	b.n	8004796 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8c4 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8d5 	bl	8004940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d020      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0204 	mvn.w	r2, #4
 80047b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2202      	movs	r2, #2
 80047be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8ac 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 80047d4:	e005      	b.n	80047e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f89e 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f8af 	bl	8004940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d020      	beq.n	8004834 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01b      	beq.n	8004834 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0208 	mvn.w	r2, #8
 8004804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f886 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 8004820:	e005      	b.n	800482e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f878 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f889 	bl	8004940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d020      	beq.n	8004880 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f860 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f852 	bl	8004918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f863 	bl	8004940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00c      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f06f 0201 	mvn.w	r2, #1
 800489c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fe fd40 	bl	8003324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00c      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d007      	beq.n	80048c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f906 	bl	8004ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f834 	bl	8004954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0320 	and.w	r3, r3, #32
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f06f 0220 	mvn.w	r2, #32
 8004908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8d8 	bl	8004ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a46      	ldr	r2, [pc, #280]	@ (8004a94 <TIM_Base_SetConfig+0x12c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d013      	beq.n	80049a8 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004986:	d00f      	beq.n	80049a8 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a43      	ldr	r2, [pc, #268]	@ (8004a98 <TIM_Base_SetConfig+0x130>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00b      	beq.n	80049a8 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a42      	ldr	r2, [pc, #264]	@ (8004a9c <TIM_Base_SetConfig+0x134>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a41      	ldr	r2, [pc, #260]	@ (8004aa0 <TIM_Base_SetConfig+0x138>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a40      	ldr	r2, [pc, #256]	@ (8004aa4 <TIM_Base_SetConfig+0x13c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d108      	bne.n	80049ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a35      	ldr	r2, [pc, #212]	@ (8004a94 <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d02b      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c8:	d027      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a32      	ldr	r2, [pc, #200]	@ (8004a98 <TIM_Base_SetConfig+0x130>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d023      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a31      	ldr	r2, [pc, #196]	@ (8004a9c <TIM_Base_SetConfig+0x134>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01f      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a30      	ldr	r2, [pc, #192]	@ (8004aa0 <TIM_Base_SetConfig+0x138>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01b      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa4 <TIM_Base_SetConfig+0x13c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d017      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa8 <TIM_Base_SetConfig+0x140>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2d      	ldr	r2, [pc, #180]	@ (8004aac <TIM_Base_SetConfig+0x144>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab0 <TIM_Base_SetConfig+0x148>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab4 <TIM_Base_SetConfig+0x14c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ab8 <TIM_Base_SetConfig+0x150>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a29      	ldr	r2, [pc, #164]	@ (8004abc <TIM_Base_SetConfig+0x154>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a10      	ldr	r2, [pc, #64]	@ (8004a94 <TIM_Base_SetConfig+0x12c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0xf8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a12      	ldr	r2, [pc, #72]	@ (8004aa4 <TIM_Base_SetConfig+0x13c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d103      	bne.n	8004a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f023 0201 	bic.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	611a      	str	r2, [r3, #16]
  }
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800
 8004ab4:	40001800 	.word	0x40001800
 8004ab8:	40001c00 	.word	0x40001c00
 8004abc:	40002000 	.word	0x40002000

08004ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e042      	b.n	8004b80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fe fc48 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	@ 0x24
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f973 	bl	8004e18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	@ 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d175      	bne.n	8004c94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Transmit+0x2c>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e06e      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	@ 0x21
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fe fd7f 	bl	80036c8 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bfc:	e02e      	b.n	8004c5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2180      	movs	r1, #128	@ 0x80
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f848 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e03a      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cb      	bne.n	8004bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	@ 0x40
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f814 	bl	8004c9e <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	e000      	b.n	8004c96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
  }
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	e03b      	b.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d037      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7fe fd06 	bl	80036c8 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	6a3a      	ldr	r2, [r7, #32]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e03a      	b.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d023      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2b80      	cmp	r3, #128	@ 0x80
 8004ce4:	d020      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b40      	cmp	r3, #64	@ 0x40
 8004cea:	d01d      	beq.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	d116      	bne.n	8004d28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81d 	bl	8004d50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e00f      	b.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d0b4      	beq.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b095      	sub	sp, #84	@ 0x54
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	330c      	adds	r3, #12
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d78:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d119      	bne.n	8004dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	330c      	adds	r3, #12
 8004dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0310 	bic.w	r3, r3, #16
 8004dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004de8:	61ba      	str	r2, [r7, #24]
 8004dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e5      	bne.n	8004dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e0a:	bf00      	nop
 8004e0c:	3754      	adds	r7, #84	@ 0x54
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e1c:	b0c0      	sub	sp, #256	@ 0x100
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	ea40 0301 	orr.w	r3, r0, r1
 8004e40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e70:	f021 010c 	bic.w	r1, r1, #12
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	6999      	ldr	r1, [r3, #24]
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	ea40 0301 	orr.w	r3, r0, r1
 8004e9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b8f      	ldr	r3, [pc, #572]	@ (80050e4 <UART_SetConfig+0x2cc>)
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d005      	beq.n	8004eb8 <UART_SetConfig+0xa0>
 8004eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80050e8 <UART_SetConfig+0x2d0>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d104      	bne.n	8004ec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7ff fb2e 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ec0:	e003      	b.n	8004eca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ec2:	f7ff fb15 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8004ec6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ed4:	f040 810c 	bne.w	80050f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ee2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004eea:	4622      	mov	r2, r4
 8004eec:	462b      	mov	r3, r5
 8004eee:	1891      	adds	r1, r2, r2
 8004ef0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ef2:	415b      	adcs	r3, r3
 8004ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004efa:	4621      	mov	r1, r4
 8004efc:	eb12 0801 	adds.w	r8, r2, r1
 8004f00:	4629      	mov	r1, r5
 8004f02:	eb43 0901 	adc.w	r9, r3, r1
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f1a:	4690      	mov	r8, r2
 8004f1c:	4699      	mov	r9, r3
 8004f1e:	4623      	mov	r3, r4
 8004f20:	eb18 0303 	adds.w	r3, r8, r3
 8004f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f28:	462b      	mov	r3, r5
 8004f2a:	eb49 0303 	adc.w	r3, r9, r3
 8004f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f46:	460b      	mov	r3, r1
 8004f48:	18db      	adds	r3, r3, r3
 8004f4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	eb42 0303 	adc.w	r3, r2, r3
 8004f52:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f5c:	f7fb f988 	bl	8000270 <__aeabi_uldivmod>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4b61      	ldr	r3, [pc, #388]	@ (80050ec <UART_SetConfig+0x2d4>)
 8004f66:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	011c      	lsls	r4, r3, #4
 8004f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	1891      	adds	r1, r2, r2
 8004f86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f88:	415b      	adcs	r3, r3
 8004f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f90:	4641      	mov	r1, r8
 8004f92:	eb12 0a01 	adds.w	sl, r2, r1
 8004f96:	4649      	mov	r1, r9
 8004f98:	eb43 0b01 	adc.w	fp, r3, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004fac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fb0:	4692      	mov	sl, r2
 8004fb2:	469b      	mov	fp, r3
 8004fb4:	4643      	mov	r3, r8
 8004fb6:	eb1a 0303 	adds.w	r3, sl, r3
 8004fba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	eb4b 0303 	adc.w	r3, fp, r3
 8004fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	18db      	adds	r3, r3, r3
 8004fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	eb42 0303 	adc.w	r3, r2, r3
 8004fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ff2:	f7fb f93d 	bl	8000270 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80050ec <UART_SetConfig+0x2d4>)
 8004ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2264      	movs	r2, #100	@ 0x64
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	1acb      	subs	r3, r1, r3
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005012:	4b36      	ldr	r3, [pc, #216]	@ (80050ec <UART_SetConfig+0x2d4>)
 8005014:	fba3 2302 	umull	r2, r3, r3, r2
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005020:	441c      	add	r4, r3
 8005022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005026:	2200      	movs	r2, #0
 8005028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800502c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005034:	4642      	mov	r2, r8
 8005036:	464b      	mov	r3, r9
 8005038:	1891      	adds	r1, r2, r2
 800503a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800503c:	415b      	adcs	r3, r3
 800503e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005044:	4641      	mov	r1, r8
 8005046:	1851      	adds	r1, r2, r1
 8005048:	6339      	str	r1, [r7, #48]	@ 0x30
 800504a:	4649      	mov	r1, r9
 800504c:	414b      	adcs	r3, r1
 800504e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800505c:	4659      	mov	r1, fp
 800505e:	00cb      	lsls	r3, r1, #3
 8005060:	4651      	mov	r1, sl
 8005062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005066:	4651      	mov	r1, sl
 8005068:	00ca      	lsls	r2, r1, #3
 800506a:	4610      	mov	r0, r2
 800506c:	4619      	mov	r1, r3
 800506e:	4603      	mov	r3, r0
 8005070:	4642      	mov	r2, r8
 8005072:	189b      	adds	r3, r3, r2
 8005074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005078:	464b      	mov	r3, r9
 800507a:	460a      	mov	r2, r1
 800507c:	eb42 0303 	adc.w	r3, r2, r3
 8005080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005090:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005098:	460b      	mov	r3, r1
 800509a:	18db      	adds	r3, r3, r3
 800509c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800509e:	4613      	mov	r3, r2
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80050aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80050ae:	f7fb f8df 	bl	8000270 <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <UART_SetConfig+0x2d4>)
 80050b8:	fba3 1302 	umull	r1, r3, r3, r2
 80050bc:	095b      	lsrs	r3, r3, #5
 80050be:	2164      	movs	r1, #100	@ 0x64
 80050c0:	fb01 f303 	mul.w	r3, r1, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3332      	adds	r3, #50	@ 0x32
 80050ca:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <UART_SetConfig+0x2d4>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 0207 	and.w	r2, r3, #7
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4422      	add	r2, r4
 80050de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050e0:	e106      	b.n	80052f0 <UART_SetConfig+0x4d8>
 80050e2:	bf00      	nop
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40011400 	.word	0x40011400
 80050ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f4:	2200      	movs	r2, #0
 80050f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005102:	4642      	mov	r2, r8
 8005104:	464b      	mov	r3, r9
 8005106:	1891      	adds	r1, r2, r2
 8005108:	6239      	str	r1, [r7, #32]
 800510a:	415b      	adcs	r3, r3
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
 800510e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005112:	4641      	mov	r1, r8
 8005114:	1854      	adds	r4, r2, r1
 8005116:	4649      	mov	r1, r9
 8005118:	eb43 0501 	adc.w	r5, r3, r1
 800511c:	f04f 0200 	mov.w	r2, #0
 8005120:	f04f 0300 	mov.w	r3, #0
 8005124:	00eb      	lsls	r3, r5, #3
 8005126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800512a:	00e2      	lsls	r2, r4, #3
 800512c:	4614      	mov	r4, r2
 800512e:	461d      	mov	r5, r3
 8005130:	4643      	mov	r3, r8
 8005132:	18e3      	adds	r3, r4, r3
 8005134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005138:	464b      	mov	r3, r9
 800513a:	eb45 0303 	adc.w	r3, r5, r3
 800513e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800514e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800515e:	4629      	mov	r1, r5
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	4621      	mov	r1, r4
 8005164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005168:	4621      	mov	r1, r4
 800516a:	008a      	lsls	r2, r1, #2
 800516c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005170:	f7fb f87e 	bl	8000270 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b60      	ldr	r3, [pc, #384]	@ (80052fc <UART_SetConfig+0x4e4>)
 800517a:	fba3 2302 	umull	r2, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	011c      	lsls	r4, r3, #4
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800518c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005194:	4642      	mov	r2, r8
 8005196:	464b      	mov	r3, r9
 8005198:	1891      	adds	r1, r2, r2
 800519a:	61b9      	str	r1, [r7, #24]
 800519c:	415b      	adcs	r3, r3
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051a4:	4641      	mov	r1, r8
 80051a6:	1851      	adds	r1, r2, r1
 80051a8:	6139      	str	r1, [r7, #16]
 80051aa:	4649      	mov	r1, r9
 80051ac:	414b      	adcs	r3, r1
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051bc:	4659      	mov	r1, fp
 80051be:	00cb      	lsls	r3, r1, #3
 80051c0:	4651      	mov	r1, sl
 80051c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c6:	4651      	mov	r1, sl
 80051c8:	00ca      	lsls	r2, r1, #3
 80051ca:	4610      	mov	r0, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	4603      	mov	r3, r0
 80051d0:	4642      	mov	r2, r8
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051d8:	464b      	mov	r3, r9
 80051da:	460a      	mov	r2, r1
 80051dc:	eb42 0303 	adc.w	r3, r2, r3
 80051e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051fc:	4649      	mov	r1, r9
 80051fe:	008b      	lsls	r3, r1, #2
 8005200:	4641      	mov	r1, r8
 8005202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005206:	4641      	mov	r1, r8
 8005208:	008a      	lsls	r2, r1, #2
 800520a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800520e:	f7fb f82f 	bl	8000270 <__aeabi_uldivmod>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4611      	mov	r1, r2
 8005218:	4b38      	ldr	r3, [pc, #224]	@ (80052fc <UART_SetConfig+0x4e4>)
 800521a:	fba3 2301 	umull	r2, r3, r3, r1
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	2264      	movs	r2, #100	@ 0x64
 8005222:	fb02 f303 	mul.w	r3, r2, r3
 8005226:	1acb      	subs	r3, r1, r3
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	3332      	adds	r3, #50	@ 0x32
 800522c:	4a33      	ldr	r2, [pc, #204]	@ (80052fc <UART_SetConfig+0x4e4>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005238:	441c      	add	r4, r3
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800523e:	2200      	movs	r2, #0
 8005240:	673b      	str	r3, [r7, #112]	@ 0x70
 8005242:	677a      	str	r2, [r7, #116]	@ 0x74
 8005244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	415b      	adcs	r3, r3
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005258:	4641      	mov	r1, r8
 800525a:	1851      	adds	r1, r2, r1
 800525c:	6039      	str	r1, [r7, #0]
 800525e:	4649      	mov	r1, r9
 8005260:	414b      	adcs	r3, r1
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005270:	4659      	mov	r1, fp
 8005272:	00cb      	lsls	r3, r1, #3
 8005274:	4651      	mov	r1, sl
 8005276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800527a:	4651      	mov	r1, sl
 800527c:	00ca      	lsls	r2, r1, #3
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	4603      	mov	r3, r0
 8005284:	4642      	mov	r2, r8
 8005286:	189b      	adds	r3, r3, r2
 8005288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800528a:	464b      	mov	r3, r9
 800528c:	460a      	mov	r2, r1
 800528e:	eb42 0303 	adc.w	r3, r2, r3
 8005292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	663b      	str	r3, [r7, #96]	@ 0x60
 800529e:	667a      	str	r2, [r7, #100]	@ 0x64
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80052ac:	4649      	mov	r1, r9
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b6:	4641      	mov	r1, r8
 80052b8:	008a      	lsls	r2, r1, #2
 80052ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80052be:	f7fa ffd7 	bl	8000270 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <UART_SetConfig+0x4e4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	@ 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	3332      	adds	r3, #50	@ 0x32
 80052da:	4a08      	ldr	r2, [pc, #32]	@ (80052fc <UART_SetConfig+0x4e4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 020f 	and.w	r2, r3, #15
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4422      	add	r2, r4
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052f6:	46bd      	mov	sp, r7
 80052f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052fc:	51eb851f 	.word	0x51eb851f

08005300 <sniprintf>:
 8005300:	b40c      	push	{r2, r3}
 8005302:	b530      	push	{r4, r5, lr}
 8005304:	4b17      	ldr	r3, [pc, #92]	@ (8005364 <sniprintf+0x64>)
 8005306:	1e0c      	subs	r4, r1, #0
 8005308:	681d      	ldr	r5, [r3, #0]
 800530a:	b09d      	sub	sp, #116	@ 0x74
 800530c:	da08      	bge.n	8005320 <sniprintf+0x20>
 800530e:	238b      	movs	r3, #139	@ 0x8b
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	b01d      	add	sp, #116	@ 0x74
 8005318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800531c:	b002      	add	sp, #8
 800531e:	4770      	bx	lr
 8005320:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005324:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005328:	bf14      	ite	ne
 800532a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800532e:	4623      	moveq	r3, r4
 8005330:	9304      	str	r3, [sp, #16]
 8005332:	9307      	str	r3, [sp, #28]
 8005334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005338:	9002      	str	r0, [sp, #8]
 800533a:	9006      	str	r0, [sp, #24]
 800533c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005340:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005342:	ab21      	add	r3, sp, #132	@ 0x84
 8005344:	a902      	add	r1, sp, #8
 8005346:	4628      	mov	r0, r5
 8005348:	9301      	str	r3, [sp, #4]
 800534a:	f000 f9a3 	bl	8005694 <_svfiprintf_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	bfbc      	itt	lt
 8005352:	238b      	movlt	r3, #139	@ 0x8b
 8005354:	602b      	strlt	r3, [r5, #0]
 8005356:	2c00      	cmp	r4, #0
 8005358:	d0dd      	beq.n	8005316 <sniprintf+0x16>
 800535a:	9b02      	ldr	r3, [sp, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e7d9      	b.n	8005316 <sniprintf+0x16>
 8005362:	bf00      	nop
 8005364:	20000014 	.word	0x20000014

08005368 <memset>:
 8005368:	4402      	add	r2, r0
 800536a:	4603      	mov	r3, r0
 800536c:	4293      	cmp	r3, r2
 800536e:	d100      	bne.n	8005372 <memset+0xa>
 8005370:	4770      	bx	lr
 8005372:	f803 1b01 	strb.w	r1, [r3], #1
 8005376:	e7f9      	b.n	800536c <memset+0x4>

08005378 <__errno>:
 8005378:	4b01      	ldr	r3, [pc, #4]	@ (8005380 <__errno+0x8>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20000014 	.word	0x20000014

08005384 <__libc_init_array>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4d0d      	ldr	r5, [pc, #52]	@ (80053bc <__libc_init_array+0x38>)
 8005388:	4c0d      	ldr	r4, [pc, #52]	@ (80053c0 <__libc_init_array+0x3c>)
 800538a:	1b64      	subs	r4, r4, r5
 800538c:	10a4      	asrs	r4, r4, #2
 800538e:	2600      	movs	r6, #0
 8005390:	42a6      	cmp	r6, r4
 8005392:	d109      	bne.n	80053a8 <__libc_init_array+0x24>
 8005394:	4d0b      	ldr	r5, [pc, #44]	@ (80053c4 <__libc_init_array+0x40>)
 8005396:	4c0c      	ldr	r4, [pc, #48]	@ (80053c8 <__libc_init_array+0x44>)
 8005398:	f000 fc66 	bl	8005c68 <_init>
 800539c:	1b64      	subs	r4, r4, r5
 800539e:	10a4      	asrs	r4, r4, #2
 80053a0:	2600      	movs	r6, #0
 80053a2:	42a6      	cmp	r6, r4
 80053a4:	d105      	bne.n	80053b2 <__libc_init_array+0x2e>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ac:	4798      	blx	r3
 80053ae:	3601      	adds	r6, #1
 80053b0:	e7ee      	b.n	8005390 <__libc_init_array+0xc>
 80053b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b6:	4798      	blx	r3
 80053b8:	3601      	adds	r6, #1
 80053ba:	e7f2      	b.n	80053a2 <__libc_init_array+0x1e>
 80053bc:	08005d78 	.word	0x08005d78
 80053c0:	08005d78 	.word	0x08005d78
 80053c4:	08005d78 	.word	0x08005d78
 80053c8:	08005d7c 	.word	0x08005d7c

080053cc <__retarget_lock_acquire_recursive>:
 80053cc:	4770      	bx	lr

080053ce <__retarget_lock_release_recursive>:
 80053ce:	4770      	bx	lr

080053d0 <memcpy>:
 80053d0:	440a      	add	r2, r1
 80053d2:	4291      	cmp	r1, r2
 80053d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d8:	d100      	bne.n	80053dc <memcpy+0xc>
 80053da:	4770      	bx	lr
 80053dc:	b510      	push	{r4, lr}
 80053de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053e6:	4291      	cmp	r1, r2
 80053e8:	d1f9      	bne.n	80053de <memcpy+0xe>
 80053ea:	bd10      	pop	{r4, pc}

080053ec <_free_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4605      	mov	r5, r0
 80053f0:	2900      	cmp	r1, #0
 80053f2:	d041      	beq.n	8005478 <_free_r+0x8c>
 80053f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053f8:	1f0c      	subs	r4, r1, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bfb8      	it	lt
 80053fe:	18e4      	addlt	r4, r4, r3
 8005400:	f000 f8e0 	bl	80055c4 <__malloc_lock>
 8005404:	4a1d      	ldr	r2, [pc, #116]	@ (800547c <_free_r+0x90>)
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	b933      	cbnz	r3, 8005418 <_free_r+0x2c>
 800540a:	6063      	str	r3, [r4, #4]
 800540c:	6014      	str	r4, [r2, #0]
 800540e:	4628      	mov	r0, r5
 8005410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005414:	f000 b8dc 	b.w	80055d0 <__malloc_unlock>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d908      	bls.n	800542e <_free_r+0x42>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	1821      	adds	r1, r4, r0
 8005420:	428b      	cmp	r3, r1
 8005422:	bf01      	itttt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	1809      	addeq	r1, r1, r0
 800542a:	6021      	streq	r1, [r4, #0]
 800542c:	e7ed      	b.n	800540a <_free_r+0x1e>
 800542e:	461a      	mov	r2, r3
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	b10b      	cbz	r3, 8005438 <_free_r+0x4c>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d9fa      	bls.n	800542e <_free_r+0x42>
 8005438:	6811      	ldr	r1, [r2, #0]
 800543a:	1850      	adds	r0, r2, r1
 800543c:	42a0      	cmp	r0, r4
 800543e:	d10b      	bne.n	8005458 <_free_r+0x6c>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	4401      	add	r1, r0
 8005444:	1850      	adds	r0, r2, r1
 8005446:	4283      	cmp	r3, r0
 8005448:	6011      	str	r1, [r2, #0]
 800544a:	d1e0      	bne.n	800540e <_free_r+0x22>
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	4408      	add	r0, r1
 8005454:	6010      	str	r0, [r2, #0]
 8005456:	e7da      	b.n	800540e <_free_r+0x22>
 8005458:	d902      	bls.n	8005460 <_free_r+0x74>
 800545a:	230c      	movs	r3, #12
 800545c:	602b      	str	r3, [r5, #0]
 800545e:	e7d6      	b.n	800540e <_free_r+0x22>
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	1821      	adds	r1, r4, r0
 8005464:	428b      	cmp	r3, r1
 8005466:	bf04      	itt	eq
 8005468:	6819      	ldreq	r1, [r3, #0]
 800546a:	685b      	ldreq	r3, [r3, #4]
 800546c:	6063      	str	r3, [r4, #4]
 800546e:	bf04      	itt	eq
 8005470:	1809      	addeq	r1, r1, r0
 8005472:	6021      	streq	r1, [r4, #0]
 8005474:	6054      	str	r4, [r2, #4]
 8005476:	e7ca      	b.n	800540e <_free_r+0x22>
 8005478:	bd38      	pop	{r3, r4, r5, pc}
 800547a:	bf00      	nop
 800547c:	20013004 	.word	0x20013004

08005480 <sbrk_aligned>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4e0f      	ldr	r6, [pc, #60]	@ (80054c0 <sbrk_aligned+0x40>)
 8005484:	460c      	mov	r4, r1
 8005486:	6831      	ldr	r1, [r6, #0]
 8005488:	4605      	mov	r5, r0
 800548a:	b911      	cbnz	r1, 8005492 <sbrk_aligned+0x12>
 800548c:	f000 fba6 	bl	8005bdc <_sbrk_r>
 8005490:	6030      	str	r0, [r6, #0]
 8005492:	4621      	mov	r1, r4
 8005494:	4628      	mov	r0, r5
 8005496:	f000 fba1 	bl	8005bdc <_sbrk_r>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d103      	bne.n	80054a6 <sbrk_aligned+0x26>
 800549e:	f04f 34ff 	mov.w	r4, #4294967295
 80054a2:	4620      	mov	r0, r4
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
 80054a6:	1cc4      	adds	r4, r0, #3
 80054a8:	f024 0403 	bic.w	r4, r4, #3
 80054ac:	42a0      	cmp	r0, r4
 80054ae:	d0f8      	beq.n	80054a2 <sbrk_aligned+0x22>
 80054b0:	1a21      	subs	r1, r4, r0
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 fb92 	bl	8005bdc <_sbrk_r>
 80054b8:	3001      	adds	r0, #1
 80054ba:	d1f2      	bne.n	80054a2 <sbrk_aligned+0x22>
 80054bc:	e7ef      	b.n	800549e <sbrk_aligned+0x1e>
 80054be:	bf00      	nop
 80054c0:	20013000 	.word	0x20013000

080054c4 <_malloc_r>:
 80054c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054c8:	1ccd      	adds	r5, r1, #3
 80054ca:	f025 0503 	bic.w	r5, r5, #3
 80054ce:	3508      	adds	r5, #8
 80054d0:	2d0c      	cmp	r5, #12
 80054d2:	bf38      	it	cc
 80054d4:	250c      	movcc	r5, #12
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	4606      	mov	r6, r0
 80054da:	db01      	blt.n	80054e0 <_malloc_r+0x1c>
 80054dc:	42a9      	cmp	r1, r5
 80054de:	d904      	bls.n	80054ea <_malloc_r+0x26>
 80054e0:	230c      	movs	r3, #12
 80054e2:	6033      	str	r3, [r6, #0]
 80054e4:	2000      	movs	r0, #0
 80054e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055c0 <_malloc_r+0xfc>
 80054ee:	f000 f869 	bl	80055c4 <__malloc_lock>
 80054f2:	f8d8 3000 	ldr.w	r3, [r8]
 80054f6:	461c      	mov	r4, r3
 80054f8:	bb44      	cbnz	r4, 800554c <_malloc_r+0x88>
 80054fa:	4629      	mov	r1, r5
 80054fc:	4630      	mov	r0, r6
 80054fe:	f7ff ffbf 	bl	8005480 <sbrk_aligned>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	4604      	mov	r4, r0
 8005506:	d158      	bne.n	80055ba <_malloc_r+0xf6>
 8005508:	f8d8 4000 	ldr.w	r4, [r8]
 800550c:	4627      	mov	r7, r4
 800550e:	2f00      	cmp	r7, #0
 8005510:	d143      	bne.n	800559a <_malloc_r+0xd6>
 8005512:	2c00      	cmp	r4, #0
 8005514:	d04b      	beq.n	80055ae <_malloc_r+0xea>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	eb04 0903 	add.w	r9, r4, r3
 8005520:	f000 fb5c 	bl	8005bdc <_sbrk_r>
 8005524:	4581      	cmp	r9, r0
 8005526:	d142      	bne.n	80055ae <_malloc_r+0xea>
 8005528:	6821      	ldr	r1, [r4, #0]
 800552a:	1a6d      	subs	r5, r5, r1
 800552c:	4629      	mov	r1, r5
 800552e:	4630      	mov	r0, r6
 8005530:	f7ff ffa6 	bl	8005480 <sbrk_aligned>
 8005534:	3001      	adds	r0, #1
 8005536:	d03a      	beq.n	80055ae <_malloc_r+0xea>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	442b      	add	r3, r5
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	f8d8 3000 	ldr.w	r3, [r8]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	bb62      	cbnz	r2, 80055a0 <_malloc_r+0xdc>
 8005546:	f8c8 7000 	str.w	r7, [r8]
 800554a:	e00f      	b.n	800556c <_malloc_r+0xa8>
 800554c:	6822      	ldr	r2, [r4, #0]
 800554e:	1b52      	subs	r2, r2, r5
 8005550:	d420      	bmi.n	8005594 <_malloc_r+0xd0>
 8005552:	2a0b      	cmp	r2, #11
 8005554:	d917      	bls.n	8005586 <_malloc_r+0xc2>
 8005556:	1961      	adds	r1, r4, r5
 8005558:	42a3      	cmp	r3, r4
 800555a:	6025      	str	r5, [r4, #0]
 800555c:	bf18      	it	ne
 800555e:	6059      	strne	r1, [r3, #4]
 8005560:	6863      	ldr	r3, [r4, #4]
 8005562:	bf08      	it	eq
 8005564:	f8c8 1000 	streq.w	r1, [r8]
 8005568:	5162      	str	r2, [r4, r5]
 800556a:	604b      	str	r3, [r1, #4]
 800556c:	4630      	mov	r0, r6
 800556e:	f000 f82f 	bl	80055d0 <__malloc_unlock>
 8005572:	f104 000b 	add.w	r0, r4, #11
 8005576:	1d23      	adds	r3, r4, #4
 8005578:	f020 0007 	bic.w	r0, r0, #7
 800557c:	1ac2      	subs	r2, r0, r3
 800557e:	bf1c      	itt	ne
 8005580:	1a1b      	subne	r3, r3, r0
 8005582:	50a3      	strne	r3, [r4, r2]
 8005584:	e7af      	b.n	80054e6 <_malloc_r+0x22>
 8005586:	6862      	ldr	r2, [r4, #4]
 8005588:	42a3      	cmp	r3, r4
 800558a:	bf0c      	ite	eq
 800558c:	f8c8 2000 	streq.w	r2, [r8]
 8005590:	605a      	strne	r2, [r3, #4]
 8005592:	e7eb      	b.n	800556c <_malloc_r+0xa8>
 8005594:	4623      	mov	r3, r4
 8005596:	6864      	ldr	r4, [r4, #4]
 8005598:	e7ae      	b.n	80054f8 <_malloc_r+0x34>
 800559a:	463c      	mov	r4, r7
 800559c:	687f      	ldr	r7, [r7, #4]
 800559e:	e7b6      	b.n	800550e <_malloc_r+0x4a>
 80055a0:	461a      	mov	r2, r3
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	42a3      	cmp	r3, r4
 80055a6:	d1fb      	bne.n	80055a0 <_malloc_r+0xdc>
 80055a8:	2300      	movs	r3, #0
 80055aa:	6053      	str	r3, [r2, #4]
 80055ac:	e7de      	b.n	800556c <_malloc_r+0xa8>
 80055ae:	230c      	movs	r3, #12
 80055b0:	6033      	str	r3, [r6, #0]
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 f80c 	bl	80055d0 <__malloc_unlock>
 80055b8:	e794      	b.n	80054e4 <_malloc_r+0x20>
 80055ba:	6005      	str	r5, [r0, #0]
 80055bc:	e7d6      	b.n	800556c <_malloc_r+0xa8>
 80055be:	bf00      	nop
 80055c0:	20013004 	.word	0x20013004

080055c4 <__malloc_lock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	@ (80055cc <__malloc_lock+0x8>)
 80055c6:	f7ff bf01 	b.w	80053cc <__retarget_lock_acquire_recursive>
 80055ca:	bf00      	nop
 80055cc:	20012ffc 	.word	0x20012ffc

080055d0 <__malloc_unlock>:
 80055d0:	4801      	ldr	r0, [pc, #4]	@ (80055d8 <__malloc_unlock+0x8>)
 80055d2:	f7ff befc 	b.w	80053ce <__retarget_lock_release_recursive>
 80055d6:	bf00      	nop
 80055d8:	20012ffc 	.word	0x20012ffc

080055dc <__ssputs_r>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	688e      	ldr	r6, [r1, #8]
 80055e2:	461f      	mov	r7, r3
 80055e4:	42be      	cmp	r6, r7
 80055e6:	680b      	ldr	r3, [r1, #0]
 80055e8:	4682      	mov	sl, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	4690      	mov	r8, r2
 80055ee:	d82d      	bhi.n	800564c <__ssputs_r+0x70>
 80055f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055f8:	d026      	beq.n	8005648 <__ssputs_r+0x6c>
 80055fa:	6965      	ldr	r5, [r4, #20]
 80055fc:	6909      	ldr	r1, [r1, #16]
 80055fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005602:	eba3 0901 	sub.w	r9, r3, r1
 8005606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800560a:	1c7b      	adds	r3, r7, #1
 800560c:	444b      	add	r3, r9
 800560e:	106d      	asrs	r5, r5, #1
 8005610:	429d      	cmp	r5, r3
 8005612:	bf38      	it	cc
 8005614:	461d      	movcc	r5, r3
 8005616:	0553      	lsls	r3, r2, #21
 8005618:	d527      	bpl.n	800566a <__ssputs_r+0x8e>
 800561a:	4629      	mov	r1, r5
 800561c:	f7ff ff52 	bl	80054c4 <_malloc_r>
 8005620:	4606      	mov	r6, r0
 8005622:	b360      	cbz	r0, 800567e <__ssputs_r+0xa2>
 8005624:	6921      	ldr	r1, [r4, #16]
 8005626:	464a      	mov	r2, r9
 8005628:	f7ff fed2 	bl	80053d0 <memcpy>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	6126      	str	r6, [r4, #16]
 800563a:	6165      	str	r5, [r4, #20]
 800563c:	444e      	add	r6, r9
 800563e:	eba5 0509 	sub.w	r5, r5, r9
 8005642:	6026      	str	r6, [r4, #0]
 8005644:	60a5      	str	r5, [r4, #8]
 8005646:	463e      	mov	r6, r7
 8005648:	42be      	cmp	r6, r7
 800564a:	d900      	bls.n	800564e <__ssputs_r+0x72>
 800564c:	463e      	mov	r6, r7
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	4632      	mov	r2, r6
 8005652:	4641      	mov	r1, r8
 8005654:	f000 faa8 	bl	8005ba8 <memmove>
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	1b9b      	subs	r3, r3, r6
 800565c:	60a3      	str	r3, [r4, #8]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	4433      	add	r3, r6
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	2000      	movs	r0, #0
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	462a      	mov	r2, r5
 800566c:	f000 fac6 	bl	8005bfc <_realloc_r>
 8005670:	4606      	mov	r6, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d1e0      	bne.n	8005638 <__ssputs_r+0x5c>
 8005676:	6921      	ldr	r1, [r4, #16]
 8005678:	4650      	mov	r0, sl
 800567a:	f7ff feb7 	bl	80053ec <_free_r>
 800567e:	230c      	movs	r3, #12
 8005680:	f8ca 3000 	str.w	r3, [sl]
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568a:	81a3      	strh	r3, [r4, #12]
 800568c:	f04f 30ff 	mov.w	r0, #4294967295
 8005690:	e7e9      	b.n	8005666 <__ssputs_r+0x8a>
	...

08005694 <_svfiprintf_r>:
 8005694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	4698      	mov	r8, r3
 800569a:	898b      	ldrh	r3, [r1, #12]
 800569c:	061b      	lsls	r3, r3, #24
 800569e:	b09d      	sub	sp, #116	@ 0x74
 80056a0:	4607      	mov	r7, r0
 80056a2:	460d      	mov	r5, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	d510      	bpl.n	80056ca <_svfiprintf_r+0x36>
 80056a8:	690b      	ldr	r3, [r1, #16]
 80056aa:	b973      	cbnz	r3, 80056ca <_svfiprintf_r+0x36>
 80056ac:	2140      	movs	r1, #64	@ 0x40
 80056ae:	f7ff ff09 	bl	80054c4 <_malloc_r>
 80056b2:	6028      	str	r0, [r5, #0]
 80056b4:	6128      	str	r0, [r5, #16]
 80056b6:	b930      	cbnz	r0, 80056c6 <_svfiprintf_r+0x32>
 80056b8:	230c      	movs	r3, #12
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	b01d      	add	sp, #116	@ 0x74
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	2340      	movs	r3, #64	@ 0x40
 80056c8:	616b      	str	r3, [r5, #20]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ce:	2320      	movs	r3, #32
 80056d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d8:	2330      	movs	r3, #48	@ 0x30
 80056da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005878 <_svfiprintf_r+0x1e4>
 80056de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056e2:	f04f 0901 	mov.w	r9, #1
 80056e6:	4623      	mov	r3, r4
 80056e8:	469a      	mov	sl, r3
 80056ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ee:	b10a      	cbz	r2, 80056f4 <_svfiprintf_r+0x60>
 80056f0:	2a25      	cmp	r2, #37	@ 0x25
 80056f2:	d1f9      	bne.n	80056e8 <_svfiprintf_r+0x54>
 80056f4:	ebba 0b04 	subs.w	fp, sl, r4
 80056f8:	d00b      	beq.n	8005712 <_svfiprintf_r+0x7e>
 80056fa:	465b      	mov	r3, fp
 80056fc:	4622      	mov	r2, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff ff6b 	bl	80055dc <__ssputs_r>
 8005706:	3001      	adds	r0, #1
 8005708:	f000 80a7 	beq.w	800585a <_svfiprintf_r+0x1c6>
 800570c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800570e:	445a      	add	r2, fp
 8005710:	9209      	str	r2, [sp, #36]	@ 0x24
 8005712:	f89a 3000 	ldrb.w	r3, [sl]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 809f 	beq.w	800585a <_svfiprintf_r+0x1c6>
 800571c:	2300      	movs	r3, #0
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005726:	f10a 0a01 	add.w	sl, sl, #1
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	9307      	str	r3, [sp, #28]
 800572e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005732:	931a      	str	r3, [sp, #104]	@ 0x68
 8005734:	4654      	mov	r4, sl
 8005736:	2205      	movs	r2, #5
 8005738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800573c:	484e      	ldr	r0, [pc, #312]	@ (8005878 <_svfiprintf_r+0x1e4>)
 800573e:	f7fa fd47 	bl	80001d0 <memchr>
 8005742:	9a04      	ldr	r2, [sp, #16]
 8005744:	b9d8      	cbnz	r0, 800577e <_svfiprintf_r+0xea>
 8005746:	06d0      	lsls	r0, r2, #27
 8005748:	bf44      	itt	mi
 800574a:	2320      	movmi	r3, #32
 800574c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005750:	0711      	lsls	r1, r2, #28
 8005752:	bf44      	itt	mi
 8005754:	232b      	movmi	r3, #43	@ 0x2b
 8005756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800575a:	f89a 3000 	ldrb.w	r3, [sl]
 800575e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005760:	d015      	beq.n	800578e <_svfiprintf_r+0xfa>
 8005762:	9a07      	ldr	r2, [sp, #28]
 8005764:	4654      	mov	r4, sl
 8005766:	2000      	movs	r0, #0
 8005768:	f04f 0c0a 	mov.w	ip, #10
 800576c:	4621      	mov	r1, r4
 800576e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005772:	3b30      	subs	r3, #48	@ 0x30
 8005774:	2b09      	cmp	r3, #9
 8005776:	d94b      	bls.n	8005810 <_svfiprintf_r+0x17c>
 8005778:	b1b0      	cbz	r0, 80057a8 <_svfiprintf_r+0x114>
 800577a:	9207      	str	r2, [sp, #28]
 800577c:	e014      	b.n	80057a8 <_svfiprintf_r+0x114>
 800577e:	eba0 0308 	sub.w	r3, r0, r8
 8005782:	fa09 f303 	lsl.w	r3, r9, r3
 8005786:	4313      	orrs	r3, r2
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	46a2      	mov	sl, r4
 800578c:	e7d2      	b.n	8005734 <_svfiprintf_r+0xa0>
 800578e:	9b03      	ldr	r3, [sp, #12]
 8005790:	1d19      	adds	r1, r3, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	9103      	str	r1, [sp, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	bfbb      	ittet	lt
 800579a:	425b      	neglt	r3, r3
 800579c:	f042 0202 	orrlt.w	r2, r2, #2
 80057a0:	9307      	strge	r3, [sp, #28]
 80057a2:	9307      	strlt	r3, [sp, #28]
 80057a4:	bfb8      	it	lt
 80057a6:	9204      	strlt	r2, [sp, #16]
 80057a8:	7823      	ldrb	r3, [r4, #0]
 80057aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ac:	d10a      	bne.n	80057c4 <_svfiprintf_r+0x130>
 80057ae:	7863      	ldrb	r3, [r4, #1]
 80057b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057b2:	d132      	bne.n	800581a <_svfiprintf_r+0x186>
 80057b4:	9b03      	ldr	r3, [sp, #12]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	9203      	str	r2, [sp, #12]
 80057bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057c0:	3402      	adds	r4, #2
 80057c2:	9305      	str	r3, [sp, #20]
 80057c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005888 <_svfiprintf_r+0x1f4>
 80057c8:	7821      	ldrb	r1, [r4, #0]
 80057ca:	2203      	movs	r2, #3
 80057cc:	4650      	mov	r0, sl
 80057ce:	f7fa fcff 	bl	80001d0 <memchr>
 80057d2:	b138      	cbz	r0, 80057e4 <_svfiprintf_r+0x150>
 80057d4:	9b04      	ldr	r3, [sp, #16]
 80057d6:	eba0 000a 	sub.w	r0, r0, sl
 80057da:	2240      	movs	r2, #64	@ 0x40
 80057dc:	4082      	lsls	r2, r0
 80057de:	4313      	orrs	r3, r2
 80057e0:	3401      	adds	r4, #1
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e8:	4824      	ldr	r0, [pc, #144]	@ (800587c <_svfiprintf_r+0x1e8>)
 80057ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057ee:	2206      	movs	r2, #6
 80057f0:	f7fa fcee 	bl	80001d0 <memchr>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d036      	beq.n	8005866 <_svfiprintf_r+0x1d2>
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <_svfiprintf_r+0x1ec>)
 80057fa:	bb1b      	cbnz	r3, 8005844 <_svfiprintf_r+0x1b0>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	3307      	adds	r3, #7
 8005800:	f023 0307 	bic.w	r3, r3, #7
 8005804:	3308      	adds	r3, #8
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800580a:	4433      	add	r3, r6
 800580c:	9309      	str	r3, [sp, #36]	@ 0x24
 800580e:	e76a      	b.n	80056e6 <_svfiprintf_r+0x52>
 8005810:	fb0c 3202 	mla	r2, ip, r2, r3
 8005814:	460c      	mov	r4, r1
 8005816:	2001      	movs	r0, #1
 8005818:	e7a8      	b.n	800576c <_svfiprintf_r+0xd8>
 800581a:	2300      	movs	r3, #0
 800581c:	3401      	adds	r4, #1
 800581e:	9305      	str	r3, [sp, #20]
 8005820:	4619      	mov	r1, r3
 8005822:	f04f 0c0a 	mov.w	ip, #10
 8005826:	4620      	mov	r0, r4
 8005828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800582c:	3a30      	subs	r2, #48	@ 0x30
 800582e:	2a09      	cmp	r2, #9
 8005830:	d903      	bls.n	800583a <_svfiprintf_r+0x1a6>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0c6      	beq.n	80057c4 <_svfiprintf_r+0x130>
 8005836:	9105      	str	r1, [sp, #20]
 8005838:	e7c4      	b.n	80057c4 <_svfiprintf_r+0x130>
 800583a:	fb0c 2101 	mla	r1, ip, r1, r2
 800583e:	4604      	mov	r4, r0
 8005840:	2301      	movs	r3, #1
 8005842:	e7f0      	b.n	8005826 <_svfiprintf_r+0x192>
 8005844:	ab03      	add	r3, sp, #12
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	462a      	mov	r2, r5
 800584a:	4b0e      	ldr	r3, [pc, #56]	@ (8005884 <_svfiprintf_r+0x1f0>)
 800584c:	a904      	add	r1, sp, #16
 800584e:	4638      	mov	r0, r7
 8005850:	f3af 8000 	nop.w
 8005854:	1c42      	adds	r2, r0, #1
 8005856:	4606      	mov	r6, r0
 8005858:	d1d6      	bne.n	8005808 <_svfiprintf_r+0x174>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	065b      	lsls	r3, r3, #25
 800585e:	f53f af2d 	bmi.w	80056bc <_svfiprintf_r+0x28>
 8005862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005864:	e72c      	b.n	80056c0 <_svfiprintf_r+0x2c>
 8005866:	ab03      	add	r3, sp, #12
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	462a      	mov	r2, r5
 800586c:	4b05      	ldr	r3, [pc, #20]	@ (8005884 <_svfiprintf_r+0x1f0>)
 800586e:	a904      	add	r1, sp, #16
 8005870:	4638      	mov	r0, r7
 8005872:	f000 f879 	bl	8005968 <_printf_i>
 8005876:	e7ed      	b.n	8005854 <_svfiprintf_r+0x1c0>
 8005878:	08005d3c 	.word	0x08005d3c
 800587c:	08005d46 	.word	0x08005d46
 8005880:	00000000 	.word	0x00000000
 8005884:	080055dd 	.word	0x080055dd
 8005888:	08005d42 	.word	0x08005d42

0800588c <_printf_common>:
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	4616      	mov	r6, r2
 8005892:	4698      	mov	r8, r3
 8005894:	688a      	ldr	r2, [r1, #8]
 8005896:	690b      	ldr	r3, [r1, #16]
 8005898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800589c:	4293      	cmp	r3, r2
 800589e:	bfb8      	it	lt
 80058a0:	4613      	movlt	r3, r2
 80058a2:	6033      	str	r3, [r6, #0]
 80058a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058a8:	4607      	mov	r7, r0
 80058aa:	460c      	mov	r4, r1
 80058ac:	b10a      	cbz	r2, 80058b2 <_printf_common+0x26>
 80058ae:	3301      	adds	r3, #1
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	0699      	lsls	r1, r3, #26
 80058b6:	bf42      	ittt	mi
 80058b8:	6833      	ldrmi	r3, [r6, #0]
 80058ba:	3302      	addmi	r3, #2
 80058bc:	6033      	strmi	r3, [r6, #0]
 80058be:	6825      	ldr	r5, [r4, #0]
 80058c0:	f015 0506 	ands.w	r5, r5, #6
 80058c4:	d106      	bne.n	80058d4 <_printf_common+0x48>
 80058c6:	f104 0a19 	add.w	sl, r4, #25
 80058ca:	68e3      	ldr	r3, [r4, #12]
 80058cc:	6832      	ldr	r2, [r6, #0]
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	dc26      	bgt.n	8005922 <_printf_common+0x96>
 80058d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	3b00      	subs	r3, #0
 80058dc:	bf18      	it	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	0692      	lsls	r2, r2, #26
 80058e2:	d42b      	bmi.n	800593c <_printf_common+0xb0>
 80058e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058e8:	4641      	mov	r1, r8
 80058ea:	4638      	mov	r0, r7
 80058ec:	47c8      	blx	r9
 80058ee:	3001      	adds	r0, #1
 80058f0:	d01e      	beq.n	8005930 <_printf_common+0xa4>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	f003 0306 	and.w	r3, r3, #6
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	bf02      	ittt	eq
 80058fe:	68e5      	ldreq	r5, [r4, #12]
 8005900:	6833      	ldreq	r3, [r6, #0]
 8005902:	1aed      	subeq	r5, r5, r3
 8005904:	68a3      	ldr	r3, [r4, #8]
 8005906:	bf0c      	ite	eq
 8005908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800590c:	2500      	movne	r5, #0
 800590e:	4293      	cmp	r3, r2
 8005910:	bfc4      	itt	gt
 8005912:	1a9b      	subgt	r3, r3, r2
 8005914:	18ed      	addgt	r5, r5, r3
 8005916:	2600      	movs	r6, #0
 8005918:	341a      	adds	r4, #26
 800591a:	42b5      	cmp	r5, r6
 800591c:	d11a      	bne.n	8005954 <_printf_common+0xc8>
 800591e:	2000      	movs	r0, #0
 8005920:	e008      	b.n	8005934 <_printf_common+0xa8>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4641      	mov	r1, r8
 8005928:	4638      	mov	r0, r7
 800592a:	47c8      	blx	r9
 800592c:	3001      	adds	r0, #1
 800592e:	d103      	bne.n	8005938 <_printf_common+0xac>
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	3501      	adds	r5, #1
 800593a:	e7c6      	b.n	80058ca <_printf_common+0x3e>
 800593c:	18e1      	adds	r1, r4, r3
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	2030      	movs	r0, #48	@ 0x30
 8005942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005946:	4422      	add	r2, r4
 8005948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800594c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005950:	3302      	adds	r3, #2
 8005952:	e7c7      	b.n	80058e4 <_printf_common+0x58>
 8005954:	2301      	movs	r3, #1
 8005956:	4622      	mov	r2, r4
 8005958:	4641      	mov	r1, r8
 800595a:	4638      	mov	r0, r7
 800595c:	47c8      	blx	r9
 800595e:	3001      	adds	r0, #1
 8005960:	d0e6      	beq.n	8005930 <_printf_common+0xa4>
 8005962:	3601      	adds	r6, #1
 8005964:	e7d9      	b.n	800591a <_printf_common+0x8e>
	...

08005968 <_printf_i>:
 8005968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	7e0f      	ldrb	r7, [r1, #24]
 800596e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005970:	2f78      	cmp	r7, #120	@ 0x78
 8005972:	4691      	mov	r9, r2
 8005974:	4680      	mov	r8, r0
 8005976:	460c      	mov	r4, r1
 8005978:	469a      	mov	sl, r3
 800597a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800597e:	d807      	bhi.n	8005990 <_printf_i+0x28>
 8005980:	2f62      	cmp	r7, #98	@ 0x62
 8005982:	d80a      	bhi.n	800599a <_printf_i+0x32>
 8005984:	2f00      	cmp	r7, #0
 8005986:	f000 80d2 	beq.w	8005b2e <_printf_i+0x1c6>
 800598a:	2f58      	cmp	r7, #88	@ 0x58
 800598c:	f000 80b9 	beq.w	8005b02 <_printf_i+0x19a>
 8005990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005998:	e03a      	b.n	8005a10 <_printf_i+0xa8>
 800599a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800599e:	2b15      	cmp	r3, #21
 80059a0:	d8f6      	bhi.n	8005990 <_printf_i+0x28>
 80059a2:	a101      	add	r1, pc, #4	@ (adr r1, 80059a8 <_printf_i+0x40>)
 80059a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a8:	08005a01 	.word	0x08005a01
 80059ac:	08005a15 	.word	0x08005a15
 80059b0:	08005991 	.word	0x08005991
 80059b4:	08005991 	.word	0x08005991
 80059b8:	08005991 	.word	0x08005991
 80059bc:	08005991 	.word	0x08005991
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005991 	.word	0x08005991
 80059c8:	08005991 	.word	0x08005991
 80059cc:	08005991 	.word	0x08005991
 80059d0:	08005991 	.word	0x08005991
 80059d4:	08005b15 	.word	0x08005b15
 80059d8:	08005a3f 	.word	0x08005a3f
 80059dc:	08005acf 	.word	0x08005acf
 80059e0:	08005991 	.word	0x08005991
 80059e4:	08005991 	.word	0x08005991
 80059e8:	08005b37 	.word	0x08005b37
 80059ec:	08005991 	.word	0x08005991
 80059f0:	08005a3f 	.word	0x08005a3f
 80059f4:	08005991 	.word	0x08005991
 80059f8:	08005991 	.word	0x08005991
 80059fc:	08005ad7 	.word	0x08005ad7
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	1d1a      	adds	r2, r3, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6032      	str	r2, [r6, #0]
 8005a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a10:	2301      	movs	r3, #1
 8005a12:	e09d      	b.n	8005b50 <_printf_i+0x1e8>
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	1d19      	adds	r1, r3, #4
 8005a1a:	6031      	str	r1, [r6, #0]
 8005a1c:	0606      	lsls	r6, r0, #24
 8005a1e:	d501      	bpl.n	8005a24 <_printf_i+0xbc>
 8005a20:	681d      	ldr	r5, [r3, #0]
 8005a22:	e003      	b.n	8005a2c <_printf_i+0xc4>
 8005a24:	0645      	lsls	r5, r0, #25
 8005a26:	d5fb      	bpl.n	8005a20 <_printf_i+0xb8>
 8005a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	da03      	bge.n	8005a38 <_printf_i+0xd0>
 8005a30:	232d      	movs	r3, #45	@ 0x2d
 8005a32:	426d      	negs	r5, r5
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a38:	4859      	ldr	r0, [pc, #356]	@ (8005ba0 <_printf_i+0x238>)
 8005a3a:	230a      	movs	r3, #10
 8005a3c:	e011      	b.n	8005a62 <_printf_i+0xfa>
 8005a3e:	6821      	ldr	r1, [r4, #0]
 8005a40:	6833      	ldr	r3, [r6, #0]
 8005a42:	0608      	lsls	r0, r1, #24
 8005a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a48:	d402      	bmi.n	8005a50 <_printf_i+0xe8>
 8005a4a:	0649      	lsls	r1, r1, #25
 8005a4c:	bf48      	it	mi
 8005a4e:	b2ad      	uxthmi	r5, r5
 8005a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a52:	4853      	ldr	r0, [pc, #332]	@ (8005ba0 <_printf_i+0x238>)
 8005a54:	6033      	str	r3, [r6, #0]
 8005a56:	bf14      	ite	ne
 8005a58:	230a      	movne	r3, #10
 8005a5a:	2308      	moveq	r3, #8
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a62:	6866      	ldr	r6, [r4, #4]
 8005a64:	60a6      	str	r6, [r4, #8]
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	bfa2      	ittt	ge
 8005a6a:	6821      	ldrge	r1, [r4, #0]
 8005a6c:	f021 0104 	bicge.w	r1, r1, #4
 8005a70:	6021      	strge	r1, [r4, #0]
 8005a72:	b90d      	cbnz	r5, 8005a78 <_printf_i+0x110>
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	d04b      	beq.n	8005b10 <_printf_i+0x1a8>
 8005a78:	4616      	mov	r6, r2
 8005a7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a82:	5dc7      	ldrb	r7, [r0, r7]
 8005a84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a88:	462f      	mov	r7, r5
 8005a8a:	42bb      	cmp	r3, r7
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	d9f4      	bls.n	8005a7a <_printf_i+0x112>
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d10b      	bne.n	8005aac <_printf_i+0x144>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07df      	lsls	r7, r3, #31
 8005a98:	d508      	bpl.n	8005aac <_printf_i+0x144>
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	6861      	ldr	r1, [r4, #4]
 8005a9e:	4299      	cmp	r1, r3
 8005aa0:	bfde      	ittt	le
 8005aa2:	2330      	movle	r3, #48	@ 0x30
 8005aa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005aa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aac:	1b92      	subs	r2, r2, r6
 8005aae:	6122      	str	r2, [r4, #16]
 8005ab0:	f8cd a000 	str.w	sl, [sp]
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	aa03      	add	r2, sp, #12
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4640      	mov	r0, r8
 8005abc:	f7ff fee6 	bl	800588c <_printf_common>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d14a      	bne.n	8005b5a <_printf_i+0x1f2>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	b004      	add	sp, #16
 8005aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f043 0320 	orr.w	r3, r3, #32
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	4833      	ldr	r0, [pc, #204]	@ (8005ba4 <_printf_i+0x23c>)
 8005ad8:	2778      	movs	r7, #120	@ 0x78
 8005ada:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6831      	ldr	r1, [r6, #0]
 8005ae2:	061f      	lsls	r7, r3, #24
 8005ae4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ae8:	d402      	bmi.n	8005af0 <_printf_i+0x188>
 8005aea:	065f      	lsls	r7, r3, #25
 8005aec:	bf48      	it	mi
 8005aee:	b2ad      	uxthmi	r5, r5
 8005af0:	6031      	str	r1, [r6, #0]
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	bf44      	itt	mi
 8005af6:	f043 0320 	orrmi.w	r3, r3, #32
 8005afa:	6023      	strmi	r3, [r4, #0]
 8005afc:	b11d      	cbz	r5, 8005b06 <_printf_i+0x19e>
 8005afe:	2310      	movs	r3, #16
 8005b00:	e7ac      	b.n	8005a5c <_printf_i+0xf4>
 8005b02:	4827      	ldr	r0, [pc, #156]	@ (8005ba0 <_printf_i+0x238>)
 8005b04:	e7e9      	b.n	8005ada <_printf_i+0x172>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f023 0320 	bic.w	r3, r3, #32
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	e7f6      	b.n	8005afe <_printf_i+0x196>
 8005b10:	4616      	mov	r6, r2
 8005b12:	e7bd      	b.n	8005a90 <_printf_i+0x128>
 8005b14:	6833      	ldr	r3, [r6, #0]
 8005b16:	6825      	ldr	r5, [r4, #0]
 8005b18:	6961      	ldr	r1, [r4, #20]
 8005b1a:	1d18      	adds	r0, r3, #4
 8005b1c:	6030      	str	r0, [r6, #0]
 8005b1e:	062e      	lsls	r6, r5, #24
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	d501      	bpl.n	8005b28 <_printf_i+0x1c0>
 8005b24:	6019      	str	r1, [r3, #0]
 8005b26:	e002      	b.n	8005b2e <_printf_i+0x1c6>
 8005b28:	0668      	lsls	r0, r5, #25
 8005b2a:	d5fb      	bpl.n	8005b24 <_printf_i+0x1bc>
 8005b2c:	8019      	strh	r1, [r3, #0]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	4616      	mov	r6, r2
 8005b34:	e7bc      	b.n	8005ab0 <_printf_i+0x148>
 8005b36:	6833      	ldr	r3, [r6, #0]
 8005b38:	1d1a      	adds	r2, r3, #4
 8005b3a:	6032      	str	r2, [r6, #0]
 8005b3c:	681e      	ldr	r6, [r3, #0]
 8005b3e:	6862      	ldr	r2, [r4, #4]
 8005b40:	2100      	movs	r1, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7fa fb44 	bl	80001d0 <memchr>
 8005b48:	b108      	cbz	r0, 8005b4e <_printf_i+0x1e6>
 8005b4a:	1b80      	subs	r0, r0, r6
 8005b4c:	6060      	str	r0, [r4, #4]
 8005b4e:	6863      	ldr	r3, [r4, #4]
 8005b50:	6123      	str	r3, [r4, #16]
 8005b52:	2300      	movs	r3, #0
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b58:	e7aa      	b.n	8005ab0 <_printf_i+0x148>
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	4649      	mov	r1, r9
 8005b60:	4640      	mov	r0, r8
 8005b62:	47d0      	blx	sl
 8005b64:	3001      	adds	r0, #1
 8005b66:	d0ad      	beq.n	8005ac4 <_printf_i+0x15c>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	079b      	lsls	r3, r3, #30
 8005b6c:	d413      	bmi.n	8005b96 <_printf_i+0x22e>
 8005b6e:	68e0      	ldr	r0, [r4, #12]
 8005b70:	9b03      	ldr	r3, [sp, #12]
 8005b72:	4298      	cmp	r0, r3
 8005b74:	bfb8      	it	lt
 8005b76:	4618      	movlt	r0, r3
 8005b78:	e7a6      	b.n	8005ac8 <_printf_i+0x160>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4649      	mov	r1, r9
 8005b80:	4640      	mov	r0, r8
 8005b82:	47d0      	blx	sl
 8005b84:	3001      	adds	r0, #1
 8005b86:	d09d      	beq.n	8005ac4 <_printf_i+0x15c>
 8005b88:	3501      	adds	r5, #1
 8005b8a:	68e3      	ldr	r3, [r4, #12]
 8005b8c:	9903      	ldr	r1, [sp, #12]
 8005b8e:	1a5b      	subs	r3, r3, r1
 8005b90:	42ab      	cmp	r3, r5
 8005b92:	dcf2      	bgt.n	8005b7a <_printf_i+0x212>
 8005b94:	e7eb      	b.n	8005b6e <_printf_i+0x206>
 8005b96:	2500      	movs	r5, #0
 8005b98:	f104 0619 	add.w	r6, r4, #25
 8005b9c:	e7f5      	b.n	8005b8a <_printf_i+0x222>
 8005b9e:	bf00      	nop
 8005ba0:	08005d4d 	.word	0x08005d4d
 8005ba4:	08005d5e 	.word	0x08005d5e

08005ba8 <memmove>:
 8005ba8:	4288      	cmp	r0, r1
 8005baa:	b510      	push	{r4, lr}
 8005bac:	eb01 0402 	add.w	r4, r1, r2
 8005bb0:	d902      	bls.n	8005bb8 <memmove+0x10>
 8005bb2:	4284      	cmp	r4, r0
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	d807      	bhi.n	8005bc8 <memmove+0x20>
 8005bb8:	1e43      	subs	r3, r0, #1
 8005bba:	42a1      	cmp	r1, r4
 8005bbc:	d008      	beq.n	8005bd0 <memmove+0x28>
 8005bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bc6:	e7f8      	b.n	8005bba <memmove+0x12>
 8005bc8:	4402      	add	r2, r0
 8005bca:	4601      	mov	r1, r0
 8005bcc:	428a      	cmp	r2, r1
 8005bce:	d100      	bne.n	8005bd2 <memmove+0x2a>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bda:	e7f7      	b.n	8005bcc <memmove+0x24>

08005bdc <_sbrk_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	@ (8005bf8 <_sbrk_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fd fcc6 	bl	8003578 <_sbrk>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_sbrk_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_sbrk_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20012ff8 	.word	0x20012ff8

08005bfc <_realloc_r>:
 8005bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c00:	4680      	mov	r8, r0
 8005c02:	4615      	mov	r5, r2
 8005c04:	460c      	mov	r4, r1
 8005c06:	b921      	cbnz	r1, 8005c12 <_realloc_r+0x16>
 8005c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	f7ff bc59 	b.w	80054c4 <_malloc_r>
 8005c12:	b92a      	cbnz	r2, 8005c20 <_realloc_r+0x24>
 8005c14:	f7ff fbea 	bl	80053ec <_free_r>
 8005c18:	2400      	movs	r4, #0
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c20:	f000 f81a 	bl	8005c58 <_malloc_usable_size_r>
 8005c24:	4285      	cmp	r5, r0
 8005c26:	4606      	mov	r6, r0
 8005c28:	d802      	bhi.n	8005c30 <_realloc_r+0x34>
 8005c2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c2e:	d8f4      	bhi.n	8005c1a <_realloc_r+0x1e>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4640      	mov	r0, r8
 8005c34:	f7ff fc46 	bl	80054c4 <_malloc_r>
 8005c38:	4607      	mov	r7, r0
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d0ec      	beq.n	8005c18 <_realloc_r+0x1c>
 8005c3e:	42b5      	cmp	r5, r6
 8005c40:	462a      	mov	r2, r5
 8005c42:	4621      	mov	r1, r4
 8005c44:	bf28      	it	cs
 8005c46:	4632      	movcs	r2, r6
 8005c48:	f7ff fbc2 	bl	80053d0 <memcpy>
 8005c4c:	4621      	mov	r1, r4
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f7ff fbcc 	bl	80053ec <_free_r>
 8005c54:	463c      	mov	r4, r7
 8005c56:	e7e0      	b.n	8005c1a <_realloc_r+0x1e>

08005c58 <_malloc_usable_size_r>:
 8005c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c5c:	1f18      	subs	r0, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	bfbc      	itt	lt
 8005c62:	580b      	ldrlt	r3, [r1, r0]
 8005c64:	18c0      	addlt	r0, r0, r3
 8005c66:	4770      	bx	lr

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
