
App_008_Example_4.5_Converting_Tasks_xTaskDelayUntil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006584  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006714  08006714  00007714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006854  08006854  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006854  08006854  00007854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800685c  0800685c  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800685c  0800685c  0000785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006860  08006860  00007860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006864  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          000198b8  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200198d4  200198d4  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017933  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311b  00000000  00000000  0001f97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00022aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cb  00000000  00000000  00024040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024441  00000000  00000000  0002510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001936b  00000000  00000000  0004954c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea765  00000000  00000000  000628b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d01c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005af4  00000000  00000000  0014d060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d0  00000000  00000000  00152b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066fc 	.word	0x080066fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080066fc 	.word	0x080066fc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e5c 	.word	0x20012e5c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fafb 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f837 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8c9 	bl	80006f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f89d 	bl	80006a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <main+0x64>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a12      	ldr	r2, [pc, #72]	@ (80005b8 <main+0x64>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000576:	f004 fb9f 	bl	8004cb8 <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057a:	f005 f8f5 	bl	8005768 <SEGGER_SYSVIEW_Start>

  /* create the first task with a priority of 1 */
  xTaskCreate( vTaskFunction, /* pointer to the function that implements the task */
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <main+0x68>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	2201      	movs	r2, #1
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800058e:	490c      	ldr	r1, [pc, #48]	@ (80005c0 <main+0x6c>)
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <main+0x70>)
 8000592:	f002 fd1e 	bl	8002fd2 <xTaskCreate>
               ( void* ) pcTextForTask1, /* pass the text to be printed into the task using the task parameter */
               1,        /* this task will run at priority 1 */
               NULL );   /* this example does not use the task handle */

  /* create the second task at a higher priority of 2 */
  xTaskCreate( vTaskFunction, "Task 2", 1000, ( void* ) pcTextForTask2, 2, NULL );
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <main+0x74>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2200      	movs	r2, #0
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2202      	movs	r2, #2
 80005a0:	9200      	str	r2, [sp, #0]
 80005a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a6:	4909      	ldr	r1, [pc, #36]	@ (80005cc <main+0x78>)
 80005a8:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <main+0x70>)
 80005aa:	f002 fd12 	bl	8002fd2 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 80005ae:	f002 ff4f 	bl	8003450 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x5e>
 80005b6:	bf00      	nop
 80005b8:	e0001000 	.word	0xe0001000
 80005bc:	20000000 	.word	0x20000000
 80005c0:	0800673c 	.word	0x0800673c
 80005c4:	08000859 	.word	0x08000859
 80005c8:	20000004 	.word	0x20000004
 80005cc:	08006744 	.word	0x08006744

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f006 f851 	bl	8006686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	@ (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	@ (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <SystemClock_Config+0xd0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000640:	2308      	movs	r3, #8
 8000642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000644:	2332      	movs	r3, #50	@ 0x32
 8000646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064c:	2307      	movs	r3, #7
 800064e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd57 	bl	8001108 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f924 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ffb8 	bl	80015f8 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800068e:	f000 f90d 	bl	80008ac <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006aa:	4a12      	ldr	r2, [pc, #72]	@ (80006f4 <MX_USART2_UART_Init+0x50>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_USART2_UART_Init+0x4c>)
 80006dc:	f001 fc80 	bl	8001fe0 <HAL_UART_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e6:	f000 f8e1 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000038 	.word	0x20000038
 80006f4:	40004400 	.word	0x40004400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b3c      	ldr	r3, [pc, #240]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a3b      	ldr	r2, [pc, #236]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b39      	ldr	r3, [pc, #228]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a34      	ldr	r2, [pc, #208]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2e      	ldr	r3, [pc, #184]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a2d      	ldr	r2, [pc, #180]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a26      	ldr	r2, [pc, #152]	@ (8000804 <MX_GPIO_Init+0x10c>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_GPIO_Init+0x10c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000784:	4820      	ldr	r0, [pc, #128]	@ (8000808 <MX_GPIO_Init+0x110>)
 8000786:	f000 fca5 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	2301      	movs	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	481b      	ldr	r0, [pc, #108]	@ (800080c <MX_GPIO_Init+0x114>)
 80007a0:	f000 fafc 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007a4:	2304      	movs	r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_GPIO_Init+0x118>)
 80007b8:	f000 faf0 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80007bc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <MX_GPIO_Init+0x110>)
 80007d6:	f000 fae1 	bl	8000d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007ea:	2306      	movs	r3, #6
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4807      	ldr	r0, [pc, #28]	@ (8000814 <MX_GPIO_Init+0x11c>)
 80007f6:	f000 fad1 	bl	8000d9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020000 	.word	0x40020000
 8000810:	40020400 	.word	0x40020400
 8000814:	40020800 	.word	0x40020800

08000818 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string untill null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e00b      	b.n	8000840 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	18d1      	adds	r1, r2, r3
 800082e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000832:	2201      	movs	r2, #1
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f001 fc23 	bl	8002080 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	3301      	adds	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1ed      	bne.n	8000828 <UART2_Print_Text+0x10>
  }
}
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <vTaskFunction>:


void vTaskFunction( void *pvParameters )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* String to print out is passed in via the parameter.
     Cast this to a character pointer to obtain the string the task should print out */
  const char *pcTaskName   = ( const char* ) pvParameters;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60fb      	str	r3, [r7, #12]

  /* The xLastWakeTime variable needs to be initialized with the current tick count.
     Note that this is the only time the variable is written to explicitly.
     After this, xLastWakeTime is automatically updated within xTaskDelayUntil() */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000864:	f002 ff6e 	bl	8003744 <xTaskGetTickCount>
 8000868:	4603      	mov	r3, r0
 800086a:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ; ; )
  {
    /* print out the name of the current task */
    UART2_Print_Text( &huart2, pcTaskName );
 800086c:	68f9      	ldr	r1, [r7, #12]
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <vTaskFunction+0x2c>)
 8000870:	f7ff ffd2 	bl	8000818 <UART2_Print_Text>
    /* This task should execute every 250 milliseconds exactly.
       As per the vTaskDelay() function, time is measured in ticks and
       the pdMS_TO_TICKS() macro is used to convert milliseconds into ticks.
       xLastWakeTime is automatically updated withing xTaskDelayUntil(),
       so is not explicitly updated by the task */
    xTaskDelayUntil( &xLastWakeTime, pdMS_TO_TICKS( 250 ) );
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	21fa      	movs	r1, #250	@ 0xfa
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fd18 	bl	80032b0 <xTaskDelayUntil>
    UART2_Print_Text( &huart2, pcTaskName );
 8000880:	bf00      	nop
 8000882:	e7f3      	b.n	800086c <vTaskFunction+0x14>
 8000884:	20000038 	.word	0x20000038

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 f97d 	bl	8000b98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40001000 	.word	0x40001000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000904 <HAL_MspInit+0x4c>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_MspInit+0x4c>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_MspInit+0x4c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 fa1b 	bl	8000d32 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	@ (800098c <HAL_UART_MspInit+0x84>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d12b      	bne.n	8000982 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <HAL_UART_MspInit+0x88>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <HAL_UART_MspInit+0x88>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	6413      	str	r3, [r2, #64]	@ 0x40
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_UART_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_UART_MspInit+0x88>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <HAL_UART_MspInit+0x88>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000962:	230c      	movs	r3, #12
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000972:	2307      	movs	r3, #7
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <HAL_UART_MspInit+0x8c>)
 800097e:	f000 fa0d 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	@ 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40004400 	.word	0x40004400
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	@ 0x38
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4b33      	ldr	r3, [pc, #204]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b0:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b8:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <HAL_InitTick+0xe4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c4:	f107 0210 	add.w	r2, r7, #16
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4611      	mov	r1, r2
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 f832 	bl	8001a38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009de:	f001 f803 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 80009e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80009e4:	e004      	b.n	80009f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009e6:	f000 ffff 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 80009ea:	4603      	mov	r3, r0
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009f2:	4a23      	ldr	r2, [pc, #140]	@ (8000a80 <HAL_InitTick+0xe8>)
 80009f4:	fba2 2303 	umull	r2, r3, r2, r3
 80009f8:	0c9b      	lsrs	r3, r3, #18
 80009fa:	3b01      	subs	r3, #1
 80009fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a00:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_InitTick+0xf0>)
 8000a02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a24:	4817      	ldr	r0, [pc, #92]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a26:	f001 f839 	bl	8001a9c <HAL_TIM_Base_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11b      	bne.n	8000a70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a38:	4812      	ldr	r0, [pc, #72]	@ (8000a84 <HAL_InitTick+0xec>)
 8000a3a:	f001 f889 	bl	8001b50 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d111      	bne.n	8000a70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a4c:	2036      	movs	r0, #54	@ 0x36
 8000a4e:	f000 f997 	bl	8000d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d808      	bhi.n	8000a6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	2036      	movs	r0, #54	@ 0x36
 8000a5e:	f000 f973 	bl	8000d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_InitTick+0xf4>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6013      	str	r3, [r2, #0]
 8000a68:	e002      	b.n	8000a70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3738      	adds	r7, #56	@ 0x38
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	431bde83 	.word	0x431bde83
 8000a84:	20000080 	.word	0x20000080
 8000a88:	40001000 	.word	0x40001000
 8000a8c:	2000000c 	.word	0x2000000c

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <TIM6_DAC_IRQHandler+0x10>)
 8000ace:	f001 f8af 	bl	8001c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000080 	.word	0x20000080

08000adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <SystemInit+0x20>)
 8000ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae6:	4a05      	ldr	r2, [pc, #20]	@ (8000afc <SystemInit+0x20>)
 8000ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b04:	f7ff ffea 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0a:	490d      	ldr	r1, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b20:	4c0a      	ldr	r4, [pc, #40]	@ (8000b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f005 fdb3 	bl	8006698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd0f 	bl	8000554 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b44:	08006864 	.word	0x08006864
  ldr r2, =_sbss
 8000b48:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b4c:	200198d4 	.word	0x200198d4

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f8d8 	bl	8000d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f7ff ff08 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe96 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	@ (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000010 	.word	0x20000010
 8000bbc:	200000c8 	.word	0x200000c8

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200000c8 	.word	0x200000c8

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4907      	ldr	r1, [pc, #28]	@ (8000c74 <__NVIC_EnableIRQ+0x38>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000e100 	.word	0xe000e100

08000c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	6039      	str	r1, [r7, #0]
 8000c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	db0a      	blt.n	8000ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	490c      	ldr	r1, [pc, #48]	@ (8000cc4 <__NVIC_SetPriority+0x4c>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca0:	e00a      	b.n	8000cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4908      	ldr	r1, [pc, #32]	@ (8000cc8 <__NVIC_SetPriority+0x50>)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	f003 030f 	and.w	r3, r3, #15
 8000cae:	3b04      	subs	r3, #4
 8000cb0:	0112      	lsls	r2, r2, #4
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	761a      	strb	r2, [r3, #24]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b089      	sub	sp, #36	@ 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f1c3 0307 	rsb	r3, r3, #7
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf28      	it	cs
 8000cea:	2304      	movcs	r3, #4
 8000cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	2b06      	cmp	r3, #6
 8000cf4:	d902      	bls.n	8000cfc <NVIC_EncodePriority+0x30>
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3b03      	subs	r3, #3
 8000cfa:	e000      	b.n	8000cfe <NVIC_EncodePriority+0x32>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	f04f 32ff 	mov.w	r2, #4294967295
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d14:	f04f 31ff 	mov.w	r1, #4294967295
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1e:	43d9      	mvns	r1, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	4313      	orrs	r3, r2
         );
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3724      	adds	r7, #36	@ 0x24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff4c 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5a:	f7ff ff61 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	68b9      	ldr	r1, [r7, #8]
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff ffb1 	bl	8000ccc <NVIC_EncodePriority>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff80 	bl	8000c78 <__NVIC_SetPriority>
}
 8000d78:	bf00      	nop
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff54 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b089      	sub	sp, #36	@ 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e16b      	b.n	8001090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	f040 815a 	bne.w	800108a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d005      	beq.n	8000dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d130      	bne.n	8000e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68da      	ldr	r2, [r3, #12]
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e24:	2201      	movs	r2, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	091b      	lsrs	r3, r3, #4
 8000e3a:	f003 0201 	and.w	r2, r3, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d017      	beq.n	8000e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d123      	bne.n	8000ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	f003 0307 	and.w	r3, r3, #7
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	220f      	movs	r2, #15
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	691a      	ldr	r2, [r3, #16]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	69b9      	ldr	r1, [r7, #24]
 8000edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0203 	and.w	r2, r3, #3
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f000 80b4 	beq.w	800108a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b60      	ldr	r3, [pc, #384]	@ (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	4a5f      	ldr	r2, [pc, #380]	@ (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f32:	4b5d      	ldr	r3, [pc, #372]	@ (80010a8 <HAL_GPIO_Init+0x30c>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80010ac <HAL_GPIO_Init+0x310>)
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	220f      	movs	r2, #15
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a52      	ldr	r2, [pc, #328]	@ (80010b0 <HAL_GPIO_Init+0x314>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d02b      	beq.n	8000fc2 <HAL_GPIO_Init+0x226>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a51      	ldr	r2, [pc, #324]	@ (80010b4 <HAL_GPIO_Init+0x318>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d025      	beq.n	8000fbe <HAL_GPIO_Init+0x222>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a50      	ldr	r2, [pc, #320]	@ (80010b8 <HAL_GPIO_Init+0x31c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d01f      	beq.n	8000fba <HAL_GPIO_Init+0x21e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80010bc <HAL_GPIO_Init+0x320>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x21a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4e      	ldr	r2, [pc, #312]	@ (80010c0 <HAL_GPIO_Init+0x324>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x216>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80010c4 <HAL_GPIO_Init+0x328>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x212>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	@ (80010c8 <HAL_GPIO_Init+0x32c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x20e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80010cc <HAL_GPIO_Init+0x330>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x20a>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00e      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	e00c      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00a      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fae:	2305      	movs	r3, #5
 8000fb0:	e008      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	e006      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e004      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e002      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <HAL_GPIO_Init+0x228>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	69fa      	ldr	r2, [r7, #28]
 8000fc6:	f002 0203 	and.w	r2, r2, #3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4093      	lsls	r3, r2
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd4:	4935      	ldr	r1, [pc, #212]	@ (80010ac <HAL_GPIO_Init+0x310>)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001006:	4a32      	ldr	r2, [pc, #200]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800100c:	4b30      	ldr	r3, [pc, #192]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001030:	4a27      	ldr	r2, [pc, #156]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001036:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105a:	4a1d      	ldr	r2, [pc, #116]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_GPIO_Init+0x334>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	f67f ae90 	bls.w	8000db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40013800 	.word	0x40013800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40021c00 	.word	0x40021c00
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e267      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d075      	beq.n	8001212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	4b88      	ldr	r3, [pc, #544]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b04      	cmp	r3, #4
 8001130:	d00c      	beq.n	800114c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001132:	4b85      	ldr	r3, [pc, #532]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800113a:	2b08      	cmp	r3, #8
 800113c:	d112      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113e:	4b82      	ldr	r3, [pc, #520]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800114a:	d10b      	bne.n	8001164 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	4b7e      	ldr	r3, [pc, #504]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d05b      	beq.n	8001210 <HAL_RCC_OscConfig+0x108>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d157      	bne.n	8001210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e242      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800116c:	d106      	bne.n	800117c <HAL_RCC_OscConfig+0x74>
 800116e:	4b76      	ldr	r3, [pc, #472]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a75      	ldr	r2, [pc, #468]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e01d      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x98>
 8001186:	4b70      	ldr	r3, [pc, #448]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a6f      	ldr	r2, [pc, #444]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	4b6d      	ldr	r3, [pc, #436]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a6c      	ldr	r2, [pc, #432]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e00b      	b.n	80011b8 <HAL_RCC_OscConfig+0xb0>
 80011a0:	4b69      	ldr	r3, [pc, #420]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a68      	ldr	r2, [pc, #416]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b66      	ldr	r3, [pc, #408]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a65      	ldr	r2, [pc, #404]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcfe 	bl	8000bc0 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fcfa 	bl	8000bc0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	@ 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e207      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011da:	4b5b      	ldr	r3, [pc, #364]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0xc0>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fcea 	bl	8000bc0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fce6 	bl	8000bc0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e1f3      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001202:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0xe8>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d063      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	4b4a      	ldr	r3, [pc, #296]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00b      	beq.n	8001242 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800122a:	4b47      	ldr	r3, [pc, #284]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d11c      	bne.n	8001270 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001236:	4b44      	ldr	r3, [pc, #272]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d116      	bne.n	8001270 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x152>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e1c7      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125a:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4937      	ldr	r1, [pc, #220]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	e03a      	b.n	80012e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001278:	4b34      	ldr	r3, [pc, #208]	@ (800134c <HAL_RCC_OscConfig+0x244>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff fc9f 	bl	8000bc0 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001286:	f7ff fc9b 	bl	8000bc0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e1a8      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	4b2b      	ldr	r3, [pc, #172]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0f0      	beq.n	8001286 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a4:	4b28      	ldr	r3, [pc, #160]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	4925      	ldr	r1, [pc, #148]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	4b24      	ldr	r3, [pc, #144]	@ (800134c <HAL_RCC_OscConfig+0x244>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fc7e 	bl	8000bc0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc7a 	bl	8000bc0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e187      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d036      	beq.n	8001360 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d016      	beq.n	8001328 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_RCC_OscConfig+0x248>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001300:	f7ff fc5e 	bl	8000bc0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fc5a 	bl	8000bc0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e167      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_RCC_OscConfig+0x240>)
 800131c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x200>
 8001326:	e01b      	b.n	8001360 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_RCC_OscConfig+0x248>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fc47 	bl	8000bc0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	e00e      	b.n	8001354 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff fc43 	bl	8000bc0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d907      	bls.n	8001354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e150      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
 8001348:	40023800 	.word	0x40023800
 800134c:	42470000 	.word	0x42470000
 8001350:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b88      	ldr	r3, [pc, #544]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ea      	bne.n	8001336 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8097 	beq.w	800149c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b81      	ldr	r3, [pc, #516]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10f      	bne.n	800139e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b7d      	ldr	r3, [pc, #500]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a7c      	ldr	r2, [pc, #496]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b7a      	ldr	r3, [pc, #488]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	4b77      	ldr	r3, [pc, #476]	@ (800157c <HAL_RCC_OscConfig+0x474>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013aa:	4b74      	ldr	r3, [pc, #464]	@ (800157c <HAL_RCC_OscConfig+0x474>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a73      	ldr	r2, [pc, #460]	@ (800157c <HAL_RCC_OscConfig+0x474>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fc03 	bl	8000bc0 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7ff fbff 	bl	8000bc0 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e10c      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d0:	4b6a      	ldr	r3, [pc, #424]	@ (800157c <HAL_RCC_OscConfig+0x474>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2ea>
 80013e4:	4b64      	ldr	r3, [pc, #400]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e8:	4a63      	ldr	r2, [pc, #396]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f0:	e01c      	b.n	800142c <HAL_RCC_OscConfig+0x324>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x30c>
 80013fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6713      	str	r3, [r2, #112]	@ 0x70
 8001406:	4b5c      	ldr	r3, [pc, #368]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140a:	4a5b      	ldr	r2, [pc, #364]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	@ 0x70
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x324>
 8001414:	4b58      	ldr	r3, [pc, #352]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001418:	4a57      	ldr	r2, [pc, #348]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001420:	4b55      	ldr	r3, [pc, #340]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001424:	4a54      	ldr	r2, [pc, #336]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001426:	f023 0304 	bic.w	r3, r3, #4
 800142a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d015      	beq.n	8001460 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fbc4 	bl	8000bc0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fbc0 	bl	8000bc0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e0cb      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001452:	4b49      	ldr	r3, [pc, #292]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0ee      	beq.n	800143c <HAL_RCC_OscConfig+0x334>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fbae 	bl	8000bc0 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	e00a      	b.n	800147e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001468:	f7ff fbaa 	bl	8000bc0 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e0b5      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ee      	bne.n	8001468 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001490:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	4a38      	ldr	r2, [pc, #224]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80a1 	beq.w	80015e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 030c 	and.w	r3, r3, #12
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d05c      	beq.n	800156c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d141      	bne.n	800153e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <HAL_RCC_OscConfig+0x478>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb7e 	bl	8000bc0 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fb7a 	bl	8000bc0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e087      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69da      	ldr	r2, [r3, #28]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	019b      	lsls	r3, r3, #6
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fc:	085b      	lsrs	r3, r3, #1
 80014fe:	3b01      	subs	r3, #1
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001508:	061b      	lsls	r3, r3, #24
 800150a:	491b      	ldr	r1, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 800150c:	4313      	orrs	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_OscConfig+0x478>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb53 	bl	8000bc0 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151e:	f7ff fb4f 	bl	8000bc0 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e05c      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x416>
 800153c:	e054      	b.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb3c 	bl	8000bc0 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb38 	bl	8000bc0 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e045      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x444>
 800156a:	e03d      	b.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e038      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000
 8001580:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x4ec>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d028      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d121      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d11a      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015b4:	4013      	ands	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015bc:	4293      	cmp	r3, r2
 80015be:	d111      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	3b01      	subs	r3, #1
 80015ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d107      	bne.n	80015e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800

080015f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0cc      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800160c:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	429a      	cmp	r2, r3
 8001618:	d90c      	bls.n	8001634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	4b65      	ldr	r3, [pc, #404]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001622:	4b63      	ldr	r3, [pc, #396]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0b8      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800164c:	4b59      	ldr	r3, [pc, #356]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a58      	ldr	r2, [pc, #352]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001664:	4b53      	ldr	r3, [pc, #332]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	4a52      	ldr	r2, [pc, #328]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800166e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001670:	4b50      	ldr	r3, [pc, #320]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	494d      	ldr	r1, [pc, #308]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d044      	beq.n	8001718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b47      	ldr	r3, [pc, #284]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d119      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e07f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d003      	beq.n	80016b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b6:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d109      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e06f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c6:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e067      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d6:	4b37      	ldr	r3, [pc, #220]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f023 0203 	bic.w	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4934      	ldr	r1, [pc, #208]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e8:	f7ff fa6a 	bl	8000bc0 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f0:	f7ff fa66 	bl	8000bc0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e04f      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 020c 	and.w	r2, r3, #12
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	429a      	cmp	r2, r3
 8001716:	d1eb      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d20c      	bcs.n	8001740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d001      	beq.n	8001740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e032      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	4916      	ldr	r1, [pc, #88]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	4313      	orrs	r3, r2
 800175c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	490e      	ldr	r1, [pc, #56]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177e:	f000 f821 	bl	80017c4 <HAL_RCC_GetSysClockFreq>
 8001782:	4602      	mov	r2, r0
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	490a      	ldr	r1, [pc, #40]	@ (80017b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	fa22 f303 	lsr.w	r3, r2, r3
 8001796:	4a09      	ldr	r2, [pc, #36]	@ (80017bc <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f8fa 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00
 80017b4:	40023800 	.word	0x40023800
 80017b8:	08006814 	.word	0x08006814
 80017bc:	20000008 	.word	0x20000008
 80017c0:	2000000c 	.word	0x2000000c

080017c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c8:	b094      	sub	sp, #80	@ 0x50
 80017ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80017d0:	2300      	movs	r3, #0
 80017d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017dc:	4b79      	ldr	r3, [pc, #484]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d00d      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x40>
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	f200 80e1 	bhi.w	80019b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0x34>
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d003      	beq.n	80017fe <HAL_RCC_GetSysClockFreq+0x3a>
 80017f6:	e0db      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80017fc:	e0db      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fe:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001802:	e0d8      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001804:	4b6f      	ldr	r3, [pc, #444]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800180c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180e:	4b6d      	ldr	r3, [pc, #436]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d063      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181a:	4b6a      	ldr	r3, [pc, #424]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	099b      	lsrs	r3, r3, #6
 8001820:	2200      	movs	r2, #0
 8001822:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001824:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800182c:	633b      	str	r3, [r7, #48]	@ 0x30
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	@ 0x34
 8001832:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001836:	4622      	mov	r2, r4
 8001838:	462b      	mov	r3, r5
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0159      	lsls	r1, r3, #5
 8001844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001848:	0150      	lsls	r0, r2, #5
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4621      	mov	r1, r4
 8001850:	1a51      	subs	r1, r2, r1
 8001852:	6139      	str	r1, [r7, #16]
 8001854:	4629      	mov	r1, r5
 8001856:	eb63 0301 	sbc.w	r3, r3, r1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001868:	4659      	mov	r1, fp
 800186a:	018b      	lsls	r3, r1, #6
 800186c:	4651      	mov	r1, sl
 800186e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001872:	4651      	mov	r1, sl
 8001874:	018a      	lsls	r2, r1, #6
 8001876:	4651      	mov	r1, sl
 8001878:	ebb2 0801 	subs.w	r8, r2, r1
 800187c:	4659      	mov	r1, fp
 800187e:	eb63 0901 	sbc.w	r9, r3, r1
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800188e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001892:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001896:	4690      	mov	r8, r2
 8001898:	4699      	mov	r9, r3
 800189a:	4623      	mov	r3, r4
 800189c:	eb18 0303 	adds.w	r3, r8, r3
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	462b      	mov	r3, r5
 80018a4:	eb49 0303 	adc.w	r3, r9, r3
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018b6:	4629      	mov	r1, r5
 80018b8:	024b      	lsls	r3, r1, #9
 80018ba:	4621      	mov	r1, r4
 80018bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018c0:	4621      	mov	r1, r4
 80018c2:	024a      	lsls	r2, r1, #9
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ca:	2200      	movs	r2, #0
 80018cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018d4:	f7fe fcc6 	bl	8000264 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018e0:	e058      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	099b      	lsrs	r3, r3, #6
 80018e8:	2200      	movs	r2, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	4611      	mov	r1, r2
 80018ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018fc:	4642      	mov	r2, r8
 80018fe:	464b      	mov	r3, r9
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	f04f 0100 	mov.w	r1, #0
 8001908:	0159      	lsls	r1, r3, #5
 800190a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190e:	0150      	lsls	r0, r2, #5
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4641      	mov	r1, r8
 8001916:	ebb2 0a01 	subs.w	sl, r2, r1
 800191a:	4649      	mov	r1, r9
 800191c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800192c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001930:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001934:	ebb2 040a 	subs.w	r4, r2, sl
 8001938:	eb63 050b 	sbc.w	r5, r3, fp
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	00eb      	lsls	r3, r5, #3
 8001946:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800194a:	00e2      	lsls	r2, r4, #3
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	4643      	mov	r3, r8
 8001952:	18e3      	adds	r3, r4, r3
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	464b      	mov	r3, r9
 8001958:	eb45 0303 	adc.w	r3, r5, r3
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800196a:	4629      	mov	r1, r5
 800196c:	028b      	lsls	r3, r1, #10
 800196e:	4621      	mov	r1, r4
 8001970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001974:	4621      	mov	r1, r4
 8001976:	028a      	lsls	r2, r1, #10
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800197e:	2200      	movs	r2, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	61fa      	str	r2, [r7, #28]
 8001984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001988:	f7fe fc6c 	bl	8000264 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001994:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	3301      	adds	r3, #1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80019a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3750      	adds	r7, #80	@ 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019ec:	f7ff fff0 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 80019f0:	4602      	mov	r2, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	0a9b      	lsrs	r3, r3, #10
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4903      	ldr	r1, [pc, #12]	@ (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fe:	5ccb      	ldrb	r3, [r1, r3]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08006824 	.word	0x08006824

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a14:	f7ff ffdc 	bl	80019d0 <HAL_RCC_GetHCLKFreq>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	0b5b      	lsrs	r3, r3, #13
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4903      	ldr	r1, [pc, #12]	@ (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a26:	5ccb      	ldrb	r3, [r1, r3]
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	08006824 	.word	0x08006824

08001a38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	220f      	movs	r2, #15
 8001a46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a54:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a6c:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7a:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <HAL_RCC_GetClockConfig+0x60>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0207 	and.w	r2, r3, #7
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	601a      	str	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40023c00 	.word	0x40023c00

08001a9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e041      	b.n	8001b32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f839 	bl	8001b3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4610      	mov	r0, r2
 8001adc:	f000 f9c0 	bl	8001e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d001      	beq.n	8001b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04e      	b.n	8001c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b92:	d01d      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1f      	ldr	r2, [pc, #124]	@ (8001c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	@ (8001c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_TIM_Base_Start_IT+0x80>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a18      	ldr	r2, [pc, #96]	@ (8001c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d010      	beq.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0201 	orr.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bf2:	e007      	b.n	8001c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	40010400 	.word	0x40010400
 8001c28:	40014000 	.word	0x40014000
 8001c2c:	40001800 	.word	0x40001800

08001c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d020      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d01b      	beq.n	8001c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0202 	mvn.w	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f8d2 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8c4 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f8d5 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d020      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01b      	beq.n	8001ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0204 	mvn.w	r2, #4
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8ac 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f89e 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f8af 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d020      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f003 0308 	and.w	r3, r3, #8
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01b      	beq.n	8001d2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0208 	mvn.w	r2, #8
 8001cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f886 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d18:	e005      	b.n	8001d26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f878 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f889 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d020      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01b      	beq.n	8001d78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0210 	mvn.w	r2, #16
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f860 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f852 	bl	8001e10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f863 	bl	8001e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00c      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f06f 0201 	mvn.w	r2, #1
 8001d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7fe fd76 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00c      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f906 	bl	8001fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00c      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f834 	bl	8001e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00c      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0220 	mvn.w	r2, #32
 8001e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8d8 	bl	8001fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a46      	ldr	r2, [pc, #280]	@ (8001f8c <TIM_Base_SetConfig+0x12c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7e:	d00f      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a43      	ldr	r2, [pc, #268]	@ (8001f90 <TIM_Base_SetConfig+0x130>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00b      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a42      	ldr	r2, [pc, #264]	@ (8001f94 <TIM_Base_SetConfig+0x134>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a41      	ldr	r2, [pc, #260]	@ (8001f98 <TIM_Base_SetConfig+0x138>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	@ (8001f9c <TIM_Base_SetConfig+0x13c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	@ (8001f8c <TIM_Base_SetConfig+0x12c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec0:	d027      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a32      	ldr	r2, [pc, #200]	@ (8001f90 <TIM_Base_SetConfig+0x130>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d023      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <TIM_Base_SetConfig+0x134>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a30      	ldr	r2, [pc, #192]	@ (8001f98 <TIM_Base_SetConfig+0x138>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2f      	ldr	r2, [pc, #188]	@ (8001f9c <TIM_Base_SetConfig+0x13c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d017      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8001fa0 <TIM_Base_SetConfig+0x140>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <TIM_Base_SetConfig+0x144>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa8 <TIM_Base_SetConfig+0x148>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <TIM_Base_SetConfig+0x14c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	@ (8001fb0 <TIM_Base_SetConfig+0x150>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <TIM_Base_SetConfig+0x154>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d108      	bne.n	8001f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <TIM_Base_SetConfig+0x12c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <TIM_Base_SetConfig+0xf8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <TIM_Base_SetConfig+0x13c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d103      	bne.n	8001f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f023 0201 	bic.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]
  }
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40000400 	.word	0x40000400
 8001f94:	40000800 	.word	0x40000800
 8001f98:	40000c00 	.word	0x40000c00
 8001f9c:	40010400 	.word	0x40010400
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014400 	.word	0x40014400
 8001fa8:	40014800 	.word	0x40014800
 8001fac:	40001800 	.word	0x40001800
 8001fb0:	40001c00 	.word	0x40001c00
 8001fb4:	40002000 	.word	0x40002000

08001fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e042      	b.n	8002078 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe fc7e 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f973 	bl	8002310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	@ 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d175      	bne.n	800218c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_UART_Transmit+0x2c>
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e06e      	b.n	800218e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2221      	movs	r2, #33	@ 0x21
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020be:	f7fe fd7f 	bl	8000bc0 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	88fa      	ldrh	r2, [r7, #6]
 80020ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020d8:	d108      	bne.n	80020ec <HAL_UART_Transmit+0x6c>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	e003      	b.n	80020f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020f4:	e02e      	b.n	8002154 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	2200      	movs	r2, #0
 80020fe:	2180      	movs	r1, #128	@ 0x80
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f848 	bl	8002196 <UART_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e03a      	b.n	800218e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10b      	bne.n	8002136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800212c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	3302      	adds	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
 8002134:	e007      	b.n	8002146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1cb      	bne.n	80020f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	2140      	movs	r1, #64	@ 0x40
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f814 	bl	8002196 <UART_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2220      	movs	r2, #32
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e006      	b.n	800218e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800218c:	2302      	movs	r3, #2
  }
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4613      	mov	r3, r2
 80021a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a6:	e03b      	b.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d037      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b0:	f7fe fd06 	bl	8000bc0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	6a3a      	ldr	r2, [r7, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d302      	bcc.n	80021c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e03a      	b.n	8002240 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b80      	cmp	r3, #128	@ 0x80
 80021dc:	d020      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b40      	cmp	r3, #64	@ 0x40
 80021e2:	d01d      	beq.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d116      	bne.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021f2:	2300      	movs	r3, #0
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f81d 	bl	8002248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2208      	movs	r2, #8
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e00f      	b.n	8002240 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	4013      	ands	r3, r2
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	429a      	cmp	r2, r3
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	429a      	cmp	r2, r3
 800223c:	d0b4      	beq.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002248:	b480      	push	{r7}
 800224a:	b095      	sub	sp, #84	@ 0x54
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	330c      	adds	r3, #12
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225a:	e853 3f00 	ldrex	r3, [r3]
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	330c      	adds	r3, #12
 800226e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002270:	643a      	str	r2, [r7, #64]	@ 0x40
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002278:	e841 2300 	strex	r3, r2, [r1]
 800227c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1e5      	bne.n	8002250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3314      	adds	r3, #20
 800228a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	e853 3f00 	ldrex	r3, [r3]
 8002292:	61fb      	str	r3, [r7, #28]
   return(result);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3314      	adds	r3, #20
 80022a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ac:	e841 2300 	strex	r3, r2, [r1]
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e5      	bne.n	8002284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d119      	bne.n	80022f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	e853 3f00 	ldrex	r3, [r3]
 80022ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f023 0310 	bic.w	r3, r3, #16
 80022d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022e0:	61ba      	str	r2, [r7, #24]
 80022e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e4:	6979      	ldr	r1, [r7, #20]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	e841 2300 	strex	r3, r2, [r1]
 80022ec:	613b      	str	r3, [r7, #16]
   return(result);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e5      	bne.n	80022c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002302:	bf00      	nop
 8002304:	3754      	adds	r7, #84	@ 0x54
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b0c0      	sub	sp, #256	@ 0x100
 8002316:	af00      	add	r7, sp, #0
 8002318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232c:	68d9      	ldr	r1, [r3, #12]
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	ea40 0301 	orr.w	r3, r0, r1
 8002338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	431a      	orrs	r2, r3
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002368:	f021 010c 	bic.w	r1, r1, #12
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002376:	430b      	orrs	r3, r1
 8002378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800237a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800238a:	6999      	ldr	r1, [r3, #24]
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	ea40 0301 	orr.w	r3, r0, r1
 8002396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b8f      	ldr	r3, [pc, #572]	@ (80025dc <UART_SetConfig+0x2cc>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d005      	beq.n	80023b0 <UART_SetConfig+0xa0>
 80023a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b8d      	ldr	r3, [pc, #564]	@ (80025e0 <UART_SetConfig+0x2d0>)
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d104      	bne.n	80023ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7ff fb2e 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 80023b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023b8:	e003      	b.n	80023c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ba:	f7ff fb15 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 80023be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023cc:	f040 810c 	bne.w	80025e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023e2:	4622      	mov	r2, r4
 80023e4:	462b      	mov	r3, r5
 80023e6:	1891      	adds	r1, r2, r2
 80023e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023ea:	415b      	adcs	r3, r3
 80023ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023f2:	4621      	mov	r1, r4
 80023f4:	eb12 0801 	adds.w	r8, r2, r1
 80023f8:	4629      	mov	r1, r5
 80023fa:	eb43 0901 	adc.w	r9, r3, r1
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	4690      	mov	r8, r2
 8002414:	4699      	mov	r9, r3
 8002416:	4623      	mov	r3, r4
 8002418:	eb18 0303 	adds.w	r3, r8, r3
 800241c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002420:	462b      	mov	r3, r5
 8002422:	eb49 0303 	adc.w	r3, r9, r3
 8002426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800242a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800243a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800243e:	460b      	mov	r3, r1
 8002440:	18db      	adds	r3, r3, r3
 8002442:	653b      	str	r3, [r7, #80]	@ 0x50
 8002444:	4613      	mov	r3, r2
 8002446:	eb42 0303 	adc.w	r3, r2, r3
 800244a:	657b      	str	r3, [r7, #84]	@ 0x54
 800244c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002454:	f7fd ff06 	bl	8000264 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4b61      	ldr	r3, [pc, #388]	@ (80025e4 <UART_SetConfig+0x2d4>)
 800245e:	fba3 2302 	umull	r2, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	011c      	lsls	r4, r3, #4
 8002466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002478:	4642      	mov	r2, r8
 800247a:	464b      	mov	r3, r9
 800247c:	1891      	adds	r1, r2, r2
 800247e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002480:	415b      	adcs	r3, r3
 8002482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002488:	4641      	mov	r1, r8
 800248a:	eb12 0a01 	adds.w	sl, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb43 0b01 	adc.w	fp, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a8:	4692      	mov	sl, r2
 80024aa:	469b      	mov	fp, r3
 80024ac:	4643      	mov	r3, r8
 80024ae:	eb1a 0303 	adds.w	r3, sl, r3
 80024b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024b6:	464b      	mov	r3, r9
 80024b8:	eb4b 0303 	adc.w	r3, fp, r3
 80024bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024d4:	460b      	mov	r3, r1
 80024d6:	18db      	adds	r3, r3, r3
 80024d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80024da:	4613      	mov	r3, r2
 80024dc:	eb42 0303 	adc.w	r3, r2, r3
 80024e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80024e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024ea:	f7fd febb 	bl	8000264 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80024f6:	fba3 2301 	umull	r2, r3, r3, r1
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2264      	movs	r2, #100	@ 0x64
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	1acb      	subs	r3, r1, r3
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800250a:	4b36      	ldr	r3, [pc, #216]	@ (80025e4 <UART_SetConfig+0x2d4>)
 800250c:	fba3 2302 	umull	r2, r3, r3, r2
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002518:	441c      	add	r4, r3
 800251a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800251e:	2200      	movs	r2, #0
 8002520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800252c:	4642      	mov	r2, r8
 800252e:	464b      	mov	r3, r9
 8002530:	1891      	adds	r1, r2, r2
 8002532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002534:	415b      	adcs	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800253c:	4641      	mov	r1, r8
 800253e:	1851      	adds	r1, r2, r1
 8002540:	6339      	str	r1, [r7, #48]	@ 0x30
 8002542:	4649      	mov	r1, r9
 8002544:	414b      	adcs	r3, r1
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002554:	4659      	mov	r1, fp
 8002556:	00cb      	lsls	r3, r1, #3
 8002558:	4651      	mov	r1, sl
 800255a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800255e:	4651      	mov	r1, sl
 8002560:	00ca      	lsls	r2, r1, #3
 8002562:	4610      	mov	r0, r2
 8002564:	4619      	mov	r1, r3
 8002566:	4603      	mov	r3, r0
 8002568:	4642      	mov	r2, r8
 800256a:	189b      	adds	r3, r3, r2
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002570:	464b      	mov	r3, r9
 8002572:	460a      	mov	r2, r1
 8002574:	eb42 0303 	adc.w	r3, r2, r3
 8002578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800257c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800258c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002590:	460b      	mov	r3, r1
 8002592:	18db      	adds	r3, r3, r3
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002596:	4613      	mov	r3, r2
 8002598:	eb42 0303 	adc.w	r3, r2, r3
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800259e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80025a6:	f7fd fe5d 	bl	8000264 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b0d      	ldr	r3, [pc, #52]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	@ 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	3332      	adds	r3, #50	@ 0x32
 80025c2:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <UART_SetConfig+0x2d4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4422      	add	r2, r4
 80025d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025d8:	e106      	b.n	80027e8 <UART_SetConfig+0x4d8>
 80025da:	bf00      	nop
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40011400 	.word	0x40011400
 80025e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025fa:	4642      	mov	r2, r8
 80025fc:	464b      	mov	r3, r9
 80025fe:	1891      	adds	r1, r2, r2
 8002600:	6239      	str	r1, [r7, #32]
 8002602:	415b      	adcs	r3, r3
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
 8002606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800260a:	4641      	mov	r1, r8
 800260c:	1854      	adds	r4, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb43 0501 	adc.w	r5, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	00eb      	lsls	r3, r5, #3
 800261e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002622:	00e2      	lsls	r2, r4, #3
 8002624:	4614      	mov	r4, r2
 8002626:	461d      	mov	r5, r3
 8002628:	4643      	mov	r3, r8
 800262a:	18e3      	adds	r3, r4, r3
 800262c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002630:	464b      	mov	r3, r9
 8002632:	eb45 0303 	adc.w	r3, r5, r3
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002656:	4629      	mov	r1, r5
 8002658:	008b      	lsls	r3, r1, #2
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002660:	4621      	mov	r1, r4
 8002662:	008a      	lsls	r2, r1, #2
 8002664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002668:	f7fd fdfc 	bl	8000264 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4b60      	ldr	r3, [pc, #384]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002672:	fba3 2302 	umull	r2, r3, r3, r2
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	011c      	lsls	r4, r3, #4
 800267a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800267e:	2200      	movs	r2, #0
 8002680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	1891      	adds	r1, r2, r2
 8002692:	61b9      	str	r1, [r7, #24]
 8002694:	415b      	adcs	r3, r3
 8002696:	61fb      	str	r3, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	4641      	mov	r1, r8
 800269e:	1851      	adds	r1, r2, r1
 80026a0:	6139      	str	r1, [r7, #16]
 80026a2:	4649      	mov	r1, r9
 80026a4:	414b      	adcs	r3, r1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b4:	4659      	mov	r1, fp
 80026b6:	00cb      	lsls	r3, r1, #3
 80026b8:	4651      	mov	r1, sl
 80026ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026be:	4651      	mov	r1, sl
 80026c0:	00ca      	lsls	r2, r1, #3
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	4603      	mov	r3, r0
 80026c8:	4642      	mov	r2, r8
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026d0:	464b      	mov	r3, r9
 80026d2:	460a      	mov	r2, r1
 80026d4:	eb42 0303 	adc.w	r3, r2, r3
 80026d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026f4:	4649      	mov	r1, r9
 80026f6:	008b      	lsls	r3, r1, #2
 80026f8:	4641      	mov	r1, r8
 80026fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026fe:	4641      	mov	r1, r8
 8002700:	008a      	lsls	r2, r1, #2
 8002702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002706:	f7fd fdad 	bl	8000264 <__aeabi_uldivmod>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4611      	mov	r1, r2
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002712:	fba3 2301 	umull	r2, r3, r3, r1
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	2264      	movs	r2, #100	@ 0x64
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	1acb      	subs	r3, r1, r3
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	3332      	adds	r3, #50	@ 0x32
 8002724:	4a33      	ldr	r2, [pc, #204]	@ (80027f4 <UART_SetConfig+0x4e4>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002730:	441c      	add	r4, r3
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	673b      	str	r3, [r7, #112]	@ 0x70
 800273a:	677a      	str	r2, [r7, #116]	@ 0x74
 800273c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	1891      	adds	r1, r2, r2
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	415b      	adcs	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002750:	4641      	mov	r1, r8
 8002752:	1851      	adds	r1, r2, r1
 8002754:	6039      	str	r1, [r7, #0]
 8002756:	4649      	mov	r1, r9
 8002758:	414b      	adcs	r3, r1
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002768:	4659      	mov	r1, fp
 800276a:	00cb      	lsls	r3, r1, #3
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002772:	4651      	mov	r1, sl
 8002774:	00ca      	lsls	r2, r1, #3
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	4603      	mov	r3, r0
 800277c:	4642      	mov	r2, r8
 800277e:	189b      	adds	r3, r3, r2
 8002780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002782:	464b      	mov	r3, r9
 8002784:	460a      	mov	r2, r1
 8002786:	eb42 0303 	adc.w	r3, r2, r3
 800278a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
 8002796:	667a      	str	r2, [r7, #100]	@ 0x64
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80027a4:	4649      	mov	r1, r9
 80027a6:	008b      	lsls	r3, r1, #2
 80027a8:	4641      	mov	r1, r8
 80027aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ae:	4641      	mov	r1, r8
 80027b0:	008a      	lsls	r2, r1, #2
 80027b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027b6:	f7fd fd55 	bl	8000264 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <UART_SetConfig+0x4e4>)
 80027c0:	fba3 1302 	umull	r1, r3, r3, r2
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	2164      	movs	r1, #100	@ 0x64
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	3332      	adds	r3, #50	@ 0x32
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <UART_SetConfig+0x4e4>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f003 020f 	and.w	r2, r3, #15
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4422      	add	r2, r4
 80027e6:	609a      	str	r2, [r3, #8]
}
 80027e8:	bf00      	nop
 80027ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027ee:	46bd      	mov	sp, r7
 80027f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f4:	51eb851f 	.word	0x51eb851f

080027f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f103 0208 	add.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0208 	add.w	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f103 0208 	add.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800282c:	f240 1019 	movw	r0, #281	@ 0x119
 8002830:	f003 fadc 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800284a:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800284e:	f003 facd 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002870:	d103      	bne.n	800287a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e00c      	b.n	8002894 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3308      	adds	r3, #8
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	e002      	b.n	8002888 <vListInsert+0x2e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	429a      	cmp	r2, r3
 8002892:	d2f6      	bcs.n	8002882 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80028c0:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80028c4:	f003 fa92 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6852      	ldr	r2, [r2, #4]
 80028f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d103      	bne.n	8002904 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4619      	mov	r1, r3
 800291a:	f240 101d 	movw	r0, #285	@ 0x11d
 800291e:	f003 faa1 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800293a:	2301      	movs	r3, #1
 800293c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10b      	bne.n	8002960 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d05d      	beq.n	8002a22 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800296a:	2b00      	cmp	r3, #0
 800296c:	d059      	beq.n	8002a22 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002976:	2100      	movs	r1, #0
 8002978:	fba3 2302 	umull	r2, r3, r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d000      	beq.n	8002982 <xQueueGenericReset+0x52>
 8002980:	2101      	movs	r1, #1
 8002982:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d14c      	bne.n	8002a22 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002988:	f001 ffec 	bl	8004964 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002994:	6939      	ldr	r1, [r7, #16]
 8002996:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002998:	fb01 f303 	mul.w	r3, r1, r3
 800299c:	441a      	add	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2200      	movs	r2, #0
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	3b01      	subs	r3, #1
 80029ba:	6939      	ldr	r1, [r7, #16]
 80029bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	441a      	add	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	22ff      	movs	r2, #255	@ 0xff
 80029cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	22ff      	movs	r2, #255	@ 0xff
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d114      	bne.n	8002a08 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d01a      	beq.n	8002a1c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	3310      	adds	r3, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 f8d2 	bl	8003b94 <xTaskRemoveFromEventList>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80029f6:	4b18      	ldr	r3, [pc, #96]	@ (8002a58 <xQueueGenericReset+0x128>)
 80029f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	f3bf 8f6f 	isb	sy
 8002a06:	e009      	b.n	8002a1c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fef3 	bl	80027f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3324      	adds	r3, #36	@ 0x24
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff feee 	bl	80027f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a1c:	f001 ffd4 	bl	80049c8 <vPortExitCritical>
 8002a20:	e001      	b.n	8002a26 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <xQueueGenericReset+0x114>
    __asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60bb      	str	r3, [r7, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	4619      	mov	r1, r3
 8002a48:	2096      	movs	r0, #150	@ 0x96
 8002a4a:	f003 fa0b 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002a4e:	697b      	ldr	r3, [r7, #20]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	e000ed04 	.word	0xe000ed04

08002a5c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02e      	beq.n	8002ad2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a74:	2100      	movs	r1, #0
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d000      	beq.n	8002a84 <xQueueGenericCreate+0x28>
 8002a82:	2101      	movs	r1, #1
 8002a84:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d123      	bne.n	8002ad2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a92:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002a96:	d81c      	bhi.n	8002ad2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	fb02 f303 	mul.w	r3, r2, r3
 8002aa0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	3350      	adds	r3, #80	@ 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f002 f88a 	bl	8004bc0 <pvPortMalloc>
 8002aac:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01d      	beq.n	8002af0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3350      	adds	r3, #80	@ 0x50
 8002abc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002abe:	79fa      	ldrb	r2, [r7, #7]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f81e 	bl	8002b0c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ad0:	e00e      	b.n	8002af0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10b      	bne.n	8002af0 <xQueueGenericCreate+0x94>
    __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	613b      	str	r3, [r7, #16]
}
 8002aea:	bf00      	nop
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f003 fb50 	bl	8006198 <SEGGER_SYSVIEW_ShrinkId>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2098      	movs	r0, #152	@ 0x98
 8002afe:	f003 f9b1 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002b02:	69fb      	ldr	r3, [r7, #28]
    }
 8002b04:	4618      	mov	r0, r3
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d103      	bne.n	8002b28 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e002      	b.n	8002b2e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	69b8      	ldr	r0, [r7, #24]
 8002b3e:	f7ff fef7 	bl	8002930 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08c      	sub	sp, #48	@ 0x30
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <xQueueReceive+0x32>
    __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	623b      	str	r3, [r7, #32]
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	e7fd      	b.n	8002b82 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueReceive+0x40>
 8002b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <xQueueReceive+0x44>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <xQueueReceive+0x46>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <xQueueReceive+0x62>
    __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	61fb      	str	r3, [r7, #28]
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb6:	f001 fa0f 	bl	8003fd8 <xTaskGetSchedulerState>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <xQueueReceive+0x72>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <xQueueReceive+0x76>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <xQueueReceive+0x78>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <xQueueReceive+0x94>
    __asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	61bb      	str	r3, [r7, #24]
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002be8:	f001 febc 	bl	8004964 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d023      	beq.n	8002c40 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bfc:	f000 f898 	bl	8002d30 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	3310      	adds	r3, #16
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 ffbd 	bl	8003b94 <xTaskRemoveFromEventList>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c20:	4b42      	ldr	r3, [pc, #264]	@ (8002d2c <xQueueReceive+0x1d8>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c30:	f001 feca 	bl	80049c8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002c34:	2101      	movs	r1, #1
 8002c36:	20a4      	movs	r0, #164	@ 0xa4
 8002c38:	f003 f914 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e071      	b.n	8002d24 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d107      	bne.n	8002c56 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c46:	f001 febf 	bl	80049c8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	20a4      	movs	r0, #164	@ 0xa4
 8002c4e:	f003 f909 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e066      	b.n	8002d24 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f877 	bl	8003d54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c6a:	f001 fead 	bl	80049c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c6e:	f000 fc49 	bl	8003504 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c72:	f001 fe77 	bl	8004964 <vPortEnterCritical>
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <xQueueReceive+0x138>
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d103      	bne.n	8002ca2 <xQueueReceive+0x14e>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ca2:	f001 fe91 	bl	80049c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca6:	1d3a      	adds	r2, r7, #4
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f868 	bl	8003d84 <xTaskCheckForTimeOut>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d123      	bne.n	8002d02 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cbc:	f000 f8b0 	bl	8002e20 <prvIsQueueEmpty>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d017      	beq.n	8002cf6 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc8:	3324      	adds	r3, #36	@ 0x24
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 feee 	bl	8003ab0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cd6:	f000 f851 	bl	8002d7c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002cda:	f000 fc21 	bl	8003520 <xTaskResumeAll>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d181      	bne.n	8002be8 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <xQueueReceive+0x1d8>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	e778      	b.n	8002be8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cf8:	f000 f840 	bl	8002d7c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cfc:	f000 fc10 	bl	8003520 <xTaskResumeAll>
 8002d00:	e772      	b.n	8002be8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d04:	f000 f83a 	bl	8002d7c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d08:	f000 fc0a 	bl	8003520 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d0e:	f000 f887 	bl	8002e20 <prvIsQueueEmpty>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f43f af67 	beq.w	8002be8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	20a4      	movs	r0, #164	@ 0xa4
 8002d1e:	f003 f8a1 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002d22:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3730      	adds	r7, #48	@ 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	441a      	add	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d303      	bcc.n	8002d64 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68d9      	ldr	r1, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	6838      	ldr	r0, [r7, #0]
 8002d70:	f003 fcb6 	bl	80066e0 <memcpy>
    }
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d84:	f001 fdee 	bl	8004964 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d8e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d90:	e011      	b.n	8002db6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3324      	adds	r3, #36	@ 0x24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fef8 	bl	8003b94 <xTaskRemoveFromEventList>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002daa:	f001 f857 	bl	8003e5c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	dce9      	bgt.n	8002d92 <prvUnlockQueue+0x16>
 8002dbe:	e000      	b.n	8002dc2 <prvUnlockQueue+0x46>
                    break;
 8002dc0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	22ff      	movs	r2, #255	@ 0xff
 8002dc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002dca:	f001 fdfd 	bl	80049c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dce:	f001 fdc9 	bl	8004964 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dd8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dda:	e011      	b.n	8002e00 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d012      	beq.n	8002e0a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3310      	adds	r3, #16
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fed3 	bl	8003b94 <xTaskRemoveFromEventList>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002df4:	f001 f832 	bl	8003e5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002df8:	7bbb      	ldrb	r3, [r7, #14]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	dce9      	bgt.n	8002ddc <prvUnlockQueue+0x60>
 8002e08:	e000      	b.n	8002e0c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002e0a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	22ff      	movs	r2, #255	@ 0xff
 8002e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002e14:	f001 fdd8 	bl	80049c8 <vPortExitCritical>
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e28:	f001 fd9c 	bl	8004964 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e001      	b.n	8002e3e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e3e:	f001 fdc3 	bl	80049c8 <vPortExitCritical>

    return xReturn;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10b      	bne.n	8002e78 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d024      	beq.n	8002ec8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e01e      	b.n	8002ec2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e84:	4a18      	ldr	r2, [pc, #96]	@ (8002ee8 <vQueueAddToRegistry+0x9c>)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d105      	bne.n	8002ea0 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4a13      	ldr	r2, [pc, #76]	@ (8002ee8 <vQueueAddToRegistry+0x9c>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
                    break;
 8002e9e:	e013      	b.n	8002ec8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <vQueueAddToRegistry+0x70>
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <vQueueAddToRegistry+0x9c>)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee8 <vQueueAddToRegistry+0x9c>)
 8002eb8:	4413      	add	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b07      	cmp	r3, #7
 8002ec6:	d9dd      	bls.n	8002e84 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d005      	beq.n	8002eda <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002eda:	20b6      	movs	r0, #182	@ 0xb6
 8002edc:	f002 ff86 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200000cc 	.word	0x200000cc

08002eec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002efc:	f001 fd32 	bl	8004964 <vPortEnterCritical>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0c:	d103      	bne.n	8002f16 <vQueueWaitForMessageRestricted+0x2a>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d103      	bne.n	8002f2c <vQueueWaitForMessageRestricted+0x40>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f2c:	f001 fd4c 	bl	80049c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3324      	adds	r3, #36	@ 0x24
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	68b9      	ldr	r1, [r7, #8]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 fddd 	bl	8003b00 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7ff ff18 	bl	8002d7c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002f4c:	20b9      	movs	r0, #185	@ 0xb9
 8002f4e:	f002 ff4d 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f52:	bf00      	nop
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08a      	sub	sp, #40	@ 0x28
 8002f5e:	af04      	add	r7, sp, #16
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fe27 	bl	8004bc0 <pvPortMalloc>
 8002f72:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d013      	beq.n	8002fa2 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002f7a:	2058      	movs	r0, #88	@ 0x58
 8002f7c:	f001 fe20 	bl	8004bc0 <pvPortMalloc>
 8002f80:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f88:	2258      	movs	r2, #88	@ 0x58
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	6978      	ldr	r0, [r7, #20]
 8002f8e:	f003 fb7a 	bl	8006686 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f98:	e005      	b.n	8002fa6 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002f9a:	6938      	ldr	r0, [r7, #16]
 8002f9c:	f001 fe64 	bl	8004c68 <vPortFree>
 8002fa0:	e001      	b.n	8002fa6 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fac:	2300      	movs	r3, #0
 8002fae:	9303      	str	r3, [sp, #12]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f82d 	bl	8003022 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002fc8:	697b      	ldr	r3, [r7, #20]
    }
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff ffb3 	bl	8002f5a <prvCreateTask>
 8002ff4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002ffc:	6938      	ldr	r0, [r7, #16]
 8002ffe:	f000 f8a1 	bl	8003144 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003002:	2301      	movs	r3, #1
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e002      	b.n	800300e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
 800300c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4619      	mov	r1, r3
 8003012:	20c2      	movs	r0, #194	@ 0xc2
 8003014:	f002 ff26 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003018:	697b      	ldr	r3, [r7, #20]
    }
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b088      	sub	sp, #32
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003032:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	461a      	mov	r2, r3
 800303a:	21a5      	movs	r1, #165	@ 0xa5
 800303c:	f003 fb23 	bl	8006686 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800304a:	3b01      	subs	r3, #1
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f023 0307 	bic.w	r3, r3, #7
 8003058:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	617b      	str	r3, [r7, #20]
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01e      	beq.n	80030c0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e012      	b.n	80030ae <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	7819      	ldrb	r1, [r3, #0]
 8003090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	3334      	adds	r3, #52	@ 0x34
 8003098:	460a      	mov	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d006      	beq.n	80030b6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d9e9      	bls.n	8003088 <prvInitialiseNewTask+0x66>
 80030b4:	e000      	b.n	80030b8 <prvInitialiseNewTask+0x96>
            {
                break;
 80030b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d90b      	bls.n	80030de <prvInitialiseNewTask+0xbc>
    __asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	613b      	str	r3, [r7, #16]
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	e7fd      	b.n	80030da <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d901      	bls.n	80030e8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030e4:	2304      	movs	r3, #4
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f6:	3304      	adds	r3, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fb9f 	bl	800283c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	3318      	adds	r3, #24
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff fb9a 	bl	800283c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800310c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800310e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003110:	f1c3 0205 	rsb	r2, r3, #5
 8003114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003116:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800311c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68f9      	ldr	r1, [r7, #12]
 8003122:	69b8      	ldr	r0, [r7, #24]
 8003124:	f001 faa0 	bl	8004668 <pxPortInitialiseStack>
 8003128:	4602      	mov	r2, r0
 800312a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800312e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003138:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800313a:	bf00      	nop
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800314c:	f001 fc0a 	bl	8004964 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003150:	4b50      	ldr	r3, [pc, #320]	@ (8003294 <prvAddNewTaskToReadyList+0x150>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a4f      	ldr	r2, [pc, #316]	@ (8003294 <prvAddNewTaskToReadyList+0x150>)
 8003158:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800315a:	4b4f      	ldr	r3, [pc, #316]	@ (8003298 <prvAddNewTaskToReadyList+0x154>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003162:	4a4d      	ldr	r2, [pc, #308]	@ (8003298 <prvAddNewTaskToReadyList+0x154>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003168:	4b4a      	ldr	r3, [pc, #296]	@ (8003294 <prvAddNewTaskToReadyList+0x150>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d110      	bne.n	8003192 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003170:	f000 fe98 	bl	8003ea4 <prvInitialiseTaskLists>
 8003174:	e00d      	b.n	8003192 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003176:	4b49      	ldr	r3, [pc, #292]	@ (800329c <prvAddNewTaskToReadyList+0x158>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800317e:	4b46      	ldr	r3, [pc, #280]	@ (8003298 <prvAddNewTaskToReadyList+0x154>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	429a      	cmp	r2, r3
 800318a:	d802      	bhi.n	8003192 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800318c:	4a42      	ldr	r2, [pc, #264]	@ (8003298 <prvAddNewTaskToReadyList+0x154>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003192:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <prvAddNewTaskToReadyList+0x15c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a41      	ldr	r2, [pc, #260]	@ (80032a0 <prvAddNewTaskToReadyList+0x15c>)
 800319a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800319c:	4b40      	ldr	r3, [pc, #256]	@ (80032a0 <prvAddNewTaskToReadyList+0x15c>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <prvAddNewTaskToReadyList+0x94>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fecd 	bl	8005f4c <SEGGER_SYSVIEW_OnTaskCreate>
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	461d      	mov	r5, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461c      	mov	r4, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	1ae3      	subs	r3, r4, r3
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	462b      	mov	r3, r5
 80031d4:	f003 f9be 	bl	8006554 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 ff3a 	bl	8006054 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	4b2e      	ldr	r3, [pc, #184]	@ (80032a4 <prvAddNewTaskToReadyList+0x160>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	4a2d      	ldr	r2, [pc, #180]	@ (80032a4 <prvAddNewTaskToReadyList+0x160>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f6:	492c      	ldr	r1, [pc, #176]	@ (80032a8 <prvAddNewTaskToReadyList+0x164>)
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3304      	adds	r3, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	3204      	adds	r2, #4
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1d1a      	adds	r2, r3, #4
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a1c      	ldr	r2, [pc, #112]	@ (80032a8 <prvAddNewTaskToReadyList+0x164>)
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003240:	4919      	ldr	r1, [pc, #100]	@ (80032a8 <prvAddNewTaskToReadyList+0x164>)
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	4814      	ldr	r0, [pc, #80]	@ (80032a8 <prvAddNewTaskToReadyList+0x164>)
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4403      	add	r3, r0
 8003260:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003262:	f001 fbb1 	bl	80049c8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <prvAddNewTaskToReadyList+0x158>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <prvAddNewTaskToReadyList+0x154>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <prvAddNewTaskToReadyList+0x148>
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <prvAddNewTaskToReadyList+0x168>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}
 8003294:	200001e4 	.word	0x200001e4
 8003298:	2000010c 	.word	0x2000010c
 800329c:	200001f0 	.word	0x200001f0
 80032a0:	20000200 	.word	0x20000200
 80032a4:	200001ec 	.word	0x200001ec
 80032a8:	20000110 	.word	0x20000110
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	@ 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <xTaskDelayUntil+0x2c>
    __asm volatile
 80032c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	617b      	str	r3, [r7, #20]
}
 80032d6:	bf00      	nop
 80032d8:	bf00      	nop
 80032da:	e7fd      	b.n	80032d8 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <xTaskDelayUntil+0x4a>
    __asm volatile
 80032e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e6:	f383 8811 	msr	BASEPRI, r3
 80032ea:	f3bf 8f6f 	isb	sy
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	613b      	str	r3, [r7, #16]
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	e7fd      	b.n	80032f6 <xTaskDelayUntil+0x46>

        vTaskSuspendAll();
 80032fa:	f000 f903 	bl	8003504 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80032fe:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <xTaskDelayUntil+0x100>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <xTaskDelayUntil+0x104>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d00b      	beq.n	8003324 <xTaskDelayUntil+0x74>
    __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60fb      	str	r3, [r7, #12]
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <xTaskDelayUntil+0x70>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	4413      	add	r3, r2
 800332c:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a3a      	ldr	r2, [r7, #32]
 8003334:	429a      	cmp	r2, r3
 8003336:	d20b      	bcs.n	8003350 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d211      	bcs.n	8003366 <xTaskDelayUntil+0xb6>
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	429a      	cmp	r2, r3
 8003348:	d90d      	bls.n	8003366 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800334a:	2301      	movs	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24
 800334e:	e00a      	b.n	8003366 <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	429a      	cmp	r2, r3
 8003358:	d303      	bcc.n	8003362 <xTaskDelayUntil+0xb2>
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	429a      	cmp	r2, r3
 8003360:	d901      	bls.n	8003366 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f000 fe4e 	bl	800401c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003380:	f000 f8ce 	bl	8003520 <xTaskResumeAll>
 8003384:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <xTaskDelayUntil+0xec>
        {
            taskYIELD_WITHIN_API();
 800338c:	4b0a      	ldr	r3, [pc, #40]	@ (80033b8 <xTaskDelayUntil+0x108>)
 800338e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	4619      	mov	r1, r3
 80033a0:	20c4      	movs	r0, #196	@ 0xc4
 80033a2:	f002 fd5f 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xShouldDelay;
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	@ 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200001e8 	.word	0x200001e8
 80033b4:	2000020c 	.word	0x2000020c
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	@ 0x28
 80033c0:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e011      	b.n	80033f4 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80033d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <prvCreateIdleTasks+0x88>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	4413      	add	r3, r2
 80033d6:	7819      	ldrb	r1, [r3, #0]
 80033d8:	1d3a      	adds	r2, r7, #4
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	4413      	add	r3, r2
 80033de:	460a      	mov	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80033e2:	1d3a      	adds	r2, r7, #4
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	3301      	adds	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b09      	cmp	r3, #9
 80033f8:	ddea      	ble.n	80033d0 <prvCreateIdleTasks+0x14>
 80033fa:	e000      	b.n	80033fe <prvCreateIdleTasks+0x42>
        {
            break;
 80033fc:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	e015      	b.n	8003430 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <prvCreateIdleTasks+0x8c>)
 8003406:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4a0f      	ldr	r2, [pc, #60]	@ (800344c <prvCreateIdleTasks+0x90>)
 800340e:	4413      	add	r3, r2
 8003410:	1d39      	adds	r1, r7, #4
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	2300      	movs	r3, #0
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	2282      	movs	r2, #130	@ 0x82
 800341c:	6938      	ldr	r0, [r7, #16]
 800341e:	f7ff fdd8 	bl	8002fd2 <xTaskCreate>
 8003422:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	3301      	adds	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	dde6      	ble.n	8003404 <prvCreateIdleTasks+0x48>
 8003436:	e000      	b.n	800343a <prvCreateIdleTasks+0x7e>
        {
            break;
 8003438:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800343a:	69fb      	ldr	r3, [r7, #28]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0800674c 	.word	0x0800674c
 8003448:	08003e75 	.word	0x08003e75
 800344c:	20000208 	.word	0x20000208

08003450 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003456:	f7ff ffb1 	bl	80033bc <prvCreateIdleTasks>
 800345a:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003462:	f000 fe69 	bl	8004138 <xTimerCreateTimerTask>
 8003466:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d124      	bne.n	80034b8 <vTaskStartScheduler+0x68>
    __asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60bb      	str	r3, [r7, #8]
}
 8003480:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003482:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <vTaskStartScheduler+0x9c>)
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <vTaskStartScheduler+0xa0>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003490:	4b18      	ldr	r3, [pc, #96]	@ (80034f4 <vTaskStartScheduler+0xa4>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <vTaskStartScheduler+0xa8>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b18      	ldr	r3, [pc, #96]	@ (80034fc <vTaskStartScheduler+0xac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d102      	bne.n	80034a8 <vTaskStartScheduler+0x58>
 80034a2:	f002 fd37 	bl	8005f14 <SEGGER_SYSVIEW_OnIdle>
 80034a6:	e004      	b.n	80034b2 <vTaskStartScheduler+0x62>
 80034a8:	4b14      	ldr	r3, [pc, #80]	@ (80034fc <vTaskStartScheduler+0xac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fd8f 	bl	8005fd0 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80034b2:	f001 f967 	bl	8004784 <xPortStartScheduler>
 80034b6:	e00f      	b.n	80034d8 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d10b      	bne.n	80034d8 <vTaskStartScheduler+0x88>
    __asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	607b      	str	r3, [r7, #4]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034d8:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <vTaskStartScheduler+0xb0>)
 80034da:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80034dc:	20cd      	movs	r0, #205	@ 0xcd
 80034de:	f002 fc85 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000204 	.word	0x20000204
 80034f0:	200001f0 	.word	0x200001f0
 80034f4:	200001e8 	.word	0x200001e8
 80034f8:	20000208 	.word	0x20000208
 80034fc:	2000010c 	.word	0x2000010c
 8003500:	20000014 	.word	0x20000014

08003504 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <vTaskSuspendAll+0x18>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	4a03      	ldr	r2, [pc, #12]	@ (800351c <vTaskSuspendAll+0x18>)
 8003510:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003512:	20cf      	movs	r0, #207	@ 0xcf
 8003514:	f002 fc6a 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2000020c 	.word	0x2000020c

08003520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800352e:	f001 fa19 	bl	8004964 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003536:	4b7a      	ldr	r3, [pc, #488]	@ (8003720 <xTaskResumeAll+0x200>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <xTaskResumeAll+0x36>
    __asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	603b      	str	r3, [r7, #0]
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003556:	4b72      	ldr	r3, [pc, #456]	@ (8003720 <xTaskResumeAll+0x200>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	4a70      	ldr	r2, [pc, #448]	@ (8003720 <xTaskResumeAll+0x200>)
 800355e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003560:	4b6f      	ldr	r3, [pc, #444]	@ (8003720 <xTaskResumeAll+0x200>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f040 80ce 	bne.w	8003706 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800356a:	4b6e      	ldr	r3, [pc, #440]	@ (8003724 <xTaskResumeAll+0x204>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80c9 	beq.w	8003706 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003574:	e092      	b.n	800369c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003576:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <xTaskResumeAll+0x208>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	6a12      	ldr	r2, [r2, #32]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	69d2      	ldr	r2, [r2, #28]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	3318      	adds	r3, #24
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d103      	bne.n	80035ac <xTaskResumeAll+0x8c>
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	605a      	str	r2, [r3, #4]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2200      	movs	r2, #0
 80035b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1e5a      	subs	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3304      	adds	r3, #4
 80035de:	429a      	cmp	r2, r3
 80035e0:	d103      	bne.n	80035ea <xTaskResumeAll+0xca>
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	2200      	movs	r2, #0
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 fd29 	bl	8006054 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	2201      	movs	r2, #1
 8003608:	409a      	lsls	r2, r3
 800360a:	4b48      	ldr	r3, [pc, #288]	@ (800372c <xTaskResumeAll+0x20c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	4a46      	ldr	r2, [pc, #280]	@ (800372c <xTaskResumeAll+0x20c>)
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003618:	4945      	ldr	r1, [pc, #276]	@ (8003730 <xTaskResumeAll+0x210>)
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	60da      	str	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	3204      	adds	r2, #4
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4a36      	ldr	r2, [pc, #216]	@ (8003730 <xTaskResumeAll+0x210>)
 8003658:	441a      	add	r2, r3
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	615a      	str	r2, [r3, #20]
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003662:	4933      	ldr	r1, [pc, #204]	@ (8003730 <xTaskResumeAll+0x210>)
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003674:	1c59      	adds	r1, r3, #1
 8003676:	482e      	ldr	r0, [pc, #184]	@ (8003730 <xTaskResumeAll+0x210>)
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003688:	4b2a      	ldr	r3, [pc, #168]	@ (8003734 <xTaskResumeAll+0x214>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	429a      	cmp	r2, r3
 8003690:	d904      	bls.n	800369c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003692:	4a29      	ldr	r2, [pc, #164]	@ (8003738 <xTaskResumeAll+0x218>)
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2101      	movs	r1, #1
 8003698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800369c:	4b22      	ldr	r3, [pc, #136]	@ (8003728 <xTaskResumeAll+0x208>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af68 	bne.w	8003576 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80036ac:	f000 fc78 	bl	8003fa0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036b0:	4b22      	ldr	r3, [pc, #136]	@ (800373c <xTaskResumeAll+0x21c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80036bc:	f000 f86a 	bl	8003794 <xTaskIncrementTick>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80036c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <xTaskResumeAll+0x218>)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2101      	movs	r1, #1
 80036cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ef      	bne.n	80036bc <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80036dc:	4b17      	ldr	r3, [pc, #92]	@ (800373c <xTaskResumeAll+0x21c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80036e2:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <xTaskResumeAll+0x218>)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80036f2:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <xTaskResumeAll+0x214>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <xTaskResumeAll+0x220>)
 80036f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003706:	f001 f95f 	bl	80049c8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4619      	mov	r1, r3
 800370e:	20d0      	movs	r0, #208	@ 0xd0
 8003710:	f002 fba8 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003714:	69bb      	ldr	r3, [r7, #24]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000020c 	.word	0x2000020c
 8003724:	200001e4 	.word	0x200001e4
 8003728:	200001a4 	.word	0x200001a4
 800372c:	200001ec 	.word	0x200001ec
 8003730:	20000110 	.word	0x20000110
 8003734:	2000010c 	.word	0x2000010c
 8003738:	200001f8 	.word	0x200001f8
 800373c:	200001f4 	.word	0x200001f4
 8003740:	e000ed04 	.word	0xe000ed04

08003744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <xTaskGetTickCount+0x20>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	20d1      	movs	r0, #209	@ 0xd1
 8003754:	f002 fb86 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200001e8 	.word	0x200001e8

08003768 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800376e:	f001 f9e5 	bl	8004b3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <xTaskGetTickCountFromISR+0x28>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	20d2      	movs	r0, #210	@ 0xd2
 8003780:	f002 fb70 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003784:	683b      	ldr	r3, [r7, #0]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200001e8 	.word	0x200001e8

08003794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800379e:	4b83      	ldr	r3, [pc, #524]	@ (80039ac <xTaskIncrementTick+0x218>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 80f3 	bne.w	800398e <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037a8:	4b81      	ldr	r3, [pc, #516]	@ (80039b0 <xTaskIncrementTick+0x21c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80037b0:	4a7f      	ldr	r2, [pc, #508]	@ (80039b0 <xTaskIncrementTick+0x21c>)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d121      	bne.n	8003800 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80037bc:	4b7d      	ldr	r3, [pc, #500]	@ (80039b4 <xTaskIncrementTick+0x220>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <xTaskIncrementTick+0x4a>
    __asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	607b      	str	r3, [r7, #4]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskIncrementTick+0x46>
 80037de:	4b75      	ldr	r3, [pc, #468]	@ (80039b4 <xTaskIncrementTick+0x220>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <xTaskIncrementTick+0x224>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a72      	ldr	r2, [pc, #456]	@ (80039b4 <xTaskIncrementTick+0x220>)
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4a72      	ldr	r2, [pc, #456]	@ (80039b8 <xTaskIncrementTick+0x224>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <xTaskIncrementTick+0x228>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a70      	ldr	r2, [pc, #448]	@ (80039bc <xTaskIncrementTick+0x228>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	f000 fbd0 	bl	8003fa0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003800:	4b6f      	ldr	r3, [pc, #444]	@ (80039c0 <xTaskIncrementTick+0x22c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	429a      	cmp	r2, r3
 8003808:	f0c0 80ac 	bcc.w	8003964 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800380c:	4b69      	ldr	r3, [pc, #420]	@ (80039b4 <xTaskIncrementTick+0x220>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003816:	4b6a      	ldr	r3, [pc, #424]	@ (80039c0 <xTaskIncrementTick+0x22c>)
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	601a      	str	r2, [r3, #0]
                    break;
 800381e:	e0a1      	b.n	8003964 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003820:	4b64      	ldr	r3, [pc, #400]	@ (80039b4 <xTaskIncrementTick+0x220>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	429a      	cmp	r2, r3
 8003836:	d203      	bcs.n	8003840 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003838:	4a61      	ldr	r2, [pc, #388]	@ (80039c0 <xTaskIncrementTick+0x22c>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	6013      	str	r3, [r2, #0]
                        break;
 800383e:	e091      	b.n	8003964 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	6892      	ldr	r2, [r2, #8]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3304      	adds	r3, #4
 8003862:	429a      	cmp	r2, r3
 8003864:	d103      	bne.n	800386e <xTaskIncrementTick+0xda>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2200      	movs	r2, #0
 8003872:	615a      	str	r2, [r3, #20]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1e5a      	subs	r2, r3, #1
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01e      	beq.n	80038c4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	6a12      	ldr	r2, [r2, #32]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	69d2      	ldr	r2, [r2, #28]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3318      	adds	r3, #24
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d103      	bne.n	80038b4 <xTaskIncrementTick+0x120>
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 fbc4 	bl	8006054 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <xTaskIncrementTick+0x230>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a3a      	ldr	r2, [pc, #232]	@ (80039c4 <xTaskIncrementTick+0x230>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e2:	4939      	ldr	r1, [pc, #228]	@ (80039c8 <xTaskIncrementTick+0x234>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3304      	adds	r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	3204      	adds	r2, #4
 800390a:	605a      	str	r2, [r3, #4]
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	1d1a      	adds	r2, r3, #4
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4a29      	ldr	r2, [pc, #164]	@ (80039c8 <xTaskIncrementTick+0x234>)
 8003922:	441a      	add	r2, r3
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	615a      	str	r2, [r3, #20]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392c:	4926      	ldr	r1, [pc, #152]	@ (80039c8 <xTaskIncrementTick+0x234>)
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	4821      	ldr	r0, [pc, #132]	@ (80039c8 <xTaskIncrementTick+0x234>)
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4403      	add	r3, r0
 800394c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <xTaskIncrementTick+0x238>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	429a      	cmp	r2, r3
 800395a:	f67f af57 	bls.w	800380c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800395e:	2301      	movs	r3, #1
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003962:	e753      	b.n	800380c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <xTaskIncrementTick+0x238>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396a:	4917      	ldr	r1, [pc, #92]	@ (80039c8 <xTaskIncrementTick+0x234>)
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d901      	bls.n	8003980 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <xTaskIncrementTick+0x23c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	e004      	b.n	8003998 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800398e:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <xTaskIncrementTick+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	4a0f      	ldr	r2, [pc, #60]	@ (80039d4 <xTaskIncrementTick+0x240>)
 8003996:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	4619      	mov	r1, r3
 800399c:	20db      	movs	r0, #219	@ 0xdb
 800399e:	f002 fa61 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3728      	adds	r7, #40	@ 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000020c 	.word	0x2000020c
 80039b0:	200001e8 	.word	0x200001e8
 80039b4:	2000019c 	.word	0x2000019c
 80039b8:	200001a0 	.word	0x200001a0
 80039bc:	200001fc 	.word	0x200001fc
 80039c0:	20000204 	.word	0x20000204
 80039c4:	200001ec 	.word	0x200001ec
 80039c8:	20000110 	.word	0x20000110
 80039cc:	2000010c 	.word	0x2000010c
 80039d0:	200001f8 	.word	0x200001f8
 80039d4:	200001f4 	.word	0x200001f4

080039d8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80039de:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <vTaskSwitchContext+0xc0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80039e6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <vTaskSwitchContext+0xc4>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80039ec:	e04f      	b.n	8003a8e <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80039ee:	4b2b      	ldr	r3, [pc, #172]	@ (8003a9c <vTaskSwitchContext+0xc4>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80039f4:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa0 <vTaskSwitchContext+0xc8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003a02:	7afb      	ldrb	r3, [r7, #11]
 8003a04:	f1c3 031f 	rsb	r3, r3, #31
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	4926      	ldr	r1, [pc, #152]	@ (8003aa4 <vTaskSwitchContext+0xcc>)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10b      	bne.n	8003a36 <vTaskSwitchContext+0x5e>
    __asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	607b      	str	r3, [r7, #4]
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	e7fd      	b.n	8003a32 <vTaskSwitchContext+0x5a>
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <vTaskSwitchContext+0xcc>)
 8003a42:	4413      	add	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3308      	adds	r3, #8
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <vTaskSwitchContext+0x8c>
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa8 <vTaskSwitchContext+0xd0>)
 8003a6c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003aac <vTaskSwitchContext+0xd4>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa8 <vTaskSwitchContext+0xd0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d102      	bne.n	8003a80 <vTaskSwitchContext+0xa8>
 8003a7a:	f002 fa4b 	bl	8005f14 <SEGGER_SYSVIEW_OnIdle>
 8003a7e:	e004      	b.n	8003a8a <vTaskSwitchContext+0xb2>
 8003a80:	4b09      	ldr	r3, [pc, #36]	@ (8003aa8 <vTaskSwitchContext+0xd0>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 faa3 	bl	8005fd0 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003a8a:	4b07      	ldr	r3, [pc, #28]	@ (8003aa8 <vTaskSwitchContext+0xd0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
    }
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	2000020c 	.word	0x2000020c
 8003a9c:	200001f8 	.word	0x200001f8
 8003aa0:	200001ec 	.word	0x200001ec
 8003aa4:	20000110 	.word	0x20000110
 8003aa8:	2000010c 	.word	0x2000010c
 8003aac:	20000208 	.word	0x20000208

08003ab0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	60fb      	str	r3, [r7, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ad8:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <vTaskPlaceOnEventList+0x4c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3318      	adds	r3, #24
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fe feba 	bl	800285a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f000 fa97 	bl	800401c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003aee:	20e1      	movs	r0, #225	@ 0xe1
 8003af0:	f002 f97c 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	2000010c 	.word	0x2000010c

08003b00 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	613b      	str	r3, [r7, #16]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	61da      	str	r2, [r3, #28]
 8003b38:	4b15      	ldr	r3, [pc, #84]	@ (8003b90 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	6892      	ldr	r2, [r2, #8]
 8003b40:	621a      	str	r2, [r3, #32]
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	3218      	adds	r2, #24
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f103 0218 	add.w	r2, r3, #24
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <vTaskPlaceOnEventListRestricted+0x90>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	68b8      	ldr	r0, [r7, #8]
 8003b7c:	f000 fa4e 	bl	800401c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003b80:	20e3      	movs	r0, #227	@ 0xe3
 8003b82:	f002 f933 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003b86:	bf00      	nop
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000010c 	.word	0x2000010c

08003b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	60fb      	str	r3, [r7, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	6a3a      	ldr	r2, [r7, #32]
 8003bce:	6a12      	ldr	r2, [r2, #32]
 8003bd0:	609a      	str	r2, [r3, #8]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	69d2      	ldr	r2, [r2, #28]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	3318      	adds	r3, #24
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d103      	bne.n	8003bf0 <xTaskRemoveFromEventList+0x5c>
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003c00:	4b4e      	ldr	r3, [pc, #312]	@ (8003d3c <xTaskRemoveFromEventList+0x1a8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d164      	bne.n	8003cd2 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	68d2      	ldr	r2, [r2, #12]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	6a3a      	ldr	r2, [r7, #32]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d103      	bne.n	8003c36 <xTaskRemoveFromEventList+0xa2>
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 fa03 	bl	8006054 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	2201      	movs	r2, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <xTaskRemoveFromEventList+0x1ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	4a38      	ldr	r2, [pc, #224]	@ (8003d40 <xTaskRemoveFromEventList+0x1ac>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c64:	4937      	ldr	r1, [pc, #220]	@ (8003d44 <xTaskRemoveFromEventList+0x1b0>)
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3304      	adds	r3, #4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	60da      	str	r2, [r3, #12]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	3204      	adds	r2, #4
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	1d1a      	adds	r2, r3, #4
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4a28      	ldr	r2, [pc, #160]	@ (8003d44 <xTaskRemoveFromEventList+0x1b0>)
 8003ca4:	441a      	add	r2, r3
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	615a      	str	r2, [r3, #20]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cae:	4925      	ldr	r1, [pc, #148]	@ (8003d44 <xTaskRemoveFromEventList+0x1b0>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a3a      	ldr	r2, [r7, #32]
 8003cbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	4820      	ldr	r0, [pc, #128]	@ (8003d44 <xTaskRemoveFromEventList+0x1b0>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4403      	add	r3, r0
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	e01b      	b.n	8003d0a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <xTaskRemoveFromEventList+0x1b4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	61da      	str	r2, [r3, #28]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	621a      	str	r2, [r3, #32]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	6a3a      	ldr	r2, [r7, #32]
 8003cec:	3218      	adds	r2, #24
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	f103 0218 	add.w	r2, r3, #24
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	4a12      	ldr	r2, [pc, #72]	@ (8003d48 <xTaskRemoveFromEventList+0x1b4>)
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d00:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <xTaskRemoveFromEventList+0x1b4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a10      	ldr	r2, [pc, #64]	@ (8003d48 <xTaskRemoveFromEventList+0x1b4>)
 8003d08:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d4c <xTaskRemoveFromEventList+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d905      	bls.n	8003d24 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d50 <xTaskRemoveFromEventList+0x1bc>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	e001      	b.n	8003d28 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	20e4      	movs	r0, #228	@ 0xe4
 8003d2e:	f002 f899 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	@ 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000020c 	.word	0x2000020c
 8003d40:	200001ec 	.word	0x200001ec
 8003d44:	20000110 	.word	0x20000110
 8003d48:	200001a4 	.word	0x200001a4
 8003d4c:	2000010c 	.word	0x2000010c
 8003d50:	200001f8 	.word	0x200001f8

08003d54 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d5c:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <vTaskInternalSetTimeOutState+0x28>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d64:	4b06      	ldr	r3, [pc, #24]	@ (8003d80 <vTaskInternalSetTimeOutState+0x2c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003d6c:	20e7      	movs	r0, #231	@ 0xe7
 8003d6e:	f002 f83d 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	200001fc 	.word	0x200001fc
 8003d80:	200001e8 	.word	0x200001e8

08003d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60fb      	str	r3, [r7, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003dca:	f000 fdcb 	bl	8004964 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003dce:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <xTaskCheckForTimeOut+0xd0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d102      	bne.n	8003dee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
 8003dec:	e026      	b.n	8003e3c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4b19      	ldr	r3, [pc, #100]	@ (8003e58 <xTaskCheckForTimeOut+0xd4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d00a      	beq.n	8003e10 <xTaskCheckForTimeOut+0x8c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d305      	bcc.n	8003e10 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e015      	b.n	8003e3c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d20b      	bcs.n	8003e32 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff94 	bl	8003d54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	e004      	b.n	8003e3c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e3c:	f000 fdc4 	bl	80049c8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4619      	mov	r1, r3
 8003e44:	20e8      	movs	r0, #232	@ 0xe8
 8003e46:	f002 f80d 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003e4a:	69fb      	ldr	r3, [r7, #28]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200001e8 	.word	0x200001e8
 8003e58:	200001fc 	.word	0x200001fc

08003e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003e60:	4b03      	ldr	r3, [pc, #12]	@ (8003e70 <vTaskMissedYield+0x14>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003e66:	20e9      	movs	r0, #233	@ 0xe9
 8003e68:	f001 ffc0 	bl	8005dec <SEGGER_SYSVIEW_RecordEndCall>
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200001f8 	.word	0x200001f8

08003e74 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e7c:	f000 f852 	bl	8003f24 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <prvIdleTask+0x28>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d9f9      	bls.n	8003e7c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <prvIdleTask+0x2c>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e98:	e7f0      	b.n	8003e7c <prvIdleTask+0x8>
 8003e9a:	bf00      	nop
 8003e9c:	20000110 	.word	0x20000110
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e00c      	b.n	8003eca <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <prvInitialiseTaskLists+0x60>)
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fc9a 	bl	80027f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	607b      	str	r3, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d9ef      	bls.n	8003eb0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ed0:	480d      	ldr	r0, [pc, #52]	@ (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ed2:	f7fe fc91 	bl	80027f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ed6:	480d      	ldr	r0, [pc, #52]	@ (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ed8:	f7fe fc8e 	bl	80027f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003edc:	480c      	ldr	r0, [pc, #48]	@ (8003f10 <prvInitialiseTaskLists+0x6c>)
 8003ede:	f7fe fc8b 	bl	80027f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003ee2:	480c      	ldr	r0, [pc, #48]	@ (8003f14 <prvInitialiseTaskLists+0x70>)
 8003ee4:	f7fe fc88 	bl	80027f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003ee8:	480b      	ldr	r0, [pc, #44]	@ (8003f18 <prvInitialiseTaskLists+0x74>)
 8003eea:	f7fe fc85 	bl	80027f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	@ (8003f1c <prvInitialiseTaskLists+0x78>)
 8003ef0:	4a05      	ldr	r2, [pc, #20]	@ (8003f08 <prvInitialiseTaskLists+0x64>)
 8003ef2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f20 <prvInitialiseTaskLists+0x7c>)
 8003ef6:	4a05      	ldr	r2, [pc, #20]	@ (8003f0c <prvInitialiseTaskLists+0x68>)
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000110 	.word	0x20000110
 8003f08:	20000174 	.word	0x20000174
 8003f0c:	20000188 	.word	0x20000188
 8003f10:	200001a4 	.word	0x200001a4
 8003f14:	200001b8 	.word	0x200001b8
 8003f18:	200001d0 	.word	0x200001d0
 8003f1c:	2000019c 	.word	0x2000019c
 8003f20:	200001a0 	.word	0x200001a0

08003f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f2a:	e019      	b.n	8003f60 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003f2c:	f000 fd1a 	bl	8004964 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f30:	4b10      	ldr	r3, [pc, #64]	@ (8003f74 <prvCheckTasksWaitingTermination+0x50>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe fcc7 	bl	80028d0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	4a0b      	ldr	r2, [pc, #44]	@ (8003f78 <prvCheckTasksWaitingTermination+0x54>)
 8003f4a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f54:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003f56:	f000 fd37 	bl	80049c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f810 	bl	8003f80 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f60:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <prvCheckTasksWaitingTermination+0x58>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e1      	bne.n	8003f2c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	200001b8 	.word	0x200001b8
 8003f78:	200001e4 	.word	0x200001e4
 8003f7c:	200001cc 	.word	0x200001cc

08003f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fe6b 	bl	8004c68 <vPortFree>
            vPortFree( pxTCB );
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 fe68 	bl	8004c68 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd0 <prvResetNextTaskUnblockTime+0x30>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fae:	4b09      	ldr	r3, [pc, #36]	@ (8003fd4 <prvResetNextTaskUnblockTime+0x34>)
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fb6:	e005      	b.n	8003fc4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <prvResetNextTaskUnblockTime+0x30>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a04      	ldr	r2, [pc, #16]	@ (8003fd4 <prvResetNextTaskUnblockTime+0x34>)
 8003fc2:	6013      	str	r3, [r2, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	2000019c 	.word	0x2000019c
 8003fd4:	20000204 	.word	0x20000204

08003fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003fde:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <xTaskGetSchedulerState+0x3c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	e008      	b.n	8003ffe <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003fec:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <xTaskGetSchedulerState+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d102      	bne.n	8003ffa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	e001      	b.n	8003ffe <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4619      	mov	r1, r3
 8004002:	20f5      	movs	r0, #245	@ 0xf5
 8004004:	f001 ff2e 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004008:	687b      	ldr	r3, [r7, #4]
    }
 800400a:	4618      	mov	r0, r3
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	200001f0 	.word	0x200001f0
 8004018:	2000020c 	.word	0x2000020c

0800401c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004026:	4b3d      	ldr	r3, [pc, #244]	@ (800411c <prvAddCurrentTaskToDelayedList+0x100>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800402c:	4b3c      	ldr	r3, [pc, #240]	@ (8004120 <prvAddCurrentTaskToDelayedList+0x104>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004032:	4b3c      	ldr	r3, [pc, #240]	@ (8004124 <prvAddCurrentTaskToDelayedList+0x108>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3304      	adds	r3, #4
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fc46 	bl	80028d0 <uxListRemove>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800404a:	4b37      	ldr	r3, [pc, #220]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	2201      	movs	r2, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43da      	mvns	r2, r3
 8004058:	4b34      	ldr	r3, [pc, #208]	@ (800412c <prvAddCurrentTaskToDelayedList+0x110>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4013      	ands	r3, r2
 800405e:	4a33      	ldr	r2, [pc, #204]	@ (800412c <prvAddCurrentTaskToDelayedList+0x110>)
 8004060:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d124      	bne.n	80040b4 <prvAddCurrentTaskToDelayedList+0x98>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d021      	beq.n	80040b4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004070:	4b2f      	ldr	r3, [pc, #188]	@ (8004130 <prvAddCurrentTaskToDelayedList+0x114>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	4b2c      	ldr	r3, [pc, #176]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	4b2a      	ldr	r3, [pc, #168]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	4b27      	ldr	r3, [pc, #156]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	3204      	adds	r2, #4
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1d1a      	adds	r2, r3, #4
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	4b22      	ldr	r3, [pc, #136]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a23      	ldr	r2, [pc, #140]	@ (8004130 <prvAddCurrentTaskToDelayedList+0x114>)
 80040a4:	615a      	str	r2, [r3, #20]
 80040a6:	4b22      	ldr	r3, [pc, #136]	@ (8004130 <prvAddCurrentTaskToDelayedList+0x114>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a20      	ldr	r2, [pc, #128]	@ (8004130 <prvAddCurrentTaskToDelayedList+0x114>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040b2:	e02e      	b.n	8004112 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80040b4:	69fa      	ldr	r2, [r7, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d20d      	bcs.n	80040e8 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80040cc:	4b16      	ldr	r3, [pc, #88]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2104      	movs	r1, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 f800 	bl	80060d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80040d8:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	4619      	mov	r1, r3
 80040e0:	6978      	ldr	r0, [r7, #20]
 80040e2:	f7fe fbba 	bl	800285a <vListInsert>
}
 80040e6:	e014      	b.n	8004112 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2104      	movs	r1, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fff2 	bl	80060d8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <prvAddCurrentTaskToDelayedList+0x10c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3304      	adds	r3, #4
 80040fa:	4619      	mov	r1, r3
 80040fc:	69b8      	ldr	r0, [r7, #24]
 80040fe:	f7fe fbac 	bl	800285a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004102:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <prvAddCurrentTaskToDelayedList+0x118>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d202      	bcs.n	8004112 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800410c:	4a09      	ldr	r2, [pc, #36]	@ (8004134 <prvAddCurrentTaskToDelayedList+0x118>)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	200001e8 	.word	0x200001e8
 8004120:	2000019c 	.word	0x2000019c
 8004124:	200001a0 	.word	0x200001a0
 8004128:	2000010c 	.word	0x2000010c
 800412c:	200001ec 	.word	0x200001ec
 8004130:	200001d0 	.word	0x200001d0
 8004134:	20000204 	.word	0x20000204

08004138 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004142:	f000 fa5b 	bl	80045fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <xTimerCreateTimerTask+0x64>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800414e:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <xTimerCreateTimerTask+0x68>)
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2302      	movs	r3, #2
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800415c:	4911      	ldr	r1, [pc, #68]	@ (80041a4 <xTimerCreateTimerTask+0x6c>)
 800415e:	4812      	ldr	r0, [pc, #72]	@ (80041a8 <xTimerCreateTimerTask+0x70>)
 8004160:	f7fe ff37 	bl	8002fd2 <xTaskCreate>
 8004164:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	603b      	str	r3, [r7, #0]
}
 800417e:	bf00      	nop
 8004180:	bf00      	nop
 8004182:	e7fd      	b.n	8004180 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4619      	mov	r1, r3
 8004188:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800418c:	f001 fe6a 	bl	8005e64 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004190:	687b      	ldr	r3, [r7, #4]
    }
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000240 	.word	0x20000240
 80041a0:	20000244 	.word	0x20000244
 80041a4:	08006754 	.word	0x08006754
 80041a8:	08004251 	.word	0x08004251

080041ac <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041b8:	e008      	b.n	80041cc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	18d1      	adds	r1, r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f8df 	bl	800439c <prvInsertTimerInActiveList>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1ea      	bne.n	80041ba <prvReloadTimer+0xe>
        }
    }
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041fa:	4b14      	ldr	r3, [pc, #80]	@ (800424c <prvProcessExpiredTimer+0x5c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7fe fb61 	bl	80028d0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff ffc3 	bl	80041ac <prvReloadTimer>
 8004226:	e008      	b.n	800423a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	4798      	blx	r3
    }
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000238 	.word	0x20000238

08004250 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4618      	mov	r0, r3
 800425e:	f000 f859 	bl	8004314 <prvGetNextExpireTime>
 8004262:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4619      	mov	r1, r3
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f805 	bl	8004278 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800426e:	f000 f8d7 	bl	8004420 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004272:	bf00      	nop
 8004274:	e7f0      	b.n	8004258 <prvTimerTask+0x8>
	...

08004278 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004282:	f7ff f93f 	bl	8003504 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f866 	bl	800435c <prvSampleTimeNow>
 8004290:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d130      	bne.n	80042fa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <prvProcessTimerOrBlockTask+0x3c>
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d806      	bhi.n	80042b4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80042a6:	f7ff f93b 	bl	8003520 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff9f 	bl	80041f0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80042b2:	e024      	b.n	80042fe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d008      	beq.n	80042cc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042ba:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <prvProcessTimerOrBlockTask+0x90>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <prvProcessTimerOrBlockTask+0x50>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <prvProcessTimerOrBlockTask+0x52>
 80042c8:	2300      	movs	r3, #0
 80042ca:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042cc:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <prvProcessTimerOrBlockTask+0x94>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	f7fe fe07 	bl	8002eec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80042de:	f7ff f91f 	bl	8003520 <xTaskResumeAll>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80042e8:	4b09      	ldr	r3, [pc, #36]	@ (8004310 <prvProcessTimerOrBlockTask+0x98>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
    }
 80042f8:	e001      	b.n	80042fe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80042fa:	f7ff f911 	bl	8003520 <xTaskResumeAll>
    }
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000023c 	.word	0x2000023c
 800430c:	20000240 	.word	0x20000240
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800431c:	4b0e      	ldr	r3, [pc, #56]	@ (8004358 <prvGetNextExpireTime+0x44>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <prvGetNextExpireTime+0x16>
 8004326:	2201      	movs	r2, #1
 8004328:	e000      	b.n	800432c <prvGetNextExpireTime+0x18>
 800432a:	2200      	movs	r2, #0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <prvGetNextExpireTime+0x44>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e001      	b.n	8004348 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004348:	68fb      	ldr	r3, [r7, #12]
    }
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000238 	.word	0x20000238

0800435c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004364:	f7ff f9ee 	bl	8003744 <xTaskGetTickCount>
 8004368:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800436a:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <prvSampleTimeNow+0x3c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d205      	bcs.n	8004380 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004374:	f000 f91c 	bl	80045b0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e002      	b.n	8004386 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004386:	4a04      	ldr	r2, [pc, #16]	@ (8004398 <prvSampleTimeNow+0x3c>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800438c:	68fb      	ldr	r3, [r7, #12]
    }
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000248 	.word	0x20000248

0800439c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d812      	bhi.n	80043e8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d302      	bcc.n	80043d6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e01b      	b.n	800440e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <prvInsertTimerInActiveList+0x7c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7fe fa3a 	bl	800285a <vListInsert>
 80043e6:	e012      	b.n	800440e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d206      	bcs.n	80043fe <prvInsertTimerInActiveList+0x62>
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	e007      	b.n	800440e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043fe:	4b07      	ldr	r3, [pc, #28]	@ (800441c <prvInsertTimerInActiveList+0x80>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3304      	adds	r3, #4
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f7fe fa26 	bl	800285a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800440e:	697b      	ldr	r3, [r7, #20]
    }
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	2000023c 	.word	0x2000023c
 800441c:	20000238 	.word	0x20000238

08004420 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	605a      	str	r2, [r3, #4]
 8004430:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004432:	e0a9      	b.n	8004588 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f2c0 80a6 	blt.w	8004588 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d004      	beq.n	8004452 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fa3f 	bl	80028d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004452:	1d3b      	adds	r3, r7, #4
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff81 	bl	800435c <prvSampleTimeNow>
 800445a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	3b01      	subs	r3, #1
 8004460:	2b08      	cmp	r3, #8
 8004462:	f200 808e 	bhi.w	8004582 <prvProcessReceivedCommands+0x162>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <prvProcessReceivedCommands+0x4c>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	08004491 	.word	0x08004491
 8004474:	080044f9 	.word	0x080044f9
 8004478:	0800450d 	.word	0x0800450d
 800447c:	08004559 	.word	0x08004559
 8004480:	08004491 	.word	0x08004491
 8004484:	08004491 	.word	0x08004491
 8004488:	080044f9 	.word	0x080044f9
 800448c:	0800450d 	.word	0x0800450d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	18d1      	adds	r1, r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	69f8      	ldr	r0, [r7, #28]
 80044b0:	f7ff ff74 	bl	800439c <prvInsertTimerInActiveList>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d065      	beq.n	8004586 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4619      	mov	r1, r3
 80044d4:	69f8      	ldr	r0, [r7, #28]
 80044d6:	f7ff fe69 	bl	80041ac <prvReloadTimer>
 80044da:	e008      	b.n	80044ee <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	69f8      	ldr	r0, [r7, #28]
 80044f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80044f6:	e046      	b.n	8004586 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	b2da      	uxtb	r2, r3
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800450a:	e03d      	b.n	8004588 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	617b      	str	r3, [r7, #20]
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	18d1      	adds	r1, r2, r3
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	69f8      	ldr	r0, [r7, #28]
 8004552:	f7ff ff23 	bl	800439c <prvInsertTimerInActiveList>
                        break;
 8004556:	e017      	b.n	8004588 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d103      	bne.n	800456e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004566:	69f8      	ldr	r0, [r7, #28]
 8004568:	f000 fb7e 	bl	8004c68 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800456c:	e00c      	b.n	8004588 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004580:	e002      	b.n	8004588 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004582:	bf00      	nop
 8004584:	e000      	b.n	8004588 <prvProcessReceivedCommands+0x168>
                        break;
 8004586:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004588:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <prvProcessReceivedCommands+0x18c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f107 0108 	add.w	r1, r7, #8
 8004590:	2200      	movs	r2, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f7fe fade 	bl	8002b54 <xQueueReceive>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	f47f af4a 	bne.w	8004434 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000240 	.word	0x20000240

080045b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045b6:	e009      	b.n	80045cc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b8:	4b0e      	ldr	r3, [pc, #56]	@ (80045f4 <prvSwitchTimerLists+0x44>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80045c2:	f04f 31ff 	mov.w	r1, #4294967295
 80045c6:	6838      	ldr	r0, [r7, #0]
 80045c8:	f7ff fe12 	bl	80041f0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <prvSwitchTimerLists+0x44>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80045d6:	4b07      	ldr	r3, [pc, #28]	@ (80045f4 <prvSwitchTimerLists+0x44>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <prvSwitchTimerLists+0x48>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a04      	ldr	r2, [pc, #16]	@ (80045f4 <prvSwitchTimerLists+0x44>)
 80045e2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <prvSwitchTimerLists+0x48>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6013      	str	r3, [r2, #0]
    }
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000238 	.word	0x20000238
 80045f8:	2000023c 	.word	0x2000023c

080045fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004600:	f000 f9b0 	bl	8004964 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004604:	4b12      	ldr	r3, [pc, #72]	@ (8004650 <prvCheckForValidListAndQueue+0x54>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11d      	bne.n	8004648 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800460c:	4811      	ldr	r0, [pc, #68]	@ (8004654 <prvCheckForValidListAndQueue+0x58>)
 800460e:	f7fe f8f3 	bl	80027f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004612:	4811      	ldr	r0, [pc, #68]	@ (8004658 <prvCheckForValidListAndQueue+0x5c>)
 8004614:	f7fe f8f0 	bl	80027f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004618:	4b10      	ldr	r3, [pc, #64]	@ (800465c <prvCheckForValidListAndQueue+0x60>)
 800461a:	4a0e      	ldr	r2, [pc, #56]	@ (8004654 <prvCheckForValidListAndQueue+0x58>)
 800461c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <prvCheckForValidListAndQueue+0x64>)
 8004620:	4a0d      	ldr	r2, [pc, #52]	@ (8004658 <prvCheckForValidListAndQueue+0x5c>)
 8004622:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004624:	2200      	movs	r2, #0
 8004626:	210c      	movs	r1, #12
 8004628:	200a      	movs	r0, #10
 800462a:	f7fe fa17 	bl	8002a5c <xQueueGenericCreate>
 800462e:	4603      	mov	r3, r0
 8004630:	4a07      	ldr	r2, [pc, #28]	@ (8004650 <prvCheckForValidListAndQueue+0x54>)
 8004632:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <prvCheckForValidListAndQueue+0x54>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800463c:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <prvCheckForValidListAndQueue+0x54>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4908      	ldr	r1, [pc, #32]	@ (8004664 <prvCheckForValidListAndQueue+0x68>)
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc02 	bl	8002e4c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004648:	f000 f9be 	bl	80049c8 <vPortExitCritical>
    }
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000240 	.word	0x20000240
 8004654:	20000210 	.word	0x20000210
 8004658:	20000224 	.word	0x20000224
 800465c:	20000238 	.word	0x20000238
 8004660:	2000023c 	.word	0x2000023c
 8004664:	0800675c 	.word	0x0800675c

08004668 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b04      	subs	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004680:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3b04      	subs	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b04      	subs	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004698:	4a0c      	ldr	r2, [pc, #48]	@ (80046cc <pxPortInitialiseStack+0x64>)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b14      	subs	r3, #20
 80046a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3b04      	subs	r3, #4
 80046ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f06f 0202 	mvn.w	r2, #2
 80046b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b20      	subs	r3, #32
 80046bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80046be:	68fb      	ldr	r3, [r7, #12]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	080046d1 	.word	0x080046d1

080046d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80046da:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <prvTaskExitError+0x58>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d00b      	beq.n	80046fc <prvTaskExitError+0x2c>
    __asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <prvTaskExitError+0x28>
    __asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60bb      	str	r3, [r7, #8]
}
 800470e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004710:	bf00      	nop
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0fc      	beq.n	8004712 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000018 	.word	0x20000018
 800472c:	00000000 	.word	0x00000000

08004730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004730:	4b07      	ldr	r3, [pc, #28]	@ (8004750 <pxCurrentTCBConst2>)
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	6808      	ldr	r0, [r1, #0]
 8004736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	f380 8809 	msr	PSP, r0
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	4770      	bx	lr
 800474c:	f3af 8000 	nop.w

08004750 <pxCurrentTCBConst2>:
 8004750:	2000010c 	.word	0x2000010c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004754:	bf00      	nop
 8004756:	bf00      	nop

08004758 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004758:	4808      	ldr	r0, [pc, #32]	@ (800477c <prvPortStartFirstTask+0x24>)
 800475a:	6800      	ldr	r0, [r0, #0]
 800475c:	6800      	ldr	r0, [r0, #0]
 800475e:	f380 8808 	msr	MSP, r0
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8814 	msr	CONTROL, r0
 800476a:	b662      	cpsie	i
 800476c:	b661      	cpsie	f
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	df00      	svc	0
 8004778:	bf00      	nop
 800477a:	0000      	.short	0x0000
 800477c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop

08004784 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08c      	sub	sp, #48	@ 0x30
 8004788:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800478a:	4b69      	ldr	r3, [pc, #420]	@ (8004930 <xPortStartScheduler+0x1ac>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a69      	ldr	r2, [pc, #420]	@ (8004934 <xPortStartScheduler+0x1b0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10b      	bne.n	80047ac <xPortStartScheduler+0x28>
    __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ac:	4b60      	ldr	r3, [pc, #384]	@ (8004930 <xPortStartScheduler+0x1ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a61      	ldr	r2, [pc, #388]	@ (8004938 <xPortStartScheduler+0x1b4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d10b      	bne.n	80047ce <xPortStartScheduler+0x4a>
    __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	623b      	str	r3, [r7, #32]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80047ce:	4b5b      	ldr	r3, [pc, #364]	@ (800493c <xPortStartScheduler+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	332c      	adds	r3, #44	@ 0x2c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a59      	ldr	r2, [pc, #356]	@ (8004940 <xPortStartScheduler+0x1bc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <xPortStartScheduler+0x74>
    __asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	61fb      	str	r3, [r7, #28]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	3338      	adds	r3, #56	@ 0x38
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a51      	ldr	r2, [pc, #324]	@ (8004944 <xPortStartScheduler+0x1c0>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <xPortStartScheduler+0x98>
    __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	61bb      	str	r3, [r7, #24]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004820:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <xPortStartScheduler+0x1c4>)
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	22ff      	movs	r2, #255	@ 0xff
 8004830:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004842:	b2da      	uxtb	r2, r3
 8004844:	4b41      	ldr	r3, [pc, #260]	@ (800494c <xPortStartScheduler+0x1c8>)
 8004846:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004848:	4b40      	ldr	r3, [pc, #256]	@ (800494c <xPortStartScheduler+0x1c8>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <xPortStartScheduler+0xe4>
    __asm volatile
 8004850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	617b      	str	r3, [r7, #20]
}
 8004862:	bf00      	nop
 8004864:	bf00      	nop
 8004866:	e7fd      	b.n	8004864 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <xPortStartScheduler+0x11a>
    __asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	613b      	str	r3, [r7, #16]
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	3301      	adds	r3, #1
 8004892:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a6:	2b80      	cmp	r3, #128	@ 0x80
 80048a8:	d0f1      	beq.n	800488e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d103      	bne.n	80048b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80048b0:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	e004      	b.n	80048c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f1c3 0307 	rsb	r3, r3, #7
 80048be:	4a24      	ldr	r2, [pc, #144]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048c2:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	4a21      	ldr	r2, [pc, #132]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048cc:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80048d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004950 <xPortStartScheduler+0x1cc>)
 80048d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80048e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <xPortStartScheduler+0x1d0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <xPortStartScheduler+0x1d0>)
 80048e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <xPortStartScheduler+0x1d0>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	@ (8004954 <xPortStartScheduler+0x1d0>)
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80048f8:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <xPortStartScheduler+0x1d4>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80048fe:	f000 f8ed 	bl	8004adc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004902:	4b16      	ldr	r3, [pc, #88]	@ (800495c <xPortStartScheduler+0x1d8>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004908:	f000 f90c 	bl	8004b24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800490c:	4b14      	ldr	r3, [pc, #80]	@ (8004960 <xPortStartScheduler+0x1dc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a13      	ldr	r2, [pc, #76]	@ (8004960 <xPortStartScheduler+0x1dc>)
 8004912:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004916:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004918:	f7ff ff1e 	bl	8004758 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800491c:	f7ff f85c 	bl	80039d8 <vTaskSwitchContext>
    prvTaskExitError();
 8004920:	f7ff fed6 	bl	80046d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3730      	adds	r7, #48	@ 0x30
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	e000ed00 	.word	0xe000ed00
 8004934:	410fc271 	.word	0x410fc271
 8004938:	410fc270 	.word	0x410fc270
 800493c:	e000ed08 	.word	0xe000ed08
 8004940:	08004731 	.word	0x08004731
 8004944:	08004a21 	.word	0x08004a21
 8004948:	e000e400 	.word	0xe000e400
 800494c:	2000024c 	.word	0x2000024c
 8004950:	20000250 	.word	0x20000250
 8004954:	e000ed20 	.word	0xe000ed20
 8004958:	e000ed1c 	.word	0xe000ed1c
 800495c:	20000018 	.word	0x20000018
 8004960:	e000ef34 	.word	0xe000ef34

08004964 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
    __asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	607b      	str	r3, [r7, #4]
}
 800497c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800497e:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <vPortEnterCritical+0x5c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a0e      	ldr	r2, [pc, #56]	@ (80049c0 <vPortEnterCritical+0x5c>)
 8004986:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004988:	4b0d      	ldr	r3, [pc, #52]	@ (80049c0 <vPortEnterCritical+0x5c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d110      	bne.n	80049b2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <vPortEnterCritical+0x60>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <vPortEnterCritical+0x4e>
    __asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	603b      	str	r3, [r7, #0]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vPortEnterCritical+0x4a>
    }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000018 	.word	0x20000018
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <vPortExitCritical+0x50>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <vPortExitCritical+0x26>
    __asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80049ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004a18 <vPortExitCritical+0x50>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	4a08      	ldr	r2, [pc, #32]	@ (8004a18 <vPortExitCritical+0x50>)
 80049f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80049f8:	4b07      	ldr	r3, [pc, #28]	@ (8004a18 <vPortExitCritical+0x50>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <vPortExitCritical+0x44>
 8004a00:	2300      	movs	r3, #0
 8004a02:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004a0a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20000018 	.word	0x20000018
 8004a1c:	00000000 	.word	0x00000000

08004a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a20:	f3ef 8009 	mrs	r0, PSP
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	4b15      	ldr	r3, [pc, #84]	@ (8004a80 <pxCurrentTCBConst>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f01e 0f10 	tst.w	lr, #16
 8004a30:	bf08      	it	eq
 8004a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	6010      	str	r0, [r2, #0]
 8004a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004a44:	f380 8811 	msr	BASEPRI, r0
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f7fe ffc2 	bl	80039d8 <vTaskSwitchContext>
 8004a54:	f04f 0000 	mov.w	r0, #0
 8004a58:	f380 8811 	msr	BASEPRI, r0
 8004a5c:	bc09      	pop	{r0, r3}
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a66:	f01e 0f10 	tst.w	lr, #16
 8004a6a:	bf08      	it	eq
 8004a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a70:	f380 8809 	msr	PSP, r0
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	f3af 8000 	nop.w

08004a80 <pxCurrentTCBConst>:
 8004a80:	2000010c 	.word	0x2000010c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop

08004a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
    __asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	607b      	str	r3, [r7, #4]
}
 8004aa0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004aa2:	f001 f929 	bl	8005cf8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004aa6:	f7fe fe75 	bl	8003794 <xTaskIncrementTick>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004ab0:	f001 f980 	bl	8005db4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ab4:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <SysTick_Handler+0x50>)
 8004ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e001      	b.n	8004ac2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8004abe:	f001 f95d 	bl	8005d7c <SEGGER_SYSVIEW_RecordExitISR>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f383 8811 	msr	BASEPRI, r3
}
 8004acc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <vPortSetupTimerInterrupt+0x38>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <vPortSetupTimerInterrupt+0x3c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	@ (8004b1c <vPortSetupTimerInterrupt+0x40>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	099b      	lsrs	r3, r3, #6
 8004af8:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <vPortSetupTimerInterrupt+0x44>)
 8004afa:	3b01      	subs	r3, #1
 8004afc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004afe:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <vPortSetupTimerInterrupt+0x34>)
 8004b00:	2207      	movs	r2, #7
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000e010 	.word	0xe000e010
 8004b14:	e000e018 	.word	0xe000e018
 8004b18:	20000008 	.word	0x20000008
 8004b1c:	10624dd3 	.word	0x10624dd3
 8004b20:	e000e014 	.word	0xe000e014

08004b24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004b34 <vPortEnableVFP+0x10>
 8004b28:	6801      	ldr	r1, [r0, #0]
 8004b2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b2e:	6001      	str	r1, [r0, #0]
 8004b30:	4770      	bx	lr
 8004b32:	0000      	.short	0x0000
 8004b34:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop

08004b3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004b42:	f3ef 8305 	mrs	r3, IPSR
 8004b46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	d915      	bls.n	8004b7a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <vPortValidateInterruptPriority+0x74>)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004b58:	4b16      	ldr	r3, [pc, #88]	@ (8004bb4 <vPortValidateInterruptPriority+0x78>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	7afa      	ldrb	r2, [r7, #11]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d20b      	bcs.n	8004b7a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <vPortValidateInterruptPriority+0x7c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004b82:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <vPortValidateInterruptPriority+0x80>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d90b      	bls.n	8004ba2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	603b      	str	r3, [r7, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <vPortValidateInterruptPriority+0x62>
    }
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e3f0 	.word	0xe000e3f0
 8004bb4:	2000024c 	.word	0x2000024c
 8004bb8:	e000ed0c 	.word	0xe000ed0c
 8004bbc:	20000250 	.word	0x20000250

08004bc0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f023 0307 	bic.w	r3, r3, #7
 8004bdc:	3308      	adds	r3, #8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d205      	bcs.n	8004bf0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	3308      	adds	r3, #8
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e001      	b.n	8004bf4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 8004bf4:	f7fe fc86 	bl	8003504 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8004bf8:	4b17      	ldr	r3, [pc, #92]	@ (8004c58 <pvPortMalloc+0x98>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d105      	bne.n	8004c0c <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004c00:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <pvPortMalloc+0x9c>)
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	461a      	mov	r2, r3
 8004c08:	4b13      	ldr	r3, [pc, #76]	@ (8004c58 <pvPortMalloc+0x98>)
 8004c0a:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01a      	beq.n	8004c48 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c12:	4b13      	ldr	r3, [pc, #76]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004c1a:	4a12      	ldr	r2, [pc, #72]	@ (8004c64 <pvPortMalloc+0xa4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d813      	bhi.n	8004c48 <pvPortMalloc+0x88>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 8004c20:	4b0f      	ldr	r3, [pc, #60]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	441a      	add	r2, r3
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d90b      	bls.n	8004c48 <pvPortMalloc+0x88>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 8004c30:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <pvPortMalloc+0x98>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004c3c:	4b08      	ldr	r3, [pc, #32]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	4a06      	ldr	r2, [pc, #24]	@ (8004c60 <pvPortMalloc+0xa0>)
 8004c46:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c48:	f7fe fc6a 	bl	8003520 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20012e58 	.word	0x20012e58
 8004c5c:	2000025b 	.word	0x2000025b
 8004c60:	20012e54 	.word	0x20012e54
 8004c64:	00012bf7 	.word	0x00012bf7

08004c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <vPortFree+0x26>
    __asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <vPortFree+0x22>
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ca0:	4803      	ldr	r0, [pc, #12]	@ (8004cb0 <_cbSendSystemDesc+0x14>)
 8004ca2:	f000 ffd3 	bl	8005c4c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ca6:	4803      	ldr	r0, [pc, #12]	@ (8004cb4 <_cbSendSystemDesc+0x18>)
 8004ca8:	f000 ffd0 	bl	8005c4c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	08006764 	.word	0x08006764
 8004cb4:	08006790 	.word	0x08006790

08004cb8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <SEGGER_SYSVIEW_Conf+0x24>)
 8004cc6:	4a06      	ldr	r2, [pc, #24]	@ (8004ce0 <SEGGER_SYSVIEW_Conf+0x28>)
 8004cc8:	f000 fc46 	bl	8005558 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ccc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004cd0:	f000 fc86 	bl	80055e0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004cd4:	bf00      	nop
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20000008 	.word	0x20000008
 8004cdc:	08004c9d 	.word	0x08004c9d
 8004ce0:	0800684c 	.word	0x0800684c

08004ce4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cea:	4b26      	ldr	r3, [pc, #152]	@ (8004d84 <_DoInit+0xa0>)
 8004cec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004cee:	22a8      	movs	r2, #168	@ 0xa8
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	f001 fcc7 	bl	8006686 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2203      	movs	r2, #3
 8004d02:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4a20      	ldr	r2, [pc, #128]	@ (8004d88 <_DoInit+0xa4>)
 8004d08:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d8c <_DoInit+0xa8>)
 8004d0e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d16:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2200      	movs	r2, #0
 8004d22:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <_DoInit+0xa4>)
 8004d2e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	4a17      	ldr	r2, [pc, #92]	@ (8004d90 <_DoInit+0xac>)
 8004d34:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2210      	movs	r2, #16
 8004d3a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d4e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d52:	2300      	movs	r3, #0
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	e00c      	b.n	8004d72 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1c3 030f 	rsb	r3, r3, #15
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d94 <_DoInit+0xb0>)
 8004d60:	5cd1      	ldrb	r1, [r2, r3]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4413      	add	r3, r2
 8004d68:	460a      	mov	r2, r1
 8004d6a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0f      	cmp	r3, #15
 8004d76:	d9ef      	bls.n	8004d58 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d78:	f3bf 8f5f 	dmb	sy
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20012e5c 	.word	0x20012e5c
 8004d88:	080067a0 	.word	0x080067a0
 8004d8c:	20012f04 	.word	0x20012f04
 8004d90:	20013304 	.word	0x20013304
 8004d94:	0800682c 	.word	0x0800682c

08004d98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	@ 0x30
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004da4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004da6:	623b      	str	r3, [r7, #32]
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b53      	cmp	r3, #83	@ 0x53
 8004db0:	d001      	beq.n	8004db6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004db2:	f7ff ff97 	bl	8004ce4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4613      	mov	r3, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	3360      	adds	r3, #96	@ 0x60
 8004dc2:	4a37      	ldr	r2, [pc, #220]	@ (8004ea0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d92b      	bls.n	8004e3c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4293      	cmp	r3, r2
 8004df4:	bf28      	it	cs
 8004df6:	4613      	movcs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	4413      	add	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e0a:	f001 fc69 	bl	80066e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d101      	bne.n	8004e3c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	bf28      	it	cs
 8004e4c:	4613      	movcs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d019      	beq.n	8004e8a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	4413      	add	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e66:	f001 fc3b 	bl	80066e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	4413      	add	r3, r2
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e94:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3730      	adds	r7, #48	@ 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	20012e5c 	.word	0x20012e5c

08004ea4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b53      	cmp	r3, #83	@ 0x53
 8004ebe:	d001      	beq.n	8004ec4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004ec0:	f7ff ff10 	bl	8004ce4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ec8:	f04f 0120 	mov.w	r1, #32
 8004ecc:	f381 8811 	msr	BASEPRI, r1
 8004ed0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ed2:	4b35      	ldr	r3, [pc, #212]	@ (8004fa8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ed4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	4413      	add	r3, r2
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	440b      	add	r3, r1
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	dbeb      	blt.n	8004eda <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f02:	e000      	b.n	8004f06 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f04:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	da3f      	bge.n	8004f90 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f10:	6939      	ldr	r1, [r7, #16]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f24:	6939      	ldr	r1, [r7, #16]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	3304      	adds	r3, #4
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	440b      	add	r3, r1
 8004f48:	3320      	adds	r3, #32
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f4e:	6939      	ldr	r1, [r7, #16]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3328      	adds	r3, #40	@ 0x28
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004f62:	6939      	ldr	r1, [r7, #16]
 8004f64:	69fa      	ldr	r2, [r7, #28]
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	3324      	adds	r3, #36	@ 0x24
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	332c      	adds	r3, #44	@ 0x2c
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f8a:	f3bf 8f5f 	dmb	sy
 8004f8e:	e002      	b.n	8004f96 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20012e5c 	.word	0x20012e5c

08004fac <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	@ 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004fba:	4b21      	ldr	r3, [pc, #132]	@ (8005040 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b53      	cmp	r3, #83	@ 0x53
 8004fc6:	d001      	beq.n	8004fcc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004fc8:	f7ff fe8c 	bl	8004ce4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8005040 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004fce:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d82c      	bhi.n	8005030 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004fda:	f04f 0120 	mov.w	r1, #32
 8004fde:	f381 8811 	msr	BASEPRI, r1
 8004fe2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	3360      	adds	r3, #96	@ 0x60
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00e      	beq.n	800501a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2200      	movs	r2, #0
 8005012:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005020:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
 800502e:	e002      	b.n	8005036 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005030:	f04f 33ff 	mov.w	r3, #4294967295
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005038:	4618      	mov	r0, r3
 800503a:	3728      	adds	r7, #40	@ 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20012e5c 	.word	0x20012e5c

08005044 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	60fa      	str	r2, [r7, #12]
 800505a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b80      	cmp	r3, #128	@ 0x80
 8005060:	d90a      	bls.n	8005078 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005066:	e007      	b.n	8005078 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	1c53      	adds	r3, r2, #1
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	60f9      	str	r1, [r7, #12]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <_EncodeStr+0x46>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1ee      	bne.n	8005068 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	b2da      	uxtb	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005096:	68fb      	ldr	r3, [r7, #12]
}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3307      	adds	r3, #7
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050c2:	4b34      	ldr	r3, [pc, #208]	@ (8005194 <_HandleIncomingPacket+0xd8>)
 80050c4:	7e1b      	ldrb	r3, [r3, #24]
 80050c6:	4618      	mov	r0, r3
 80050c8:	1cfb      	adds	r3, r7, #3
 80050ca:	2201      	movs	r2, #1
 80050cc:	4619      	mov	r1, r3
 80050ce:	f7ff fe63 	bl	8004d98 <SEGGER_RTT_ReadNoLock>
 80050d2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d057      	beq.n	800518a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	2b80      	cmp	r3, #128	@ 0x80
 80050de:	d031      	beq.n	8005144 <_HandleIncomingPacket+0x88>
 80050e0:	2b80      	cmp	r3, #128	@ 0x80
 80050e2:	dc40      	bgt.n	8005166 <_HandleIncomingPacket+0xaa>
 80050e4:	2b07      	cmp	r3, #7
 80050e6:	dc15      	bgt.n	8005114 <_HandleIncomingPacket+0x58>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd3c      	ble.n	8005166 <_HandleIncomingPacket+0xaa>
 80050ec:	3b01      	subs	r3, #1
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d839      	bhi.n	8005166 <_HandleIncomingPacket+0xaa>
 80050f2:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <_HandleIncomingPacket+0x3c>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	0800511b 	.word	0x0800511b
 80050fc:	08005121 	.word	0x08005121
 8005100:	08005127 	.word	0x08005127
 8005104:	0800512d 	.word	0x0800512d
 8005108:	08005133 	.word	0x08005133
 800510c:	08005139 	.word	0x08005139
 8005110:	0800513f 	.word	0x0800513f
 8005114:	2b7f      	cmp	r3, #127	@ 0x7f
 8005116:	d033      	beq.n	8005180 <_HandleIncomingPacket+0xc4>
 8005118:	e025      	b.n	8005166 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800511a:	f000 fb25 	bl	8005768 <SEGGER_SYSVIEW_Start>
      break;
 800511e:	e034      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005120:	f000 fbdc 	bl	80058dc <SEGGER_SYSVIEW_Stop>
      break;
 8005124:	e031      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005126:	f000 fdb5 	bl	8005c94 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800512a:	e02e      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800512c:	f000 fd7a 	bl	8005c24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005130:	e02b      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005132:	f000 fbf9 	bl	8005928 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005136:	e028      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005138:	f001 f8e6 	bl	8006308 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800513c:	e025      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800513e:	f001 f8c5 	bl	80062cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005142:	e022      	b.n	800518a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005144:	4b13      	ldr	r3, [pc, #76]	@ (8005194 <_HandleIncomingPacket+0xd8>)
 8005146:	7e1b      	ldrb	r3, [r3, #24]
 8005148:	4618      	mov	r0, r3
 800514a:	1cfb      	adds	r3, r7, #3
 800514c:	2201      	movs	r2, #1
 800514e:	4619      	mov	r1, r3
 8005150:	f7ff fe22 	bl	8004d98 <SEGGER_RTT_ReadNoLock>
 8005154:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d013      	beq.n	8005184 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f82a 	bl	80061b8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005164:	e00e      	b.n	8005184 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	b25b      	sxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	da0c      	bge.n	8005188 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <_HandleIncomingPacket+0xd8>)
 8005170:	7e1b      	ldrb	r3, [r3, #24]
 8005172:	4618      	mov	r0, r3
 8005174:	1cfb      	adds	r3, r7, #3
 8005176:	2201      	movs	r2, #1
 8005178:	4619      	mov	r1, r3
 800517a:	f7ff fe0d 	bl	8004d98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800517e:	e003      	b.n	8005188 <_HandleIncomingPacket+0xcc>
      break;
 8005180:	bf00      	nop
 8005182:	e002      	b.n	800518a <_HandleIncomingPacket+0xce>
      break;
 8005184:	bf00      	nop
 8005186:	e000      	b.n	800518a <_HandleIncomingPacket+0xce>
      break;
 8005188:	bf00      	nop
    }
  }
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2001971c 	.word	0x2001971c

08005198 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005198:	b580      	push	{r7, lr}
 800519a:	b08c      	sub	sp, #48	@ 0x30
 800519c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800519e:	2301      	movs	r3, #1
 80051a0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	3301      	adds	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ac:	4b31      	ldr	r3, [pc, #196]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b2:	e00b      	b.n	80051cc <_TrySendOverflowPacket+0x34>
 80051b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80051be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c8:	09db      	lsrs	r3, r3, #7
 80051ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d0:	d8f0      	bhi.n	80051b4 <_TrySendOverflowPacket+0x1c>
 80051d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051e2:	4b25      	ldr	r3, [pc, #148]	@ (8005278 <_TrySendOverflowPacket+0xe0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051e8:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	e00b      	b.n	8005214 <_TrySendOverflowPacket+0x7c>
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	6279      	str	r1, [r7, #36]	@ 0x24
 8005206:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	09db      	lsrs	r3, r3, #7
 8005212:	623b      	str	r3, [r7, #32]
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	2b7f      	cmp	r3, #127	@ 0x7f
 8005218:	d8f0      	bhi.n	80051fc <_TrySendOverflowPacket+0x64>
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005220:	6a3a      	ldr	r2, [r7, #32]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	4618      	mov	r0, r3
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	461a      	mov	r2, r3
 8005238:	1d3b      	adds	r3, r7, #4
 800523a:	4619      	mov	r1, r3
 800523c:	f7fa ffc8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005240:	4603      	mov	r3, r0
 8005242:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005250:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	3b01      	subs	r3, #1
 8005256:	b2da      	uxtb	r2, r3
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e004      	b.n	8005268 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800525e:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	3301      	adds	r3, #1
 8005264:	4a03      	ldr	r2, [pc, #12]	@ (8005274 <_TrySendOverflowPacket+0xdc>)
 8005266:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005268:	693b      	ldr	r3, [r7, #16]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3730      	adds	r7, #48	@ 0x30
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2001971c 	.word	0x2001971c
 8005278:	e0001004 	.word	0xe0001004

0800527c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005288:	4b98      	ldr	r3, [pc, #608]	@ (80054ec <_SendPacket+0x270>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d010      	beq.n	80052b2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005290:	4b96      	ldr	r3, [pc, #600]	@ (80054ec <_SendPacket+0x270>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 812d 	beq.w	80054f4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800529a:	4b94      	ldr	r3, [pc, #592]	@ (80054ec <_SendPacket+0x270>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d109      	bne.n	80052b6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052a2:	f7ff ff79 	bl	8005198 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052a6:	4b91      	ldr	r3, [pc, #580]	@ (80054ec <_SendPacket+0x270>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	f040 8124 	bne.w	80054f8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80052b0:	e001      	b.n	80052b6 <_SendPacket+0x3a>
    goto Send;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <_SendPacket+0x3c>
Send:
 80052b6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b1f      	cmp	r3, #31
 80052bc:	d809      	bhi.n	80052d2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052be:	4b8b      	ldr	r3, [pc, #556]	@ (80054ec <_SendPacket+0x270>)
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f040 8115 	bne.w	80054fc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b17      	cmp	r3, #23
 80052d6:	d807      	bhi.n	80052e8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	e0c4      	b.n	8005472 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052f4:	d912      	bls.n	800531c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	09da      	lsrs	r2, r3, #7
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	3a01      	subs	r2, #1
 800530e:	60fa      	str	r2, [r7, #12]
 8005310:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e006      	b.n	800532a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b7e      	cmp	r3, #126	@ 0x7e
 800532e:	d807      	bhi.n	8005340 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e098      	b.n	8005472 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005346:	d212      	bcs.n	800536e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	09da      	lsrs	r2, r3, #7
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	3b01      	subs	r3, #1
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	3a01      	subs	r2, #1
 8005360:	60fa      	str	r2, [r7, #12]
 8005362:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	e081      	b.n	8005472 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005374:	d21d      	bcs.n	80053b2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0b9a      	lsrs	r2, r3, #14
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b01      	subs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	09db      	lsrs	r3, r3, #7
 800538a:	b2db      	uxtb	r3, r3
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	3a01      	subs	r2, #1
 8005390:	60fa      	str	r2, [r7, #12]
 8005392:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	3a01      	subs	r2, #1
 80053a4:	60fa      	str	r2, [r7, #12]
 80053a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	701a      	strb	r2, [r3, #0]
 80053b0:	e05f      	b.n	8005472 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b8:	d228      	bcs.n	800540c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	0d5a      	lsrs	r2, r3, #21
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0b9b      	lsrs	r3, r3, #14
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	3a01      	subs	r2, #1
 80053d4:	60fa      	str	r2, [r7, #12]
 80053d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	09db      	lsrs	r3, r3, #7
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	3a01      	subs	r2, #1
 80053ea:	60fa      	str	r2, [r7, #12]
 80053ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053f0:	b2da      	uxtb	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	3a01      	subs	r2, #1
 80053fe:	60fa      	str	r2, [r7, #12]
 8005400:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	e032      	b.n	8005472 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0f1a      	lsrs	r2, r3, #28
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3b01      	subs	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	0d5b      	lsrs	r3, r3, #21
 8005420:	b2db      	uxtb	r3, r3
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	3a01      	subs	r2, #1
 8005426:	60fa      	str	r2, [r7, #12]
 8005428:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	0b9b      	lsrs	r3, r3, #14
 8005436:	b2db      	uxtb	r3, r3
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	3a01      	subs	r2, #1
 800543c:	60fa      	str	r2, [r7, #12]
 800543e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005442:	b2da      	uxtb	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	b2db      	uxtb	r3, r3
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	3a01      	subs	r2, #1
 8005452:	60fa      	str	r2, [r7, #12]
 8005454:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005458:	b2da      	uxtb	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	3a01      	subs	r2, #1
 8005466:	60fa      	str	r2, [r7, #12]
 8005468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800546c:	b2da      	uxtb	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005472:	4b1f      	ldr	r3, [pc, #124]	@ (80054f0 <_SendPacket+0x274>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005478:	4b1c      	ldr	r3, [pc, #112]	@ (80054ec <_SendPacket+0x270>)
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	e00b      	b.n	80054a4 <_SendPacket+0x228>
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	b2da      	uxtb	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	6279      	str	r1, [r7, #36]	@ 0x24
 8005496:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	09db      	lsrs	r3, r3, #7
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054a8:	d8f0      	bhi.n	800548c <_SendPacket+0x210>
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80054b0:	6a3a      	ldr	r2, [r7, #32]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80054ba:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <_SendPacket+0x270>)
 80054bc:	785b      	ldrb	r3, [r3, #1]
 80054be:	4618      	mov	r0, r3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68f9      	ldr	r1, [r7, #12]
 80054ca:	f7fa fe81 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80054ce:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054d6:	4a05      	ldr	r2, [pc, #20]	@ (80054ec <_SendPacket+0x270>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	60d3      	str	r3, [r2, #12]
 80054dc:	e00f      	b.n	80054fe <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054de:	4b03      	ldr	r3, [pc, #12]	@ (80054ec <_SendPacket+0x270>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	4b01      	ldr	r3, [pc, #4]	@ (80054ec <_SendPacket+0x270>)
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e008      	b.n	80054fe <_SendPacket+0x282>
 80054ec:	2001971c 	.word	0x2001971c
 80054f0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80054f4:	bf00      	nop
 80054f6:	e002      	b.n	80054fe <_SendPacket+0x282>
      goto SendDone;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <_SendPacket+0x282>
      goto SendDone;
 80054fc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <_SendPacket+0x2d4>)
 8005500:	7e1b      	ldrb	r3, [r3, #24]
 8005502:	4619      	mov	r1, r3
 8005504:	4a13      	ldr	r2, [pc, #76]	@ (8005554 <_SendPacket+0x2d8>)
 8005506:	460b      	mov	r3, r1
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	440b      	add	r3, r1
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	336c      	adds	r3, #108	@ 0x6c
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <_SendPacket+0x2d4>)
 8005516:	7e1b      	ldrb	r3, [r3, #24]
 8005518:	4618      	mov	r0, r3
 800551a:	490e      	ldr	r1, [pc, #56]	@ (8005554 <_SendPacket+0x2d8>)
 800551c:	4603      	mov	r3, r0
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4403      	add	r3, r0
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	3370      	adds	r3, #112	@ 0x70
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00b      	beq.n	8005546 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800552e:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <_SendPacket+0x2d4>)
 8005530:	789b      	ldrb	r3, [r3, #2]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d107      	bne.n	8005546 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005536:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <_SendPacket+0x2d4>)
 8005538:	2201      	movs	r2, #1
 800553a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800553c:	f7ff fdbe 	bl	80050bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005540:	4b03      	ldr	r3, [pc, #12]	@ (8005550 <_SendPacket+0x2d4>)
 8005542:	2200      	movs	r2, #0
 8005544:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005546:	bf00      	nop
 8005548:	3728      	adds	r7, #40	@ 0x28
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	2001971c 	.word	0x2001971c
 8005554:	20012e5c 	.word	0x20012e5c

08005558 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005566:	2300      	movs	r3, #0
 8005568:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800556c:	4917      	ldr	r1, [pc, #92]	@ (80055cc <SEGGER_SYSVIEW_Init+0x74>)
 800556e:	4818      	ldr	r0, [pc, #96]	@ (80055d0 <SEGGER_SYSVIEW_Init+0x78>)
 8005570:	f7ff fc98 	bl	8004ea4 <SEGGER_RTT_AllocUpBuffer>
 8005574:	4603      	mov	r3, r0
 8005576:	b2da      	uxtb	r2, r3
 8005578:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800557a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800557e:	785a      	ldrb	r2, [r3, #1]
 8005580:	4b14      	ldr	r3, [pc, #80]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005582:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005586:	7e1b      	ldrb	r3, [r3, #24]
 8005588:	4618      	mov	r0, r3
 800558a:	2300      	movs	r3, #0
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	2308      	movs	r3, #8
 8005590:	4a11      	ldr	r2, [pc, #68]	@ (80055d8 <SEGGER_SYSVIEW_Init+0x80>)
 8005592:	490f      	ldr	r1, [pc, #60]	@ (80055d0 <SEGGER_SYSVIEW_Init+0x78>)
 8005594:	f7ff fd0a 	bl	8004fac <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005598:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800559e:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <SEGGER_SYSVIEW_Init+0x84>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80055a6:	4a0b      	ldr	r2, [pc, #44]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80055ac:	4a09      	ldr	r2, [pc, #36]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80055b2:	4a08      	ldr	r2, [pc, #32]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80055b8:	4a06      	ldr	r2, [pc, #24]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80055be:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <SEGGER_SYSVIEW_Init+0x7c>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80055c4:	bf00      	nop
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20013314 	.word	0x20013314
 80055d0:	080067b4 	.word	0x080067b4
 80055d4:	2001971c 	.word	0x2001971c
 80055d8:	20019714 	.word	0x20019714
 80055dc:	e0001004 	.word	0xe0001004

080055e0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80055e8:	4a04      	ldr	r2, [pc, #16]	@ (80055fc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6113      	str	r3, [r2, #16]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	2001971c 	.word	0x2001971c

08005600 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005608:	f3ef 8311 	mrs	r3, BASEPRI
 800560c:	f04f 0120 	mov.w	r1, #32
 8005610:	f381 8811 	msr	BASEPRI, r1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	4808      	ldr	r0, [pc, #32]	@ (8005638 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005618:	f7ff fd44 	bl	80050a4 <_PreparePacket>
 800561c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68b8      	ldr	r0, [r7, #8]
 8005624:	f7ff fe2a 	bl	800527c <_SendPacket>
  RECORD_END();
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f383 8811 	msr	BASEPRI, r3
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	2001974c 	.word	0x2001974c

0800563c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b088      	sub	sp, #32
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005646:	f3ef 8311 	mrs	r3, BASEPRI
 800564a:	f04f 0120 	mov.w	r1, #32
 800564e:	f381 8811 	msr	BASEPRI, r1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	4816      	ldr	r0, [pc, #88]	@ (80056b0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005656:	f7ff fd25 	bl	80050a4 <_PreparePacket>
 800565a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00b      	b.n	8005682 <SEGGER_SYSVIEW_RecordU32+0x46>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	61f9      	str	r1, [r7, #28]
 8005674:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b7f      	cmp	r3, #127	@ 0x7f
 8005686:	d8f0      	bhi.n	800566a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f7ff fded 	bl	800527c <_SendPacket>
  RECORD_END();
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8811 	msr	BASEPRI, r3
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2001974c 	.word	0x2001974c

080056b4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08c      	sub	sp, #48	@ 0x30
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	4825      	ldr	r0, [pc, #148]	@ (8005764 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80056d0:	f7ff fce8 	bl	80050a4 <_PreparePacket>
 80056d4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e2:	e00b      	b.n	80056fc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056f2:	b2d2      	uxtb	r2, r2
 80056f4:	701a      	strb	r2, [r3, #0]
 80056f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f8:	09db      	lsrs	r3, r3, #7
 80056fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005700:	d8f0      	bhi.n	80056e4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	627b      	str	r3, [r7, #36]	@ 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	e00b      	b.n	8005734 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005722:	1c59      	adds	r1, r3, #1
 8005724:	6279      	str	r1, [r7, #36]	@ 0x24
 8005726:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	09db      	lsrs	r3, r3, #7
 8005732:	623b      	str	r3, [r7, #32]
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2b7f      	cmp	r3, #127	@ 0x7f
 8005738:	d8f0      	bhi.n	800571c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69b8      	ldr	r0, [r7, #24]
 8005750:	f7ff fd94 	bl	800527c <_SendPacket>
  RECORD_END();
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f383 8811 	msr	BASEPRI, r3
}
 800575a:	bf00      	nop
 800575c:	3730      	adds	r7, #48	@ 0x30
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	2001974c 	.word	0x2001974c

08005768 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	@ 0x30
 800576c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800576e:	4b58      	ldr	r3, [pc, #352]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005774:	f3ef 8311 	mrs	r3, BASEPRI
 8005778:	f04f 0120 	mov.w	r1, #32
 800577c:	f381 8811 	msr	BASEPRI, r1
 8005780:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005782:	4b53      	ldr	r3, [pc, #332]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	220a      	movs	r2, #10
 8005788:	4952      	ldr	r1, [pc, #328]	@ (80058d4 <SEGGER_SYSVIEW_Start+0x16c>)
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fd20 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005796:	200a      	movs	r0, #10
 8005798:	f7ff ff32 	bl	8005600 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800579c:	f3ef 8311 	mrs	r3, BASEPRI
 80057a0:	f04f 0120 	mov.w	r1, #32
 80057a4:	f381 8811 	msr	BASEPRI, r1
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	484b      	ldr	r0, [pc, #300]	@ (80058d8 <SEGGER_SYSVIEW_Start+0x170>)
 80057ac:	f7ff fc7a 	bl	80050a4 <_PreparePacket>
 80057b0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ba:	4b45      	ldr	r3, [pc, #276]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c0:	e00b      	b.n	80057da <SEGGER_SYSVIEW_Start+0x72>
 80057c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c8:	1c59      	adds	r1, r3, #1
 80057ca:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d6:	09db      	lsrs	r3, r3, #7
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80057de:	d8f0      	bhi.n	80057c2 <SEGGER_SYSVIEW_Start+0x5a>
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f4:	4b36      	ldr	r3, [pc, #216]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	623b      	str	r3, [r7, #32]
 80057fa:	e00b      	b.n	8005814 <SEGGER_SYSVIEW_Start+0xac>
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	1c59      	adds	r1, r3, #1
 8005804:	6279      	str	r1, [r7, #36]	@ 0x24
 8005806:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	09db      	lsrs	r3, r3, #7
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	2b7f      	cmp	r3, #127	@ 0x7f
 8005818:	d8f0      	bhi.n	80057fc <SEGGER_SYSVIEW_Start+0x94>
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005820:	6a3a      	ldr	r2, [r7, #32]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	4b28      	ldr	r3, [pc, #160]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	e00b      	b.n	800584e <SEGGER_SYSVIEW_Start+0xe6>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	b2da      	uxtb	r2, r3
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	1c59      	adds	r1, r3, #1
 800583e:	61f9      	str	r1, [r7, #28]
 8005840:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	09db      	lsrs	r3, r3, #7
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b7f      	cmp	r3, #127	@ 0x7f
 8005852:	d8f0      	bhi.n	8005836 <SEGGER_SYSVIEW_Start+0xce>
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	61fa      	str	r2, [r7, #28]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	e00b      	b.n	8005886 <SEGGER_SYSVIEW_Start+0x11e>
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	1c59      	adds	r1, r3, #1
 8005876:	6179      	str	r1, [r7, #20]
 8005878:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	09db      	lsrs	r3, r3, #7
 8005884:	613b      	str	r3, [r7, #16]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b7f      	cmp	r3, #127	@ 0x7f
 800588a:	d8f0      	bhi.n	800586e <SEGGER_SYSVIEW_Start+0x106>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	617a      	str	r2, [r7, #20]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800589c:	2218      	movs	r2, #24
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fceb 	bl	800527c <_SendPacket>
      RECORD_END();
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80058ac:	4b08      	ldr	r3, [pc, #32]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80058b4:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <SEGGER_SYSVIEW_Start+0x168>)
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80058ba:	f000 f9eb 	bl	8005c94 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80058be:	f000 f9b1 	bl	8005c24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80058c2:	f000 fd21 	bl	8006308 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80058c6:	bf00      	nop
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	2001971c 	.word	0x2001971c
 80058d4:	08006840 	.word	0x08006840
 80058d8:	2001974c 	.word	0x2001974c

080058dc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058e2:	f3ef 8311 	mrs	r3, BASEPRI
 80058e6:	f04f 0120 	mov.w	r1, #32
 80058ea:	f381 8811 	msr	BASEPRI, r1
 80058ee:	607b      	str	r3, [r7, #4]
 80058f0:	480b      	ldr	r0, [pc, #44]	@ (8005920 <SEGGER_SYSVIEW_Stop+0x44>)
 80058f2:	f7ff fbd7 	bl	80050a4 <_PreparePacket>
 80058f6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80058f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <SEGGER_SYSVIEW_Stop+0x48>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d007      	beq.n	8005910 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005900:	220b      	movs	r2, #11
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6838      	ldr	r0, [r7, #0]
 8005906:	f7ff fcb9 	bl	800527c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800590a:	4b06      	ldr	r3, [pc, #24]	@ (8005924 <SEGGER_SYSVIEW_Stop+0x48>)
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f383 8811 	msr	BASEPRI, r3
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	2001974c 	.word	0x2001974c
 8005924:	2001971c 	.word	0x2001971c

08005928 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08c      	sub	sp, #48	@ 0x30
 800592c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800592e:	f3ef 8311 	mrs	r3, BASEPRI
 8005932:	f04f 0120 	mov.w	r1, #32
 8005936:	f381 8811 	msr	BASEPRI, r1
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	4845      	ldr	r0, [pc, #276]	@ (8005a54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800593e:	f7ff fbb1 	bl	80050a4 <_PreparePacket>
 8005942:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800594c:	4b42      	ldr	r3, [pc, #264]	@ (8005a58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005952:	e00b      	b.n	800596c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	b2da      	uxtb	r2, r3
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800595e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	09db      	lsrs	r3, r3, #7
 800596a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005970:	d8f0      	bhi.n	8005954 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005978:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	627b      	str	r3, [r7, #36]	@ 0x24
 8005986:	4b34      	ldr	r3, [pc, #208]	@ (8005a58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e00b      	b.n	80059a6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	1c59      	adds	r1, r3, #1
 8005996:	6279      	str	r1, [r7, #36]	@ 0x24
 8005998:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80059aa:	d8f0      	bhi.n	800598e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80059ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	4b25      	ldr	r3, [pc, #148]	@ (8005a58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	e00b      	b.n	80059e0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	61f9      	str	r1, [r7, #28]
 80059d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	09db      	lsrs	r3, r3, #7
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e4:	d8f0      	bhi.n	80059c8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	61fa      	str	r2, [r7, #28]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e00b      	b.n	8005a18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	1c59      	adds	r1, r3, #1
 8005a08:	6179      	str	r1, [r7, #20]
 8005a0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	09db      	lsrs	r3, r3, #7
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1c:	d8f0      	bhi.n	8005a00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	617a      	str	r2, [r7, #20]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a2e:	2218      	movs	r2, #24
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	68b8      	ldr	r0, [r7, #8]
 8005a34:	f7ff fc22 	bl	800527c <_SendPacket>
  RECORD_END();
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005a46:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	4798      	blx	r3
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3730      	adds	r7, #48	@ 0x30
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	2001974c 	.word	0x2001974c
 8005a58:	2001971c 	.word	0x2001971c

08005a5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b092      	sub	sp, #72	@ 0x48
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005a64:	f3ef 8311 	mrs	r3, BASEPRI
 8005a68:	f04f 0120 	mov.w	r1, #32
 8005a6c:	f381 8811 	msr	BASEPRI, r1
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	486a      	ldr	r0, [pc, #424]	@ (8005c1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005a74:	f7ff fb16 	bl	80050a4 <_PreparePacket>
 8005a78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b66      	ldr	r3, [pc, #408]	@ (8005c20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a8e:	e00b      	b.n	8005aa8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a96:	1c59      	adds	r1, r3, #1
 8005a98:	6479      	str	r1, [r7, #68]	@ 0x44
 8005a9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aa4:	09db      	lsrs	r3, r3, #7
 8005aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005aaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aac:	d8f0      	bhi.n	8005a90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005abc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac8:	e00b      	b.n	8005ae2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad0:	1c59      	adds	r1, r3, #1
 8005ad2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ad4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	701a      	strb	r2, [r3, #0]
 8005adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ade:	09db      	lsrs	r3, r3, #7
 8005ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ae6:	d8f0      	bhi.n	8005aca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	4619      	mov	r1, r3
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f7ff fa9f 	bl	8005044 <_EncodeStr>
 8005b06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005b08:	2209      	movs	r2, #9
 8005b0a:	68f9      	ldr	r1, [r7, #12]
 8005b0c:	6938      	ldr	r0, [r7, #16]
 8005b0e:	f7ff fbb5 	bl	800527c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b40      	ldr	r3, [pc, #256]	@ (8005c20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b26:	e00b      	b.n	8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b60:	e00b      	b.n	8005b7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b68:	1c59      	adds	r1, r3, #1
 8005b6a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	09db      	lsrs	r3, r3, #7
 8005b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b7e:	d8f0      	bhi.n	8005b62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b82:	1c5a      	adds	r2, r3, #1
 8005b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	e00b      	b.n	8005bb4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	1c59      	adds	r1, r3, #1
 8005ba4:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ba6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	09db      	lsrs	r3, r3, #7
 8005bb2:	623b      	str	r3, [r7, #32]
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bb8:	d8f0      	bhi.n	8005b9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bc0:	6a3a      	ldr	r2, [r7, #32]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	e00b      	b.n	8005bec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	61f9      	str	r1, [r7, #28]
 8005bde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	61fa      	str	r2, [r7, #28]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005c02:	2215      	movs	r2, #21
 8005c04:	68f9      	ldr	r1, [r7, #12]
 8005c06:	6938      	ldr	r0, [r7, #16]
 8005c08:	f7ff fb38 	bl	800527c <_SendPacket>
  RECORD_END();
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f383 8811 	msr	BASEPRI, r3
}
 8005c12:	bf00      	nop
 8005c14:	3748      	adds	r7, #72	@ 0x48
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2001974c 	.word	0x2001974c
 8005c20:	2001971c 	.word	0x2001971c

08005c24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005c28:	4b07      	ldr	r3, [pc, #28]	@ (8005c48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005c30:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005c3a:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4798      	blx	r3
  }
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	2001971c 	.word	0x2001971c

08005c4c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c54:	f3ef 8311 	mrs	r3, BASEPRI
 8005c58:	f04f 0120 	mov.w	r1, #32
 8005c5c:	f381 8811 	msr	BASEPRI, r1
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	480b      	ldr	r0, [pc, #44]	@ (8005c90 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005c64:	f7ff fa1e 	bl	80050a4 <_PreparePacket>
 8005c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c6a:	2280      	movs	r2, #128	@ 0x80
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	6938      	ldr	r0, [r7, #16]
 8005c70:	f7ff f9e8 	bl	8005044 <_EncodeStr>
 8005c74:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005c76:	220e      	movs	r2, #14
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f7ff fafe 	bl	800527c <_SendPacket>
  RECORD_END();
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f383 8811 	msr	BASEPRI, r3
}
 8005c86:	bf00      	nop
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	2001974c 	.word	0x2001974c

08005c94 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005c94:	b590      	push	{r4, r7, lr}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01a      	beq.n	8005cd8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005ca2:	4b13      	ldr	r3, [pc, #76]	@ (8005cf0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d015      	beq.n	8005cd8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005cac:	4b10      	ldr	r3, [pc, #64]	@ (8005cf0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4798      	blx	r3
 8005cb4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cb8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005cba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	000a      	movs	r2, r1
 8005cc8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005cca:	4613      	mov	r3, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4621      	mov	r1, r4
 8005cd0:	200d      	movs	r0, #13
 8005cd2:	f7ff fcef 	bl	80056b4 <SEGGER_SYSVIEW_RecordU32x2>
 8005cd6:	e006      	b.n	8005ce6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005cd8:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	200c      	movs	r0, #12
 8005ce0:	f7ff fcac 	bl	800563c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	2001971c 	.word	0x2001971c
 8005cf4:	e0001004 	.word	0xe0001004

08005cf8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8005d02:	f04f 0120 	mov.w	r1, #32
 8005d06:	f381 8811 	msr	BASEPRI, r1
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	4819      	ldr	r0, [pc, #100]	@ (8005d74 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005d0e:	f7ff f9c9 	bl	80050a4 <_PreparePacket>
 8005d12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005d18:	4b17      	ldr	r3, [pc, #92]	@ (8005d78 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d20:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e00b      	b.n	8005d44 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	6179      	str	r1, [r7, #20]
 8005d36:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	09db      	lsrs	r3, r3, #7
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d48:	d8f0      	bhi.n	8005d2c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	617a      	str	r2, [r7, #20]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f7ff fa8c 	bl	800527c <_SendPacket>
  RECORD_END();
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f383 8811 	msr	BASEPRI, r3
}
 8005d6a:	bf00      	nop
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	2001974c 	.word	0x2001974c
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d82:	f3ef 8311 	mrs	r3, BASEPRI
 8005d86:	f04f 0120 	mov.w	r1, #32
 8005d8a:	f381 8811 	msr	BASEPRI, r1
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	4807      	ldr	r0, [pc, #28]	@ (8005db0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005d92:	f7ff f987 	bl	80050a4 <_PreparePacket>
 8005d96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005d98:	2203      	movs	r2, #3
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6838      	ldr	r0, [r7, #0]
 8005d9e:	f7ff fa6d 	bl	800527c <_SendPacket>
  RECORD_END();
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f383 8811 	msr	BASEPRI, r3
}
 8005da8:	bf00      	nop
 8005daa:	3708      	adds	r7, #8
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	2001974c 	.word	0x2001974c

08005db4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005dba:	f3ef 8311 	mrs	r3, BASEPRI
 8005dbe:	f04f 0120 	mov.w	r1, #32
 8005dc2:	f381 8811 	msr	BASEPRI, r1
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	4807      	ldr	r0, [pc, #28]	@ (8005de8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005dca:	f7ff f96b 	bl	80050a4 <_PreparePacket>
 8005dce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005dd0:	2212      	movs	r2, #18
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6838      	ldr	r0, [r7, #0]
 8005dd6:	f7ff fa51 	bl	800527c <_SendPacket>
  RECORD_END();
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f383 8811 	msr	BASEPRI, r3
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	2001974c 	.word	0x2001974c

08005dec <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005df4:	f3ef 8311 	mrs	r3, BASEPRI
 8005df8:	f04f 0120 	mov.w	r1, #32
 8005dfc:	f381 8811 	msr	BASEPRI, r1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	4817      	ldr	r0, [pc, #92]	@ (8005e60 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005e04:	f7ff f94e 	bl	80050a4 <_PreparePacket>
 8005e08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e00b      	b.n	8005e30 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	61f9      	str	r1, [r7, #28]
 8005e22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e34:	d8f0      	bhi.n	8005e18 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	61fa      	str	r2, [r7, #28]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005e46:	221c      	movs	r2, #28
 8005e48:	68f9      	ldr	r1, [r7, #12]
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f7ff fa16 	bl	800527c <_SendPacket>
  RECORD_END();
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f383 8811 	msr	BASEPRI, r3
}
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	2001974c 	.word	0x2001974c

08005e64 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e6e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e72:	f04f 0120 	mov.w	r1, #32
 8005e76:	f381 8811 	msr	BASEPRI, r1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	4824      	ldr	r0, [pc, #144]	@ (8005f10 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005e7e:	f7ff f911 	bl	80050a4 <_PreparePacket>
 8005e82:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	623b      	str	r3, [r7, #32]
 8005e90:	e00b      	b.n	8005eaa <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	1c59      	adds	r1, r3, #1
 8005e9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	09db      	lsrs	r3, r3, #7
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eae:	d8f0      	bhi.n	8005e92 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e00b      	b.n	8005ee2 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	61f9      	str	r1, [r7, #28]
 8005ed4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	09db      	lsrs	r3, r3, #7
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ee6:	d8f0      	bhi.n	8005eca <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	61fa      	str	r2, [r7, #28]
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005ef8:	221c      	movs	r2, #28
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	6938      	ldr	r0, [r7, #16]
 8005efe:	f7ff f9bd 	bl	800527c <_SendPacket>
  RECORD_END();
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f383 8811 	msr	BASEPRI, r3
}
 8005f08:	bf00      	nop
 8005f0a:	3728      	adds	r7, #40	@ 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	2001974c 	.word	0x2001974c

08005f14 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f1e:	f04f 0120 	mov.w	r1, #32
 8005f22:	f381 8811 	msr	BASEPRI, r1
 8005f26:	607b      	str	r3, [r7, #4]
 8005f28:	4807      	ldr	r0, [pc, #28]	@ (8005f48 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005f2a:	f7ff f8bb 	bl	80050a4 <_PreparePacket>
 8005f2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005f30:	2211      	movs	r2, #17
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6838      	ldr	r0, [r7, #0]
 8005f36:	f7ff f9a1 	bl	800527c <_SendPacket>
  RECORD_END();
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f383 8811 	msr	BASEPRI, r3
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	2001974c 	.word	0x2001974c

08005f4c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f54:	f3ef 8311 	mrs	r3, BASEPRI
 8005f58:	f04f 0120 	mov.w	r1, #32
 8005f5c:	f381 8811 	msr	BASEPRI, r1
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	4819      	ldr	r0, [pc, #100]	@ (8005fc8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005f64:	f7ff f89e 	bl	80050a4 <_PreparePacket>
 8005f68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	61fb      	str	r3, [r7, #28]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	e00b      	b.n	8005f9a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	61f9      	str	r1, [r7, #28]
 8005f8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	09db      	lsrs	r3, r3, #7
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f9e:	d8f0      	bhi.n	8005f82 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	61fa      	str	r2, [r7, #28]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6938      	ldr	r0, [r7, #16]
 8005fb6:	f7ff f961 	bl	800527c <_SendPacket>
  RECORD_END();
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f383 8811 	msr	BASEPRI, r3
}
 8005fc0:	bf00      	nop
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	2001974c 	.word	0x2001974c
 8005fcc:	2001971c 	.word	0x2001971c

08005fd0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005fdc:	f04f 0120 	mov.w	r1, #32
 8005fe0:	f381 8811 	msr	BASEPRI, r1
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	4819      	ldr	r0, [pc, #100]	@ (800604c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005fe8:	f7ff f85c 	bl	80050a4 <_PreparePacket>
 8005fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ff2:	4b17      	ldr	r3, [pc, #92]	@ (8006050 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	61fb      	str	r3, [r7, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	e00b      	b.n	800601e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	b2da      	uxtb	r2, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	1c59      	adds	r1, r3, #1
 800600e:	61f9      	str	r1, [r7, #28]
 8006010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	09db      	lsrs	r3, r3, #7
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b7f      	cmp	r3, #127	@ 0x7f
 8006022:	d8f0      	bhi.n	8006006 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	61fa      	str	r2, [r7, #28]
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006034:	2204      	movs	r2, #4
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	6938      	ldr	r0, [r7, #16]
 800603a:	f7ff f91f 	bl	800527c <_SendPacket>
  RECORD_END();
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f383 8811 	msr	BASEPRI, r3
}
 8006044:	bf00      	nop
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	2001974c 	.word	0x2001974c
 8006050:	2001971c 	.word	0x2001971c

08006054 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800605c:	f3ef 8311 	mrs	r3, BASEPRI
 8006060:	f04f 0120 	mov.w	r1, #32
 8006064:	f381 8811 	msr	BASEPRI, r1
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	4819      	ldr	r0, [pc, #100]	@ (80060d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800606c:	f7ff f81a 	bl	80050a4 <_PreparePacket>
 8006070:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006076:	4b17      	ldr	r3, [pc, #92]	@ (80060d4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	61fb      	str	r3, [r7, #28]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	61f9      	str	r1, [r7, #28]
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	61fa      	str	r2, [r7, #28]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80060b8:	2206      	movs	r2, #6
 80060ba:	68f9      	ldr	r1, [r7, #12]
 80060bc:	6938      	ldr	r0, [r7, #16]
 80060be:	f7ff f8dd 	bl	800527c <_SendPacket>
  RECORD_END();
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f383 8811 	msr	BASEPRI, r3
}
 80060c8:	bf00      	nop
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	2001974c 	.word	0x2001974c
 80060d4:	2001971c 	.word	0x2001971c

080060d8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	4827      	ldr	r0, [pc, #156]	@ (8006190 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80060f2:	f7fe ffd7 	bl	80050a4 <_PreparePacket>
 80060f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80060fc:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	623b      	str	r3, [r7, #32]
 800610e:	e00b      	b.n	8006128 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	6279      	str	r1, [r7, #36]	@ 0x24
 800611a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	09db      	lsrs	r3, r3, #7
 8006126:	623b      	str	r3, [r7, #32]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	2b7f      	cmp	r3, #127	@ 0x7f
 800612c:	d8f0      	bhi.n	8006110 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800612e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	627a      	str	r2, [r7, #36]	@ 0x24
 8006134:	6a3a      	ldr	r2, [r7, #32]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	61bb      	str	r3, [r7, #24]
 8006146:	e00b      	b.n	8006160 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	1c59      	adds	r1, r3, #1
 8006150:	61f9      	str	r1, [r7, #28]
 8006152:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006156:	b2d2      	uxtb	r2, r2
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	09db      	lsrs	r3, r3, #7
 800615e:	61bb      	str	r3, [r7, #24]
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b7f      	cmp	r3, #127	@ 0x7f
 8006164:	d8f0      	bhi.n	8006148 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	61fa      	str	r2, [r7, #28]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006176:	2207      	movs	r2, #7
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	6938      	ldr	r0, [r7, #16]
 800617c:	f7ff f87e 	bl	800527c <_SendPacket>
  RECORD_END();
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f383 8811 	msr	BASEPRI, r3
}
 8006186:	bf00      	nop
 8006188:	3728      	adds	r7, #40	@ 0x28
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	2001974c 	.word	0x2001974c
 8006194:	2001971c 	.word	0x2001971c

08006198 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80061a0:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	1ad3      	subs	r3, r2, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	2001971c 	.word	0x2001971c

080061b8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	@ 0x30
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80061c2:	4b40      	ldr	r3, [pc, #256]	@ (80062c4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d077      	beq.n	80062ba <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80061ca:	4b3e      	ldr	r3, [pc, #248]	@ (80062c4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80061d0:	2300      	movs	r3, #0
 80061d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d4:	e008      	b.n	80061e8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	3301      	adds	r3, #1
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e8:	79fb      	ldrb	r3, [r7, #7]
 80061ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d3f2      	bcc.n	80061d6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80061f0:	e000      	b.n	80061f4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80061f2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80061f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d055      	beq.n	80062a6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80061fa:	f3ef 8311 	mrs	r3, BASEPRI
 80061fe:	f04f 0120 	mov.w	r1, #32
 8006202:	f381 8811 	msr	BASEPRI, r1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	482f      	ldr	r0, [pc, #188]	@ (80062c8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800620a:	f7fe ff4b 	bl	80050a4 <_PreparePacket>
 800620e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	627b      	str	r3, [r7, #36]	@ 0x24
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	e00b      	b.n	8006236 <SEGGER_SYSVIEW_SendModule+0x7e>
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	6279      	str	r1, [r7, #36]	@ 0x24
 8006228:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6a3b      	ldr	r3, [r7, #32]
 8006232:	09db      	lsrs	r3, r3, #7
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	2b7f      	cmp	r3, #127	@ 0x7f
 800623a:	d8f0      	bhi.n	800621e <SEGGER_SYSVIEW_SendModule+0x66>
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	627a      	str	r2, [r7, #36]	@ 0x24
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e00b      	b.n	8006270 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	61f9      	str	r1, [r7, #28]
 8006262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	09db      	lsrs	r3, r3, #7
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b7f      	cmp	r3, #127	@ 0x7f
 8006274:	d8f0      	bhi.n	8006258 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	61fa      	str	r2, [r7, #28]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2280      	movs	r2, #128	@ 0x80
 800628c:	4619      	mov	r1, r3
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7fe fed8 	bl	8005044 <_EncodeStr>
 8006294:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006296:	2216      	movs	r2, #22
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f7fe ffee 	bl	800527c <_SendPacket>
      RECORD_END();
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d006      	beq.n	80062ba <SEGGER_SYSVIEW_SendModule+0x102>
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80062b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	4798      	blx	r3
    }
  }
}
 80062ba:	bf00      	nop
 80062bc:	3730      	adds	r7, #48	@ 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20019744 	.word	0x20019744
 80062c8:	2001974c 	.word	0x2001974c

080062cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80062d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80062da:	4b0a      	ldr	r3, [pc, #40]	@ (8006304 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f2      	bne.n	80062e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20019744 	.word	0x20019744

08006308 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800630e:	f3ef 8311 	mrs	r3, BASEPRI
 8006312:	f04f 0120 	mov.w	r1, #32
 8006316:	f381 8811 	msr	BASEPRI, r1
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	4817      	ldr	r0, [pc, #92]	@ (800637c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800631e:	f7fe fec1 	bl	80050a4 <_PreparePacket>
 8006322:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	4b14      	ldr	r3, [pc, #80]	@ (8006380 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e00b      	b.n	800634c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1c59      	adds	r1, r3, #1
 800633c:	6179      	str	r1, [r7, #20]
 800633e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	613b      	str	r3, [r7, #16]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006350:	d8f0      	bhi.n	8006334 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	617a      	str	r2, [r7, #20]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006362:	221b      	movs	r2, #27
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	68b8      	ldr	r0, [r7, #8]
 8006368:	f7fe ff88 	bl	800527c <_SendPacket>
  RECORD_END();
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f383 8811 	msr	BASEPRI, r3
}
 8006372:	bf00      	nop
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2001974c 	.word	0x2001974c
 8006380:	20019748 	.word	0x20019748

08006384 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	@ 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800638c:	f3ef 8311 	mrs	r3, BASEPRI
 8006390:	f04f 0120 	mov.w	r1, #32
 8006394:	f381 8811 	msr	BASEPRI, r1
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	4827      	ldr	r0, [pc, #156]	@ (8006438 <SEGGER_SYSVIEW_Warn+0xb4>)
 800639c:	f7fe fe82 	bl	80050a4 <_PreparePacket>
 80063a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063a2:	2280      	movs	r2, #128	@ 0x80
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	6938      	ldr	r0, [r7, #16]
 80063a8:	f7fe fe4c 	bl	8005044 <_EncodeStr>
 80063ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	2301      	movs	r3, #1
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	e00b      	b.n	80063d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80063c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	09db      	lsrs	r3, r3, #7
 80063ce:	623b      	str	r3, [r7, #32]
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d4:	d8f0      	bhi.n	80063b8 <SEGGER_SYSVIEW_Warn+0x34>
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	627a      	str	r2, [r7, #36]	@ 0x24
 80063dc:	6a3a      	ldr	r2, [r7, #32]
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	2300      	movs	r3, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e00b      	b.n	8006408 <SEGGER_SYSVIEW_Warn+0x84>
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	61f9      	str	r1, [r7, #28]
 80063fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	2b7f      	cmp	r3, #127	@ 0x7f
 800640c:	d8f0      	bhi.n	80063f0 <SEGGER_SYSVIEW_Warn+0x6c>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	61fa      	str	r2, [r7, #28]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800641e:	221a      	movs	r2, #26
 8006420:	68f9      	ldr	r1, [r7, #12]
 8006422:	6938      	ldr	r0, [r7, #16]
 8006424:	f7fe ff2a 	bl	800527c <_SendPacket>
  RECORD_END();
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f383 8811 	msr	BASEPRI, r3
}
 800642e:	bf00      	nop
 8006430:	3728      	adds	r7, #40	@ 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	2001974c 	.word	0x2001974c

0800643c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643e:	b085      	sub	sp, #20
 8006440:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
 8006446:	e033      	b.n	80064b0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006448:	491e      	ldr	r1, [pc, #120]	@ (80064c4 <_cbSendTaskList+0x88>)
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	491a      	ldr	r1, [pc, #104]	@ (80064c4 <_cbSendTaskList+0x88>)
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	440b      	add	r3, r1
 8006466:	3304      	adds	r3, #4
 8006468:	6819      	ldr	r1, [r3, #0]
 800646a:	4c16      	ldr	r4, [pc, #88]	@ (80064c4 <_cbSendTaskList+0x88>)
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4423      	add	r3, r4
 8006478:	3308      	adds	r3, #8
 800647a:	681c      	ldr	r4, [r3, #0]
 800647c:	4d11      	ldr	r5, [pc, #68]	@ (80064c4 <_cbSendTaskList+0x88>)
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	442b      	add	r3, r5
 800648a:	330c      	adds	r3, #12
 800648c:	681d      	ldr	r5, [r3, #0]
 800648e:	4e0d      	ldr	r6, [pc, #52]	@ (80064c4 <_cbSendTaskList+0x88>)
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4433      	add	r3, r6
 800649c:	3310      	adds	r3, #16
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	462b      	mov	r3, r5
 80064a4:	4622      	mov	r2, r4
 80064a6:	f000 f8bd 	bl	8006624 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3301      	adds	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <_cbSendTaskList+0x8c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d3c6      	bcc.n	8006448 <_cbSendTaskList+0xc>
  }
}
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c4:	20019830 	.word	0x20019830
 80064c8:	200198d0 	.word	0x200198d0

080064cc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80064cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80064d4:	f7fd f948 	bl	8003768 <xTaskGetTickCountFromISR>
 80064d8:	4603      	mov	r3, r0
 80064da:	2200      	movs	r2, #0
 80064dc:	469a      	mov	sl, r3
 80064de:	4693      	mov	fp, r2
 80064e0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80064e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	f04f 0a00 	mov.w	sl, #0
 80064f0:	f04f 0b00 	mov.w	fp, #0
 80064f4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80064f8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80064fc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006500:	4652      	mov	r2, sl
 8006502:	465b      	mov	r3, fp
 8006504:	1a14      	subs	r4, r2, r0
 8006506:	eb63 0501 	sbc.w	r5, r3, r1
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	00ab      	lsls	r3, r5, #2
 8006514:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8006518:	00a2      	lsls	r2, r4, #2
 800651a:	4614      	mov	r4, r2
 800651c:	461d      	mov	r5, r3
 800651e:	eb14 0800 	adds.w	r8, r4, r0
 8006522:	eb45 0901 	adc.w	r9, r5, r1
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	f04f 0300 	mov.w	r3, #0
 800652e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800653a:	4690      	mov	r8, r2
 800653c:	4699      	mov	r9, r3
 800653e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8006542:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006554 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006562:	2205      	movs	r2, #5
 8006564:	492b      	ldr	r1, [pc, #172]	@ (8006614 <SYSVIEW_AddTask+0xc0>)
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f000 f87d 	bl	8006666 <memcmp>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04b      	beq.n	800660a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006572:	4b29      	ldr	r3, [pc, #164]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b07      	cmp	r3, #7
 8006578:	d903      	bls.n	8006582 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800657a:	4828      	ldr	r0, [pc, #160]	@ (800661c <SYSVIEW_AddTask+0xc8>)
 800657c:	f7ff ff02 	bl	8006384 <SEGGER_SYSVIEW_Warn>
    return;
 8006580:	e044      	b.n	800660c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006582:	4b25      	ldr	r3, [pc, #148]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4926      	ldr	r1, [pc, #152]	@ (8006620 <SYSVIEW_AddTask+0xcc>)
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006596:	4b20      	ldr	r3, [pc, #128]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4921      	ldr	r1, [pc, #132]	@ (8006620 <SYSVIEW_AddTask+0xcc>)
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3304      	adds	r3, #4
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	491b      	ldr	r1, [pc, #108]	@ (8006620 <SYSVIEW_AddTask+0xcc>)
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3308      	adds	r3, #8
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4916      	ldr	r1, [pc, #88]	@ (8006620 <SYSVIEW_AddTask+0xcc>)
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	330c      	adds	r3, #12
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80065d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4910      	ldr	r1, [pc, #64]	@ (8006620 <SYSVIEW_AddTask+0xcc>)
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3310      	adds	r3, #16
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80065ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	4a08      	ldr	r2, [pc, #32]	@ (8006618 <SYSVIEW_AddTask+0xc4>)
 80065f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f80e 	bl	8006624 <SYSVIEW_SendTaskInfo>
 8006608:	e000      	b.n	800660c <SYSVIEW_AddTask+0xb8>
    return;
 800660a:	bf00      	nop

}
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	080067bc 	.word	0x080067bc
 8006618:	200198d0 	.word	0x200198d0
 800661c:	080067c4 	.word	0x080067c4
 8006620:	20019830 	.word	0x20019830

08006624 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	@ 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006632:	f107 0314 	add.w	r3, r7, #20
 8006636:	2214      	movs	r2, #20
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f823 	bl	8006686 <memset>
  TaskInfo.TaskID     = TaskID;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006654:	f107 0314 	add.w	r3, r7, #20
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff f9ff 	bl	8005a5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800665e:	bf00      	nop
 8006660:	3728      	adds	r7, #40	@ 0x28
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <memcmp>:
 8006666:	b510      	push	{r4, lr}
 8006668:	3901      	subs	r1, #1
 800666a:	4402      	add	r2, r0
 800666c:	4290      	cmp	r0, r2
 800666e:	d101      	bne.n	8006674 <memcmp+0xe>
 8006670:	2000      	movs	r0, #0
 8006672:	e005      	b.n	8006680 <memcmp+0x1a>
 8006674:	7803      	ldrb	r3, [r0, #0]
 8006676:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800667a:	42a3      	cmp	r3, r4
 800667c:	d001      	beq.n	8006682 <memcmp+0x1c>
 800667e:	1b18      	subs	r0, r3, r4
 8006680:	bd10      	pop	{r4, pc}
 8006682:	3001      	adds	r0, #1
 8006684:	e7f2      	b.n	800666c <memcmp+0x6>

08006686 <memset>:
 8006686:	4402      	add	r2, r0
 8006688:	4603      	mov	r3, r0
 800668a:	4293      	cmp	r3, r2
 800668c:	d100      	bne.n	8006690 <memset+0xa>
 800668e:	4770      	bx	lr
 8006690:	f803 1b01 	strb.w	r1, [r3], #1
 8006694:	e7f9      	b.n	800668a <memset+0x4>
	...

08006698 <__libc_init_array>:
 8006698:	b570      	push	{r4, r5, r6, lr}
 800669a:	4d0d      	ldr	r5, [pc, #52]	@ (80066d0 <__libc_init_array+0x38>)
 800669c:	4c0d      	ldr	r4, [pc, #52]	@ (80066d4 <__libc_init_array+0x3c>)
 800669e:	1b64      	subs	r4, r4, r5
 80066a0:	10a4      	asrs	r4, r4, #2
 80066a2:	2600      	movs	r6, #0
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	d109      	bne.n	80066bc <__libc_init_array+0x24>
 80066a8:	4d0b      	ldr	r5, [pc, #44]	@ (80066d8 <__libc_init_array+0x40>)
 80066aa:	4c0c      	ldr	r4, [pc, #48]	@ (80066dc <__libc_init_array+0x44>)
 80066ac:	f000 f826 	bl	80066fc <_init>
 80066b0:	1b64      	subs	r4, r4, r5
 80066b2:	10a4      	asrs	r4, r4, #2
 80066b4:	2600      	movs	r6, #0
 80066b6:	42a6      	cmp	r6, r4
 80066b8:	d105      	bne.n	80066c6 <__libc_init_array+0x2e>
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c0:	4798      	blx	r3
 80066c2:	3601      	adds	r6, #1
 80066c4:	e7ee      	b.n	80066a4 <__libc_init_array+0xc>
 80066c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ca:	4798      	blx	r3
 80066cc:	3601      	adds	r6, #1
 80066ce:	e7f2      	b.n	80066b6 <__libc_init_array+0x1e>
 80066d0:	0800685c 	.word	0x0800685c
 80066d4:	0800685c 	.word	0x0800685c
 80066d8:	0800685c 	.word	0x0800685c
 80066dc:	08006860 	.word	0x08006860

080066e0 <memcpy>:
 80066e0:	440a      	add	r2, r1
 80066e2:	4291      	cmp	r1, r2
 80066e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066e8:	d100      	bne.n	80066ec <memcpy+0xc>
 80066ea:	4770      	bx	lr
 80066ec:	b510      	push	{r4, lr}
 80066ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066f6:	4291      	cmp	r1, r2
 80066f8:	d1f9      	bne.n	80066ee <memcpy+0xe>
 80066fa:	bd10      	pop	{r4, pc}

080066fc <_init>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr

08006708 <_fini>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	bf00      	nop
 800670c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670e:	bc08      	pop	{r3}
 8006710:	469e      	mov	lr, r3
 8006712:	4770      	bx	lr
