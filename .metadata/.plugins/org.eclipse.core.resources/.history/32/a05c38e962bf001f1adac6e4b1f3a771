
App_028_Example_9.2_Synchronizing Tasks_with_Event_Group.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006abc  08006abc  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac4  08006ac4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac4  08006ac4  00007ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ac8  08006ac8  00007ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006acc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          00012fdc  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001304c  2001304c  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137a8  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fc8  00000000  00000000  0001b848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0001e810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  0001fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002201a  00000000  00000000  000208dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a76  00000000  00000000  000428f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc732  00000000  00000000  0005836c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134a9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057f0  00000000  00000000  00134ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000093  00000000  00000000  0013a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800692c 	.word	0x0800692c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800692c 	.word	0x0800692c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8000566:	201c      	movs	r0, #28
 8000568:	f002 fb50 	bl	8002c0c <pvPortMalloc>
 800056c:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d007      	beq.n	8000584 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3304      	adds	r3, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f942 	bl	8000808 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8000584:	687b      	ldr	r3, [r7, #4]
        }
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <xEventGroupSync>:

    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToSet,
                                 const EventBits_t uxBitsToWaitFor,
                                 TickType_t xTicksToWait )
    {
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	@ 0x30
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	603b      	str	r3, [r7, #0]
        EventBits_t uxOriginalBitValue, uxReturn;
        EventGroup_t * pxEventBits = xEventGroup;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );

        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80005ac:	d30b      	bcc.n	80005c6 <xEventGroupSync+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <xEventGroupSync+0x32>
        configASSERT( uxBitsToWaitFor != 0 );
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10b      	bne.n	80005e4 <xEventGroupSync+0x54>
    __asm volatile
 80005cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d0:	f383 8811 	msr	BASEPRI, r3
 80005d4:	f3bf 8f6f 	isb	sy
 80005d8:	f3bf 8f4f 	dsb	sy
 80005dc:	617b      	str	r3, [r7, #20]
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <xEventGroupSync+0x50>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80005e4:	f001 fd46 	bl	8002074 <xTaskGetSchedulerState>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d102      	bne.n	80005f4 <xEventGroupSync+0x64>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d101      	bne.n	80005f8 <xEventGroupSync+0x68>
 80005f4:	2301      	movs	r3, #1
 80005f6:	e000      	b.n	80005fa <xEventGroupSync+0x6a>
 80005f8:	2300      	movs	r3, #0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d10b      	bne.n	8000616 <xEventGroupSync+0x86>
    __asm volatile
 80005fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000602:	f383 8811 	msr	BASEPRI, r3
 8000606:	f3bf 8f6f 	isb	sy
 800060a:	f3bf 8f4f 	dsb	sy
 800060e:	613b      	str	r3, [r7, #16]
}
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <xEventGroupSync+0x82>
        }
        #endif

        vTaskSuspendAll();
 8000616:	f000 fecb 	bl	80013b0 <vTaskSuspendAll>
        {
            uxOriginalBitValue = pxEventBits->uxEventBits;
 800061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	623b      	str	r3, [r7, #32]

            ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000620:	68b9      	ldr	r1, [r7, #8]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f000 f864 	bl	80006f0 <xEventGroupSetBits>

            if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000628:	6a3a      	ldr	r2, [r7, #32]
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	431a      	orrs	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4013      	ands	r3, r2
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	d10d      	bne.n	8000654 <xEventGroupSync+0xc4>
            {
                /* All the rendezvous bits are now set - no need to block. */
                uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8000638:	6a3a      	ldr	r2, [r7, #32]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	4313      	orrs	r3, r2
 800063e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Rendezvous always clear the bits.  They will have been cleared
                 * already unless this is the only task in the rendezvous. */
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	43db      	mvns	r3, r3
 8000648:	401a      	ands	r2, r3
 800064a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800064c:	601a      	str	r2, [r3, #0]

                xTicksToWait = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	e013      	b.n	800067c <xEventGroupSync+0xec>
            }
            else
            {
                if( xTicksToWait != ( TickType_t ) 0 )
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00b      	beq.n	8000672 <xEventGroupSync+0xe2>
                    traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

                    /* Store the bits that the calling task is waiting for in the
                     * task's event list item so the kernel knows when a match is
                     * found.  Then enter the blocked state. */
                    vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 800065a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800065c:	1d18      	adds	r0, r3, #4
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 8000664:	683a      	ldr	r2, [r7, #0]
 8000666:	4619      	mov	r1, r3
 8000668:	f001 f98c 	bl	8001984 <vTaskPlaceOnUnorderedEventList>

                    /* This assignment is obsolete as uxReturn will get set after
                     * the task unblocks, but some compilers mistakenly generate a
                     * warning about uxReturn being returned without being set if the
                     * assignment is omitted. */
                    uxReturn = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000670:	e004      	b.n	800067c <xEventGroupSync+0xec>
                }
                else
                {
                    /* The rendezvous bits were not set, but no block time was
                     * specified - just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8000672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xTimeoutOccurred = pdTRUE;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800067c:	f000 fea6 	bl	80013cc <xTaskResumeAll>
 8000680:	61f8      	str	r0, [r7, #28]

        if( xTicksToWait != ( TickType_t ) 0 )
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d02c      	beq.n	80006e2 <xEventGroupSync+0x152>
        {
            if( xAlreadyYielded == pdFALSE )
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d107      	bne.n	800069e <xEventGroupSync+0x10e>
            {
                taskYIELD_WITHIN_API();
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <xEventGroupSync+0x15c>)
 8000690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800069e:	f001 fd07 	bl	80020b0 <uxTaskResetEventItemValue>
 80006a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80006a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d115      	bne.n	80006da <xEventGroupSync+0x14a>
            {
                /* The task timed out, just return the current event bit value. */
                taskENTER_CRITICAL();
 80006ae:	f002 f9c9 	bl	8002a44 <vPortEnterCritical>
                {
                    uxReturn = pxEventBits->uxEventBits;
 80006b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Although the task got here because it timed out before the
                     * bits it was waiting for were set, it is possible that since it
                     * unblocked another task has set the bits.  If this is the case
                     * then it needs to clear the bits before exiting. */
                    if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80006b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4013      	ands	r3, r2
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d106      	bne.n	80006d2 <xEventGroupSync+0x142>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80006c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	43db      	mvns	r3, r3
 80006cc:	401a      	ands	r2, r3
 80006ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d0:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                taskEXIT_CRITICAL();
 80006d2:	f002 f9e9 	bl	8002aa8 <vPortExitCritical>

                xTimeoutOccurred = pdTRUE;
 80006d6:	2301      	movs	r3, #1
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
                /* The task unblocked because the bits were set. */
            }

            /* Control bits might be set as the task had blocked should not be
             * returned. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80006da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80006e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupSync( uxReturn );

        return uxReturn;
 80006e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80006e4:	4618      	mov	r0, r3
 80006e6:	3730      	adds	r7, #48	@ 0x30
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	e000ed04 	.word	0xe000ed04

080006f0 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08e      	sub	sp, #56	@ 0x38
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	@ 0x30
        EventGroup_t * pxEventBits = xEventGroup;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xMatchFound = pdFALSE;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	@ 0x2c

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d10b      	bne.n	8000724 <xEventGroupSetBits+0x34>
    __asm volatile
 800070c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000710:	f383 8811 	msr	BASEPRI, r3
 8000714:	f3bf 8f6f 	isb	sy
 8000718:	f3bf 8f4f 	dsb	sy
 800071c:	613b      	str	r3, [r7, #16]
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <xEventGroupSetBits+0x30>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800072a:	d30b      	bcc.n	8000744 <xEventGroupSetBits+0x54>
    __asm volatile
 800072c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000730:	f383 8811 	msr	BASEPRI, r3
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	f3bf 8f4f 	dsb	sy
 800073c:	60fb      	str	r3, [r7, #12]
}
 800073e:	bf00      	nop
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <xEventGroupSetBits+0x50>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8000744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000746:	3304      	adds	r3, #4
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
        pxListEnd = listGET_END_MARKER( pxList );
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	3308      	adds	r3, #8
 800074e:	623b      	str	r3, [r7, #32]
        vTaskSuspendAll();
 8000750:	f000 fe2e 	bl	80013b0 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8000754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800075a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	431a      	orrs	r2, r3
 8000762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000764:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8000766:	e03c      	b.n	80007e2 <xEventGroupSetBits+0xf2>
            {
                pxNext = listGET_NEXT( pxListItem );
 8000768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	61fb      	str	r3, [r7, #28]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800076e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	61bb      	str	r3, [r7, #24]
                xMatchFound = pdFALSE;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800077e:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000786:	61bb      	str	r3, [r7, #24]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d108      	bne.n	80007a4 <xEventGroupSetBits+0xb4>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	69bb      	ldr	r3, [r7, #24]
 8000798:	4013      	ands	r3, r2
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00b      	beq.n	80007b6 <xEventGroupSetBits+0xc6>
                    {
                        xMatchFound = pdTRUE;
 800079e:	2301      	movs	r3, #1
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007a2:	e008      	b.n	80007b6 <xEventGroupSetBits+0xc6>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80007a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	4013      	ands	r3, r2
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d101      	bne.n	80007b6 <xEventGroupSetBits+0xc6>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d010      	beq.n	80007de <xEventGroupSetBits+0xee>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <xEventGroupSetBits+0xde>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80007c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80007ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d6:	4619      	mov	r1, r3
 80007d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80007da:	f001 fa4b 	bl	8001c74 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	637b      	str	r3, [r7, #52]	@ 0x34
            while( pxListItem != pxListEnd )
 80007e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d1be      	bne.n	8000768 <xEventGroupSetBits+0x78>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80007ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007f0:	43db      	mvns	r3, r3
 80007f2:	401a      	ands	r2, r3
 80007f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007f6:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80007f8:	f000 fde8 	bl	80013cc <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80007fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007fe:	681b      	ldr	r3, [r3, #0]
    }
 8000800:	4618      	mov	r0, r3
 8000802:	3738      	adds	r7, #56	@ 0x38
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f103 0208 	add.w	r2, r3, #8
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f04f 32ff 	mov.w	r2, #4294967295
 8000820:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f103 0208 	add.w	r2, r3, #8
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f103 0208 	add.w	r2, r3, #8
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000862:	b480      	push	{r7}
 8000864:	b085      	sub	sp, #20
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d103      	bne.n	8000882 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	e00c      	b.n	800089c <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3308      	adds	r3, #8
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	e002      	b.n	8000890 <vListInsert+0x2e>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	d2f6      	bcs.n	800088a <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	683a      	ldr	r2, [r7, #0]
 80008aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	1c5a      	adds	r2, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	6892      	ldr	r2, [r2, #8]
 80008ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	689b      	ldr	r3, [r3, #8]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	6852      	ldr	r2, [r2, #4]
 80008f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d103      	bne.n	8000908 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000932:	2301      	movs	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10b      	bne.n	8000958 <xQueueGenericReset+0x30>
    __asm volatile
 8000940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000944:	f383 8811 	msr	BASEPRI, r3
 8000948:	f3bf 8f6f 	isb	sy
 800094c:	f3bf 8f4f 	dsb	sy
 8000950:	60fb      	str	r3, [r7, #12]
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d05d      	beq.n	8000a1a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8000962:	2b00      	cmp	r3, #0
 8000964:	d059      	beq.n	8000a1a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800096e:	2100      	movs	r1, #0
 8000970:	fba3 2302 	umull	r2, r3, r3, r2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d000      	beq.n	800097a <xQueueGenericReset+0x52>
 8000978:	2101      	movs	r1, #1
 800097a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800097c:	2b00      	cmp	r3, #0
 800097e:	d14c      	bne.n	8000a1a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000980:	f002 f860 	bl	8002a44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800098c:	6939      	ldr	r1, [r7, #16]
 800098e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000990:	fb01 f303 	mul.w	r3, r1, r3
 8000994:	441a      	add	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	2200      	movs	r2, #0
 800099e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009b0:	3b01      	subs	r3, #1
 80009b2:	6939      	ldr	r1, [r7, #16]
 80009b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80009b6:	fb01 f303 	mul.w	r3, r1, r3
 80009ba:	441a      	add	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	22ff      	movs	r2, #255	@ 0xff
 80009c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	22ff      	movs	r2, #255	@ 0xff
 80009cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d114      	bne.n	8000a00 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	691b      	ldr	r3, [r3, #16]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d01a      	beq.n	8000a14 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	3310      	adds	r3, #16
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f86c 	bl	8001ac0 <xTaskRemoveFromEventList>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d012      	beq.n	8000a14 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <xQueueGenericReset+0x120>)
 80009f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	f3bf 8f4f 	dsb	sy
 80009fa:	f3bf 8f6f 	isb	sy
 80009fe:	e009      	b.n	8000a14 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	3310      	adds	r3, #16
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff feff 	bl	8000808 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	3324      	adds	r3, #36	@ 0x24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fefa 	bl	8000808 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000a14:	f002 f848 	bl	8002aa8 <vPortExitCritical>
 8000a18:	e001      	b.n	8000a1e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10b      	bne.n	8000a3c <xQueueGenericReset+0x114>
    __asm volatile
 8000a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a28:	f383 8811 	msr	BASEPRI, r3
 8000a2c:	f3bf 8f6f 	isb	sy
 8000a30:	f3bf 8f4f 	dsb	sy
 8000a34:	60bb      	str	r3, [r7, #8]
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000a3c:	697b      	ldr	r3, [r7, #20]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	e000ed04 	.word	0xe000ed04

08000a4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	4613      	mov	r3, r2
 8000a58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d02e      	beq.n	8000ac2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000a64:	2100      	movs	r1, #0
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d000      	beq.n	8000a74 <xQueueGenericCreate+0x28>
 8000a72:	2101      	movs	r1, #1
 8000a74:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d123      	bne.n	8000ac2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000a82:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8000a86:	d81c      	bhi.n	8000ac2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	fb02 f303 	mul.w	r3, r2, r3
 8000a90:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	3350      	adds	r3, #80	@ 0x50
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f8b8 	bl	8002c0c <pvPortMalloc>
 8000a9c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d01d      	beq.n	8000ae0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3350      	adds	r3, #80	@ 0x50
 8000aac:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 f815 	bl	8000aea <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000ac0:	e00e      	b.n	8000ae0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d10b      	bne.n	8000ae0 <xQueueGenericCreate+0x94>
    __asm volatile
 8000ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000acc:	f383 8811 	msr	BASEPRI, r3
 8000ad0:	f3bf 8f6f 	isb	sy
 8000ad4:	f3bf 8f4f 	dsb	sy
 8000ad8:	613b      	str	r3, [r7, #16]
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000ae0:	69fb      	ldr	r3, [r7, #28]
    }
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3720      	adds	r7, #32
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d103      	bne.n	8000b06 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e002      	b.n	8000b0c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000b18:	2101      	movs	r1, #1
 8000b1a:	69b8      	ldr	r0, [r7, #24]
 8000b1c:	f7ff ff04 	bl	8000928 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	78fa      	ldrb	r2, [r7, #3]
 8000b24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	@ 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10b      	bne.n	8000b62 <xQueueReceive+0x32>
    __asm volatile
 8000b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b4e:	f383 8811 	msr	BASEPRI, r3
 8000b52:	f3bf 8f6f 	isb	sy
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	623b      	str	r3, [r7, #32]
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d103      	bne.n	8000b70 <xQueueReceive+0x40>
 8000b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <xQueueReceive+0x44>
 8000b70:	2301      	movs	r3, #1
 8000b72:	e000      	b.n	8000b76 <xQueueReceive+0x46>
 8000b74:	2300      	movs	r3, #0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10b      	bne.n	8000b92 <xQueueReceive+0x62>
    __asm volatile
 8000b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b7e:	f383 8811 	msr	BASEPRI, r3
 8000b82:	f3bf 8f6f 	isb	sy
 8000b86:	f3bf 8f4f 	dsb	sy
 8000b8a:	61fb      	str	r3, [r7, #28]
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	e7fd      	b.n	8000b8e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b92:	f001 fa6f 	bl	8002074 <xTaskGetSchedulerState>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <xQueueReceive+0x72>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <xQueueReceive+0x76>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e000      	b.n	8000ba8 <xQueueReceive+0x78>
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10b      	bne.n	8000bc4 <xQueueReceive+0x94>
    __asm volatile
 8000bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	61bb      	str	r3, [r7, #24]
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000bc4:	f001 ff3e 	bl	8002a44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bcc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d01f      	beq.n	8000c14 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bd8:	f000 f88c 	bl	8000cf4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	1e5a      	subs	r2, r3, #1
 8000be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00f      	beq.n	8000c0c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bee:	3310      	adds	r3, #16
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 ff65 	bl	8001ac0 <xTaskRemoveFromEventList>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d007      	beq.n	8000c0c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cf0 <xQueueReceive+0x1c0>)
 8000bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000c0c:	f001 ff4c 	bl	8002aa8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e069      	b.n	8000ce8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000c1a:	f001 ff45 	bl	8002aa8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e062      	b.n	8000ce8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d106      	bne.n	8000c36 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f001 f8e5 	bl	8001dfc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000c36:	f001 ff37 	bl	8002aa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000c3a:	f000 fbb9 	bl	80013b0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000c3e:	f001 ff01 	bl	8002a44 <vPortEnterCritical>
 8000c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c4e:	d103      	bne.n	8000c58 <xQueueReceive+0x128>
 8000c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d103      	bne.n	8000c6e <xQueueReceive+0x13e>
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c6e:	f001 ff1b 	bl	8002aa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c72:	1d3a      	adds	r2, r7, #4
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f8d4 	bl	8001e28 <xTaskCheckForTimeOut>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d123      	bne.n	8000cce <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c88:	f000 f8ac 	bl	8000de4 <prvIsQueueEmpty>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d017      	beq.n	8000cc2 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c94:	3324      	adds	r3, #36	@ 0x24
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fe4c 	bl	8001938 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ca2:	f000 f84d 	bl	8000d40 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ca6:	f000 fb91 	bl	80013cc <xTaskResumeAll>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d189      	bne.n	8000bc4 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <xQueueReceive+0x1c0>)
 8000cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	f3bf 8f4f 	dsb	sy
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	e780      	b.n	8000bc4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cc4:	f000 f83c 	bl	8000d40 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000cc8:	f000 fb80 	bl	80013cc <xTaskResumeAll>
 8000ccc:	e77a      	b.n	8000bc4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cd0:	f000 f836 	bl	8000d40 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000cd4:	f000 fb7a 	bl	80013cc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cda:	f000 f883 	bl	8000de4 <prvIsQueueEmpty>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f43f af6f 	beq.w	8000bc4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000ce6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3730      	adds	r7, #48	@ 0x30
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	e000ed04 	.word	0xe000ed04

08000cf4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d018      	beq.n	8000d38 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	441a      	add	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d303      	bcc.n	8000d28 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68d9      	ldr	r1, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	461a      	mov	r2, r3
 8000d32:	6838      	ldr	r0, [r7, #0]
 8000d34:	f004 fe25 	bl	8005982 <memcpy>
    }
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d48:	f001 fe7c 	bl	8002a44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d52:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d54:	e011      	b.n	8000d7a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d012      	beq.n	8000d84 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3324      	adds	r3, #36	@ 0x24
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 feac 	bl	8001ac0 <xTaskRemoveFromEventList>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000d6e:	f001 f8c3 	bl	8001ef8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dce9      	bgt.n	8000d56 <prvUnlockQueue+0x16>
 8000d82:	e000      	b.n	8000d86 <prvUnlockQueue+0x46>
                    break;
 8000d84:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	22ff      	movs	r2, #255	@ 0xff
 8000d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000d8e:	f001 fe8b 	bl	8002aa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d92:	f001 fe57 	bl	8002a44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d9c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d9e:	e011      	b.n	8000dc4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d012      	beq.n	8000dce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3310      	adds	r3, #16
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fe87 	bl	8001ac0 <xTaskRemoveFromEventList>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000db8:	f001 f89e 	bl	8001ef8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	dce9      	bgt.n	8000da0 <prvUnlockQueue+0x60>
 8000dcc:	e000      	b.n	8000dd0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000dce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	22ff      	movs	r2, #255	@ 0xff
 8000dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000dd8:	f001 fe66 	bl	8002aa8 <vPortExitCritical>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000dec:	f001 fe2a 	bl	8002a44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e001      	b.n	8000e02 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e02:	f001 fe51 	bl	8002aa8 <vPortExitCritical>

    return xReturn;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10b      	bne.n	8000e3c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e28:	f383 8811 	msr	BASEPRI, r3
 8000e2c:	f3bf 8f6f 	isb	sy
 8000e30:	f3bf 8f4f 	dsb	sy
 8000e34:	60fb      	str	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d024      	beq.n	8000e8c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e01e      	b.n	8000e86 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000e48:	4a18      	ldr	r2, [pc, #96]	@ (8000eac <vQueueAddToRegistry+0x9c>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d105      	bne.n	8000e64 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4a13      	ldr	r2, [pc, #76]	@ (8000eac <vQueueAddToRegistry+0x9c>)
 8000e5e:	4413      	add	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
                    break;
 8000e62:	e013      	b.n	8000e8c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10a      	bne.n	8000e80 <vQueueAddToRegistry+0x70>
 8000e6a:	4a10      	ldr	r2, [pc, #64]	@ (8000eac <vQueueAddToRegistry+0x9c>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000eac <vQueueAddToRegistry+0x9c>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	3301      	adds	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b07      	cmp	r3, #7
 8000e8a:	d9dd      	bls.n	8000e48 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d005      	beq.n	8000e9e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	683a      	ldr	r2, [r7, #0]
 8000e96:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000e9e:	bf00      	nop
 8000ea0:	371c      	adds	r7, #28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000008c 	.word	0x2000008c

08000eb0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000ec0:	f001 fdc0 	bl	8002a44 <vPortEnterCritical>
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d103      	bne.n	8000eda <vQueueWaitForMessageRestricted+0x2a>
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee6:	d103      	bne.n	8000ef0 <vQueueWaitForMessageRestricted+0x40>
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000ef0:	f001 fdda 	bl	8002aa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3324      	adds	r3, #36	@ 0x24
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68b9      	ldr	r1, [r7, #8]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fd95 	bl	8001a34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff18 	bl	8000d40 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fe6e 	bl	8002c0c <pvPortMalloc>
 8000f30:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d013      	beq.n	8000f60 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000f38:	205c      	movs	r0, #92	@ 0x5c
 8000f3a:	f001 fe67 	bl	8002c0c <pvPortMalloc>
 8000f3e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000f46:	225c      	movs	r2, #92	@ 0x5c
 8000f48:	2100      	movs	r1, #0
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f004 fc9d 	bl	800588a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f56:	e005      	b.n	8000f64 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000f58:	6938      	ldr	r0, [r7, #16]
 8000f5a:	f001 ff89 	bl	8002e70 <vPortFree>
 8000f5e:	e001      	b.n	8000f64 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00d      	beq.n	8000f86 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9303      	str	r3, [sp, #12]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f828 	bl	8000fd6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000f86:	697b      	ldr	r3, [r7, #20]
    }
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff ffb3 	bl	8000f18 <prvCreateTask>
 8000fb2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000fba:	6938      	ldr	r0, [r7, #16]
 8000fbc:	f000 f89c 	bl	80010f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e002      	b.n	8000fcc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000fcc:	697b      	ldr	r3, [r7, #20]
    }
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b088      	sub	sp, #32
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fe6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	461a      	mov	r2, r3
 8000fee:	21a5      	movs	r1, #165	@ 0xa5
 8000ff0:	f004 fc4b 	bl	800588a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000ffe:	3b01      	subs	r3, #1
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f023 0307 	bic.w	r3, r3, #7
 800100c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	617b      	str	r3, [r7, #20]
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d01e      	beq.n	8001074 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e012      	b.n	8001062 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	4413      	add	r3, r2
 8001042:	7819      	ldrb	r1, [r3, #0]
 8001044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	4413      	add	r3, r2
 800104a:	3334      	adds	r3, #52	@ 0x34
 800104c:	460a      	mov	r2, r1
 800104e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	3301      	adds	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b0e      	cmp	r3, #14
 8001066:	d9e9      	bls.n	800103c <prvInitialiseNewTask+0x66>
 8001068:	e000      	b.n	800106c <prvInitialiseNewTask+0x96>
            {
                break;
 800106a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800106c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001076:	2b04      	cmp	r3, #4
 8001078:	d90b      	bls.n	8001092 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800107a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800107e:	f383 8811 	msr	BASEPRI, r3
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	f3bf 8f4f 	dsb	sy
 800108a:	613b      	str	r3, [r7, #16]
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	e7fd      	b.n	800108e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001094:	2b04      	cmp	r3, #4
 8001096:	d901      	bls.n	800109c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001098:	2304      	movs	r3, #4
 800109a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800109c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800109e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80010a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80010a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010aa:	3304      	adds	r3, #4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fbcb 	bl	8000848 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80010b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b4:	3318      	adds	r3, #24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fbc6 	bl	8000848 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80010bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80010c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c4:	f1c3 0205 	rsb	r2, r3, #5
 80010c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80010cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	69b8      	ldr	r0, [r7, #24]
 80010d8:	f001 fb32 	bl	8002740 <pxPortInitialiseStack>
 80010dc:	4602      	mov	r2, r0
 80010de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80010e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80010e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001100:	f001 fca0 	bl	8002a44 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001104:	4b41      	ldr	r3, [pc, #260]	@ (800120c <prvAddNewTaskToReadyList+0x114>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a40      	ldr	r2, [pc, #256]	@ (800120c <prvAddNewTaskToReadyList+0x114>)
 800110c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800110e:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <prvAddNewTaskToReadyList+0x118>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001116:	4a3e      	ldr	r2, [pc, #248]	@ (8001210 <prvAddNewTaskToReadyList+0x118>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800111c:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <prvAddNewTaskToReadyList+0x114>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d110      	bne.n	8001146 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001124:	f000 ff0c 	bl	8001f40 <prvInitialiseTaskLists>
 8001128:	e00d      	b.n	8001146 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800112a:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <prvAddNewTaskToReadyList+0x11c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001132:	4b37      	ldr	r3, [pc, #220]	@ (8001210 <prvAddNewTaskToReadyList+0x118>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113c:	429a      	cmp	r2, r3
 800113e:	d802      	bhi.n	8001146 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001140:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <prvAddNewTaskToReadyList+0x118>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001146:	4b34      	ldr	r3, [pc, #208]	@ (8001218 <prvAddNewTaskToReadyList+0x120>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a32      	ldr	r2, [pc, #200]	@ (8001218 <prvAddNewTaskToReadyList+0x120>)
 800114e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001150:	4b31      	ldr	r3, [pc, #196]	@ (8001218 <prvAddNewTaskToReadyList+0x120>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800115c:	2201      	movs	r2, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	4b2e      	ldr	r3, [pc, #184]	@ (800121c <prvAddNewTaskToReadyList+0x124>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4313      	orrs	r3, r2
 8001166:	4a2d      	ldr	r2, [pc, #180]	@ (800121c <prvAddNewTaskToReadyList+0x124>)
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116e:	492c      	ldr	r1, [pc, #176]	@ (8001220 <prvAddNewTaskToReadyList+0x128>)
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	3204      	adds	r2, #4
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011a4:	4613      	mov	r3, r2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <prvAddNewTaskToReadyList+0x128>)
 80011ae:	441a      	add	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011b8:	4919      	ldr	r1, [pc, #100]	@ (8001220 <prvAddNewTaskToReadyList+0x128>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80011ca:	1c59      	adds	r1, r3, #1
 80011cc:	4814      	ldr	r0, [pc, #80]	@ (8001220 <prvAddNewTaskToReadyList+0x128>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4403      	add	r3, r0
 80011d8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80011da:	f001 fc65 	bl	8002aa8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <prvAddNewTaskToReadyList+0x11c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00e      	beq.n	8001204 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <prvAddNewTaskToReadyList+0x118>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <prvAddNewTaskToReadyList+0x10c>
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <prvAddNewTaskToReadyList+0x12c>)
 80011f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200001a4 	.word	0x200001a4
 8001210:	200000cc 	.word	0x200000cc
 8001214:	200001b0 	.word	0x200001b0
 8001218:	200001c0 	.word	0x200001c0
 800121c:	200001ac 	.word	0x200001ac
 8001220:	200000d0 	.word	0x200000d0
 8001224:	e000ed04 	.word	0xe000ed04

08001228 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d018      	beq.n	800126c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800123a:	f000 f8b9 	bl	80013b0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800123e:	4b13      	ldr	r3, [pc, #76]	@ (800128c <vTaskDelay+0x64>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <vTaskDelay+0x36>
    __asm volatile
 8001246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800124a:	f383 8811 	msr	BASEPRI, r3
 800124e:	f3bf 8f6f 	isb	sy
 8001252:	f3bf 8f4f 	dsb	sy
 8001256:	60bb      	str	r3, [r7, #8]
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800125e:	2100      	movs	r1, #0
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 ff3d 	bl	80020e0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001266:	f000 f8b1 	bl	80013cc <xTaskResumeAll>
 800126a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d107      	bne.n	8001282 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <vTaskDelay+0x68>)
 8001274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001cc 	.word	0x200001cc
 8001290:	e000ed04 	.word	0xe000ed04

08001294 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800129a:	2301      	movs	r3, #1
 800129c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e011      	b.n	80012cc <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80012a8:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <prvCreateIdleTasks+0x88>)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4413      	add	r3, r2
 80012ae:	7819      	ldrb	r1, [r3, #0]
 80012b0:	463a      	mov	r2, r7
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4413      	add	r3, r2
 80012b6:	460a      	mov	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80012ba:	463a      	mov	r2, r7
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d006      	beq.n	80012d4 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2b0e      	cmp	r3, #14
 80012d0:	ddea      	ble.n	80012a8 <prvCreateIdleTasks+0x14>
 80012d2:	e000      	b.n	80012d6 <prvCreateIdleTasks+0x42>
        {
            break;
 80012d4:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e015      	b.n	8001308 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80012dc:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <prvCreateIdleTasks+0x8c>)
 80012de:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001324 <prvCreateIdleTasks+0x90>)
 80012e6:	4413      	add	r3, r2
 80012e8:	4639      	mov	r1, r7
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2300      	movs	r3, #0
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	2282      	movs	r2, #130	@ 0x82
 80012f4:	6938      	ldr	r0, [r7, #16]
 80012f6:	f7ff fe4b 	bl	8000f90 <xTaskCreate>
 80012fa:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d006      	beq.n	8001310 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	3301      	adds	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dde6      	ble.n	80012dc <prvCreateIdleTasks+0x48>
 800130e:	e000      	b.n	8001312 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001310:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001312:	69fb      	ldr	r3, [r7, #28]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	08006944 	.word	0x08006944
 8001320:	08001f11 	.word	0x08001f11
 8001324:	200001c8 	.word	0x200001c8

08001328 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800132e:	f7ff ffb1 	bl	8001294 <prvCreateIdleTasks>
 8001332:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800133a:	f000 ff53 	bl	80021e4 <xTimerCreateTimerTask>
 800133e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d116      	bne.n	8001374 <vTaskStartScheduler+0x4c>
    __asm volatile
 8001346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800134a:	f383 8811 	msr	BASEPRI, r3
 800134e:	f3bf 8f6f 	isb	sy
 8001352:	f3bf 8f4f 	dsb	sy
 8001356:	60bb      	str	r3, [r7, #8]
}
 8001358:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <vTaskStartScheduler+0x78>)
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <vTaskStartScheduler+0x7c>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <vTaskStartScheduler+0x80>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800136e:	f001 fa79 	bl	8002864 <xPortStartScheduler>
 8001372:	e00f      	b.n	8001394 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137a:	d10b      	bne.n	8001394 <vTaskStartScheduler+0x6c>
    __asm volatile
 800137c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001380:	f383 8811 	msr	BASEPRI, r3
 8001384:	f3bf 8f6f 	isb	sy
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	607b      	str	r3, [r7, #4]
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <vTaskStartScheduler+0x84>)
 8001396:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200001c4 	.word	0x200001c4
 80013a4:	200001b0 	.word	0x200001b0
 80013a8:	200001a8 	.word	0x200001a8
 80013ac:	20000000 	.word	0x20000000

080013b0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <vTaskSuspendAll+0x18>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	4a03      	ldr	r2, [pc, #12]	@ (80013c8 <vTaskSuspendAll+0x18>)
 80013bc:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	200001cc 	.word	0x200001cc

080013cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80013da:	f001 fb33 	bl	8002a44 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80013e2:	4b75      	ldr	r3, [pc, #468]	@ (80015b8 <xTaskResumeAll+0x1ec>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10b      	bne.n	8001402 <xTaskResumeAll+0x36>
    __asm volatile
 80013ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013ee:	f383 8811 	msr	BASEPRI, r3
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	f3bf 8f4f 	dsb	sy
 80013fa:	603b      	str	r3, [r7, #0]
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	e7fd      	b.n	80013fe <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8001402:	4b6d      	ldr	r3, [pc, #436]	@ (80015b8 <xTaskResumeAll+0x1ec>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3b01      	subs	r3, #1
 8001408:	4a6b      	ldr	r2, [pc, #428]	@ (80015b8 <xTaskResumeAll+0x1ec>)
 800140a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800140c:	4b6a      	ldr	r3, [pc, #424]	@ (80015b8 <xTaskResumeAll+0x1ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f040 80ca 	bne.w	80015aa <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001416:	4b69      	ldr	r3, [pc, #420]	@ (80015bc <xTaskResumeAll+0x1f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80c5 	beq.w	80015aa <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001420:	e08e      	b.n	8001540 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001422:	4b67      	ldr	r3, [pc, #412]	@ (80015c0 <xTaskResumeAll+0x1f4>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	69db      	ldr	r3, [r3, #28]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	6a12      	ldr	r2, [r2, #32]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	69d2      	ldr	r2, [r2, #28]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	3318      	adds	r3, #24
 800144c:	429a      	cmp	r2, r3
 800144e:	d103      	bne.n	8001458 <xTaskResumeAll+0x8c>
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	@ 0x28
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1e5a      	subs	r2, r3, #1
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	68d2      	ldr	r2, [r2, #12]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	6892      	ldr	r2, [r2, #8]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	429a      	cmp	r2, r3
 800148c:	d103      	bne.n	8001496 <xTaskResumeAll+0xca>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	4b45      	ldr	r3, [pc, #276]	@ (80015c4 <xTaskResumeAll+0x1f8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <xTaskResumeAll+0x1f8>)
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014bc:	4942      	ldr	r1, [pc, #264]	@ (80015c8 <xTaskResumeAll+0x1fc>)
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	440b      	add	r3, r1
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	3204      	adds	r2, #4
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	1d1a      	adds	r2, r3, #4
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014f2:	4613      	mov	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4a33      	ldr	r2, [pc, #204]	@ (80015c8 <xTaskResumeAll+0x1fc>)
 80014fc:	441a      	add	r2, r3
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001506:	4930      	ldr	r1, [pc, #192]	@ (80015c8 <xTaskResumeAll+0x1fc>)
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001518:	1c59      	adds	r1, r3, #1
 800151a:	482b      	ldr	r0, [pc, #172]	@ (80015c8 <xTaskResumeAll+0x1fc>)
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4403      	add	r3, r0
 8001526:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <xTaskResumeAll+0x200>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	429a      	cmp	r2, r3
 8001534:	d904      	bls.n	8001540 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8001536:	4a26      	ldr	r2, [pc, #152]	@ (80015d0 <xTaskResumeAll+0x204>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2101      	movs	r1, #1
 800153c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <xTaskResumeAll+0x1f4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f af6c 	bne.w	8001422 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001550:	f000 fd74 	bl	800203c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <xTaskResumeAll+0x208>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d012      	beq.n	8001586 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001560:	f000 f872 	bl	8001648 <xTaskIncrementTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800156a:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <xTaskResumeAll+0x204>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2101      	movs	r1, #1
 8001570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3b01      	subs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ef      	bne.n	8001560 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <xTaskResumeAll+0x208>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8001586:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <xTaskResumeAll+0x204>)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <xTaskResumeAll+0x200>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <xTaskResumeAll+0x20c>)
 800159c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f3bf 8f4f 	dsb	sy
 80015a6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80015aa:	f001 fa7d 	bl	8002aa8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80015ae:	69bb      	ldr	r3, [r7, #24]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200001cc 	.word	0x200001cc
 80015bc:	200001a4 	.word	0x200001a4
 80015c0:	20000164 	.word	0x20000164
 80015c4:	200001ac 	.word	0x200001ac
 80015c8:	200000d0 	.word	0x200000d0
 80015cc:	200000cc 	.word	0x200000cc
 80015d0:	200001b8 	.word	0x200001b8
 80015d4:	200001b4 	.word	0x200001b4
 80015d8:	e000ed04 	.word	0xe000ed04

080015dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80015e2:	4b05      	ldr	r3, [pc, #20]	@ (80015f8 <xTaskGetTickCount+0x1c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200001a8 	.word	0x200001a8

080015fc <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <pcTaskGetName+0x14>
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <pcTaskGetName+0x48>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	e000      	b.n	8001612 <pcTaskGetName+0x16>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10b      	bne.n	8001632 <pcTaskGetName+0x36>
    __asm volatile
 800161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800161e:	f383 8811 	msr	BASEPRI, r3
 8001622:	f3bf 8f6f 	isb	sy
 8001626:	f3bf 8f4f 	dsb	sy
 800162a:	60bb      	str	r3, [r7, #8]
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	e7fd      	b.n	800162e <pcTaskGetName+0x32>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	3334      	adds	r3, #52	@ 0x34
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	200000cc 	.word	0x200000cc

08001648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800164e:	2300      	movs	r3, #0
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001652:	4b7f      	ldr	r3, [pc, #508]	@ (8001850 <xTaskIncrementTick+0x208>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 80ef 	bne.w	800183a <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800165c:	4b7d      	ldr	r3, [pc, #500]	@ (8001854 <xTaskIncrementTick+0x20c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001664:	4a7b      	ldr	r2, [pc, #492]	@ (8001854 <xTaskIncrementTick+0x20c>)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d121      	bne.n	80016b4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001670:	4b79      	ldr	r3, [pc, #484]	@ (8001858 <xTaskIncrementTick+0x210>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <xTaskIncrementTick+0x4a>
    __asm volatile
 800167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800167e:	f383 8811 	msr	BASEPRI, r3
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	f3bf 8f4f 	dsb	sy
 800168a:	607b      	str	r3, [r7, #4]
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	e7fd      	b.n	800168e <xTaskIncrementTick+0x46>
 8001692:	4b71      	ldr	r3, [pc, #452]	@ (8001858 <xTaskIncrementTick+0x210>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	4b70      	ldr	r3, [pc, #448]	@ (800185c <xTaskIncrementTick+0x214>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6e      	ldr	r2, [pc, #440]	@ (8001858 <xTaskIncrementTick+0x210>)
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4a6e      	ldr	r2, [pc, #440]	@ (800185c <xTaskIncrementTick+0x214>)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001860 <xTaskIncrementTick+0x218>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a6c      	ldr	r2, [pc, #432]	@ (8001860 <xTaskIncrementTick+0x218>)
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	f000 fcc4 	bl	800203c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80016b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <xTaskIncrementTick+0x21c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a3a      	ldr	r2, [r7, #32]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	f0c0 80a8 	bcc.w	8001810 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016c0:	4b65      	ldr	r3, [pc, #404]	@ (8001858 <xTaskIncrementTick+0x210>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80016ca:	4b66      	ldr	r3, [pc, #408]	@ (8001864 <xTaskIncrementTick+0x21c>)
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	601a      	str	r2, [r3, #0]
                    break;
 80016d2:	e09d      	b.n	8001810 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016d4:	4b60      	ldr	r3, [pc, #384]	@ (8001858 <xTaskIncrementTick+0x210>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80016e4:	6a3a      	ldr	r2, [r7, #32]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d203      	bcs.n	80016f4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80016ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001864 <xTaskIncrementTick+0x21c>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	6013      	str	r3, [r2, #0]
                        break;
 80016f2:	e08d      	b.n	8001810 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	68d2      	ldr	r2, [r2, #12]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	6892      	ldr	r2, [r2, #8]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	3304      	adds	r3, #4
 8001716:	429a      	cmp	r2, r3
 8001718:	d103      	bne.n	8001722 <xTaskIncrementTick+0xda>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1e5a      	subs	r2, r3, #1
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01e      	beq.n	8001778 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	6a12      	ldr	r2, [r2, #32]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	69d2      	ldr	r2, [r2, #28]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	3318      	adds	r3, #24
 800175c:	429a      	cmp	r2, r3
 800175e:	d103      	bne.n	8001768 <xTaskIncrementTick+0x120>
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2200      	movs	r2, #0
 800176c:	629a      	str	r2, [r3, #40]	@ 0x28
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800177c:	2201      	movs	r2, #1
 800177e:	409a      	lsls	r2, r3
 8001780:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <xTaskIncrementTick+0x220>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4313      	orrs	r3, r2
 8001786:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <xTaskIncrementTick+0x220>)
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800178e:	4937      	ldr	r1, [pc, #220]	@ (800186c <xTaskIncrementTick+0x224>)
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3304      	adds	r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	3204      	adds	r2, #4
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	1d1a      	adds	r2, r3, #4
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4a27      	ldr	r2, [pc, #156]	@ (800186c <xTaskIncrementTick+0x224>)
 80017ce:	441a      	add	r2, r3
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d8:	4924      	ldr	r1, [pc, #144]	@ (800186c <xTaskIncrementTick+0x224>)
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	481f      	ldr	r0, [pc, #124]	@ (800186c <xTaskIncrementTick+0x224>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4403      	add	r3, r0
 80017f8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <xTaskIncrementTick+0x228>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	429a      	cmp	r2, r3
 8001806:	f67f af5b 	bls.w	80016c0 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800180a:	2301      	movs	r3, #1
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800180e:	e757      	b.n	80016c0 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <xTaskIncrementTick+0x228>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001816:	4915      	ldr	r1, [pc, #84]	@ (800186c <xTaskIncrementTick+0x224>)
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d901      	bls.n	800182c <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001828:	2301      	movs	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800182c:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <xTaskIncrementTick+0x22c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001834:	2301      	movs	r3, #1
 8001836:	627b      	str	r3, [r7, #36]	@ 0x24
 8001838:	e004      	b.n	8001844 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800183a:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <xTaskIncrementTick+0x230>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <xTaskIncrementTick+0x230>)
 8001842:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001846:	4618      	mov	r0, r3
 8001848:	3728      	adds	r7, #40	@ 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200001cc 	.word	0x200001cc
 8001854:	200001a8 	.word	0x200001a8
 8001858:	2000015c 	.word	0x2000015c
 800185c:	20000160 	.word	0x20000160
 8001860:	200001bc 	.word	0x200001bc
 8001864:	200001c4 	.word	0x200001c4
 8001868:	200001ac 	.word	0x200001ac
 800186c:	200000d0 	.word	0x200000d0
 8001870:	200000cc 	.word	0x200000cc
 8001874:	200001b8 	.word	0x200001b8
 8001878:	200001b4 	.word	0x200001b4

0800187c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <vTaskSwitchContext+0xa8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800188a:	4b27      	ldr	r3, [pc, #156]	@ (8001928 <vTaskSwitchContext+0xac>)
 800188c:	2201      	movs	r2, #1
 800188e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001890:	e041      	b.n	8001916 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <vTaskSwitchContext+0xac>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <vTaskSwitchContext+0xb0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	f1c3 031f 	rsb	r3, r3, #31
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	4920      	ldr	r1, [pc, #128]	@ (8001930 <vTaskSwitchContext+0xb4>)
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10b      	bne.n	80018da <vTaskSwitchContext+0x5e>
    __asm volatile
 80018c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018c6:	f383 8811 	msr	BASEPRI, r3
 80018ca:	f3bf 8f6f 	isb	sy
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	607b      	str	r3, [r7, #4]
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <vTaskSwitchContext+0x5a>
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4a12      	ldr	r2, [pc, #72]	@ (8001930 <vTaskSwitchContext+0xb4>)
 80018e6:	4413      	add	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3308      	adds	r3, #8
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d103      	bne.n	8001908 <vTaskSwitchContext+0x8c>
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <vTaskSwitchContext+0xb8>)
 8001910:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001912:	4b08      	ldr	r3, [pc, #32]	@ (8001934 <vTaskSwitchContext+0xb8>)
 8001914:	681b      	ldr	r3, [r3, #0]
    }
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200001cc 	.word	0x200001cc
 8001928:	200001b8 	.word	0x200001b8
 800192c:	200001ac 	.word	0x200001ac
 8001930:	200000d0 	.word	0x200000d0
 8001934:	200000cc 	.word	0x200000cc

08001938 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10b      	bne.n	8001960 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	60fb      	str	r3, [r7, #12]
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <vTaskPlaceOnEventList+0x48>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3318      	adds	r3, #24
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7fe ff7a 	bl	8000862 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800196e:	2101      	movs	r1, #1
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f000 fbb5 	bl	80020e0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200000cc 	.word	0x200000cc

08001984 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10b      	bne.n	80019ae <vTaskPlaceOnUnorderedEventList+0x2a>
    __asm volatile
 8001996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	61bb      	str	r3, [r7, #24]
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	e7fd      	b.n	80019aa <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 80019ae:	4b1f      	ldr	r3, [pc, #124]	@ (8001a2c <vTaskPlaceOnUnorderedEventList+0xa8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <vTaskPlaceOnUnorderedEventList+0x4a>
    __asm volatile
 80019b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	617b      	str	r3, [r7, #20]
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	e7fd      	b.n	80019ca <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019d8:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	61da      	str	r2, [r3, #28]
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	6892      	ldr	r2, [r2, #8]
 80019f0:	621a      	str	r2, [r3, #32]
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	3218      	adds	r2, #24
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f103 0218 	add.w	r2, r3, #24
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <vTaskPlaceOnUnorderedEventList+0xac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 fb5e 	bl	80020e0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200001cc 	.word	0x200001cc
 8001a30:	200000cc 	.word	0x200000cc

08001a34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10b      	bne.n	8001a5e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a4a:	f383 8811 	msr	BASEPRI, r3
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f3bf 8f4f 	dsb	sy
 8001a56:	613b      	str	r3, [r7, #16]
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	e7fd      	b.n	8001a5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <vTaskPlaceOnEventListRestricted+0x88>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	61da      	str	r2, [r3, #28]
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <vTaskPlaceOnEventListRestricted+0x88>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	6892      	ldr	r2, [r2, #8]
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <vTaskPlaceOnEventListRestricted+0x88>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	3218      	adds	r2, #24
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <vTaskPlaceOnEventListRestricted+0x88>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f103 0218 	add.w	r2, r3, #24
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <vTaskPlaceOnEventListRestricted+0x88>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	68b8      	ldr	r0, [r7, #8]
 8001ab0:	f000 fb16 	bl	80020e0 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200000cc 	.word	0x200000cc

08001ac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	@ 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10b      	bne.n	8001aee <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ada:	f383 8811 	msr	BASEPRI, r3
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	60fb      	str	r3, [r7, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001aee:	6a3b      	ldr	r3, [r7, #32]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	6a3a      	ldr	r2, [r7, #32]
 8001afa:	6a12      	ldr	r2, [r2, #32]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	6a3a      	ldr	r2, [r7, #32]
 8001b04:	69d2      	ldr	r2, [r2, #28]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	3318      	adds	r3, #24
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d103      	bne.n	8001b1c <xTaskRemoveFromEventList+0x5c>
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <xTaskRemoveFromEventList+0x19c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d160      	bne.n	8001bf6 <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	6a3a      	ldr	r2, [r7, #32]
 8001b40:	68d2      	ldr	r2, [r2, #12]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	6a3a      	ldr	r2, [r7, #32]
 8001b4a:	6892      	ldr	r2, [r2, #8]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	3304      	adds	r3, #4
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d103      	bne.n	8001b62 <xTaskRemoveFromEventList+0xa2>
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	2201      	movs	r2, #1
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <xTaskRemoveFromEventList+0x1a0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <xTaskRemoveFromEventList+0x1a0>)
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b88:	4936      	ldr	r1, [pc, #216]	@ (8001c64 <xTaskRemoveFromEventList+0x1a4>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	3204      	adds	r2, #4
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	1d1a      	adds	r2, r3, #4
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4a27      	ldr	r2, [pc, #156]	@ (8001c64 <xTaskRemoveFromEventList+0x1a4>)
 8001bc8:	441a      	add	r2, r3
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd2:	4924      	ldr	r1, [pc, #144]	@ (8001c64 <xTaskRemoveFromEventList+0x1a4>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001be4:	1c59      	adds	r1, r3, #1
 8001be6:	481f      	ldr	r0, [pc, #124]	@ (8001c64 <xTaskRemoveFromEventList+0x1a4>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4403      	add	r3, r0
 8001bf2:	6019      	str	r1, [r3, #0]
 8001bf4:	e01b      	b.n	8001c2e <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <xTaskRemoveFromEventList+0x1a8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	61da      	str	r2, [r3, #28]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	621a      	str	r2, [r3, #32]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	6a3a      	ldr	r2, [r7, #32]
 8001c10:	3218      	adds	r2, #24
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	f103 0218 	add.w	r2, r3, #24
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	4a11      	ldr	r2, [pc, #68]	@ (8001c68 <xTaskRemoveFromEventList+0x1a8>)
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c24:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <xTaskRemoveFromEventList+0x1a8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c68 <xTaskRemoveFromEventList+0x1a8>)
 8001c2c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <xTaskRemoveFromEventList+0x1ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d905      	bls.n	8001c48 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <xTaskRemoveFromEventList+0x1b0>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e001      	b.n	8001c4c <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	372c      	adds	r7, #44	@ 0x2c
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200001cc 	.word	0x200001cc
 8001c60:	200001ac 	.word	0x200001ac
 8001c64:	200000d0 	.word	0x200000d0
 8001c68:	20000164 	.word	0x20000164
 8001c6c:	200000cc 	.word	0x200000cc
 8001c70:	200001b8 	.word	0x200001b8

08001c74 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001de8 <vTaskRemoveFromUnorderedEventList+0x174>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <vTaskRemoveFromUnorderedEventList+0x2a>
    __asm volatile
 8001c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	60fb      	str	r3, [r7, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <vTaskRemoveFromUnorderedEventList+0x58>
    __asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	60bb      	str	r3, [r7, #8]
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <vTaskRemoveFromUnorderedEventList+0x54>
    listREMOVE_ITEM( pxEventListItem );
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6892      	ldr	r2, [r2, #8]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d103      	bne.n	8001cf8 <vTaskRemoveFromUnorderedEventList+0x84>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	6892      	ldr	r2, [r2, #8]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d103      	bne.n	8001d36 <vTaskRemoveFromUnorderedEventList+0xc2>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <vTaskRemoveFromUnorderedEventList+0x178>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	4a25      	ldr	r2, [pc, #148]	@ (8001dec <vTaskRemoveFromUnorderedEventList+0x178>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d5c:	4924      	ldr	r1, [pc, #144]	@ (8001df0 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3304      	adds	r3, #4
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	3204      	adds	r2, #4
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	1d1a      	adds	r2, r3, #4
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8001d9c:	441a      	add	r2, r3
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da6:	4912      	ldr	r1, [pc, #72]	@ (8001df0 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001db8:	1c59      	adds	r1, r3, #1
 8001dba:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <vTaskRemoveFromUnorderedEventList+0x17c>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4403      	add	r3, r0
 8001dc6:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <vTaskRemoveFromUnorderedEventList+0x180>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d902      	bls.n	8001ddc <vTaskRemoveFromUnorderedEventList+0x168>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <vTaskRemoveFromUnorderedEventList+0x184>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	@ 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	200001cc 	.word	0x200001cc
 8001dec:	200001ac 	.word	0x200001ac
 8001df0:	200000d0 	.word	0x200000d0
 8001df4:	200000cc 	.word	0x200000cc
 8001df8:	200001b8 	.word	0x200001b8

08001dfc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <vTaskInternalSetTimeOutState+0x24>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <vTaskInternalSetTimeOutState+0x28>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	200001bc 	.word	0x200001bc
 8001e24:	200001a8 	.word	0x200001a8

08001e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	613b      	str	r3, [r7, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10b      	bne.n	8001e6e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	60fb      	str	r3, [r7, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	e7fd      	b.n	8001e6a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001e6e:	f000 fde9 	bl	8002a44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <xTaskCheckForTimeOut+0xc8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8a:	d102      	bne.n	8001e92 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	e026      	b.n	8001ee0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4b17      	ldr	r3, [pc, #92]	@ (8001ef4 <xTaskCheckForTimeOut+0xcc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d00a      	beq.n	8001eb4 <xTaskCheckForTimeOut+0x8c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d305      	bcc.n	8001eb4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e015      	b.n	8001ee0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d20b      	bcs.n	8001ed6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff96 	bl	8001dfc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	e004      	b.n	8001ee0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001ee0:	f000 fde2 	bl	8002aa8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200001a8 	.word	0x200001a8
 8001ef4:	200001bc 	.word	0x200001bc

08001ef8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <vTaskMissedYield+0x14>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	200001b8 	.word	0x200001b8

08001f10 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f18:	f000 f852 	bl	8001fc0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <prvIdleTask+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d9f9      	bls.n	8001f18 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <prvIdleTask+0x2c>)
 8001f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001f34:	e7f0      	b.n	8001f18 <prvIdleTask+0x8>
 8001f36:	bf00      	nop
 8001f38:	200000d0 	.word	0x200000d0
 8001f3c:	e000ed04 	.word	0xe000ed04

08001f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	e00c      	b.n	8001f66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <prvInitialiseTaskLists+0x60>)
 8001f58:	4413      	add	r3, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fc54 	bl	8000808 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d9ef      	bls.n	8001f4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001f6c:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <prvInitialiseTaskLists+0x64>)
 8001f6e:	f7fe fc4b 	bl	8000808 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001f72:	480d      	ldr	r0, [pc, #52]	@ (8001fa8 <prvInitialiseTaskLists+0x68>)
 8001f74:	f7fe fc48 	bl	8000808 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001f78:	480c      	ldr	r0, [pc, #48]	@ (8001fac <prvInitialiseTaskLists+0x6c>)
 8001f7a:	f7fe fc45 	bl	8000808 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001f7e:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <prvInitialiseTaskLists+0x70>)
 8001f80:	f7fe fc42 	bl	8000808 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001f84:	480b      	ldr	r0, [pc, #44]	@ (8001fb4 <prvInitialiseTaskLists+0x74>)
 8001f86:	f7fe fc3f 	bl	8000808 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <prvInitialiseTaskLists+0x78>)
 8001f8c:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <prvInitialiseTaskLists+0x64>)
 8001f8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <prvInitialiseTaskLists+0x7c>)
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <prvInitialiseTaskLists+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200000d0 	.word	0x200000d0
 8001fa4:	20000134 	.word	0x20000134
 8001fa8:	20000148 	.word	0x20000148
 8001fac:	20000164 	.word	0x20000164
 8001fb0:	20000178 	.word	0x20000178
 8001fb4:	20000190 	.word	0x20000190
 8001fb8:	2000015c 	.word	0x2000015c
 8001fbc:	20000160 	.word	0x20000160

08001fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001fc6:	e019      	b.n	8001ffc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001fc8:	f000 fd3c 	bl	8002a44 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001fcc:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <prvCheckTasksWaitingTermination+0x50>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fc7b 	bl	80008d4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <prvCheckTasksWaitingTermination+0x54>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8002014 <prvCheckTasksWaitingTermination+0x54>)
 8001fe6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <prvCheckTasksWaitingTermination+0x58>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <prvCheckTasksWaitingTermination+0x58>)
 8001ff0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001ff2:	f000 fd59 	bl	8002aa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f810 	bl	800201c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <prvCheckTasksWaitingTermination+0x58>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1e1      	bne.n	8001fc8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000178 	.word	0x20000178
 8002014:	200001a4 	.word	0x200001a4
 8002018:	2000018c 	.word	0x2000018c

0800201c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4618      	mov	r0, r3
 800202a:	f000 ff21 	bl	8002e70 <vPortFree>
            vPortFree( pxTCB );
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 ff1e 	bl	8002e70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <prvResetNextTaskUnblockTime+0x30>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d104      	bne.n	8002054 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <prvResetNextTaskUnblockTime+0x34>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002052:	e005      	b.n	8002060 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <prvResetNextTaskUnblockTime+0x30>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <prvResetNextTaskUnblockTime+0x34>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	2000015c 	.word	0x2000015c
 8002070:	200001c4 	.word	0x200001c4

08002074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800207a:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <xTaskGetSchedulerState+0x34>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002082:	2301      	movs	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	e008      	b.n	800209a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002088:	4b08      	ldr	r3, [pc, #32]	@ (80020ac <xTaskGetSchedulerState+0x38>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002090:	2302      	movs	r3, #2
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e001      	b.n	800209a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800209a:	687b      	ldr	r3, [r7, #4]
    }
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	200001b0 	.word	0x200001b0
 80020ac:	200001cc 	.word	0x200001cc

080020b0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <uxTaskResetEventItemValue+0x2c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 80020be:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <uxTaskResetEventItemValue+0x2c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <uxTaskResetEventItemValue+0x2c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1c2 0205 	rsb	r2, r2, #5
 80020cc:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80020ce:	687b      	ldr	r3, [r7, #4]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	200000cc 	.word	0x200000cc

080020e0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80020ea:	4b37      	ldr	r3, [pc, #220]	@ (80021c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <prvAddCurrentTaskToDelayedList+0xec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80020f6:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80020fc:	4b35      	ldr	r3, [pc, #212]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3304      	adds	r3, #4
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fbe6 	bl	80008d4 <uxListRemove>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10b      	bne.n	8002126 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800210e:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	2201      	movs	r2, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4013      	ands	r3, r2
 8002122:	4a2d      	ldr	r2, [pc, #180]	@ (80021d8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002124:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d124      	bne.n	8002178 <prvAddCurrentTaskToDelayedList+0x98>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d021      	beq.n	8002178 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002134:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	4b24      	ldr	r3, [pc, #144]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	4b21      	ldr	r3, [pc, #132]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	3204      	adds	r2, #4
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	4b1e      	ldr	r3, [pc, #120]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	1d1a      	adds	r2, r3, #4
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	4b1c      	ldr	r3, [pc, #112]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002168:	615a      	str	r2, [r3, #20]
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <prvAddCurrentTaskToDelayedList+0xfc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3301      	adds	r3, #1
 8002170:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002176:	e022      	b.n	80021be <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002180:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3304      	adds	r3, #4
 8002196:	4619      	mov	r1, r3
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f7fe fb62 	bl	8000862 <vListInsert>
}
 800219e:	e00e      	b.n	80021be <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3304      	adds	r3, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	69b8      	ldr	r0, [r7, #24]
 80021aa:	f7fe fb5a 	bl	8000862 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <prvAddCurrentTaskToDelayedList+0x100>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d202      	bcs.n	80021be <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80021b8:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <prvAddCurrentTaskToDelayedList+0x100>)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6013      	str	r3, [r2, #0]
}
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200001a8 	.word	0x200001a8
 80021cc:	2000015c 	.word	0x2000015c
 80021d0:	20000160 	.word	0x20000160
 80021d4:	200000cc 	.word	0x200000cc
 80021d8:	200001ac 	.word	0x200001ac
 80021dc:	20000190 	.word	0x20000190
 80021e0:	200001c4 	.word	0x200001c4

080021e4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80021ee:	f000 fa71 	bl	80026d4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <xTimerCreateTimerTask+0x58>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <xTimerCreateTimerTask+0x5c>)
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	2302      	movs	r3, #2
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2300      	movs	r3, #0
 8002204:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002208:	490e      	ldr	r1, [pc, #56]	@ (8002244 <xTimerCreateTimerTask+0x60>)
 800220a:	480f      	ldr	r0, [pc, #60]	@ (8002248 <xTimerCreateTimerTask+0x64>)
 800220c:	f7fe fec0 	bl	8000f90 <xTaskCreate>
 8002210:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	603b      	str	r3, [r7, #0]
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8002230:	687b      	ldr	r3, [r7, #4]
    }
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000200 	.word	0x20000200
 8002240:	20000204 	.word	0x20000204
 8002244:	0800694c 	.word	0x0800694c
 8002248:	080022f1 	.word	0x080022f1

0800224c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002258:	e008      	b.n	800226c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	4413      	add	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	18d1      	adds	r1, r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f8df 	bl	800243c <prvInsertTimerInActiveList>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ea      	bne.n	800225a <prvReloadTimer+0xe>
        }
    }
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800229a:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <prvProcessExpiredTimer+0x5c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3304      	adds	r3, #4
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fb13 	bl	80008d4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ffc3 	bl	800224c <prvReloadTimer>
 80022c6:	e008      	b.n	80022da <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	4798      	blx	r3
    }
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200001f8 	.word	0x200001f8

080022f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f859 	bl	80023b4 <prvGetNextExpireTime>
 8002302:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4619      	mov	r1, r3
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f805 	bl	8002318 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800230e:	f000 f8d7 	bl	80024c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002312:	bf00      	nop
 8002314:	e7f0      	b.n	80022f8 <prvTimerTask+0x8>
	...

08002318 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002322:	f7ff f845 	bl	80013b0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002326:	f107 0308 	add.w	r3, r7, #8
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f866 	bl	80023fc <prvSampleTimeNow>
 8002330:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d130      	bne.n	800239a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <prvProcessTimerOrBlockTask+0x3c>
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d806      	bhi.n	8002354 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002346:	f7ff f841 	bl	80013cc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff9f 	bl	8002290 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002352:	e024      	b.n	800239e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <prvProcessTimerOrBlockTask+0x90>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <prvProcessTimerOrBlockTask+0x50>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <prvProcessTimerOrBlockTask+0x52>
 8002368:	2300      	movs	r3, #0
 800236a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800236c:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <prvProcessTimerOrBlockTask+0x94>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4619      	mov	r1, r3
 800237a:	f7fe fd99 	bl	8000eb0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800237e:	f7ff f825 	bl	80013cc <xTaskResumeAll>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10a      	bne.n	800239e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <prvProcessTimerOrBlockTask+0x98>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
    }
 8002398:	e001      	b.n	800239e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800239a:	f7ff f817 	bl	80013cc <xTaskResumeAll>
    }
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200001fc 	.word	0x200001fc
 80023ac:	20000200 	.word	0x20000200
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023bc:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <prvGetNextExpireTime+0x44>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <prvGetNextExpireTime+0x16>
 80023c6:	2201      	movs	r2, #1
 80023c8:	e000      	b.n	80023cc <prvGetNextExpireTime+0x18>
 80023ca:	2200      	movs	r2, #0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023d8:	4b07      	ldr	r3, [pc, #28]	@ (80023f8 <prvGetNextExpireTime+0x44>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e001      	b.n	80023e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80023e8:	68fb      	ldr	r3, [r7, #12]
    }
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	200001f8 	.word	0x200001f8

080023fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002404:	f7ff f8ea 	bl	80015dc <xTaskGetTickCount>
 8002408:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <prvSampleTimeNow+0x3c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d205      	bcs.n	8002420 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002414:	f000 f938 	bl	8002688 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e002      	b.n	8002426 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002426:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <prvSampleTimeNow+0x3c>)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800242c:	68fb      	ldr	r3, [r7, #12]
    }
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000208 	.word	0x20000208

0800243c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	429a      	cmp	r2, r3
 8002460:	d812      	bhi.n	8002488 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002470:	2301      	movs	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	e01b      	b.n	80024ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002476:	4b10      	ldr	r3, [pc, #64]	@ (80024b8 <prvInsertTimerInActiveList+0x7c>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3304      	adds	r3, #4
 800247e:	4619      	mov	r1, r3
 8002480:	4610      	mov	r0, r2
 8002482:	f7fe f9ee 	bl	8000862 <vListInsert>
 8002486:	e012      	b.n	80024ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d206      	bcs.n	800249e <prvInsertTimerInActiveList+0x62>
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d302      	bcc.n	800249e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	e007      	b.n	80024ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <prvInsertTimerInActiveList+0x80>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	3304      	adds	r3, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7fe f9da 	bl	8000862 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024ae:	697b      	ldr	r3, [r7, #20]
    }
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200001fc 	.word	0x200001fc
 80024bc:	200001f8 	.word	0x200001f8

080024c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80024d2:	e0c7      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da19      	bge.n	800250e <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	3304      	adds	r3, #4
 80024de:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	61bb      	str	r3, [r7, #24]
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	e7fd      	b.n	80024fa <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002504:	6850      	ldr	r0, [r2, #4]
 8002506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	4611      	mov	r1, r2
 800250c:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	f2c0 80a7 	blt.w	8002664 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	3304      	adds	r3, #4
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f9d4 	bl	80008d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800252c:	463b      	mov	r3, r7
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff64 	bl	80023fc <prvSampleTimeNow>
 8002534:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3b01      	subs	r3, #1
 800253a:	2b08      	cmp	r3, #8
 800253c:	f200 808f 	bhi.w	800265e <prvProcessReceivedCommands+0x19e>
 8002540:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <prvProcessReceivedCommands+0x88>)
 8002542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002546:	bf00      	nop
 8002548:	0800256d 	.word	0x0800256d
 800254c:	0800256d 	.word	0x0800256d
 8002550:	080025d5 	.word	0x080025d5
 8002554:	080025e9 	.word	0x080025e9
 8002558:	08002635 	.word	0x08002635
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800256d 	.word	0x0800256d
 8002564:	080025d5 	.word	0x080025d5
 8002568:	080025e9 	.word	0x080025e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	18d1      	adds	r1, r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	69fa      	ldr	r2, [r7, #28]
 800258a:	6a38      	ldr	r0, [r7, #32]
 800258c:	f7ff ff56 	bl	800243c <prvInsertTimerInActiveList>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d065      	beq.n	8002662 <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	4619      	mov	r1, r3
 80025b0:	6a38      	ldr	r0, [r7, #32]
 80025b2:	f7ff fe4b 	bl	800224c <prvReloadTimer>
 80025b6:	e008      	b.n	80025ca <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	6a38      	ldr	r0, [r7, #32]
 80025d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025d2:	e046      	b.n	8002662 <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80025e6:	e03d      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	617b      	str	r3, [r7, #20]
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	18d1      	adds	r1, r2, r3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	6a38      	ldr	r0, [r7, #32]
 800262e:	f7ff ff05 	bl	800243c <prvInsertTimerInActiveList>
                        break;
 8002632:	e017      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8002642:	6a38      	ldr	r0, [r7, #32]
 8002644:	f000 fc14 	bl	8002e70 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002648:	e00c      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800264a:	6a3b      	ldr	r3, [r7, #32]
 800264c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800265c:	e002      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <prvProcessReceivedCommands+0x1a4>
                        break;
 8002662:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <prvProcessReceivedCommands+0x1c4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	1d39      	adds	r1, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fa5f 	bl	8000b30 <xQueueReceive>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f af2d 	bne.w	80024d4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	@ 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000200 	.word	0x20000200

08002688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800268e:	e009      	b.n	80026a4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002690:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <prvSwitchTimerLists+0x44>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800269a:	f04f 31ff 	mov.w	r1, #4294967295
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	f7ff fdf6 	bl	8002290 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <prvSwitchTimerLists+0x44>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80026ae:	4b07      	ldr	r3, [pc, #28]	@ (80026cc <prvSwitchTimerLists+0x44>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80026b4:	4b06      	ldr	r3, [pc, #24]	@ (80026d0 <prvSwitchTimerLists+0x48>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <prvSwitchTimerLists+0x44>)
 80026ba:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <prvSwitchTimerLists+0x48>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6013      	str	r3, [r2, #0]
    }
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200001f8 	.word	0x200001f8
 80026d0:	200001fc 	.word	0x200001fc

080026d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026d8:	f000 f9b4 	bl	8002a44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026dc:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <prvCheckForValidListAndQueue+0x54>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11d      	bne.n	8002720 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80026e4:	4811      	ldr	r0, [pc, #68]	@ (800272c <prvCheckForValidListAndQueue+0x58>)
 80026e6:	f7fe f88f 	bl	8000808 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80026ea:	4811      	ldr	r0, [pc, #68]	@ (8002730 <prvCheckForValidListAndQueue+0x5c>)
 80026ec:	f7fe f88c 	bl	8000808 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026f0:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <prvCheckForValidListAndQueue+0x60>)
 80026f2:	4a0e      	ldr	r2, [pc, #56]	@ (800272c <prvCheckForValidListAndQueue+0x58>)
 80026f4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <prvCheckForValidListAndQueue+0x64>)
 80026f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002730 <prvCheckForValidListAndQueue+0x5c>)
 80026fa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80026fc:	2200      	movs	r2, #0
 80026fe:	2110      	movs	r1, #16
 8002700:	200a      	movs	r0, #10
 8002702:	f7fe f9a3 	bl	8000a4c <xQueueGenericCreate>
 8002706:	4603      	mov	r3, r0
 8002708:	4a07      	ldr	r2, [pc, #28]	@ (8002728 <prvCheckForValidListAndQueue+0x54>)
 800270a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <prvCheckForValidListAndQueue+0x54>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <prvCheckForValidListAndQueue+0x54>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4908      	ldr	r1, [pc, #32]	@ (800273c <prvCheckForValidListAndQueue+0x68>)
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fb78 	bl	8000e10 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002720:	f000 f9c2 	bl	8002aa8 <vPortExitCritical>
    }
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000200 	.word	0x20000200
 800272c:	200001d0 	.word	0x200001d0
 8002730:	200001e4 	.word	0x200001e4
 8002734:	200001f8 	.word	0x200001f8
 8002738:	200001fc 	.word	0x200001fc
 800273c:	08006954 	.word	0x08006954

08002740 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3b04      	subs	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002758:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3b04      	subs	r3, #4
 800275e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f023 0201 	bic.w	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3b04      	subs	r3, #4
 800276e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002770:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <pxPortInitialiseStack+0x64>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3b14      	subs	r3, #20
 800277a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3b04      	subs	r3, #4
 8002786:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f06f 0202 	mvn.w	r2, #2
 800278e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	3b20      	subs	r3, #32
 8002794:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	080027a9 	.word	0x080027a9

080027a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80027b2:	4b13      	ldr	r3, [pc, #76]	@ (8002800 <prvTaskExitError+0x58>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d00b      	beq.n	80027d4 <prvTaskExitError+0x2c>
    __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	60fb      	str	r3, [r7, #12]
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <prvTaskExitError+0x28>
    __asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60bb      	str	r3, [r7, #8]
}
 80027e6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80027e8:	bf00      	nop
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0fc      	beq.n	80027ea <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000004 	.word	0x20000004
	...

08002810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <pxCurrentTCBConst2>)
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	6808      	ldr	r0, [r1, #0]
 8002816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281a:	f380 8809 	msr	PSP, r0
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f380 8811 	msr	BASEPRI, r0
 800282a:	4770      	bx	lr
 800282c:	f3af 8000 	nop.w

08002830 <pxCurrentTCBConst2>:
 8002830:	200000cc 	.word	0x200000cc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop

08002838 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002838:	4808      	ldr	r0, [pc, #32]	@ (800285c <prvPortStartFirstTask+0x24>)
 800283a:	6800      	ldr	r0, [r0, #0]
 800283c:	6800      	ldr	r0, [r0, #0]
 800283e:	f380 8808 	msr	MSP, r0
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	f380 8814 	msr	CONTROL, r0
 800284a:	b662      	cpsie	i
 800284c:	b661      	cpsie	f
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	df00      	svc	0
 8002858:	bf00      	nop
 800285a:	0000      	.short	0x0000
 800285c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop

08002864 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800286a:	4b69      	ldr	r3, [pc, #420]	@ (8002a10 <xPortStartScheduler+0x1ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a69      	ldr	r2, [pc, #420]	@ (8002a14 <xPortStartScheduler+0x1b0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10b      	bne.n	800288c <xPortStartScheduler+0x28>
    __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800288c:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <xPortStartScheduler+0x1ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a61      	ldr	r2, [pc, #388]	@ (8002a18 <xPortStartScheduler+0x1b4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <xPortStartScheduler+0x4a>
    __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	623b      	str	r3, [r7, #32]
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80028ae:	4b5b      	ldr	r3, [pc, #364]	@ (8002a1c <xPortStartScheduler+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b6:	332c      	adds	r3, #44	@ 0x2c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <xPortStartScheduler+0x1bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <xPortStartScheduler+0x74>
    __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	3338      	adds	r3, #56	@ 0x38
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a51      	ldr	r2, [pc, #324]	@ (8002a24 <xPortStartScheduler+0x1c0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <xPortStartScheduler+0x98>
    __asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	61bb      	str	r3, [r7, #24]
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002900:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <xPortStartScheduler+0x1c4>)
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	22ff      	movs	r2, #255	@ 0xff
 8002910:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <xPortStartScheduler+0x1c8>)
 8002926:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002928:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <xPortStartScheduler+0x1c8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <xPortStartScheduler+0xe4>
    __asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	617b      	str	r3, [r7, #20]
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d013      	beq.n	800297e <xPortStartScheduler+0x11a>
    __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	613b      	str	r3, [r7, #16]
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	e7fd      	b.n	800296a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d0f1      	beq.n	800296e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d103      	bne.n	8002998 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002990:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e004      	b.n	80029a2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029a0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029a2:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <xPortStartScheduler+0x1d4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029de:	f000 f8e5 	bl	8002bac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <xPortStartScheduler+0x1d8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029e8:	f000 f904 	bl	8002bf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <xPortStartScheduler+0x1dc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <xPortStartScheduler+0x1dc>)
 80029f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029f8:	f7ff ff1e 	bl	8002838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029fc:	f7fe ff3e 	bl	800187c <vTaskSwitchContext>
    prvTaskExitError();
 8002a00:	f7ff fed2 	bl	80027a8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3730      	adds	r7, #48	@ 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	410fc271 	.word	0x410fc271
 8002a18:	410fc270 	.word	0x410fc270
 8002a1c:	e000ed08 	.word	0xe000ed08
 8002a20:	08002811 	.word	0x08002811
 8002a24:	08002b01 	.word	0x08002b01
 8002a28:	e000e400 	.word	0xe000e400
 8002a2c:	2000020c 	.word	0x2000020c
 8002a30:	20000210 	.word	0x20000210
 8002a34:	e000ed20 	.word	0xe000ed20
 8002a38:	e000ed1c 	.word	0xe000ed1c
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	e000ef34 	.word	0xe000ef34

08002a44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
    __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	607b      	str	r3, [r7, #4]
}
 8002a5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d110      	bne.n	8002a92 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <vPortEnterCritical+0x60>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <vPortEnterCritical+0x4e>
    __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	603b      	str	r3, [r7, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <vPortEnterCritical+0x4a>
    }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <vPortExitCritical+0x26>
    __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	e7fd      	b.n	8002aca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ad6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ad8:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <vPortExitCritical+0x44>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002aea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20000004 	.word	0x20000004
 8002afc:	00000000 	.word	0x00000000

08002b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b00:	f3ef 8009 	mrs	r0, PSP
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <pxCurrentTCBConst>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f01e 0f10 	tst.w	lr, #16
 8002b10:	bf08      	it	eq
 8002b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1a:	6010      	str	r0, [r2, #0]
 8002b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b24:	f380 8811 	msr	BASEPRI, r0
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f7fe fea4 	bl	800187c <vTaskSwitchContext>
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f380 8811 	msr	BASEPRI, r0
 8002b3c:	bc09      	pop	{r0, r3}
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	6808      	ldr	r0, [r1, #0]
 8002b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b46:	f01e 0f10 	tst.w	lr, #16
 8002b4a:	bf08      	it	eq
 8002b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b50:	f380 8809 	msr	PSP, r0
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	f3af 8000 	nop.w

08002b60 <pxCurrentTCBConst>:
 8002b60:	200000cc 	.word	0x200000cc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop

08002b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
    __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	607b      	str	r3, [r7, #4]
}
 8002b80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b82:	f7fe fd61 	bl	8001648 <xTaskIncrementTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SysTick_Handler+0x40>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f383 8811 	msr	BASEPRI, r3
}
 8002b9e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	e000ed04 	.word	0xe000ed04

08002bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <vPortSetupTimerInterrupt+0x34>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <vPortSetupTimerInterrupt+0x38>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <vPortSetupTimerInterrupt+0x3c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <vPortSetupTimerInterrupt+0x40>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <vPortSetupTimerInterrupt+0x44>)
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <vPortSetupTimerInterrupt+0x34>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010
 8002be4:	e000e018 	.word	0xe000e018
 8002be8:	20000008 	.word	0x20000008
 8002bec:	10624dd3 	.word	0x10624dd3
 8002bf0:	e000e014 	.word	0xe000e014

08002bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c04 <vPortEnableVFP+0x10>
 8002bf8:	6801      	ldr	r1, [r0, #0]
 8002bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002bfe:	6001      	str	r1, [r0, #0]
 8002c00:	4770      	bx	lr
 8002c02:	0000      	.short	0x0000
 8002c04:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop

08002c0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	@ 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d022      	beq.n	8002c64 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c1e:	2308      	movs	r3, #8
 8002c20:	43db      	mvns	r3, r3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d81b      	bhi.n	8002c60 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c28:	2208      	movs	r2, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d014      	beq.n	8002c64 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	f1c3 0308 	rsb	r3, r3, #8
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d804      	bhi.n	8002c5a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	4413      	add	r3, r2
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e004      	b.n	8002c64 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	e001      	b.n	8002c64 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002c64:	f7fe fba4 	bl	80013b0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c68:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <pvPortMalloc+0x248>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002c70:	f000 f978 	bl	8002f64 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f2c0 80d3 	blt.w	8002e22 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80cf 	beq.w	8002e22 <pvPortMalloc+0x216>
 8002c84:	4b74      	ldr	r3, [pc, #464]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	f200 80c9 	bhi.w	8002e22 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c90:	4b72      	ldr	r3, [pc, #456]	@ (8002e5c <pvPortMalloc+0x250>)
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002c94:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <pvPortMalloc+0x250>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	4a70      	ldr	r2, [pc, #448]	@ (8002e60 <pvPortMalloc+0x254>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d305      	bcc.n	8002cae <pvPortMalloc+0xa2>
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e64 <pvPortMalloc+0x258>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d801      	bhi.n	8002cae <pvPortMalloc+0xa2>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <pvPortMalloc+0xa4>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d129      	bne.n	8002d08 <pvPortMalloc+0xfc>
    __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	623b      	str	r3, [r7, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	4a61      	ldr	r2, [pc, #388]	@ (8002e60 <pvPortMalloc+0x254>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d305      	bcc.n	8002cea <pvPortMalloc+0xde>
 8002cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce0:	4a60      	ldr	r2, [pc, #384]	@ (8002e64 <pvPortMalloc+0x258>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d801      	bhi.n	8002cea <pvPortMalloc+0xde>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <pvPortMalloc+0xe0>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <pvPortMalloc+0xfc>
    __asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d903      	bls.n	8002d1a <pvPortMalloc+0x10e>
 8002d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d8      	bne.n	8002ccc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e54 <pvPortMalloc+0x248>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d07e      	beq.n	8002e22 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	4a4b      	ldr	r2, [pc, #300]	@ (8002e60 <pvPortMalloc+0x254>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d305      	bcc.n	8002d42 <pvPortMalloc+0x136>
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d38:	4a4a      	ldr	r2, [pc, #296]	@ (8002e64 <pvPortMalloc+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d801      	bhi.n	8002d42 <pvPortMalloc+0x136>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <pvPortMalloc+0x138>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <pvPortMalloc+0x154>
    __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61bb      	str	r3, [r7, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d90b      	bls.n	8002d8a <pvPortMalloc+0x17e>
    __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	2308      	movs	r3, #8
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d924      	bls.n	8002de4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <pvPortMalloc+0x1b8>
    __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	613b      	str	r3, [r7, #16]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	1ad2      	subs	r2, r2, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <pvPortMalloc+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dfe:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <pvPortMalloc+0x25c>)
 8002e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <pvPortMalloc+0x260>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <pvPortMalloc+0x260>)
 8002e20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e22:	f7fe fad3 	bl	80013cc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <pvPortMalloc+0x23c>
    __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <pvPortMalloc+0x238>
    return pvReturn;
 8002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3738      	adds	r7, #56	@ 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012e1c 	.word	0x20012e1c
 8002e58:	20012e20 	.word	0x20012e20
 8002e5c:	20012e14 	.word	0x20012e14
 8002e60:	20000214 	.word	0x20000214
 8002e64:	20012e13 	.word	0x20012e13
 8002e68:	20012e24 	.word	0x20012e24
 8002e6c:	20012e28 	.word	0x20012e28

08002e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d064      	beq.n	8002f4c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e82:	2308      	movs	r3, #8
 8002e84:	425b      	negs	r3, r3
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <vPortFree+0xe4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d305      	bcc.n	8002ea4 <vPortFree+0x34>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <vPortFree+0xe8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d801      	bhi.n	8002ea4 <vPortFree+0x34>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <vPortFree+0x36>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <vPortFree+0x52>
    __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	617b      	str	r3, [r7, #20]
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <vPortFree+0x72>
    __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	613b      	str	r3, [r7, #16]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <vPortFree+0x92>
    __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60fb      	str	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0fdb      	lsrs	r3, r3, #31
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f26:	f7fe fa43 	bl	80013b0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <vPortFree+0xec>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <vPortFree+0xec>)
 8002f36:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f38:	69b8      	ldr	r0, [r7, #24]
 8002f3a:	f000 f86d 	bl	8003018 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <vPortFree+0xf0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <vPortFree+0xf0>)
 8002f46:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f48:	f7fe fa40 	bl	80013cc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f4c:	bf00      	nop
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000214 	.word	0x20000214
 8002f58:	20012e13 	.word	0x20012e13
 8002f5c:	20012e20 	.word	0x20012e20
 8002f60:	20012e2c 	.word	0x20012e2c

08002f64 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f6a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <prvHeapInit+0xa0>)
 8002f72:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3307      	adds	r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <prvHeapInit+0xa0>)
 8002f94:	4413      	add	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <prvHeapInit+0xa4>)
 8002f9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <prvHeapInit+0xa4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002fac:	2208      	movs	r2, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <prvHeapInit+0xa8>)
 8002fc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <prvHeapInit+0xa8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <prvHeapInit+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <prvHeapInit+0xa8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a08      	ldr	r2, [pc, #32]	@ (8003010 <prvHeapInit+0xac>)
 8002fee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <prvHeapInit+0xb0>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	20000214 	.word	0x20000214
 8003008:	20012e14 	.word	0x20012e14
 800300c:	20012e1c 	.word	0x20012e1c
 8003010:	20012e24 	.word	0x20012e24
 8003014:	20012e20 	.word	0x20012e20

08003018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003020:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e002      	b.n	800302c <prvInsertBlockIntoFreeList+0x14>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d8f7      	bhi.n	8003026 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <prvInsertBlockIntoFreeList+0xe8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d305      	bcc.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <prvInsertBlockIntoFreeList+0xec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d801      	bhi.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <prvInsertBlockIntoFreeList+0x3c>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60fb      	str	r3, [r7, #12]
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d108      	bne.n	8003094 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	441a      	add	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	441a      	add	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d118      	bne.n	80030da <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d00d      	beq.n	80030d0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	441a      	add	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e008      	b.n	80030e2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e003      	b.n	80030e2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d002      	beq.n	80030f0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20012e14 	.word	0x20012e14
 8003100:	20000214 	.word	0x20000214
 8003104:	20012e13 	.word	0x20012e13
 8003108:	20012e1c 	.word	0x20012e1c

0800310c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003112:	f000 fbf1 	bl	80038f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003116:	f000 f839 	bl	800318c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311a:	f000 f8cb 	bl	80032b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800311e:	f000 f89f 	bl	8003260 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* before an event group can be used, it must first be created */
  xEventGroup = xEventGroupCreate();
 8003122:	f7fd fa1d 	bl	8000560 <xEventGroupCreate>
 8003126:	4603      	mov	r3, r0
 8003128:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <main+0x6c>)
 800312a:	6013      	str	r3, [r2, #0]
  /* Create three instances of the task.
     Each task is given a different name, which is later printed out to give
     a visual indication of which task is executing.
     The event bit to use when the task reaches its synchronization point is
     passed into the task using the task parameter */
  xTaskCreate( vSyncingTask, "Task 1", 1000, ( void * const ) mainFIRST_TASK_BIT, 1, NULL );
 800312c:	2300      	movs	r3, #0
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2301      	movs	r3, #1
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2301      	movs	r3, #1
 8003136:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800313a:	4910      	ldr	r1, [pc, #64]	@ (800317c <main+0x70>)
 800313c:	4810      	ldr	r0, [pc, #64]	@ (8003180 <main+0x74>)
 800313e:	f7fd ff27 	bl	8000f90 <xTaskCreate>
  xTaskCreate( vSyncingTask, "Task 2", 1000, ( void * const ) mainSECOND_TASK_BIT, 2, NULL );
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2302      	movs	r3, #2
 800314c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003150:	490c      	ldr	r1, [pc, #48]	@ (8003184 <main+0x78>)
 8003152:	480b      	ldr	r0, [pc, #44]	@ (8003180 <main+0x74>)
 8003154:	f7fd ff1c 	bl	8000f90 <xTaskCreate>
  xTaskCreate( vSyncingTask, "Task 3", 1000, ( void * const ) mainTHIRD_TASK_BIT, 3, NULL );
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2303      	movs	r3, #3
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2304      	movs	r3, #4
 8003162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003166:	4908      	ldr	r1, [pc, #32]	@ (8003188 <main+0x7c>)
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <main+0x74>)
 800316a:	f7fd ff11 	bl	8000f90 <xTaskCreate>

  /* start the scheduler */
  vTaskStartScheduler();
 800316e:	f7fe f8db 	bl	8001328 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8003172:	bf00      	nop
 8003174:	e7fd      	b.n	8003172 <main+0x66>
 8003176:	bf00      	nop
 8003178:	20012e78 	.word	0x20012e78
 800317c:	0800695c 	.word	0x0800695c
 8003180:	080033f5 	.word	0x080033f5
 8003184:	08006964 	.word	0x08006964
 8003188:	0800696c 	.word	0x0800696c

0800318c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b094      	sub	sp, #80	@ 0x50
 8003190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003192:	f107 0320 	add.w	r3, r7, #32
 8003196:	2230      	movs	r2, #48	@ 0x30
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f002 fb75 	bl	800588a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	4b28      	ldr	r3, [pc, #160]	@ (8003258 <SystemClock_Config+0xcc>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	4a27      	ldr	r2, [pc, #156]	@ (8003258 <SystemClock_Config+0xcc>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031be:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <SystemClock_Config+0xcc>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031cc:	2300      	movs	r3, #0
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	4b22      	ldr	r3, [pc, #136]	@ (800325c <SystemClock_Config+0xd0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a21      	ldr	r2, [pc, #132]	@ (800325c <SystemClock_Config+0xd0>)
 80031d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b1f      	ldr	r3, [pc, #124]	@ (800325c <SystemClock_Config+0xd0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031e8:	2302      	movs	r3, #2
 80031ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031ec:	2301      	movs	r3, #1
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031f0:	2310      	movs	r3, #16
 80031f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031f4:	2302      	movs	r3, #2
 80031f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031f8:	2300      	movs	r3, #0
 80031fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031fc:	2308      	movs	r3, #8
 80031fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003200:	2332      	movs	r3, #50	@ 0x32
 8003202:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003204:	2304      	movs	r3, #4
 8003206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003208:	2307      	movs	r3, #7
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800320c:	f107 0320 	add.w	r3, r7, #32
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fe4b 	bl	8003eac <HAL_RCC_OscConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800321c:	f000 f952 	bl	80034c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003220:	230f      	movs	r3, #15
 8003222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003224:	2302      	movs	r3, #2
 8003226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800322c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f001 f8ac 	bl	800439c <HAL_RCC_ClockConfig>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800324a:	f000 f93b 	bl	80034c4 <Error_Handler>
  }
}
 800324e:	bf00      	nop
 8003250:	3750      	adds	r7, #80	@ 0x50
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000

08003260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003266:	4a12      	ldr	r2, [pc, #72]	@ (80032b0 <MX_USART2_UART_Init+0x50>)
 8003268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 800326c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003278:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003284:	4b09      	ldr	r3, [pc, #36]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003286:	220c      	movs	r2, #12
 8003288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003296:	4805      	ldr	r0, [pc, #20]	@ (80032ac <MX_USART2_UART_Init+0x4c>)
 8003298:	f001 fd74 	bl	8004d84 <HAL_UART_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032a2:	f000 f90f 	bl	80034c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20012e30 	.word	0x20012e30
 80032b0:	40004400 	.word	0x40004400

080032b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	609a      	str	r2, [r3, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b35      	ldr	r3, [pc, #212]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	4a34      	ldr	r2, [pc, #208]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032da:	4b32      	ldr	r3, [pc, #200]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4a2d      	ldr	r2, [pc, #180]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4b2b      	ldr	r3, [pc, #172]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	4a26      	ldr	r2, [pc, #152]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6313      	str	r3, [r2, #48]	@ 0x30
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 8003328:	f043 0304 	orr.w	r3, r3, #4
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
 800332e:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <MX_GPIO_Init+0xf0>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	607b      	str	r3, [r7, #4]
 8003338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800333a:	2200      	movs	r2, #0
 800333c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003340:	4819      	ldr	r0, [pc, #100]	@ (80033a8 <MX_GPIO_Init+0xf4>)
 8003342:	f000 fd99 	bl	8003e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003346:	2304      	movs	r3, #4
 8003348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003352:	f107 0314 	add.w	r3, r7, #20
 8003356:	4619      	mov	r1, r3
 8003358:	4814      	ldr	r0, [pc, #80]	@ (80033ac <MX_GPIO_Init+0xf8>)
 800335a:	f000 fbf1 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800335e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003364:	2301      	movs	r3, #1
 8003366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	480c      	ldr	r0, [pc, #48]	@ (80033a8 <MX_GPIO_Init+0xf4>)
 8003378:	f000 fbe2 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	2300      	movs	r3, #0
 800338a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800338c:	2306      	movs	r3, #6
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4619      	mov	r1, r3
 8003396:	4806      	ldr	r0, [pc, #24]	@ (80033b0 <MX_GPIO_Init+0xfc>)
 8003398:	f000 fbd2 	bl	8003b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	@ 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40020400 	.word	0x40020400
 80033b0:	40020800 	.word	0x40020800

080033b4 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
 80033c2:	e00b      	b.n	80033dc <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	18d1      	adds	r1, r2, r3
 80033ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033ce:	2201      	movs	r2, #1
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f001 fd27 	bl	8004e24 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	3301      	adds	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1ed      	bne.n	80033c4 <UART2_Print_Text+0x10>
  }
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <vSyncingTask>:

static void vSyncingTask( void *pvParameters )
{
 80033f4:	b590      	push	{r4, r7, lr}
 80033f6:	b08b      	sub	sp, #44	@ 0x2c
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  TickType_t       xDelayTime; /* used to get a pseudo random delay (200ms to 4199ms) */
  const TickType_t xMaxDelay = pdMS_TO_TICKS( 4000UL );
 80033fc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8003400:	61fb      	str	r3, [r7, #28]
  const TickType_t xMinDelay = pdMS_TO_TICKS( 200UL );
 8003402:	23c8      	movs	r3, #200	@ 0xc8
 8003404:	61bb      	str	r3, [r7, #24]
  
  EventBits_t       uxThisTaskSyncBit; /* event bit to set by this task */
  const EventBits_t uxAllSyncBits = ( mainTHIRD_TASK_BIT | mainSECOND_TASK_BIT | mainFIRST_TASK_BIT ); /* event bits to sync */
 8003406:	2307      	movs	r3, #7
 8003408:	617b      	str	r3, [r7, #20]
  /* Three instances of this task are created - each task uses a different event bit
     in the synchronization.
     The event bit to use is passed into each task instance by using the task
     parameter.
     Store it in the uxThisTaskSyncBit variable */
  uxThisTaskSyncBit = ( EventBits_t ) pvParameters;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	613b      	str	r3, [r7, #16]
    /* Simulate this task taking some time to perform an action by delaying for
       a pseudo random time (200ms to 4199ms).
       This prevents all three instances of this task reaching the synchronization
       point at the same time, and so allows the example's behavior to be
       observed more easily */
    xDelayTime = ( rand() % xMaxDelay ) + xMinDelay;
 800340e:	f002 f8c5 	bl	800559c <rand>
 8003412:	4603      	mov	r3, r0
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	fbb3 f2f2 	udiv	r2, r3, r2
 800341a:	69f9      	ldr	r1, [r7, #28]
 800341c:	fb01 f202 	mul.w	r2, r1, r2
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    vTaskDelay( xDelayTime );
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7fd fefd 	bl	8001228 <vTaskDelay>

    /* Print out a message to show this task has reached its synchronization point.
       pcTaskGetTaskName() is an API function that returns the name assigned
       to the task when the task was created */
    ( void ) snprintf( cOutputString, STRING_SIZE, "At time %10lu: %s reached sync point\n\r",
 800342e:	f7fe f8d5 	bl	80015dc <xTaskGetTickCount>
 8003432:	4604      	mov	r4, r0
 8003434:	2000      	movs	r0, #0
 8003436:	f7fe f8e1 	bl	80015fc <pcTaskGetName>
 800343a:	4603      	mov	r3, r0
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	4623      	mov	r3, r4
 8003440:	4a12      	ldr	r2, [pc, #72]	@ (800348c <vSyncingTask+0x98>)
 8003442:	2132      	movs	r1, #50	@ 0x32
 8003444:	4812      	ldr	r0, [pc, #72]	@ (8003490 <vSyncingTask+0x9c>)
 8003446:	f002 f9a9 	bl	800579c <sniprintf>
                       xTaskGetTickCount(), pcTaskGetName( NULL ) );
    UART2_Print_Text( &huart2, ( const char * ) cOutputString );
 800344a:	4911      	ldr	r1, [pc, #68]	@ (8003490 <vSyncingTask+0x9c>)
 800344c:	4811      	ldr	r0, [pc, #68]	@ (8003494 <vSyncingTask+0xa0>)
 800344e:	f7ff ffb1 	bl	80033b4 <UART2_Print_Text>

    /* wait for all the task to reach their respective synchronization points */
    xEventGroupSync( xEventGroup,       /* event group used to synchronize    */
 8003452:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <vSyncingTask+0xa4>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6939      	ldr	r1, [r7, #16]
 800345e:	f7fd f897 	bl	8000590 <xEventGroupSync>

    /* Print out a message to show this task has passed its synchronization point.
       As an indefinite delay (200ms to 4199ms) was used, the following line
       will only be executed after all the three tasks reached their respective
       synchronization point */
    ( void ) snprintf( cOutputString, STRING_SIZE, "At time %10lu: %s  exited sync point\n\r",
 8003462:	f7fe f8bb 	bl	80015dc <xTaskGetTickCount>
 8003466:	4604      	mov	r4, r0
 8003468:	2000      	movs	r0, #0
 800346a:	f7fe f8c7 	bl	80015fc <pcTaskGetName>
 800346e:	4603      	mov	r3, r0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4623      	mov	r3, r4
 8003474:	4a09      	ldr	r2, [pc, #36]	@ (800349c <vSyncingTask+0xa8>)
 8003476:	2132      	movs	r1, #50	@ 0x32
 8003478:	4805      	ldr	r0, [pc, #20]	@ (8003490 <vSyncingTask+0x9c>)
 800347a:	f002 f98f 	bl	800579c <sniprintf>
                       xTaskGetTickCount(), pcTaskGetName( NULL ) );
    UART2_Print_Text( &huart2, ( const char * ) cOutputString );
 800347e:	4904      	ldr	r1, [pc, #16]	@ (8003490 <vSyncingTask+0x9c>)
 8003480:	4804      	ldr	r0, [pc, #16]	@ (8003494 <vSyncingTask+0xa0>)
 8003482:	f7ff ff97 	bl	80033b4 <UART2_Print_Text>
    xDelayTime = ( rand() % xMaxDelay ) + xMinDelay;
 8003486:	bf00      	nop
 8003488:	e7c1      	b.n	800340e <vSyncingTask+0x1a>
 800348a:	bf00      	nop
 800348c:	08006974 	.word	0x08006974
 8003490:	20012e7c 	.word	0x20012e7c
 8003494:	20012e30 	.word	0x20012e30
 8003498:	20012e78 	.word	0x20012e78
 800349c:	0800699c 	.word	0x0800699c

080034a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a04      	ldr	r2, [pc, #16]	@ (80034c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034b2:	f000 fa43 	bl	800393c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40001000 	.word	0x40001000

080034c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034c8:	b672      	cpsid	i
}
 80034ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034cc:	bf00      	nop
 80034ce:	e7fd      	b.n	80034cc <Error_Handler+0x8>

080034d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_MspInit+0x4c>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	4a0f      	ldr	r2, [pc, #60]	@ (800351c <HAL_MspInit+0x4c>)
 80034e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e6:	4b0d      	ldr	r3, [pc, #52]	@ (800351c <HAL_MspInit+0x4c>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ee:	607b      	str	r3, [r7, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_MspInit+0x4c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	4a08      	ldr	r2, [pc, #32]	@ (800351c <HAL_MspInit+0x4c>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	@ 0x40
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_MspInit+0x4c>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800

08003520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	@ 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a19      	ldr	r2, [pc, #100]	@ (80035a4 <HAL_UART_MspInit+0x84>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d12b      	bne.n	800359a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 800354c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003550:	6413      	str	r3, [r2, #64]	@ 0x40
 8003552:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a10      	ldr	r2, [pc, #64]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <HAL_UART_MspInit+0x88>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800357a:	230c      	movs	r3, #12
 800357c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357e:	2302      	movs	r3, #2
 8003580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003582:	2300      	movs	r3, #0
 8003584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003586:	2303      	movs	r3, #3
 8003588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800358a:	2307      	movs	r3, #7
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	f107 0314 	add.w	r3, r7, #20
 8003592:	4619      	mov	r1, r3
 8003594:	4805      	ldr	r0, [pc, #20]	@ (80035ac <HAL_UART_MspInit+0x8c>)
 8003596:	f000 fad3 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800359a:	bf00      	nop
 800359c:	3728      	adds	r7, #40	@ 0x28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40004400 	.word	0x40004400
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40020000 	.word	0x40020000

080035b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08e      	sub	sp, #56	@ 0x38
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	4b33      	ldr	r3, [pc, #204]	@ (8003694 <HAL_InitTick+0xe4>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	4a32      	ldr	r2, [pc, #200]	@ (8003694 <HAL_InitTick+0xe4>)
 80035ca:	f043 0310 	orr.w	r3, r3, #16
 80035ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80035d0:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_InitTick+0xe4>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035dc:	f107 0210 	add.w	r2, r7, #16
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 f8f8 	bl	80047dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035f6:	f001 f8c9 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 80035fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80035fc:	e004      	b.n	8003608 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035fe:	f001 f8c5 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8003602:	4603      	mov	r3, r0
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	4a23      	ldr	r2, [pc, #140]	@ (8003698 <HAL_InitTick+0xe8>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9b      	lsrs	r3, r3, #18
 8003612:	3b01      	subs	r3, #1
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003616:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_InitTick+0xec>)
 8003618:	4a21      	ldr	r2, [pc, #132]	@ (80036a0 <HAL_InitTick+0xf0>)
 800361a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800361c:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_InitTick+0xec>)
 800361e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003622:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <HAL_InitTick+0xec>)
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800362a:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <HAL_InitTick+0xec>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003630:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_InitTick+0xec>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_InitTick+0xec>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800363c:	4817      	ldr	r0, [pc, #92]	@ (800369c <HAL_InitTick+0xec>)
 800363e:	f001 f8ff 	bl	8004840 <HAL_TIM_Base_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003648:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800364c:	2b00      	cmp	r3, #0
 800364e:	d11b      	bne.n	8003688 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003650:	4812      	ldr	r0, [pc, #72]	@ (800369c <HAL_InitTick+0xec>)
 8003652:	f001 f94f 	bl	80048f4 <HAL_TIM_Base_Start_IT>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800365c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003664:	2036      	movs	r0, #54	@ 0x36
 8003666:	f000 fa5d 	bl	8003b24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0f      	cmp	r3, #15
 800366e:	d808      	bhi.n	8003682 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003670:	2200      	movs	r2, #0
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	2036      	movs	r0, #54	@ 0x36
 8003676:	f000 fa39 	bl	8003aec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800367a:	4a0a      	ldr	r2, [pc, #40]	@ (80036a4 <HAL_InitTick+0xf4>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	e002      	b.n	8003688 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800368c:	4618      	mov	r0, r3
 800368e:	3738      	adds	r7, #56	@ 0x38
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	431bde83 	.word	0x431bde83
 800369c:	20012eb0 	.word	0x20012eb0
 80036a0:	40001000 	.word	0x40001000
 80036a4:	2000000c 	.word	0x2000000c

080036a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <NMI_Handler+0x4>

080036b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b4:	bf00      	nop
 80036b6:	e7fd      	b.n	80036b4 <HardFault_Handler+0x4>

080036b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036bc:	bf00      	nop
 80036be:	e7fd      	b.n	80036bc <MemManage_Handler+0x4>

080036c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <BusFault_Handler+0x4>

080036c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <UsageFault_Handler+0x4>

080036d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036d4:	bf00      	nop
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <TIM6_DAC_IRQHandler+0x10>)
 80036e6:	f001 f975 	bl	80049d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20012eb0 	.word	0x20012eb0

080036f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return 1;
 80036f8:	2301      	movs	r3, #1
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <_kill>:

int _kill(int pid, int sig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800370e:	f002 f90b 	bl	8005928 <__errno>
 8003712:	4603      	mov	r3, r0
 8003714:	2216      	movs	r2, #22
 8003716:	601a      	str	r2, [r3, #0]
  return -1;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <_exit>:

void _exit (int status)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800372c:	f04f 31ff 	mov.w	r1, #4294967295
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffe7 	bl	8003704 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <_exit+0x12>

0800373a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e00a      	b.n	8003762 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800374c:	f3af 8000 	nop.w
 8003750:	4601      	mov	r1, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	60ba      	str	r2, [r7, #8]
 8003758:	b2ca      	uxtb	r2, r1
 800375a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	dbf0      	blt.n	800374c <_read+0x12>
  }

  return len;
 800376a:	687b      	ldr	r3, [r7, #4]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e009      	b.n	800379a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	60ba      	str	r2, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	429a      	cmp	r2, r3
 80037a0:	dbf1      	blt.n	8003786 <_write+0x12>
  }
  return len;
 80037a2:	687b      	ldr	r3, [r7, #4]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <_close>:

int _close(int file)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d4:	605a      	str	r2, [r3, #4]
  return 0;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_isatty>:

int _isatty(int file)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ec:	2301      	movs	r3, #1
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <_sbrk+0x5c>)
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <_sbrk+0x60>)
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <_sbrk+0x64>)
 8003832:	4a12      	ldr	r2, [pc, #72]	@ (800387c <_sbrk+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <_sbrk+0x64>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d207      	bcs.n	8003854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003844:	f002 f870 	bl	8005928 <__errno>
 8003848:	4603      	mov	r3, r0
 800384a:	220c      	movs	r2, #12
 800384c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e009      	b.n	8003868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003854:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <_sbrk+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <_sbrk+0x64>)
 8003864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20020000 	.word	0x20020000
 8003874:	00000400 	.word	0x00000400
 8003878:	20012ef8 	.word	0x20012ef8
 800387c:	20013050 	.word	0x20013050

08003880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <SystemInit+0x20>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	4a05      	ldr	r2, [pc, #20]	@ (80038a0 <SystemInit+0x20>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038a8:	f7ff ffea 	bl	8003880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038ac:	480c      	ldr	r0, [pc, #48]	@ (80038e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038ae:	490d      	ldr	r1, [pc, #52]	@ (80038e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038b0:	4a0d      	ldr	r2, [pc, #52]	@ (80038e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b4:	e002      	b.n	80038bc <LoopCopyDataInit>

080038b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ba:	3304      	adds	r3, #4

080038bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c0:	d3f9      	bcc.n	80038b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038c2:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038c4:	4c0a      	ldr	r4, [pc, #40]	@ (80038f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038c8:	e001      	b.n	80038ce <LoopFillZerobss>

080038ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038cc:	3204      	adds	r2, #4

080038ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d0:	d3fb      	bcc.n	80038ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038d2:	f002 f82f 	bl	8005934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038d6:	f7ff fc19 	bl	800310c <main>
  bx  lr    
 80038da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038e8:	08006acc 	.word	0x08006acc
  ldr r2, =_sbss
 80038ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038f0:	2001304c 	.word	0x2001304c

080038f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038f4:	e7fe      	b.n	80038f4 <ADC_IRQHandler>
	...

080038f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <HAL_Init+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0d      	ldr	r2, [pc, #52]	@ (8003938 <HAL_Init+0x40>)
 8003902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <HAL_Init+0x40>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003914:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <HAL_Init+0x40>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a07      	ldr	r2, [pc, #28]	@ (8003938 <HAL_Init+0x40>)
 800391a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800391e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003920:	2003      	movs	r0, #3
 8003922:	f000 f8d8 	bl	8003ad6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003926:	2000      	movs	r0, #0
 8003928:	f7ff fe42 	bl	80035b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800392c:	f7ff fdd0 	bl	80034d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003940:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_IncTick+0x20>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_IncTick+0x24>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4413      	add	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <HAL_IncTick+0x24>)
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000010 	.word	0x20000010
 8003960:	20012efc 	.word	0x20012efc

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b03      	ldr	r3, [pc, #12]	@ (8003978 <HAL_GetTick+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20012efc 	.word	0x20012efc

0800397c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003998:	4013      	ands	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ae:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <__NVIC_SetPriorityGrouping+0x44>)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	60d3      	str	r3, [r2, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c8:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <__NVIC_GetPriorityGrouping+0x18>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	0a1b      	lsrs	r3, r3, #8
 80039ce:	f003 0307 	and.w	r3, r3, #7
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	db0b      	blt.n	8003a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	f003 021f 	and.w	r2, r3, #31
 80039f8:	4907      	ldr	r1, [pc, #28]	@ (8003a18 <__NVIC_EnableIRQ+0x38>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2001      	movs	r0, #1
 8003a02:	fa00 f202 	lsl.w	r2, r0, r2
 8003a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	e000e100 	.word	0xe000e100

08003a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	6039      	str	r1, [r7, #0]
 8003a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	db0a      	blt.n	8003a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	490c      	ldr	r1, [pc, #48]	@ (8003a68 <__NVIC_SetPriority+0x4c>)
 8003a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a44:	e00a      	b.n	8003a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4908      	ldr	r1, [pc, #32]	@ (8003a6c <__NVIC_SetPriority+0x50>)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	3b04      	subs	r3, #4
 8003a54:	0112      	lsls	r2, r2, #4
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	440b      	add	r3, r1
 8003a5a:	761a      	strb	r2, [r3, #24]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000e100 	.word	0xe000e100
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	@ 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f1c3 0307 	rsb	r3, r3, #7
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	bf28      	it	cs
 8003a8e:	2304      	movcs	r3, #4
 8003a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d902      	bls.n	8003aa0 <NVIC_EncodePriority+0x30>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	3b03      	subs	r3, #3
 8003a9e:	e000      	b.n	8003aa2 <NVIC_EncodePriority+0x32>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac2:	43d9      	mvns	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac8:	4313      	orrs	r3, r2
         );
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	@ 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ff4c 	bl	800397c <__NVIC_SetPriorityGrouping>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003afe:	f7ff ff61 	bl	80039c4 <__NVIC_GetPriorityGrouping>
 8003b02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	f7ff ffb1 	bl	8003a70 <NVIC_EncodePriority>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7ff ff80 	bl	8003a1c <__NVIC_SetPriority>
}
 8003b1c:	bf00      	nop
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff54 	bl	80039e0 <__NVIC_EnableIRQ>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e16b      	b.n	8003e34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f040 815a 	bne.w	8003e2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d005      	beq.n	8003b92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d130      	bne.n	8003bf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	f003 0201 	and.w	r2, r3, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d017      	beq.n	8003c30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d123      	bne.n	8003c84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	08da      	lsrs	r2, r3, #3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3208      	adds	r2, #8
 8003c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	220f      	movs	r2, #15
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	08da      	lsrs	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	3208      	adds	r2, #8
 8003c7e:	69b9      	ldr	r1, [r7, #24]
 8003c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 0203 	and.w	r2, r3, #3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80b4 	beq.w	8003e2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b60      	ldr	r3, [pc, #384]	@ (8003e4c <HAL_GPIO_Init+0x30c>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	4a5f      	ldr	r2, [pc, #380]	@ (8003e4c <HAL_GPIO_Init+0x30c>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e4c <HAL_GPIO_Init+0x30c>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8003e50 <HAL_GPIO_Init+0x310>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a52      	ldr	r2, [pc, #328]	@ (8003e54 <HAL_GPIO_Init+0x314>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_GPIO_Init+0x318>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a50      	ldr	r2, [pc, #320]	@ (8003e5c <HAL_GPIO_Init+0x31c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a4f      	ldr	r2, [pc, #316]	@ (8003e60 <HAL_GPIO_Init+0x320>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a4e      	ldr	r2, [pc, #312]	@ (8003e64 <HAL_GPIO_Init+0x324>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x216>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a4d      	ldr	r2, [pc, #308]	@ (8003e68 <HAL_GPIO_Init+0x328>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x212>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a4c      	ldr	r2, [pc, #304]	@ (8003e6c <HAL_GPIO_Init+0x32c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x20e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4b      	ldr	r2, [pc, #300]	@ (8003e70 <HAL_GPIO_Init+0x330>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x20a>
 8003d46:	2307      	movs	r3, #7
 8003d48:	e00e      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	e00c      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d4e:	2306      	movs	r3, #6
 8003d50:	e00a      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d52:	2305      	movs	r3, #5
 8003d54:	e008      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d56:	2304      	movs	r3, #4
 8003d58:	e006      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e004      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e002      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_GPIO_Init+0x228>
 8003d66:	2300      	movs	r3, #0
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	f002 0203 	and.w	r2, r2, #3
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	4093      	lsls	r3, r2
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d78:	4935      	ldr	r1, [pc, #212]	@ (8003e50 <HAL_GPIO_Init+0x310>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d86:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003daa:	4a32      	ldr	r2, [pc, #200]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db0:	4b30      	ldr	r3, [pc, #192]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd4:	4a27      	ldr	r2, [pc, #156]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dda:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e28:	4a12      	ldr	r2, [pc, #72]	@ (8003e74 <HAL_GPIO_Init+0x334>)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3301      	adds	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	f67f ae90 	bls.w	8003b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	3724      	adds	r7, #36	@ 0x24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	40013800 	.word	0x40013800
 8003e54:	40020000 	.word	0x40020000
 8003e58:	40020400 	.word	0x40020400
 8003e5c:	40020800 	.word	0x40020800
 8003e60:	40020c00 	.word	0x40020c00
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40021400 	.word	0x40021400
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	40021c00 	.word	0x40021c00
 8003e74:	40013c00 	.word	0x40013c00

08003e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
 8003e84:	4613      	mov	r3, r2
 8003e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e88:	787b      	ldrb	r3, [r7, #1]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e94:	e003      	b.n	8003e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	041a      	lsls	r2, r3, #16
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	619a      	str	r2, [r3, #24]
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e267      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d075      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eca:	4b88      	ldr	r3, [pc, #544]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ed6:	4b85      	ldr	r3, [pc, #532]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d112      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b82      	ldr	r3, [pc, #520]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eee:	d10b      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d05b      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x108>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d157      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e242      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f10:	d106      	bne.n	8003f20 <HAL_RCC_OscConfig+0x74>
 8003f12:	4b76      	ldr	r3, [pc, #472]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a75      	ldr	r2, [pc, #468]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e01d      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x98>
 8003f2a:	4b70      	ldr	r3, [pc, #448]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6f      	ldr	r2, [pc, #444]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	4b6d      	ldr	r3, [pc, #436]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6c      	ldr	r2, [pc, #432]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	e00b      	b.n	8003f5c <HAL_RCC_OscConfig+0xb0>
 8003f44:	4b69      	ldr	r3, [pc, #420]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a68      	ldr	r2, [pc, #416]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b66      	ldr	r3, [pc, #408]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a65      	ldr	r2, [pc, #404]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7ff fcfe 	bl	8003964 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f6c:	f7ff fcfa 	bl	8003964 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b64      	cmp	r3, #100	@ 0x64
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e207      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0xc0>
 8003f8a:	e014      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7ff fcea 	bl	8003964 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f94:	f7ff fce6 	bl	8003964 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b64      	cmp	r3, #100	@ 0x64
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1f3      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fa6:	4b51      	ldr	r3, [pc, #324]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0xe8>
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d063      	beq.n	800408a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fc2:	4b4a      	ldr	r3, [pc, #296]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fce:	4b47      	ldr	r3, [pc, #284]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d11c      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b44      	ldr	r3, [pc, #272]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fe6:	4b41      	ldr	r3, [pc, #260]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e1c7      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4937      	ldr	r1, [pc, #220]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004012:	e03a      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800401c:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_RCC_OscConfig+0x244>)
 800401e:	2201      	movs	r2, #1
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004022:	f7ff fc9f 	bl	8003964 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402a:	f7ff fc9b 	bl	8003964 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1a8      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403c:	4b2b      	ldr	r3, [pc, #172]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0f0      	beq.n	800402a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004048:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	4925      	ldr	r1, [pc, #148]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8004058:	4313      	orrs	r3, r2
 800405a:	600b      	str	r3, [r1, #0]
 800405c:	e015      	b.n	800408a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405e:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <HAL_RCC_OscConfig+0x244>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7ff fc7e 	bl	8003964 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800406c:	f7ff fc7a 	bl	8003964 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e187      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d036      	beq.n	8004104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_RCC_OscConfig+0x248>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a4:	f7ff fc5e 	bl	8003964 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ac:	f7ff fc5a 	bl	8003964 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e167      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040be:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <HAL_RCC_OscConfig+0x240>)
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x200>
 80040ca:	e01b      	b.n	8004104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040cc:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_OscConfig+0x248>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d2:	f7ff fc47 	bl	8003964 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d8:	e00e      	b.n	80040f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040da:	f7ff fc43 	bl	8003964 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d907      	bls.n	80040f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e150      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
 80040ec:	40023800 	.word	0x40023800
 80040f0:	42470000 	.word	0x42470000
 80040f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f8:	4b88      	ldr	r3, [pc, #544]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ea      	bne.n	80040da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8097 	beq.w	8004240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004116:	4b81      	ldr	r3, [pc, #516]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b7d      	ldr	r3, [pc, #500]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	4a7c      	ldr	r2, [pc, #496]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	@ 0x40
 8004132:	4b7a      	ldr	r3, [pc, #488]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b77      	ldr	r3, [pc, #476]	@ (8004320 <HAL_RCC_OscConfig+0x474>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d118      	bne.n	8004180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414e:	4b74      	ldr	r3, [pc, #464]	@ (8004320 <HAL_RCC_OscConfig+0x474>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a73      	ldr	r2, [pc, #460]	@ (8004320 <HAL_RCC_OscConfig+0x474>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415a:	f7ff fc03 	bl	8003964 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004162:	f7ff fbff 	bl	8003964 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e10c      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004174:	4b6a      	ldr	r3, [pc, #424]	@ (8004320 <HAL_RCC_OscConfig+0x474>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x2ea>
 8004188:	4b64      	ldr	r3, [pc, #400]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	4a63      	ldr	r2, [pc, #396]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6713      	str	r3, [r2, #112]	@ 0x70
 8004194:	e01c      	b.n	80041d0 <HAL_RCC_OscConfig+0x324>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b05      	cmp	r3, #5
 800419c:	d10c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x30c>
 800419e:	4b5f      	ldr	r3, [pc, #380]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a2:	4a5e      	ldr	r2, [pc, #376]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041a4:	f043 0304 	orr.w	r3, r3, #4
 80041a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041aa:	4b5c      	ldr	r3, [pc, #368]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ae:	4a5b      	ldr	r2, [pc, #364]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b6:	e00b      	b.n	80041d0 <HAL_RCC_OscConfig+0x324>
 80041b8:	4b58      	ldr	r3, [pc, #352]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041bc:	4a57      	ldr	r2, [pc, #348]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c4:	4b55      	ldr	r3, [pc, #340]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c8:	4a54      	ldr	r2, [pc, #336]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041ca:	f023 0304 	bic.w	r3, r3, #4
 80041ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7ff fbc4 	bl	8003964 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7ff fbc0 	bl	8003964 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e0cb      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	4b49      	ldr	r3, [pc, #292]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ee      	beq.n	80041e0 <HAL_RCC_OscConfig+0x334>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004204:	f7ff fbae 	bl	8003964 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800420c:	f7ff fbaa 	bl	8003964 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0b5      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004222:	4b3e      	ldr	r3, [pc, #248]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ee      	bne.n	800420c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	4b39      	ldr	r3, [pc, #228]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	4a38      	ldr	r2, [pc, #224]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800423e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80a1 	beq.w	800438c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800424a:	4b34      	ldr	r3, [pc, #208]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b08      	cmp	r3, #8
 8004254:	d05c      	beq.n	8004310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d141      	bne.n	80042e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425e:	4b31      	ldr	r3, [pc, #196]	@ (8004324 <HAL_RCC_OscConfig+0x478>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7ff fb7e 	bl	8003964 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800426c:	f7ff fb7a 	bl	8003964 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e087      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427e:	4b27      	ldr	r3, [pc, #156]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	019b      	lsls	r3, r3, #6
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	041b      	lsls	r3, r3, #16
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	491b      	ldr	r1, [pc, #108]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <HAL_RCC_OscConfig+0x478>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7ff fb53 	bl	8003964 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7ff fb4f 	bl	8003964 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e05c      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f0      	beq.n	80042c2 <HAL_RCC_OscConfig+0x416>
 80042e0:	e054      	b.n	800438c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e2:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_RCC_OscConfig+0x478>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7ff fb3c 	bl	8003964 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f0:	f7ff fb38 	bl	8003964 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e045      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_OscConfig+0x470>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x444>
 800430e:	e03d      	b.n	800438c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d107      	bne.n	8004328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e038      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
 800431c:	40023800 	.word	0x40023800
 8004320:	40007000 	.word	0x40007000
 8004324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004328:	4b1b      	ldr	r3, [pc, #108]	@ (8004398 <HAL_RCC_OscConfig+0x4ec>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d028      	beq.n	8004388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d121      	bne.n	8004388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d11a      	bne.n	8004388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800435e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004360:	4293      	cmp	r3, r2
 8004362:	d111      	bne.n	8004388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	3b01      	subs	r3, #1
 8004372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800

0800439c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0cc      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4b68      	ldr	r3, [pc, #416]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d90c      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b65      	ldr	r3, [pc, #404]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b63      	ldr	r3, [pc, #396]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0b8      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043f0:	4b59      	ldr	r3, [pc, #356]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a58      	ldr	r2, [pc, #352]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80043fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0308 	and.w	r3, r3, #8
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004408:	4b53      	ldr	r3, [pc, #332]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a52      	ldr	r2, [pc, #328]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800440e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b50      	ldr	r3, [pc, #320]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	494d      	ldr	r1, [pc, #308]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d044      	beq.n	80044bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b47      	ldr	r3, [pc, #284]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d119      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e07f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d003      	beq.n	800445a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004456:	2b03      	cmp	r3, #3
 8004458:	d107      	bne.n	800446a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b3f      	ldr	r3, [pc, #252]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e06f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800446a:	4b3b      	ldr	r3, [pc, #236]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e067      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800447a:	4b37      	ldr	r3, [pc, #220]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4934      	ldr	r1, [pc, #208]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800448c:	f7ff fa6a 	bl	8003964 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004492:	e00a      	b.n	80044aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004494:	f7ff fa66 	bl	8003964 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e04f      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 020c 	and.w	r2, r3, #12
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1eb      	bne.n	8004494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044bc:	4b25      	ldr	r3, [pc, #148]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d20c      	bcs.n	80044e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b20      	ldr	r3, [pc, #128]	@ (8004554 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e032      	b.n	800454a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4916      	ldr	r1, [pc, #88]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	490e      	ldr	r1, [pc, #56]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004522:	f000 f821 	bl	8004568 <HAL_RCC_GetSysClockFreq>
 8004526:	4602      	mov	r2, r0
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	091b      	lsrs	r3, r3, #4
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	490a      	ldr	r1, [pc, #40]	@ (800455c <HAL_RCC_ClockConfig+0x1c0>)
 8004534:	5ccb      	ldrb	r3, [r1, r3]
 8004536:	fa22 f303 	lsr.w	r3, r2, r3
 800453a:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800453e:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <HAL_RCC_ClockConfig+0x1c8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f834 	bl	80035b0 <HAL_InitTick>

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40023c00 	.word	0x40023c00
 8004558:	40023800 	.word	0x40023800
 800455c:	080069c4 	.word	0x080069c4
 8004560:	20000008 	.word	0x20000008
 8004564:	2000000c 	.word	0x2000000c

08004568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456c:	b094      	sub	sp, #80	@ 0x50
 800456e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	647b      	str	r3, [r7, #68]	@ 0x44
 8004574:	2300      	movs	r3, #0
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004578:	2300      	movs	r3, #0
 800457a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004580:	4b79      	ldr	r3, [pc, #484]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b08      	cmp	r3, #8
 800458a:	d00d      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x40>
 800458c:	2b08      	cmp	r3, #8
 800458e:	f200 80e1 	bhi.w	8004754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x34>
 8004596:	2b04      	cmp	r3, #4
 8004598:	d003      	beq.n	80045a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800459a:	e0db      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800459c:	4b73      	ldr	r3, [pc, #460]	@ (800476c <HAL_RCC_GetSysClockFreq+0x204>)
 800459e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045a0:	e0db      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045a2:	4b73      	ldr	r3, [pc, #460]	@ (8004770 <HAL_RCC_GetSysClockFreq+0x208>)
 80045a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045a6:	e0d8      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d063      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	2200      	movs	r2, #0
 80045c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045d2:	2300      	movs	r3, #0
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80045da:	4622      	mov	r2, r4
 80045dc:	462b      	mov	r3, r5
 80045de:	f04f 0000 	mov.w	r0, #0
 80045e2:	f04f 0100 	mov.w	r1, #0
 80045e6:	0159      	lsls	r1, r3, #5
 80045e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ec:	0150      	lsls	r0, r2, #5
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4621      	mov	r1, r4
 80045f4:	1a51      	subs	r1, r2, r1
 80045f6:	6139      	str	r1, [r7, #16]
 80045f8:	4629      	mov	r1, r5
 80045fa:	eb63 0301 	sbc.w	r3, r3, r1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800460c:	4659      	mov	r1, fp
 800460e:	018b      	lsls	r3, r1, #6
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004616:	4651      	mov	r1, sl
 8004618:	018a      	lsls	r2, r1, #6
 800461a:	4651      	mov	r1, sl
 800461c:	ebb2 0801 	subs.w	r8, r2, r1
 8004620:	4659      	mov	r1, fp
 8004622:	eb63 0901 	sbc.w	r9, r3, r1
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800463a:	4690      	mov	r8, r2
 800463c:	4699      	mov	r9, r3
 800463e:	4623      	mov	r3, r4
 8004640:	eb18 0303 	adds.w	r3, r8, r3
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	462b      	mov	r3, r5
 8004648:	eb49 0303 	adc.w	r3, r9, r3
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800465a:	4629      	mov	r1, r5
 800465c:	024b      	lsls	r3, r1, #9
 800465e:	4621      	mov	r1, r4
 8004660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004664:	4621      	mov	r1, r4
 8004666:	024a      	lsls	r2, r1, #9
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466e:	2200      	movs	r2, #0
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004678:	f7fb fdfa 	bl	8000270 <__aeabi_uldivmod>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4613      	mov	r3, r2
 8004682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004684:	e058      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004686:	4b38      	ldr	r3, [pc, #224]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	099b      	lsrs	r3, r3, #6
 800468c:	2200      	movs	r2, #0
 800468e:	4618      	mov	r0, r3
 8004690:	4611      	mov	r1, r2
 8004692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004696:	623b      	str	r3, [r7, #32]
 8004698:	2300      	movs	r3, #0
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
 800469c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	f04f 0000 	mov.w	r0, #0
 80046a8:	f04f 0100 	mov.w	r1, #0
 80046ac:	0159      	lsls	r1, r3, #5
 80046ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b2:	0150      	lsls	r0, r2, #5
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4641      	mov	r1, r8
 80046ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80046be:	4649      	mov	r1, r9
 80046c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046d8:	ebb2 040a 	subs.w	r4, r2, sl
 80046dc:	eb63 050b 	sbc.w	r5, r3, fp
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 0300 	mov.w	r3, #0
 80046e8:	00eb      	lsls	r3, r5, #3
 80046ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ee:	00e2      	lsls	r2, r4, #3
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	18e3      	adds	r3, r4, r3
 80046f8:	603b      	str	r3, [r7, #0]
 80046fa:	464b      	mov	r3, r9
 80046fc:	eb45 0303 	adc.w	r3, r5, r3
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470e:	4629      	mov	r1, r5
 8004710:	028b      	lsls	r3, r1, #10
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004718:	4621      	mov	r1, r4
 800471a:	028a      	lsls	r2, r1, #10
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004722:	2200      	movs	r2, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	61fa      	str	r2, [r7, #28]
 8004728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472c:	f7fb fda0 	bl	8000270 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x200>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800474a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004752:	e002      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004754:	4b05      	ldr	r3, [pc, #20]	@ (800476c <HAL_RCC_GetSysClockFreq+0x204>)
 8004756:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800475a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800475c:	4618      	mov	r0, r3
 800475e:	3750      	adds	r7, #80	@ 0x50
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	00f42400 	.word	0x00f42400
 8004770:	007a1200 	.word	0x007a1200

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000008 	.word	0x20000008

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004790:	f7ff fff0 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	0a9b      	lsrs	r3, r3, #10
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	@ (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	080069d4 	.word	0x080069d4

080047b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b8:	f7ff ffdc 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0b5b      	lsrs	r3, r3, #13
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	@ (80047d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	080069d4 	.word	0x080069d4

080047dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	220f      	movs	r2, #15
 80047ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800481e:	4b07      	ldr	r3, [pc, #28]	@ (800483c <HAL_RCC_GetClockConfig+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	40023c00 	.word	0x40023c00

08004840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e041      	b.n	80048d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f839 	bl	80048de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 f9c0 	bl	8004c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d001      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e04e      	b.n	80049aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a23      	ldr	r2, [pc, #140]	@ (80049b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004936:	d01d      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	@ (80049bc <HAL_TIM_Base_Start_IT+0xc8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	@ (80049c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1c      	ldr	r2, [pc, #112]	@ (80049c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	@ (80049c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_TIM_Base_Start_IT+0xd8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d111      	bne.n	8004998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b06      	cmp	r3, #6
 8004984:	d010      	beq.n	80049a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004996:	e007      	b.n	80049a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40010000 	.word	0x40010000
 80049bc:	40000400 	.word	0x40000400
 80049c0:	40000800 	.word	0x40000800
 80049c4:	40000c00 	.word	0x40000c00
 80049c8:	40010400 	.word	0x40010400
 80049cc:	40014000 	.word	0x40014000
 80049d0:	40001800 	.word	0x40001800

080049d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d020      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01b      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0202 	mvn.w	r2, #2
 8004a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8d2 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f8c4 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8d5 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d020      	beq.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0204 	mvn.w	r2, #4
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f8ac 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f89e 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f8af 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d020      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01b      	beq.n	8004ad0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0208 	mvn.w	r2, #8
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0303 	and.w	r3, r3, #3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f886 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f878 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f889 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d020      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01b      	beq.n	8004b1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0210 	mvn.w	r2, #16
 8004aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2208      	movs	r2, #8
 8004af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f860 	bl	8004bc8 <HAL_TIM_IC_CaptureCallback>
 8004b08:	e005      	b.n	8004b16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f852 	bl	8004bb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f863 	bl	8004bdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00c      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0201 	mvn.w	r2, #1
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fcb0 	bl	80034a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f906 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f834 	bl	8004bf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00c      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0220 	mvn.w	r2, #32
 8004ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8d8 	bl	8004d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a46      	ldr	r2, [pc, #280]	@ (8004d30 <TIM_Base_SetConfig+0x12c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c22:	d00f      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a43      	ldr	r2, [pc, #268]	@ (8004d34 <TIM_Base_SetConfig+0x130>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00b      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a42      	ldr	r2, [pc, #264]	@ (8004d38 <TIM_Base_SetConfig+0x134>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d007      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a41      	ldr	r2, [pc, #260]	@ (8004d3c <TIM_Base_SetConfig+0x138>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d003      	beq.n	8004c44 <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a40      	ldr	r2, [pc, #256]	@ (8004d40 <TIM_Base_SetConfig+0x13c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d108      	bne.n	8004c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a35      	ldr	r2, [pc, #212]	@ (8004d30 <TIM_Base_SetConfig+0x12c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c64:	d027      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a32      	ldr	r2, [pc, #200]	@ (8004d34 <TIM_Base_SetConfig+0x130>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d023      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a31      	ldr	r2, [pc, #196]	@ (8004d38 <TIM_Base_SetConfig+0x134>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a30      	ldr	r2, [pc, #192]	@ (8004d3c <TIM_Base_SetConfig+0x138>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2f      	ldr	r2, [pc, #188]	@ (8004d40 <TIM_Base_SetConfig+0x13c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <TIM_Base_SetConfig+0x140>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2d      	ldr	r2, [pc, #180]	@ (8004d48 <TIM_Base_SetConfig+0x144>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2c      	ldr	r2, [pc, #176]	@ (8004d4c <TIM_Base_SetConfig+0x148>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <TIM_Base_SetConfig+0x14c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8004d54 <TIM_Base_SetConfig+0x150>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <TIM_Base_SetConfig+0x154>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a10      	ldr	r2, [pc, #64]	@ (8004d30 <TIM_Base_SetConfig+0x12c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0xf8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <TIM_Base_SetConfig+0x13c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d105      	bne.n	8004d22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f023 0201 	bic.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]
  }
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40010400 	.word	0x40010400
 8004d44:	40014000 	.word	0x40014000
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	40001800 	.word	0x40001800
 8004d54:	40001c00 	.word	0x40001c00
 8004d58:	40002000 	.word	0x40002000

08004d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e042      	b.n	8004e1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fe fbb8 	bl	8003520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	@ 0x24
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f973 	bl	80050b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	@ 0x28
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	4613      	mov	r3, r2
 8004e32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d175      	bne.n	8004f30 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_UART_Transmit+0x2c>
 8004e4a:	88fb      	ldrh	r3, [r7, #6]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e06e      	b.n	8004f32 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	@ 0x21
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e62:	f7fe fd7f 	bl	8003964 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	88fa      	ldrh	r2, [r7, #6]
 8004e72:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7c:	d108      	bne.n	8004e90 <HAL_UART_Transmit+0x6c>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d104      	bne.n	8004e90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e003      	b.n	8004e98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e98:	e02e      	b.n	8004ef8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2180      	movs	r1, #128	@ 0x80
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f848 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e03a      	b.n	8004f32 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	61bb      	str	r3, [r7, #24]
 8004ed8:	e007      	b.n	8004eea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1cb      	bne.n	8004e9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2140      	movs	r1, #64	@ 0x40
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f814 	bl	8004f3a <UART_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e006      	b.n	8004f32 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	603b      	str	r3, [r7, #0]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4a:	e03b      	b.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d037      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f54:	f7fe fd06 	bl	8003964 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	6a3a      	ldr	r2, [r7, #32]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d302      	bcc.n	8004f6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e03a      	b.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d023      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b80      	cmp	r3, #128	@ 0x80
 8004f80:	d020      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d01d      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d116      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f81d 	bl	8004fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e00f      	b.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d0b4      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b095      	sub	sp, #84	@ 0x54
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005014:	643a      	str	r2, [r7, #64]	@ 0x40
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	6a3b      	ldr	r3, [r7, #32]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	61fb      	str	r3, [r7, #28]
   return(result);
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f023 0301 	bic.w	r3, r3, #1
 800503e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005048:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800504e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e5      	bne.n	8005028 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	d119      	bne.n	8005098 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60bb      	str	r3, [r7, #8]
   return(result);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f023 0310 	bic.w	r3, r3, #16
 800507a:	647b      	str	r3, [r7, #68]	@ 0x44
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005084:	61ba      	str	r2, [r7, #24]
 8005086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	613b      	str	r3, [r7, #16]
   return(result);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e5      	bne.n	8005064 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050a6:	bf00      	nop
 80050a8:	3754      	adds	r7, #84	@ 0x54
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b0c0      	sub	sp, #256	@ 0x100
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d0:	68d9      	ldr	r1, [r3, #12]
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	ea40 0301 	orr.w	r3, r0, r1
 80050dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	431a      	orrs	r2, r3
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800510c:	f021 010c 	bic.w	r1, r1, #12
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800511a:	430b      	orrs	r3, r1
 800511c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800512a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512e:	6999      	ldr	r1, [r3, #24]
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	ea40 0301 	orr.w	r3, r0, r1
 800513a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b8f      	ldr	r3, [pc, #572]	@ (8005380 <UART_SetConfig+0x2cc>)
 8005144:	429a      	cmp	r2, r3
 8005146:	d005      	beq.n	8005154 <UART_SetConfig+0xa0>
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b8d      	ldr	r3, [pc, #564]	@ (8005384 <UART_SetConfig+0x2d0>)
 8005150:	429a      	cmp	r2, r3
 8005152:	d104      	bne.n	800515e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005154:	f7ff fb2e 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8005158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800515c:	e003      	b.n	8005166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800515e:	f7ff fb15 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8005162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005170:	f040 810c 	bne.w	800538c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005178:	2200      	movs	r2, #0
 800517a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800517e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	1891      	adds	r1, r2, r2
 800518c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800518e:	415b      	adcs	r3, r3
 8005190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005196:	4621      	mov	r1, r4
 8005198:	eb12 0801 	adds.w	r8, r2, r1
 800519c:	4629      	mov	r1, r5
 800519e:	eb43 0901 	adc.w	r9, r3, r1
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051b6:	4690      	mov	r8, r2
 80051b8:	4699      	mov	r9, r3
 80051ba:	4623      	mov	r3, r4
 80051bc:	eb18 0303 	adds.w	r3, r8, r3
 80051c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051c4:	462b      	mov	r3, r5
 80051c6:	eb49 0303 	adc.w	r3, r9, r3
 80051ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051e2:	460b      	mov	r3, r1
 80051e4:	18db      	adds	r3, r3, r3
 80051e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e8:	4613      	mov	r3, r2
 80051ea:	eb42 0303 	adc.w	r3, r2, r3
 80051ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80051f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051f8:	f7fb f83a 	bl	8000270 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4b61      	ldr	r3, [pc, #388]	@ (8005388 <UART_SetConfig+0x2d4>)
 8005202:	fba3 2302 	umull	r2, r3, r3, r2
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	011c      	lsls	r4, r3, #4
 800520a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520e:	2200      	movs	r2, #0
 8005210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	1891      	adds	r1, r2, r2
 8005222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005224:	415b      	adcs	r3, r3
 8005226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800522c:	4641      	mov	r1, r8
 800522e:	eb12 0a01 	adds.w	sl, r2, r1
 8005232:	4649      	mov	r1, r9
 8005234:	eb43 0b01 	adc.w	fp, r3, r1
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800524c:	4692      	mov	sl, r2
 800524e:	469b      	mov	fp, r3
 8005250:	4643      	mov	r3, r8
 8005252:	eb1a 0303 	adds.w	r3, sl, r3
 8005256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800525a:	464b      	mov	r3, r9
 800525c:	eb4b 0303 	adc.w	r3, fp, r3
 8005260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005278:	460b      	mov	r3, r1
 800527a:	18db      	adds	r3, r3, r3
 800527c:	643b      	str	r3, [r7, #64]	@ 0x40
 800527e:	4613      	mov	r3, r2
 8005280:	eb42 0303 	adc.w	r3, r2, r3
 8005284:	647b      	str	r3, [r7, #68]	@ 0x44
 8005286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800528a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800528e:	f7fa ffef 	bl	8000270 <__aeabi_uldivmod>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4611      	mov	r1, r2
 8005298:	4b3b      	ldr	r3, [pc, #236]	@ (8005388 <UART_SetConfig+0x2d4>)
 800529a:	fba3 2301 	umull	r2, r3, r3, r1
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	2264      	movs	r2, #100	@ 0x64
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	1acb      	subs	r3, r1, r3
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052ae:	4b36      	ldr	r3, [pc, #216]	@ (8005388 <UART_SetConfig+0x2d4>)
 80052b0:	fba3 2302 	umull	r2, r3, r3, r2
 80052b4:	095b      	lsrs	r3, r3, #5
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052bc:	441c      	add	r4, r3
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052d8:	415b      	adcs	r3, r3
 80052da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052e0:	4641      	mov	r1, r8
 80052e2:	1851      	adds	r1, r2, r1
 80052e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80052e6:	4649      	mov	r1, r9
 80052e8:	414b      	adcs	r3, r1
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052f8:	4659      	mov	r1, fp
 80052fa:	00cb      	lsls	r3, r1, #3
 80052fc:	4651      	mov	r1, sl
 80052fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005302:	4651      	mov	r1, sl
 8005304:	00ca      	lsls	r2, r1, #3
 8005306:	4610      	mov	r0, r2
 8005308:	4619      	mov	r1, r3
 800530a:	4603      	mov	r3, r0
 800530c:	4642      	mov	r2, r8
 800530e:	189b      	adds	r3, r3, r2
 8005310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005314:	464b      	mov	r3, r9
 8005316:	460a      	mov	r2, r1
 8005318:	eb42 0303 	adc.w	r3, r2, r3
 800531c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800532c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005334:	460b      	mov	r3, r1
 8005336:	18db      	adds	r3, r3, r3
 8005338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800533a:	4613      	mov	r3, r2
 800533c:	eb42 0303 	adc.w	r3, r2, r3
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800534a:	f7fa ff91 	bl	8000270 <__aeabi_uldivmod>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <UART_SetConfig+0x2d4>)
 8005354:	fba3 1302 	umull	r1, r3, r3, r2
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	2164      	movs	r1, #100	@ 0x64
 800535c:	fb01 f303 	mul.w	r3, r1, r3
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	3332      	adds	r3, #50	@ 0x32
 8005366:	4a08      	ldr	r2, [pc, #32]	@ (8005388 <UART_SetConfig+0x2d4>)
 8005368:	fba2 2303 	umull	r2, r3, r2, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	f003 0207 	and.w	r2, r3, #7
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4422      	add	r2, r4
 800537a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800537c:	e106      	b.n	800558c <UART_SetConfig+0x4d8>
 800537e:	bf00      	nop
 8005380:	40011000 	.word	0x40011000
 8005384:	40011400 	.word	0x40011400
 8005388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800538c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800539a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800539e:	4642      	mov	r2, r8
 80053a0:	464b      	mov	r3, r9
 80053a2:	1891      	adds	r1, r2, r2
 80053a4:	6239      	str	r1, [r7, #32]
 80053a6:	415b      	adcs	r3, r3
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053ae:	4641      	mov	r1, r8
 80053b0:	1854      	adds	r4, r2, r1
 80053b2:	4649      	mov	r1, r9
 80053b4:	eb43 0501 	adc.w	r5, r3, r1
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	00eb      	lsls	r3, r5, #3
 80053c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c6:	00e2      	lsls	r2, r4, #3
 80053c8:	4614      	mov	r4, r2
 80053ca:	461d      	mov	r5, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	18e3      	adds	r3, r4, r3
 80053d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053d4:	464b      	mov	r3, r9
 80053d6:	eb45 0303 	adc.w	r3, r5, r3
 80053da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f04f 0300 	mov.w	r3, #0
 80053f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053fa:	4629      	mov	r1, r5
 80053fc:	008b      	lsls	r3, r1, #2
 80053fe:	4621      	mov	r1, r4
 8005400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005404:	4621      	mov	r1, r4
 8005406:	008a      	lsls	r2, r1, #2
 8005408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800540c:	f7fa ff30 	bl	8000270 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4b60      	ldr	r3, [pc, #384]	@ (8005598 <UART_SetConfig+0x4e4>)
 8005416:	fba3 2302 	umull	r2, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	011c      	lsls	r4, r3, #4
 800541e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005422:	2200      	movs	r2, #0
 8005424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800542c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	1891      	adds	r1, r2, r2
 8005436:	61b9      	str	r1, [r7, #24]
 8005438:	415b      	adcs	r3, r3
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005440:	4641      	mov	r1, r8
 8005442:	1851      	adds	r1, r2, r1
 8005444:	6139      	str	r1, [r7, #16]
 8005446:	4649      	mov	r1, r9
 8005448:	414b      	adcs	r3, r1
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005458:	4659      	mov	r1, fp
 800545a:	00cb      	lsls	r3, r1, #3
 800545c:	4651      	mov	r1, sl
 800545e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005462:	4651      	mov	r1, sl
 8005464:	00ca      	lsls	r2, r1, #3
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	4603      	mov	r3, r0
 800546c:	4642      	mov	r2, r8
 800546e:	189b      	adds	r3, r3, r2
 8005470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005474:	464b      	mov	r3, r9
 8005476:	460a      	mov	r2, r1
 8005478:	eb42 0303 	adc.w	r3, r2, r3
 800547c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	67bb      	str	r3, [r7, #120]	@ 0x78
 800548a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005498:	4649      	mov	r1, r9
 800549a:	008b      	lsls	r3, r1, #2
 800549c:	4641      	mov	r1, r8
 800549e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054a2:	4641      	mov	r1, r8
 80054a4:	008a      	lsls	r2, r1, #2
 80054a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054aa:	f7fa fee1 	bl	8000270 <__aeabi_uldivmod>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	4b38      	ldr	r3, [pc, #224]	@ (8005598 <UART_SetConfig+0x4e4>)
 80054b6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	2264      	movs	r2, #100	@ 0x64
 80054be:	fb02 f303 	mul.w	r3, r2, r3
 80054c2:	1acb      	subs	r3, r1, r3
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	3332      	adds	r3, #50	@ 0x32
 80054c8:	4a33      	ldr	r2, [pc, #204]	@ (8005598 <UART_SetConfig+0x4e4>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d4:	441c      	add	r4, r3
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054da:	2200      	movs	r2, #0
 80054dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80054de:	677a      	str	r2, [r7, #116]	@ 0x74
 80054e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	415b      	adcs	r3, r3
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054f4:	4641      	mov	r1, r8
 80054f6:	1851      	adds	r1, r2, r1
 80054f8:	6039      	str	r1, [r7, #0]
 80054fa:	4649      	mov	r1, r9
 80054fc:	414b      	adcs	r3, r1
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800550c:	4659      	mov	r1, fp
 800550e:	00cb      	lsls	r3, r1, #3
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005516:	4651      	mov	r1, sl
 8005518:	00ca      	lsls	r2, r1, #3
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	4603      	mov	r3, r0
 8005520:	4642      	mov	r2, r8
 8005522:	189b      	adds	r3, r3, r2
 8005524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005526:	464b      	mov	r3, r9
 8005528:	460a      	mov	r2, r1
 800552a:	eb42 0303 	adc.w	r3, r2, r3
 800552e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	663b      	str	r3, [r7, #96]	@ 0x60
 800553a:	667a      	str	r2, [r7, #100]	@ 0x64
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005548:	4649      	mov	r1, r9
 800554a:	008b      	lsls	r3, r1, #2
 800554c:	4641      	mov	r1, r8
 800554e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005552:	4641      	mov	r1, r8
 8005554:	008a      	lsls	r2, r1, #2
 8005556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800555a:	f7fa fe89 	bl	8000270 <__aeabi_uldivmod>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <UART_SetConfig+0x4e4>)
 8005564:	fba3 1302 	umull	r1, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2164      	movs	r1, #100	@ 0x64
 800556c:	fb01 f303 	mul.w	r3, r1, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	3332      	adds	r3, #50	@ 0x32
 8005576:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <UART_SetConfig+0x4e4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	f003 020f 	and.w	r2, r3, #15
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4422      	add	r2, r4
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005592:	46bd      	mov	sp, r7
 8005594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005598:	51eb851f 	.word	0x51eb851f

0800559c <rand>:
 800559c:	4b16      	ldr	r3, [pc, #88]	@ (80055f8 <rand+0x5c>)
 800559e:	b510      	push	{r4, lr}
 80055a0:	681c      	ldr	r4, [r3, #0]
 80055a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80055a4:	b9b3      	cbnz	r3, 80055d4 <rand+0x38>
 80055a6:	2018      	movs	r0, #24
 80055a8:	f000 fa62 	bl	8005a70 <malloc>
 80055ac:	4602      	mov	r2, r0
 80055ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80055b0:	b920      	cbnz	r0, 80055bc <rand+0x20>
 80055b2:	4b12      	ldr	r3, [pc, #72]	@ (80055fc <rand+0x60>)
 80055b4:	4812      	ldr	r0, [pc, #72]	@ (8005600 <rand+0x64>)
 80055b6:	2152      	movs	r1, #82	@ 0x52
 80055b8:	f000 f9f2 	bl	80059a0 <__assert_func>
 80055bc:	4911      	ldr	r1, [pc, #68]	@ (8005604 <rand+0x68>)
 80055be:	4b12      	ldr	r3, [pc, #72]	@ (8005608 <rand+0x6c>)
 80055c0:	e9c0 1300 	strd	r1, r3, [r0]
 80055c4:	4b11      	ldr	r3, [pc, #68]	@ (800560c <rand+0x70>)
 80055c6:	6083      	str	r3, [r0, #8]
 80055c8:	230b      	movs	r3, #11
 80055ca:	8183      	strh	r3, [r0, #12]
 80055cc:	2100      	movs	r1, #0
 80055ce:	2001      	movs	r0, #1
 80055d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80055d6:	480e      	ldr	r0, [pc, #56]	@ (8005610 <rand+0x74>)
 80055d8:	690b      	ldr	r3, [r1, #16]
 80055da:	694c      	ldr	r4, [r1, #20]
 80055dc:	4a0d      	ldr	r2, [pc, #52]	@ (8005614 <rand+0x78>)
 80055de:	4358      	muls	r0, r3
 80055e0:	fb02 0004 	mla	r0, r2, r4, r0
 80055e4:	fba3 3202 	umull	r3, r2, r3, r2
 80055e8:	3301      	adds	r3, #1
 80055ea:	eb40 0002 	adc.w	r0, r0, r2
 80055ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80055f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80055f6:	bd10      	pop	{r4, pc}
 80055f8:	20000020 	.word	0x20000020
 80055fc:	080069dc 	.word	0x080069dc
 8005600:	080069f3 	.word	0x080069f3
 8005604:	abcd330e 	.word	0xabcd330e
 8005608:	e66d1234 	.word	0xe66d1234
 800560c:	0005deec 	.word	0x0005deec
 8005610:	5851f42d 	.word	0x5851f42d
 8005614:	4c957f2d 	.word	0x4c957f2d

08005618 <std>:
 8005618:	2300      	movs	r3, #0
 800561a:	b510      	push	{r4, lr}
 800561c:	4604      	mov	r4, r0
 800561e:	e9c0 3300 	strd	r3, r3, [r0]
 8005622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005626:	6083      	str	r3, [r0, #8]
 8005628:	8181      	strh	r1, [r0, #12]
 800562a:	6643      	str	r3, [r0, #100]	@ 0x64
 800562c:	81c2      	strh	r2, [r0, #14]
 800562e:	6183      	str	r3, [r0, #24]
 8005630:	4619      	mov	r1, r3
 8005632:	2208      	movs	r2, #8
 8005634:	305c      	adds	r0, #92	@ 0x5c
 8005636:	f000 f928 	bl	800588a <memset>
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <std+0x58>)
 800563c:	6263      	str	r3, [r4, #36]	@ 0x24
 800563e:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <std+0x5c>)
 8005640:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <std+0x60>)
 8005644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x64>)
 8005648:	6323      	str	r3, [r4, #48]	@ 0x30
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x68>)
 800564c:	6224      	str	r4, [r4, #32]
 800564e:	429c      	cmp	r4, r3
 8005650:	d006      	beq.n	8005660 <std+0x48>
 8005652:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005656:	4294      	cmp	r4, r2
 8005658:	d002      	beq.n	8005660 <std+0x48>
 800565a:	33d0      	adds	r3, #208	@ 0xd0
 800565c:	429c      	cmp	r4, r3
 800565e:	d105      	bne.n	800566c <std+0x54>
 8005660:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f000 b988 	b.w	800597c <__retarget_lock_init_recursive>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	08005805 	.word	0x08005805
 8005674:	08005827 	.word	0x08005827
 8005678:	0800585f 	.word	0x0800585f
 800567c:	08005883 	.word	0x08005883
 8005680:	20012f00 	.word	0x20012f00

08005684 <stdio_exit_handler>:
 8005684:	4a02      	ldr	r2, [pc, #8]	@ (8005690 <stdio_exit_handler+0xc>)
 8005686:	4903      	ldr	r1, [pc, #12]	@ (8005694 <stdio_exit_handler+0x10>)
 8005688:	4803      	ldr	r0, [pc, #12]	@ (8005698 <stdio_exit_handler+0x14>)
 800568a:	f000 b869 	b.w	8005760 <_fwalk_sglue>
 800568e:	bf00      	nop
 8005690:	20000014 	.word	0x20000014
 8005694:	080062b1 	.word	0x080062b1
 8005698:	20000024 	.word	0x20000024

0800569c <cleanup_stdio>:
 800569c:	6841      	ldr	r1, [r0, #4]
 800569e:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <cleanup_stdio+0x34>)
 80056a0:	4299      	cmp	r1, r3
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	d001      	beq.n	80056ac <cleanup_stdio+0x10>
 80056a8:	f000 fe02 	bl	80062b0 <_fflush_r>
 80056ac:	68a1      	ldr	r1, [r4, #8]
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <cleanup_stdio+0x38>)
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <cleanup_stdio+0x1e>
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 fdfb 	bl	80062b0 <_fflush_r>
 80056ba:	68e1      	ldr	r1, [r4, #12]
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <cleanup_stdio+0x3c>)
 80056be:	4299      	cmp	r1, r3
 80056c0:	d004      	beq.n	80056cc <cleanup_stdio+0x30>
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f000 bdf2 	b.w	80062b0 <_fflush_r>
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	bf00      	nop
 80056d0:	20012f00 	.word	0x20012f00
 80056d4:	20012f68 	.word	0x20012f68
 80056d8:	20012fd0 	.word	0x20012fd0

080056dc <global_stdio_init.part.0>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <global_stdio_init.part.0+0x30>)
 80056e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005710 <global_stdio_init.part.0+0x34>)
 80056e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <global_stdio_init.part.0+0x38>)
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	4620      	mov	r0, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	2104      	movs	r1, #4
 80056ec:	f7ff ff94 	bl	8005618 <std>
 80056f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056f4:	2201      	movs	r2, #1
 80056f6:	2109      	movs	r1, #9
 80056f8:	f7ff ff8e 	bl	8005618 <std>
 80056fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005700:	2202      	movs	r2, #2
 8005702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005706:	2112      	movs	r1, #18
 8005708:	f7ff bf86 	b.w	8005618 <std>
 800570c:	20013038 	.word	0x20013038
 8005710:	20012f00 	.word	0x20012f00
 8005714:	08005685 	.word	0x08005685

08005718 <__sfp_lock_acquire>:
 8005718:	4801      	ldr	r0, [pc, #4]	@ (8005720 <__sfp_lock_acquire+0x8>)
 800571a:	f000 b930 	b.w	800597e <__retarget_lock_acquire_recursive>
 800571e:	bf00      	nop
 8005720:	20013041 	.word	0x20013041

08005724 <__sfp_lock_release>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__sfp_lock_release+0x8>)
 8005726:	f000 b92b 	b.w	8005980 <__retarget_lock_release_recursive>
 800572a:	bf00      	nop
 800572c:	20013041 	.word	0x20013041

08005730 <__sinit>:
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
 8005734:	f7ff fff0 	bl	8005718 <__sfp_lock_acquire>
 8005738:	6a23      	ldr	r3, [r4, #32]
 800573a:	b11b      	cbz	r3, 8005744 <__sinit+0x14>
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005740:	f7ff bff0 	b.w	8005724 <__sfp_lock_release>
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <__sinit+0x28>)
 8005746:	6223      	str	r3, [r4, #32]
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <__sinit+0x2c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f5      	bne.n	800573c <__sinit+0xc>
 8005750:	f7ff ffc4 	bl	80056dc <global_stdio_init.part.0>
 8005754:	e7f2      	b.n	800573c <__sinit+0xc>
 8005756:	bf00      	nop
 8005758:	0800569d 	.word	0x0800569d
 800575c:	20013038 	.word	0x20013038

08005760 <_fwalk_sglue>:
 8005760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005764:	4607      	mov	r7, r0
 8005766:	4688      	mov	r8, r1
 8005768:	4614      	mov	r4, r2
 800576a:	2600      	movs	r6, #0
 800576c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005770:	f1b9 0901 	subs.w	r9, r9, #1
 8005774:	d505      	bpl.n	8005782 <_fwalk_sglue+0x22>
 8005776:	6824      	ldr	r4, [r4, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d1f7      	bne.n	800576c <_fwalk_sglue+0xc>
 800577c:	4630      	mov	r0, r6
 800577e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d907      	bls.n	8005798 <_fwalk_sglue+0x38>
 8005788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800578c:	3301      	adds	r3, #1
 800578e:	d003      	beq.n	8005798 <_fwalk_sglue+0x38>
 8005790:	4629      	mov	r1, r5
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	4306      	orrs	r6, r0
 8005798:	3568      	adds	r5, #104	@ 0x68
 800579a:	e7e9      	b.n	8005770 <_fwalk_sglue+0x10>

0800579c <sniprintf>:
 800579c:	b40c      	push	{r2, r3}
 800579e:	b530      	push	{r4, r5, lr}
 80057a0:	4b17      	ldr	r3, [pc, #92]	@ (8005800 <sniprintf+0x64>)
 80057a2:	1e0c      	subs	r4, r1, #0
 80057a4:	681d      	ldr	r5, [r3, #0]
 80057a6:	b09d      	sub	sp, #116	@ 0x74
 80057a8:	da08      	bge.n	80057bc <sniprintf+0x20>
 80057aa:	238b      	movs	r3, #139	@ 0x8b
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	b01d      	add	sp, #116	@ 0x74
 80057b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057b8:	b002      	add	sp, #8
 80057ba:	4770      	bx	lr
 80057bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80057c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057c4:	bf14      	ite	ne
 80057c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057ca:	4623      	moveq	r3, r4
 80057cc:	9304      	str	r3, [sp, #16]
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057d4:	9002      	str	r0, [sp, #8]
 80057d6:	9006      	str	r0, [sp, #24]
 80057d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057de:	ab21      	add	r3, sp, #132	@ 0x84
 80057e0:	a902      	add	r1, sp, #8
 80057e2:	4628      	mov	r0, r5
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 fa55 	bl	8005c94 <_svfiprintf_r>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	bfbc      	itt	lt
 80057ee:	238b      	movlt	r3, #139	@ 0x8b
 80057f0:	602b      	strlt	r3, [r5, #0]
 80057f2:	2c00      	cmp	r4, #0
 80057f4:	d0dd      	beq.n	80057b2 <sniprintf+0x16>
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e7d9      	b.n	80057b2 <sniprintf+0x16>
 80057fe:	bf00      	nop
 8005800:	20000020 	.word	0x20000020

08005804 <__sread>:
 8005804:	b510      	push	{r4, lr}
 8005806:	460c      	mov	r4, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	f000 f868 	bl	80058e0 <_read_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	bfab      	itete	ge
 8005814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005816:	89a3      	ldrhlt	r3, [r4, #12]
 8005818:	181b      	addge	r3, r3, r0
 800581a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800581e:	bfac      	ite	ge
 8005820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005822:	81a3      	strhlt	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__swrite>:
 8005826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	461f      	mov	r7, r3
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	4616      	mov	r6, r2
 8005836:	d505      	bpl.n	8005844 <__swrite+0x1e>
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	2302      	movs	r3, #2
 800583e:	2200      	movs	r2, #0
 8005840:	f000 f83c 	bl	80058bc <_lseek_r>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800584a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	4628      	mov	r0, r5
 8005856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	f000 b853 	b.w	8005904 <_write_r>

0800585e <__sseek>:
 800585e:	b510      	push	{r4, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 f829 	bl	80058bc <_lseek_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	bf15      	itete	ne
 8005870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800587a:	81a3      	strheq	r3, [r4, #12]
 800587c:	bf18      	it	ne
 800587e:	81a3      	strhne	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__sclose>:
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 b809 	b.w	800589c <_close_r>

0800588a <memset>:
 800588a:	4402      	add	r2, r0
 800588c:	4603      	mov	r3, r0
 800588e:	4293      	cmp	r3, r2
 8005890:	d100      	bne.n	8005894 <memset+0xa>
 8005892:	4770      	bx	lr
 8005894:	f803 1b01 	strb.w	r1, [r3], #1
 8005898:	e7f9      	b.n	800588e <memset+0x4>
	...

0800589c <_close_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	@ (80058b8 <_close_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f7fd ff80 	bl	80037ac <_close>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_close_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_close_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	2001303c 	.word	0x2001303c

080058bc <_lseek_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d07      	ldr	r5, [pc, #28]	@ (80058dc <_lseek_r+0x20>)
 80058c0:	4604      	mov	r4, r0
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f7fd ff95 	bl	80037fa <_lseek>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_lseek_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_lseek_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	2001303c 	.word	0x2001303c

080058e0 <_read_r>:
 80058e0:	b538      	push	{r3, r4, r5, lr}
 80058e2:	4d07      	ldr	r5, [pc, #28]	@ (8005900 <_read_r+0x20>)
 80058e4:	4604      	mov	r4, r0
 80058e6:	4608      	mov	r0, r1
 80058e8:	4611      	mov	r1, r2
 80058ea:	2200      	movs	r2, #0
 80058ec:	602a      	str	r2, [r5, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f7fd ff23 	bl	800373a <_read>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	d102      	bne.n	80058fe <_read_r+0x1e>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	b103      	cbz	r3, 80058fe <_read_r+0x1e>
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
 8005900:	2001303c 	.word	0x2001303c

08005904 <_write_r>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4d07      	ldr	r5, [pc, #28]	@ (8005924 <_write_r+0x20>)
 8005908:	4604      	mov	r4, r0
 800590a:	4608      	mov	r0, r1
 800590c:	4611      	mov	r1, r2
 800590e:	2200      	movs	r2, #0
 8005910:	602a      	str	r2, [r5, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f7fd ff2e 	bl	8003774 <_write>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_write_r+0x1e>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_write_r+0x1e>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	2001303c 	.word	0x2001303c

08005928 <__errno>:
 8005928:	4b01      	ldr	r3, [pc, #4]	@ (8005930 <__errno+0x8>)
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	20000020 	.word	0x20000020

08005934 <__libc_init_array>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4d0d      	ldr	r5, [pc, #52]	@ (800596c <__libc_init_array+0x38>)
 8005938:	4c0d      	ldr	r4, [pc, #52]	@ (8005970 <__libc_init_array+0x3c>)
 800593a:	1b64      	subs	r4, r4, r5
 800593c:	10a4      	asrs	r4, r4, #2
 800593e:	2600      	movs	r6, #0
 8005940:	42a6      	cmp	r6, r4
 8005942:	d109      	bne.n	8005958 <__libc_init_array+0x24>
 8005944:	4d0b      	ldr	r5, [pc, #44]	@ (8005974 <__libc_init_array+0x40>)
 8005946:	4c0c      	ldr	r4, [pc, #48]	@ (8005978 <__libc_init_array+0x44>)
 8005948:	f000 fff0 	bl	800692c <_init>
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	2600      	movs	r6, #0
 8005952:	42a6      	cmp	r6, r4
 8005954:	d105      	bne.n	8005962 <__libc_init_array+0x2e>
 8005956:	bd70      	pop	{r4, r5, r6, pc}
 8005958:	f855 3b04 	ldr.w	r3, [r5], #4
 800595c:	4798      	blx	r3
 800595e:	3601      	adds	r6, #1
 8005960:	e7ee      	b.n	8005940 <__libc_init_array+0xc>
 8005962:	f855 3b04 	ldr.w	r3, [r5], #4
 8005966:	4798      	blx	r3
 8005968:	3601      	adds	r6, #1
 800596a:	e7f2      	b.n	8005952 <__libc_init_array+0x1e>
 800596c:	08006ac4 	.word	0x08006ac4
 8005970:	08006ac4 	.word	0x08006ac4
 8005974:	08006ac4 	.word	0x08006ac4
 8005978:	08006ac8 	.word	0x08006ac8

0800597c <__retarget_lock_init_recursive>:
 800597c:	4770      	bx	lr

0800597e <__retarget_lock_acquire_recursive>:
 800597e:	4770      	bx	lr

08005980 <__retarget_lock_release_recursive>:
 8005980:	4770      	bx	lr

08005982 <memcpy>:
 8005982:	440a      	add	r2, r1
 8005984:	4291      	cmp	r1, r2
 8005986:	f100 33ff 	add.w	r3, r0, #4294967295
 800598a:	d100      	bne.n	800598e <memcpy+0xc>
 800598c:	4770      	bx	lr
 800598e:	b510      	push	{r4, lr}
 8005990:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005994:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005998:	4291      	cmp	r1, r2
 800599a:	d1f9      	bne.n	8005990 <memcpy+0xe>
 800599c:	bd10      	pop	{r4, pc}
	...

080059a0 <__assert_func>:
 80059a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059a2:	4614      	mov	r4, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <__assert_func+0x2c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4605      	mov	r5, r0
 80059ac:	68d8      	ldr	r0, [r3, #12]
 80059ae:	b954      	cbnz	r4, 80059c6 <__assert_func+0x26>
 80059b0:	4b07      	ldr	r3, [pc, #28]	@ (80059d0 <__assert_func+0x30>)
 80059b2:	461c      	mov	r4, r3
 80059b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059b8:	9100      	str	r1, [sp, #0]
 80059ba:	462b      	mov	r3, r5
 80059bc:	4905      	ldr	r1, [pc, #20]	@ (80059d4 <__assert_func+0x34>)
 80059be:	f000 fc9f 	bl	8006300 <fiprintf>
 80059c2:	f000 fcd9 	bl	8006378 <abort>
 80059c6:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__assert_func+0x38>)
 80059c8:	e7f4      	b.n	80059b4 <__assert_func+0x14>
 80059ca:	bf00      	nop
 80059cc:	20000020 	.word	0x20000020
 80059d0:	08006a86 	.word	0x08006a86
 80059d4:	08006a58 	.word	0x08006a58
 80059d8:	08006a4b 	.word	0x08006a4b

080059dc <_free_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4605      	mov	r5, r0
 80059e0:	2900      	cmp	r1, #0
 80059e2:	d041      	beq.n	8005a68 <_free_r+0x8c>
 80059e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e8:	1f0c      	subs	r4, r1, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bfb8      	it	lt
 80059ee:	18e4      	addlt	r4, r4, r3
 80059f0:	f000 f8e8 	bl	8005bc4 <__malloc_lock>
 80059f4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a6c <_free_r+0x90>)
 80059f6:	6813      	ldr	r3, [r2, #0]
 80059f8:	b933      	cbnz	r3, 8005a08 <_free_r+0x2c>
 80059fa:	6063      	str	r3, [r4, #4]
 80059fc:	6014      	str	r4, [r2, #0]
 80059fe:	4628      	mov	r0, r5
 8005a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a04:	f000 b8e4 	b.w	8005bd0 <__malloc_unlock>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d908      	bls.n	8005a1e <_free_r+0x42>
 8005a0c:	6820      	ldr	r0, [r4, #0]
 8005a0e:	1821      	adds	r1, r4, r0
 8005a10:	428b      	cmp	r3, r1
 8005a12:	bf01      	itttt	eq
 8005a14:	6819      	ldreq	r1, [r3, #0]
 8005a16:	685b      	ldreq	r3, [r3, #4]
 8005a18:	1809      	addeq	r1, r1, r0
 8005a1a:	6021      	streq	r1, [r4, #0]
 8005a1c:	e7ed      	b.n	80059fa <_free_r+0x1e>
 8005a1e:	461a      	mov	r2, r3
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	b10b      	cbz	r3, 8005a28 <_free_r+0x4c>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d9fa      	bls.n	8005a1e <_free_r+0x42>
 8005a28:	6811      	ldr	r1, [r2, #0]
 8005a2a:	1850      	adds	r0, r2, r1
 8005a2c:	42a0      	cmp	r0, r4
 8005a2e:	d10b      	bne.n	8005a48 <_free_r+0x6c>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	4401      	add	r1, r0
 8005a34:	1850      	adds	r0, r2, r1
 8005a36:	4283      	cmp	r3, r0
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	d1e0      	bne.n	80059fe <_free_r+0x22>
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	6053      	str	r3, [r2, #4]
 8005a42:	4408      	add	r0, r1
 8005a44:	6010      	str	r0, [r2, #0]
 8005a46:	e7da      	b.n	80059fe <_free_r+0x22>
 8005a48:	d902      	bls.n	8005a50 <_free_r+0x74>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	e7d6      	b.n	80059fe <_free_r+0x22>
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	1821      	adds	r1, r4, r0
 8005a54:	428b      	cmp	r3, r1
 8005a56:	bf04      	itt	eq
 8005a58:	6819      	ldreq	r1, [r3, #0]
 8005a5a:	685b      	ldreq	r3, [r3, #4]
 8005a5c:	6063      	str	r3, [r4, #4]
 8005a5e:	bf04      	itt	eq
 8005a60:	1809      	addeq	r1, r1, r0
 8005a62:	6021      	streq	r1, [r4, #0]
 8005a64:	6054      	str	r4, [r2, #4]
 8005a66:	e7ca      	b.n	80059fe <_free_r+0x22>
 8005a68:	bd38      	pop	{r3, r4, r5, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20013048 	.word	0x20013048

08005a70 <malloc>:
 8005a70:	4b02      	ldr	r3, [pc, #8]	@ (8005a7c <malloc+0xc>)
 8005a72:	4601      	mov	r1, r0
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f000 b825 	b.w	8005ac4 <_malloc_r>
 8005a7a:	bf00      	nop
 8005a7c:	20000020 	.word	0x20000020

08005a80 <sbrk_aligned>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac0 <sbrk_aligned+0x40>)
 8005a84:	460c      	mov	r4, r1
 8005a86:	6831      	ldr	r1, [r6, #0]
 8005a88:	4605      	mov	r5, r0
 8005a8a:	b911      	cbnz	r1, 8005a92 <sbrk_aligned+0x12>
 8005a8c:	f000 fc64 	bl	8006358 <_sbrk_r>
 8005a90:	6030      	str	r0, [r6, #0]
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fc5f 	bl	8006358 <_sbrk_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d103      	bne.n	8005aa6 <sbrk_aligned+0x26>
 8005a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
 8005aa6:	1cc4      	adds	r4, r0, #3
 8005aa8:	f024 0403 	bic.w	r4, r4, #3
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d0f8      	beq.n	8005aa2 <sbrk_aligned+0x22>
 8005ab0:	1a21      	subs	r1, r4, r0
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f000 fc50 	bl	8006358 <_sbrk_r>
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d1f2      	bne.n	8005aa2 <sbrk_aligned+0x22>
 8005abc:	e7ef      	b.n	8005a9e <sbrk_aligned+0x1e>
 8005abe:	bf00      	nop
 8005ac0:	20013044 	.word	0x20013044

08005ac4 <_malloc_r>:
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	1ccd      	adds	r5, r1, #3
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	4606      	mov	r6, r0
 8005ada:	db01      	blt.n	8005ae0 <_malloc_r+0x1c>
 8005adc:	42a9      	cmp	r1, r5
 8005ade:	d904      	bls.n	8005aea <_malloc_r+0x26>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc0 <_malloc_r+0xfc>
 8005aee:	f000 f869 	bl	8005bc4 <__malloc_lock>
 8005af2:	f8d8 3000 	ldr.w	r3, [r8]
 8005af6:	461c      	mov	r4, r3
 8005af8:	bb44      	cbnz	r4, 8005b4c <_malloc_r+0x88>
 8005afa:	4629      	mov	r1, r5
 8005afc:	4630      	mov	r0, r6
 8005afe:	f7ff ffbf 	bl	8005a80 <sbrk_aligned>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	4604      	mov	r4, r0
 8005b06:	d158      	bne.n	8005bba <_malloc_r+0xf6>
 8005b08:	f8d8 4000 	ldr.w	r4, [r8]
 8005b0c:	4627      	mov	r7, r4
 8005b0e:	2f00      	cmp	r7, #0
 8005b10:	d143      	bne.n	8005b9a <_malloc_r+0xd6>
 8005b12:	2c00      	cmp	r4, #0
 8005b14:	d04b      	beq.n	8005bae <_malloc_r+0xea>
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	4639      	mov	r1, r7
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	eb04 0903 	add.w	r9, r4, r3
 8005b20:	f000 fc1a 	bl	8006358 <_sbrk_r>
 8005b24:	4581      	cmp	r9, r0
 8005b26:	d142      	bne.n	8005bae <_malloc_r+0xea>
 8005b28:	6821      	ldr	r1, [r4, #0]
 8005b2a:	1a6d      	subs	r5, r5, r1
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	4630      	mov	r0, r6
 8005b30:	f7ff ffa6 	bl	8005a80 <sbrk_aligned>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d03a      	beq.n	8005bae <_malloc_r+0xea>
 8005b38:	6823      	ldr	r3, [r4, #0]
 8005b3a:	442b      	add	r3, r5
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	bb62      	cbnz	r2, 8005ba0 <_malloc_r+0xdc>
 8005b46:	f8c8 7000 	str.w	r7, [r8]
 8005b4a:	e00f      	b.n	8005b6c <_malloc_r+0xa8>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	1b52      	subs	r2, r2, r5
 8005b50:	d420      	bmi.n	8005b94 <_malloc_r+0xd0>
 8005b52:	2a0b      	cmp	r2, #11
 8005b54:	d917      	bls.n	8005b86 <_malloc_r+0xc2>
 8005b56:	1961      	adds	r1, r4, r5
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	6025      	str	r5, [r4, #0]
 8005b5c:	bf18      	it	ne
 8005b5e:	6059      	strne	r1, [r3, #4]
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	bf08      	it	eq
 8005b64:	f8c8 1000 	streq.w	r1, [r8]
 8005b68:	5162      	str	r2, [r4, r5]
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f82f 	bl	8005bd0 <__malloc_unlock>
 8005b72:	f104 000b 	add.w	r0, r4, #11
 8005b76:	1d23      	adds	r3, r4, #4
 8005b78:	f020 0007 	bic.w	r0, r0, #7
 8005b7c:	1ac2      	subs	r2, r0, r3
 8005b7e:	bf1c      	itt	ne
 8005b80:	1a1b      	subne	r3, r3, r0
 8005b82:	50a3      	strne	r3, [r4, r2]
 8005b84:	e7af      	b.n	8005ae6 <_malloc_r+0x22>
 8005b86:	6862      	ldr	r2, [r4, #4]
 8005b88:	42a3      	cmp	r3, r4
 8005b8a:	bf0c      	ite	eq
 8005b8c:	f8c8 2000 	streq.w	r2, [r8]
 8005b90:	605a      	strne	r2, [r3, #4]
 8005b92:	e7eb      	b.n	8005b6c <_malloc_r+0xa8>
 8005b94:	4623      	mov	r3, r4
 8005b96:	6864      	ldr	r4, [r4, #4]
 8005b98:	e7ae      	b.n	8005af8 <_malloc_r+0x34>
 8005b9a:	463c      	mov	r4, r7
 8005b9c:	687f      	ldr	r7, [r7, #4]
 8005b9e:	e7b6      	b.n	8005b0e <_malloc_r+0x4a>
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	d1fb      	bne.n	8005ba0 <_malloc_r+0xdc>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6053      	str	r3, [r2, #4]
 8005bac:	e7de      	b.n	8005b6c <_malloc_r+0xa8>
 8005bae:	230c      	movs	r3, #12
 8005bb0:	6033      	str	r3, [r6, #0]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	f000 f80c 	bl	8005bd0 <__malloc_unlock>
 8005bb8:	e794      	b.n	8005ae4 <_malloc_r+0x20>
 8005bba:	6005      	str	r5, [r0, #0]
 8005bbc:	e7d6      	b.n	8005b6c <_malloc_r+0xa8>
 8005bbe:	bf00      	nop
 8005bc0:	20013048 	.word	0x20013048

08005bc4 <__malloc_lock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__malloc_lock+0x8>)
 8005bc6:	f7ff beda 	b.w	800597e <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20013040 	.word	0x20013040

08005bd0 <__malloc_unlock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	@ (8005bd8 <__malloc_unlock+0x8>)
 8005bd2:	f7ff bed5 	b.w	8005980 <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20013040 	.word	0x20013040

08005bdc <__ssputs_r>:
 8005bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	688e      	ldr	r6, [r1, #8]
 8005be2:	461f      	mov	r7, r3
 8005be4:	42be      	cmp	r6, r7
 8005be6:	680b      	ldr	r3, [r1, #0]
 8005be8:	4682      	mov	sl, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	4690      	mov	r8, r2
 8005bee:	d82d      	bhi.n	8005c4c <__ssputs_r+0x70>
 8005bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bf8:	d026      	beq.n	8005c48 <__ssputs_r+0x6c>
 8005bfa:	6965      	ldr	r5, [r4, #20]
 8005bfc:	6909      	ldr	r1, [r1, #16]
 8005bfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c02:	eba3 0901 	sub.w	r9, r3, r1
 8005c06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c0a:	1c7b      	adds	r3, r7, #1
 8005c0c:	444b      	add	r3, r9
 8005c0e:	106d      	asrs	r5, r5, #1
 8005c10:	429d      	cmp	r5, r3
 8005c12:	bf38      	it	cc
 8005c14:	461d      	movcc	r5, r3
 8005c16:	0553      	lsls	r3, r2, #21
 8005c18:	d527      	bpl.n	8005c6a <__ssputs_r+0x8e>
 8005c1a:	4629      	mov	r1, r5
 8005c1c:	f7ff ff52 	bl	8005ac4 <_malloc_r>
 8005c20:	4606      	mov	r6, r0
 8005c22:	b360      	cbz	r0, 8005c7e <__ssputs_r+0xa2>
 8005c24:	6921      	ldr	r1, [r4, #16]
 8005c26:	464a      	mov	r2, r9
 8005c28:	f7ff feab 	bl	8005982 <memcpy>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	6126      	str	r6, [r4, #16]
 8005c3a:	6165      	str	r5, [r4, #20]
 8005c3c:	444e      	add	r6, r9
 8005c3e:	eba5 0509 	sub.w	r5, r5, r9
 8005c42:	6026      	str	r6, [r4, #0]
 8005c44:	60a5      	str	r5, [r4, #8]
 8005c46:	463e      	mov	r6, r7
 8005c48:	42be      	cmp	r6, r7
 8005c4a:	d900      	bls.n	8005c4e <__ssputs_r+0x72>
 8005c4c:	463e      	mov	r6, r7
 8005c4e:	6820      	ldr	r0, [r4, #0]
 8005c50:	4632      	mov	r2, r6
 8005c52:	4641      	mov	r1, r8
 8005c54:	f000 fb66 	bl	8006324 <memmove>
 8005c58:	68a3      	ldr	r3, [r4, #8]
 8005c5a:	1b9b      	subs	r3, r3, r6
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	4433      	add	r3, r6
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	2000      	movs	r0, #0
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	f000 fb8b 	bl	8006386 <_realloc_r>
 8005c70:	4606      	mov	r6, r0
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d1e0      	bne.n	8005c38 <__ssputs_r+0x5c>
 8005c76:	6921      	ldr	r1, [r4, #16]
 8005c78:	4650      	mov	r0, sl
 8005c7a:	f7ff feaf 	bl	80059dc <_free_r>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	f8ca 3000 	str.w	r3, [sl]
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e7e9      	b.n	8005c66 <__ssputs_r+0x8a>
	...

08005c94 <_svfiprintf_r>:
 8005c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c98:	4698      	mov	r8, r3
 8005c9a:	898b      	ldrh	r3, [r1, #12]
 8005c9c:	061b      	lsls	r3, r3, #24
 8005c9e:	b09d      	sub	sp, #116	@ 0x74
 8005ca0:	4607      	mov	r7, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	d510      	bpl.n	8005cca <_svfiprintf_r+0x36>
 8005ca8:	690b      	ldr	r3, [r1, #16]
 8005caa:	b973      	cbnz	r3, 8005cca <_svfiprintf_r+0x36>
 8005cac:	2140      	movs	r1, #64	@ 0x40
 8005cae:	f7ff ff09 	bl	8005ac4 <_malloc_r>
 8005cb2:	6028      	str	r0, [r5, #0]
 8005cb4:	6128      	str	r0, [r5, #16]
 8005cb6:	b930      	cbnz	r0, 8005cc6 <_svfiprintf_r+0x32>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc0:	b01d      	add	sp, #116	@ 0x74
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	2340      	movs	r3, #64	@ 0x40
 8005cc8:	616b      	str	r3, [r5, #20]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cce:	2320      	movs	r3, #32
 8005cd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cd8:	2330      	movs	r3, #48	@ 0x30
 8005cda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e78 <_svfiprintf_r+0x1e4>
 8005cde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ce2:	f04f 0901 	mov.w	r9, #1
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	469a      	mov	sl, r3
 8005cea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cee:	b10a      	cbz	r2, 8005cf4 <_svfiprintf_r+0x60>
 8005cf0:	2a25      	cmp	r2, #37	@ 0x25
 8005cf2:	d1f9      	bne.n	8005ce8 <_svfiprintf_r+0x54>
 8005cf4:	ebba 0b04 	subs.w	fp, sl, r4
 8005cf8:	d00b      	beq.n	8005d12 <_svfiprintf_r+0x7e>
 8005cfa:	465b      	mov	r3, fp
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	4629      	mov	r1, r5
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ff6b 	bl	8005bdc <__ssputs_r>
 8005d06:	3001      	adds	r0, #1
 8005d08:	f000 80a7 	beq.w	8005e5a <_svfiprintf_r+0x1c6>
 8005d0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d0e:	445a      	add	r2, fp
 8005d10:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d12:	f89a 3000 	ldrb.w	r3, [sl]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 809f 	beq.w	8005e5a <_svfiprintf_r+0x1c6>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d26:	f10a 0a01 	add.w	sl, sl, #1
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	9307      	str	r3, [sp, #28]
 8005d2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d32:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d34:	4654      	mov	r4, sl
 8005d36:	2205      	movs	r2, #5
 8005d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d3c:	484e      	ldr	r0, [pc, #312]	@ (8005e78 <_svfiprintf_r+0x1e4>)
 8005d3e:	f7fa fa47 	bl	80001d0 <memchr>
 8005d42:	9a04      	ldr	r2, [sp, #16]
 8005d44:	b9d8      	cbnz	r0, 8005d7e <_svfiprintf_r+0xea>
 8005d46:	06d0      	lsls	r0, r2, #27
 8005d48:	bf44      	itt	mi
 8005d4a:	2320      	movmi	r3, #32
 8005d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d50:	0711      	lsls	r1, r2, #28
 8005d52:	bf44      	itt	mi
 8005d54:	232b      	movmi	r3, #43	@ 0x2b
 8005d56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d60:	d015      	beq.n	8005d8e <_svfiprintf_r+0xfa>
 8005d62:	9a07      	ldr	r2, [sp, #28]
 8005d64:	4654      	mov	r4, sl
 8005d66:	2000      	movs	r0, #0
 8005d68:	f04f 0c0a 	mov.w	ip, #10
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d72:	3b30      	subs	r3, #48	@ 0x30
 8005d74:	2b09      	cmp	r3, #9
 8005d76:	d94b      	bls.n	8005e10 <_svfiprintf_r+0x17c>
 8005d78:	b1b0      	cbz	r0, 8005da8 <_svfiprintf_r+0x114>
 8005d7a:	9207      	str	r2, [sp, #28]
 8005d7c:	e014      	b.n	8005da8 <_svfiprintf_r+0x114>
 8005d7e:	eba0 0308 	sub.w	r3, r0, r8
 8005d82:	fa09 f303 	lsl.w	r3, r9, r3
 8005d86:	4313      	orrs	r3, r2
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	46a2      	mov	sl, r4
 8005d8c:	e7d2      	b.n	8005d34 <_svfiprintf_r+0xa0>
 8005d8e:	9b03      	ldr	r3, [sp, #12]
 8005d90:	1d19      	adds	r1, r3, #4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	9103      	str	r1, [sp, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bfbb      	ittet	lt
 8005d9a:	425b      	neglt	r3, r3
 8005d9c:	f042 0202 	orrlt.w	r2, r2, #2
 8005da0:	9307      	strge	r3, [sp, #28]
 8005da2:	9307      	strlt	r3, [sp, #28]
 8005da4:	bfb8      	it	lt
 8005da6:	9204      	strlt	r2, [sp, #16]
 8005da8:	7823      	ldrb	r3, [r4, #0]
 8005daa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dac:	d10a      	bne.n	8005dc4 <_svfiprintf_r+0x130>
 8005dae:	7863      	ldrb	r3, [r4, #1]
 8005db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db2:	d132      	bne.n	8005e1a <_svfiprintf_r+0x186>
 8005db4:	9b03      	ldr	r3, [sp, #12]
 8005db6:	1d1a      	adds	r2, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	9203      	str	r2, [sp, #12]
 8005dbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dc0:	3402      	adds	r4, #2
 8005dc2:	9305      	str	r3, [sp, #20]
 8005dc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e88 <_svfiprintf_r+0x1f4>
 8005dc8:	7821      	ldrb	r1, [r4, #0]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	4650      	mov	r0, sl
 8005dce:	f7fa f9ff 	bl	80001d0 <memchr>
 8005dd2:	b138      	cbz	r0, 8005de4 <_svfiprintf_r+0x150>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	eba0 000a 	sub.w	r0, r0, sl
 8005dda:	2240      	movs	r2, #64	@ 0x40
 8005ddc:	4082      	lsls	r2, r0
 8005dde:	4313      	orrs	r3, r2
 8005de0:	3401      	adds	r4, #1
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005de8:	4824      	ldr	r0, [pc, #144]	@ (8005e7c <_svfiprintf_r+0x1e8>)
 8005dea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dee:	2206      	movs	r2, #6
 8005df0:	f7fa f9ee 	bl	80001d0 <memchr>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d036      	beq.n	8005e66 <_svfiprintf_r+0x1d2>
 8005df8:	4b21      	ldr	r3, [pc, #132]	@ (8005e80 <_svfiprintf_r+0x1ec>)
 8005dfa:	bb1b      	cbnz	r3, 8005e44 <_svfiprintf_r+0x1b0>
 8005dfc:	9b03      	ldr	r3, [sp, #12]
 8005dfe:	3307      	adds	r3, #7
 8005e00:	f023 0307 	bic.w	r3, r3, #7
 8005e04:	3308      	adds	r3, #8
 8005e06:	9303      	str	r3, [sp, #12]
 8005e08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0a:	4433      	add	r3, r6
 8005e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e0e:	e76a      	b.n	8005ce6 <_svfiprintf_r+0x52>
 8005e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e14:	460c      	mov	r4, r1
 8005e16:	2001      	movs	r0, #1
 8005e18:	e7a8      	b.n	8005d6c <_svfiprintf_r+0xd8>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	3401      	adds	r4, #1
 8005e1e:	9305      	str	r3, [sp, #20]
 8005e20:	4619      	mov	r1, r3
 8005e22:	f04f 0c0a 	mov.w	ip, #10
 8005e26:	4620      	mov	r0, r4
 8005e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e2c:	3a30      	subs	r2, #48	@ 0x30
 8005e2e:	2a09      	cmp	r2, #9
 8005e30:	d903      	bls.n	8005e3a <_svfiprintf_r+0x1a6>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0c6      	beq.n	8005dc4 <_svfiprintf_r+0x130>
 8005e36:	9105      	str	r1, [sp, #20]
 8005e38:	e7c4      	b.n	8005dc4 <_svfiprintf_r+0x130>
 8005e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e3e:	4604      	mov	r4, r0
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7f0      	b.n	8005e26 <_svfiprintf_r+0x192>
 8005e44:	ab03      	add	r3, sp, #12
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	462a      	mov	r2, r5
 8005e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e84 <_svfiprintf_r+0x1f0>)
 8005e4c:	a904      	add	r1, sp, #16
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f3af 8000 	nop.w
 8005e54:	1c42      	adds	r2, r0, #1
 8005e56:	4606      	mov	r6, r0
 8005e58:	d1d6      	bne.n	8005e08 <_svfiprintf_r+0x174>
 8005e5a:	89ab      	ldrh	r3, [r5, #12]
 8005e5c:	065b      	lsls	r3, r3, #25
 8005e5e:	f53f af2d 	bmi.w	8005cbc <_svfiprintf_r+0x28>
 8005e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e64:	e72c      	b.n	8005cc0 <_svfiprintf_r+0x2c>
 8005e66:	ab03      	add	r3, sp, #12
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	462a      	mov	r2, r5
 8005e6c:	4b05      	ldr	r3, [pc, #20]	@ (8005e84 <_svfiprintf_r+0x1f0>)
 8005e6e:	a904      	add	r1, sp, #16
 8005e70:	4638      	mov	r0, r7
 8005e72:	f000 f879 	bl	8005f68 <_printf_i>
 8005e76:	e7ed      	b.n	8005e54 <_svfiprintf_r+0x1c0>
 8005e78:	08006a87 	.word	0x08006a87
 8005e7c:	08006a91 	.word	0x08006a91
 8005e80:	00000000 	.word	0x00000000
 8005e84:	08005bdd 	.word	0x08005bdd
 8005e88:	08006a8d 	.word	0x08006a8d

08005e8c <_printf_common>:
 8005e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e90:	4616      	mov	r6, r2
 8005e92:	4698      	mov	r8, r3
 8005e94:	688a      	ldr	r2, [r1, #8]
 8005e96:	690b      	ldr	r3, [r1, #16]
 8005e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	bfb8      	it	lt
 8005ea0:	4613      	movlt	r3, r2
 8005ea2:	6033      	str	r3, [r6, #0]
 8005ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	b10a      	cbz	r2, 8005eb2 <_printf_common+0x26>
 8005eae:	3301      	adds	r3, #1
 8005eb0:	6033      	str	r3, [r6, #0]
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	0699      	lsls	r1, r3, #26
 8005eb6:	bf42      	ittt	mi
 8005eb8:	6833      	ldrmi	r3, [r6, #0]
 8005eba:	3302      	addmi	r3, #2
 8005ebc:	6033      	strmi	r3, [r6, #0]
 8005ebe:	6825      	ldr	r5, [r4, #0]
 8005ec0:	f015 0506 	ands.w	r5, r5, #6
 8005ec4:	d106      	bne.n	8005ed4 <_printf_common+0x48>
 8005ec6:	f104 0a19 	add.w	sl, r4, #25
 8005eca:	68e3      	ldr	r3, [r4, #12]
 8005ecc:	6832      	ldr	r2, [r6, #0]
 8005ece:	1a9b      	subs	r3, r3, r2
 8005ed0:	42ab      	cmp	r3, r5
 8005ed2:	dc26      	bgt.n	8005f22 <_printf_common+0x96>
 8005ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	3b00      	subs	r3, #0
 8005edc:	bf18      	it	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	0692      	lsls	r2, r2, #26
 8005ee2:	d42b      	bmi.n	8005f3c <_printf_common+0xb0>
 8005ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ee8:	4641      	mov	r1, r8
 8005eea:	4638      	mov	r0, r7
 8005eec:	47c8      	blx	r9
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d01e      	beq.n	8005f30 <_printf_common+0xa4>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	6922      	ldr	r2, [r4, #16]
 8005ef6:	f003 0306 	and.w	r3, r3, #6
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	bf02      	ittt	eq
 8005efe:	68e5      	ldreq	r5, [r4, #12]
 8005f00:	6833      	ldreq	r3, [r6, #0]
 8005f02:	1aed      	subeq	r5, r5, r3
 8005f04:	68a3      	ldr	r3, [r4, #8]
 8005f06:	bf0c      	ite	eq
 8005f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f0c:	2500      	movne	r5, #0
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	bfc4      	itt	gt
 8005f12:	1a9b      	subgt	r3, r3, r2
 8005f14:	18ed      	addgt	r5, r5, r3
 8005f16:	2600      	movs	r6, #0
 8005f18:	341a      	adds	r4, #26
 8005f1a:	42b5      	cmp	r5, r6
 8005f1c:	d11a      	bne.n	8005f54 <_printf_common+0xc8>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e008      	b.n	8005f34 <_printf_common+0xa8>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4652      	mov	r2, sl
 8005f26:	4641      	mov	r1, r8
 8005f28:	4638      	mov	r0, r7
 8005f2a:	47c8      	blx	r9
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	d103      	bne.n	8005f38 <_printf_common+0xac>
 8005f30:	f04f 30ff 	mov.w	r0, #4294967295
 8005f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f38:	3501      	adds	r5, #1
 8005f3a:	e7c6      	b.n	8005eca <_printf_common+0x3e>
 8005f3c:	18e1      	adds	r1, r4, r3
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	2030      	movs	r0, #48	@ 0x30
 8005f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f46:	4422      	add	r2, r4
 8005f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f50:	3302      	adds	r3, #2
 8005f52:	e7c7      	b.n	8005ee4 <_printf_common+0x58>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4622      	mov	r2, r4
 8005f58:	4641      	mov	r1, r8
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c8      	blx	r9
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d0e6      	beq.n	8005f30 <_printf_common+0xa4>
 8005f62:	3601      	adds	r6, #1
 8005f64:	e7d9      	b.n	8005f1a <_printf_common+0x8e>
	...

08005f68 <_printf_i>:
 8005f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6c:	7e0f      	ldrb	r7, [r1, #24]
 8005f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f70:	2f78      	cmp	r7, #120	@ 0x78
 8005f72:	4691      	mov	r9, r2
 8005f74:	4680      	mov	r8, r0
 8005f76:	460c      	mov	r4, r1
 8005f78:	469a      	mov	sl, r3
 8005f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f7e:	d807      	bhi.n	8005f90 <_printf_i+0x28>
 8005f80:	2f62      	cmp	r7, #98	@ 0x62
 8005f82:	d80a      	bhi.n	8005f9a <_printf_i+0x32>
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	f000 80d2 	beq.w	800612e <_printf_i+0x1c6>
 8005f8a:	2f58      	cmp	r7, #88	@ 0x58
 8005f8c:	f000 80b9 	beq.w	8006102 <_printf_i+0x19a>
 8005f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f98:	e03a      	b.n	8006010 <_printf_i+0xa8>
 8005f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f9e:	2b15      	cmp	r3, #21
 8005fa0:	d8f6      	bhi.n	8005f90 <_printf_i+0x28>
 8005fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8005fa8 <_printf_i+0x40>)
 8005fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08005f91 	.word	0x08005f91
 8005fb4:	08005f91 	.word	0x08005f91
 8005fb8:	08005f91 	.word	0x08005f91
 8005fbc:	08005f91 	.word	0x08005f91
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08005f91 	.word	0x08005f91
 8005fc8:	08005f91 	.word	0x08005f91
 8005fcc:	08005f91 	.word	0x08005f91
 8005fd0:	08005f91 	.word	0x08005f91
 8005fd4:	08006115 	.word	0x08006115
 8005fd8:	0800603f 	.word	0x0800603f
 8005fdc:	080060cf 	.word	0x080060cf
 8005fe0:	08005f91 	.word	0x08005f91
 8005fe4:	08005f91 	.word	0x08005f91
 8005fe8:	08006137 	.word	0x08006137
 8005fec:	08005f91 	.word	0x08005f91
 8005ff0:	0800603f 	.word	0x0800603f
 8005ff4:	08005f91 	.word	0x08005f91
 8005ff8:	08005f91 	.word	0x08005f91
 8005ffc:	080060d7 	.word	0x080060d7
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	1d1a      	adds	r2, r3, #4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6032      	str	r2, [r6, #0]
 8006008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800600c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006010:	2301      	movs	r3, #1
 8006012:	e09d      	b.n	8006150 <_printf_i+0x1e8>
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	6820      	ldr	r0, [r4, #0]
 8006018:	1d19      	adds	r1, r3, #4
 800601a:	6031      	str	r1, [r6, #0]
 800601c:	0606      	lsls	r6, r0, #24
 800601e:	d501      	bpl.n	8006024 <_printf_i+0xbc>
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	e003      	b.n	800602c <_printf_i+0xc4>
 8006024:	0645      	lsls	r5, r0, #25
 8006026:	d5fb      	bpl.n	8006020 <_printf_i+0xb8>
 8006028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800602c:	2d00      	cmp	r5, #0
 800602e:	da03      	bge.n	8006038 <_printf_i+0xd0>
 8006030:	232d      	movs	r3, #45	@ 0x2d
 8006032:	426d      	negs	r5, r5
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006038:	4859      	ldr	r0, [pc, #356]	@ (80061a0 <_printf_i+0x238>)
 800603a:	230a      	movs	r3, #10
 800603c:	e011      	b.n	8006062 <_printf_i+0xfa>
 800603e:	6821      	ldr	r1, [r4, #0]
 8006040:	6833      	ldr	r3, [r6, #0]
 8006042:	0608      	lsls	r0, r1, #24
 8006044:	f853 5b04 	ldr.w	r5, [r3], #4
 8006048:	d402      	bmi.n	8006050 <_printf_i+0xe8>
 800604a:	0649      	lsls	r1, r1, #25
 800604c:	bf48      	it	mi
 800604e:	b2ad      	uxthmi	r5, r5
 8006050:	2f6f      	cmp	r7, #111	@ 0x6f
 8006052:	4853      	ldr	r0, [pc, #332]	@ (80061a0 <_printf_i+0x238>)
 8006054:	6033      	str	r3, [r6, #0]
 8006056:	bf14      	ite	ne
 8006058:	230a      	movne	r3, #10
 800605a:	2308      	moveq	r3, #8
 800605c:	2100      	movs	r1, #0
 800605e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006062:	6866      	ldr	r6, [r4, #4]
 8006064:	60a6      	str	r6, [r4, #8]
 8006066:	2e00      	cmp	r6, #0
 8006068:	bfa2      	ittt	ge
 800606a:	6821      	ldrge	r1, [r4, #0]
 800606c:	f021 0104 	bicge.w	r1, r1, #4
 8006070:	6021      	strge	r1, [r4, #0]
 8006072:	b90d      	cbnz	r5, 8006078 <_printf_i+0x110>
 8006074:	2e00      	cmp	r6, #0
 8006076:	d04b      	beq.n	8006110 <_printf_i+0x1a8>
 8006078:	4616      	mov	r6, r2
 800607a:	fbb5 f1f3 	udiv	r1, r5, r3
 800607e:	fb03 5711 	mls	r7, r3, r1, r5
 8006082:	5dc7      	ldrb	r7, [r0, r7]
 8006084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006088:	462f      	mov	r7, r5
 800608a:	42bb      	cmp	r3, r7
 800608c:	460d      	mov	r5, r1
 800608e:	d9f4      	bls.n	800607a <_printf_i+0x112>
 8006090:	2b08      	cmp	r3, #8
 8006092:	d10b      	bne.n	80060ac <_printf_i+0x144>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07df      	lsls	r7, r3, #31
 8006098:	d508      	bpl.n	80060ac <_printf_i+0x144>
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	6861      	ldr	r1, [r4, #4]
 800609e:	4299      	cmp	r1, r3
 80060a0:	bfde      	ittt	le
 80060a2:	2330      	movle	r3, #48	@ 0x30
 80060a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060ac:	1b92      	subs	r2, r2, r6
 80060ae:	6122      	str	r2, [r4, #16]
 80060b0:	f8cd a000 	str.w	sl, [sp]
 80060b4:	464b      	mov	r3, r9
 80060b6:	aa03      	add	r2, sp, #12
 80060b8:	4621      	mov	r1, r4
 80060ba:	4640      	mov	r0, r8
 80060bc:	f7ff fee6 	bl	8005e8c <_printf_common>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d14a      	bne.n	800615a <_printf_i+0x1f2>
 80060c4:	f04f 30ff 	mov.w	r0, #4294967295
 80060c8:	b004      	add	sp, #16
 80060ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	f043 0320 	orr.w	r3, r3, #32
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	4833      	ldr	r0, [pc, #204]	@ (80061a4 <_printf_i+0x23c>)
 80060d8:	2778      	movs	r7, #120	@ 0x78
 80060da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	6831      	ldr	r1, [r6, #0]
 80060e2:	061f      	lsls	r7, r3, #24
 80060e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80060e8:	d402      	bmi.n	80060f0 <_printf_i+0x188>
 80060ea:	065f      	lsls	r7, r3, #25
 80060ec:	bf48      	it	mi
 80060ee:	b2ad      	uxthmi	r5, r5
 80060f0:	6031      	str	r1, [r6, #0]
 80060f2:	07d9      	lsls	r1, r3, #31
 80060f4:	bf44      	itt	mi
 80060f6:	f043 0320 	orrmi.w	r3, r3, #32
 80060fa:	6023      	strmi	r3, [r4, #0]
 80060fc:	b11d      	cbz	r5, 8006106 <_printf_i+0x19e>
 80060fe:	2310      	movs	r3, #16
 8006100:	e7ac      	b.n	800605c <_printf_i+0xf4>
 8006102:	4827      	ldr	r0, [pc, #156]	@ (80061a0 <_printf_i+0x238>)
 8006104:	e7e9      	b.n	80060da <_printf_i+0x172>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	f023 0320 	bic.w	r3, r3, #32
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	e7f6      	b.n	80060fe <_printf_i+0x196>
 8006110:	4616      	mov	r6, r2
 8006112:	e7bd      	b.n	8006090 <_printf_i+0x128>
 8006114:	6833      	ldr	r3, [r6, #0]
 8006116:	6825      	ldr	r5, [r4, #0]
 8006118:	6961      	ldr	r1, [r4, #20]
 800611a:	1d18      	adds	r0, r3, #4
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	062e      	lsls	r6, r5, #24
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	d501      	bpl.n	8006128 <_printf_i+0x1c0>
 8006124:	6019      	str	r1, [r3, #0]
 8006126:	e002      	b.n	800612e <_printf_i+0x1c6>
 8006128:	0668      	lsls	r0, r5, #25
 800612a:	d5fb      	bpl.n	8006124 <_printf_i+0x1bc>
 800612c:	8019      	strh	r1, [r3, #0]
 800612e:	2300      	movs	r3, #0
 8006130:	6123      	str	r3, [r4, #16]
 8006132:	4616      	mov	r6, r2
 8006134:	e7bc      	b.n	80060b0 <_printf_i+0x148>
 8006136:	6833      	ldr	r3, [r6, #0]
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	6032      	str	r2, [r6, #0]
 800613c:	681e      	ldr	r6, [r3, #0]
 800613e:	6862      	ldr	r2, [r4, #4]
 8006140:	2100      	movs	r1, #0
 8006142:	4630      	mov	r0, r6
 8006144:	f7fa f844 	bl	80001d0 <memchr>
 8006148:	b108      	cbz	r0, 800614e <_printf_i+0x1e6>
 800614a:	1b80      	subs	r0, r0, r6
 800614c:	6060      	str	r0, [r4, #4]
 800614e:	6863      	ldr	r3, [r4, #4]
 8006150:	6123      	str	r3, [r4, #16]
 8006152:	2300      	movs	r3, #0
 8006154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006158:	e7aa      	b.n	80060b0 <_printf_i+0x148>
 800615a:	6923      	ldr	r3, [r4, #16]
 800615c:	4632      	mov	r2, r6
 800615e:	4649      	mov	r1, r9
 8006160:	4640      	mov	r0, r8
 8006162:	47d0      	blx	sl
 8006164:	3001      	adds	r0, #1
 8006166:	d0ad      	beq.n	80060c4 <_printf_i+0x15c>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	079b      	lsls	r3, r3, #30
 800616c:	d413      	bmi.n	8006196 <_printf_i+0x22e>
 800616e:	68e0      	ldr	r0, [r4, #12]
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	4298      	cmp	r0, r3
 8006174:	bfb8      	it	lt
 8006176:	4618      	movlt	r0, r3
 8006178:	e7a6      	b.n	80060c8 <_printf_i+0x160>
 800617a:	2301      	movs	r3, #1
 800617c:	4632      	mov	r2, r6
 800617e:	4649      	mov	r1, r9
 8006180:	4640      	mov	r0, r8
 8006182:	47d0      	blx	sl
 8006184:	3001      	adds	r0, #1
 8006186:	d09d      	beq.n	80060c4 <_printf_i+0x15c>
 8006188:	3501      	adds	r5, #1
 800618a:	68e3      	ldr	r3, [r4, #12]
 800618c:	9903      	ldr	r1, [sp, #12]
 800618e:	1a5b      	subs	r3, r3, r1
 8006190:	42ab      	cmp	r3, r5
 8006192:	dcf2      	bgt.n	800617a <_printf_i+0x212>
 8006194:	e7eb      	b.n	800616e <_printf_i+0x206>
 8006196:	2500      	movs	r5, #0
 8006198:	f104 0619 	add.w	r6, r4, #25
 800619c:	e7f5      	b.n	800618a <_printf_i+0x222>
 800619e:	bf00      	nop
 80061a0:	08006a98 	.word	0x08006a98
 80061a4:	08006aa9 	.word	0x08006aa9

080061a8 <__sflush_r>:
 80061a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b0:	0716      	lsls	r6, r2, #28
 80061b2:	4605      	mov	r5, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	d454      	bmi.n	8006262 <__sflush_r+0xba>
 80061b8:	684b      	ldr	r3, [r1, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc02      	bgt.n	80061c4 <__sflush_r+0x1c>
 80061be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dd48      	ble.n	8006256 <__sflush_r+0xae>
 80061c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d045      	beq.n	8006256 <__sflush_r+0xae>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061d0:	682f      	ldr	r7, [r5, #0]
 80061d2:	6a21      	ldr	r1, [r4, #32]
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	d030      	beq.n	800623a <__sflush_r+0x92>
 80061d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	0759      	lsls	r1, r3, #29
 80061de:	d505      	bpl.n	80061ec <__sflush_r+0x44>
 80061e0:	6863      	ldr	r3, [r4, #4]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061e6:	b10b      	cbz	r3, 80061ec <__sflush_r+0x44>
 80061e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	2300      	movs	r3, #0
 80061ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061f0:	6a21      	ldr	r1, [r4, #32]
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b0      	blx	r6
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	d106      	bne.n	800620a <__sflush_r+0x62>
 80061fc:	6829      	ldr	r1, [r5, #0]
 80061fe:	291d      	cmp	r1, #29
 8006200:	d82b      	bhi.n	800625a <__sflush_r+0xb2>
 8006202:	4a2a      	ldr	r2, [pc, #168]	@ (80062ac <__sflush_r+0x104>)
 8006204:	410a      	asrs	r2, r1
 8006206:	07d6      	lsls	r6, r2, #31
 8006208:	d427      	bmi.n	800625a <__sflush_r+0xb2>
 800620a:	2200      	movs	r2, #0
 800620c:	6062      	str	r2, [r4, #4]
 800620e:	04d9      	lsls	r1, r3, #19
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	d504      	bpl.n	8006220 <__sflush_r+0x78>
 8006216:	1c42      	adds	r2, r0, #1
 8006218:	d101      	bne.n	800621e <__sflush_r+0x76>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b903      	cbnz	r3, 8006220 <__sflush_r+0x78>
 800621e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006222:	602f      	str	r7, [r5, #0]
 8006224:	b1b9      	cbz	r1, 8006256 <__sflush_r+0xae>
 8006226:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800622a:	4299      	cmp	r1, r3
 800622c:	d002      	beq.n	8006234 <__sflush_r+0x8c>
 800622e:	4628      	mov	r0, r5
 8006230:	f7ff fbd4 	bl	80059dc <_free_r>
 8006234:	2300      	movs	r3, #0
 8006236:	6363      	str	r3, [r4, #52]	@ 0x34
 8006238:	e00d      	b.n	8006256 <__sflush_r+0xae>
 800623a:	2301      	movs	r3, #1
 800623c:	4628      	mov	r0, r5
 800623e:	47b0      	blx	r6
 8006240:	4602      	mov	r2, r0
 8006242:	1c50      	adds	r0, r2, #1
 8006244:	d1c9      	bne.n	80061da <__sflush_r+0x32>
 8006246:	682b      	ldr	r3, [r5, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0c6      	beq.n	80061da <__sflush_r+0x32>
 800624c:	2b1d      	cmp	r3, #29
 800624e:	d001      	beq.n	8006254 <__sflush_r+0xac>
 8006250:	2b16      	cmp	r3, #22
 8006252:	d11e      	bne.n	8006292 <__sflush_r+0xea>
 8006254:	602f      	str	r7, [r5, #0]
 8006256:	2000      	movs	r0, #0
 8006258:	e022      	b.n	80062a0 <__sflush_r+0xf8>
 800625a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800625e:	b21b      	sxth	r3, r3
 8006260:	e01b      	b.n	800629a <__sflush_r+0xf2>
 8006262:	690f      	ldr	r7, [r1, #16]
 8006264:	2f00      	cmp	r7, #0
 8006266:	d0f6      	beq.n	8006256 <__sflush_r+0xae>
 8006268:	0793      	lsls	r3, r2, #30
 800626a:	680e      	ldr	r6, [r1, #0]
 800626c:	bf08      	it	eq
 800626e:	694b      	ldreq	r3, [r1, #20]
 8006270:	600f      	str	r7, [r1, #0]
 8006272:	bf18      	it	ne
 8006274:	2300      	movne	r3, #0
 8006276:	eba6 0807 	sub.w	r8, r6, r7
 800627a:	608b      	str	r3, [r1, #8]
 800627c:	f1b8 0f00 	cmp.w	r8, #0
 8006280:	dde9      	ble.n	8006256 <__sflush_r+0xae>
 8006282:	6a21      	ldr	r1, [r4, #32]
 8006284:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006286:	4643      	mov	r3, r8
 8006288:	463a      	mov	r2, r7
 800628a:	4628      	mov	r0, r5
 800628c:	47b0      	blx	r6
 800628e:	2800      	cmp	r0, #0
 8006290:	dc08      	bgt.n	80062a4 <__sflush_r+0xfc>
 8006292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	4407      	add	r7, r0
 80062a6:	eba8 0800 	sub.w	r8, r8, r0
 80062aa:	e7e7      	b.n	800627c <__sflush_r+0xd4>
 80062ac:	dfbffffe 	.word	0xdfbffffe

080062b0 <_fflush_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	690b      	ldr	r3, [r1, #16]
 80062b4:	4605      	mov	r5, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	b913      	cbnz	r3, 80062c0 <_fflush_r+0x10>
 80062ba:	2500      	movs	r5, #0
 80062bc:	4628      	mov	r0, r5
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	b118      	cbz	r0, 80062ca <_fflush_r+0x1a>
 80062c2:	6a03      	ldr	r3, [r0, #32]
 80062c4:	b90b      	cbnz	r3, 80062ca <_fflush_r+0x1a>
 80062c6:	f7ff fa33 	bl	8005730 <__sinit>
 80062ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f3      	beq.n	80062ba <_fflush_r+0xa>
 80062d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062d4:	07d0      	lsls	r0, r2, #31
 80062d6:	d404      	bmi.n	80062e2 <_fflush_r+0x32>
 80062d8:	0599      	lsls	r1, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_fflush_r+0x32>
 80062dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062de:	f7ff fb4e 	bl	800597e <__retarget_lock_acquire_recursive>
 80062e2:	4628      	mov	r0, r5
 80062e4:	4621      	mov	r1, r4
 80062e6:	f7ff ff5f 	bl	80061a8 <__sflush_r>
 80062ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062ec:	07da      	lsls	r2, r3, #31
 80062ee:	4605      	mov	r5, r0
 80062f0:	d4e4      	bmi.n	80062bc <_fflush_r+0xc>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	059b      	lsls	r3, r3, #22
 80062f6:	d4e1      	bmi.n	80062bc <_fflush_r+0xc>
 80062f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062fa:	f7ff fb41 	bl	8005980 <__retarget_lock_release_recursive>
 80062fe:	e7dd      	b.n	80062bc <_fflush_r+0xc>

08006300 <fiprintf>:
 8006300:	b40e      	push	{r1, r2, r3}
 8006302:	b503      	push	{r0, r1, lr}
 8006304:	4601      	mov	r1, r0
 8006306:	ab03      	add	r3, sp, #12
 8006308:	4805      	ldr	r0, [pc, #20]	@ (8006320 <fiprintf+0x20>)
 800630a:	f853 2b04 	ldr.w	r2, [r3], #4
 800630e:	6800      	ldr	r0, [r0, #0]
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	f000 f88f 	bl	8006434 <_vfiprintf_r>
 8006316:	b002      	add	sp, #8
 8006318:	f85d eb04 	ldr.w	lr, [sp], #4
 800631c:	b003      	add	sp, #12
 800631e:	4770      	bx	lr
 8006320:	20000020 	.word	0x20000020

08006324 <memmove>:
 8006324:	4288      	cmp	r0, r1
 8006326:	b510      	push	{r4, lr}
 8006328:	eb01 0402 	add.w	r4, r1, r2
 800632c:	d902      	bls.n	8006334 <memmove+0x10>
 800632e:	4284      	cmp	r4, r0
 8006330:	4623      	mov	r3, r4
 8006332:	d807      	bhi.n	8006344 <memmove+0x20>
 8006334:	1e43      	subs	r3, r0, #1
 8006336:	42a1      	cmp	r1, r4
 8006338:	d008      	beq.n	800634c <memmove+0x28>
 800633a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006342:	e7f8      	b.n	8006336 <memmove+0x12>
 8006344:	4402      	add	r2, r0
 8006346:	4601      	mov	r1, r0
 8006348:	428a      	cmp	r2, r1
 800634a:	d100      	bne.n	800634e <memmove+0x2a>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006356:	e7f7      	b.n	8006348 <memmove+0x24>

08006358 <_sbrk_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4d06      	ldr	r5, [pc, #24]	@ (8006374 <_sbrk_r+0x1c>)
 800635c:	2300      	movs	r3, #0
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fd fa56 	bl	8003814 <_sbrk>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_sbrk_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_sbrk_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	2001303c 	.word	0x2001303c

08006378 <abort>:
 8006378:	b508      	push	{r3, lr}
 800637a:	2006      	movs	r0, #6
 800637c:	f000 fa2e 	bl	80067dc <raise>
 8006380:	2001      	movs	r0, #1
 8006382:	f7fd f9cf 	bl	8003724 <_exit>

08006386 <_realloc_r>:
 8006386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800638a:	4680      	mov	r8, r0
 800638c:	4615      	mov	r5, r2
 800638e:	460c      	mov	r4, r1
 8006390:	b921      	cbnz	r1, 800639c <_realloc_r+0x16>
 8006392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006396:	4611      	mov	r1, r2
 8006398:	f7ff bb94 	b.w	8005ac4 <_malloc_r>
 800639c:	b92a      	cbnz	r2, 80063aa <_realloc_r+0x24>
 800639e:	f7ff fb1d 	bl	80059dc <_free_r>
 80063a2:	2400      	movs	r4, #0
 80063a4:	4620      	mov	r0, r4
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063aa:	f000 fa33 	bl	8006814 <_malloc_usable_size_r>
 80063ae:	4285      	cmp	r5, r0
 80063b0:	4606      	mov	r6, r0
 80063b2:	d802      	bhi.n	80063ba <_realloc_r+0x34>
 80063b4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063b8:	d8f4      	bhi.n	80063a4 <_realloc_r+0x1e>
 80063ba:	4629      	mov	r1, r5
 80063bc:	4640      	mov	r0, r8
 80063be:	f7ff fb81 	bl	8005ac4 <_malloc_r>
 80063c2:	4607      	mov	r7, r0
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d0ec      	beq.n	80063a2 <_realloc_r+0x1c>
 80063c8:	42b5      	cmp	r5, r6
 80063ca:	462a      	mov	r2, r5
 80063cc:	4621      	mov	r1, r4
 80063ce:	bf28      	it	cs
 80063d0:	4632      	movcs	r2, r6
 80063d2:	f7ff fad6 	bl	8005982 <memcpy>
 80063d6:	4621      	mov	r1, r4
 80063d8:	4640      	mov	r0, r8
 80063da:	f7ff faff 	bl	80059dc <_free_r>
 80063de:	463c      	mov	r4, r7
 80063e0:	e7e0      	b.n	80063a4 <_realloc_r+0x1e>

080063e2 <__sfputc_r>:
 80063e2:	6893      	ldr	r3, [r2, #8]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	b410      	push	{r4}
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	da08      	bge.n	8006400 <__sfputc_r+0x1e>
 80063ee:	6994      	ldr	r4, [r2, #24]
 80063f0:	42a3      	cmp	r3, r4
 80063f2:	db01      	blt.n	80063f8 <__sfputc_r+0x16>
 80063f4:	290a      	cmp	r1, #10
 80063f6:	d103      	bne.n	8006400 <__sfputc_r+0x1e>
 80063f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063fc:	f000 b932 	b.w	8006664 <__swbuf_r>
 8006400:	6813      	ldr	r3, [r2, #0]
 8006402:	1c58      	adds	r0, r3, #1
 8006404:	6010      	str	r0, [r2, #0]
 8006406:	7019      	strb	r1, [r3, #0]
 8006408:	4608      	mov	r0, r1
 800640a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800640e:	4770      	bx	lr

08006410 <__sfputs_r>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	4614      	mov	r4, r2
 8006418:	18d5      	adds	r5, r2, r3
 800641a:	42ac      	cmp	r4, r5
 800641c:	d101      	bne.n	8006422 <__sfputs_r+0x12>
 800641e:	2000      	movs	r0, #0
 8006420:	e007      	b.n	8006432 <__sfputs_r+0x22>
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	463a      	mov	r2, r7
 8006428:	4630      	mov	r0, r6
 800642a:	f7ff ffda 	bl	80063e2 <__sfputc_r>
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d1f3      	bne.n	800641a <__sfputs_r+0xa>
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006434 <_vfiprintf_r>:
 8006434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006438:	460d      	mov	r5, r1
 800643a:	b09d      	sub	sp, #116	@ 0x74
 800643c:	4614      	mov	r4, r2
 800643e:	4698      	mov	r8, r3
 8006440:	4606      	mov	r6, r0
 8006442:	b118      	cbz	r0, 800644c <_vfiprintf_r+0x18>
 8006444:	6a03      	ldr	r3, [r0, #32]
 8006446:	b90b      	cbnz	r3, 800644c <_vfiprintf_r+0x18>
 8006448:	f7ff f972 	bl	8005730 <__sinit>
 800644c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800644e:	07d9      	lsls	r1, r3, #31
 8006450:	d405      	bmi.n	800645e <_vfiprintf_r+0x2a>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	059a      	lsls	r2, r3, #22
 8006456:	d402      	bmi.n	800645e <_vfiprintf_r+0x2a>
 8006458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800645a:	f7ff fa90 	bl	800597e <__retarget_lock_acquire_recursive>
 800645e:	89ab      	ldrh	r3, [r5, #12]
 8006460:	071b      	lsls	r3, r3, #28
 8006462:	d501      	bpl.n	8006468 <_vfiprintf_r+0x34>
 8006464:	692b      	ldr	r3, [r5, #16]
 8006466:	b99b      	cbnz	r3, 8006490 <_vfiprintf_r+0x5c>
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f000 f938 	bl	80066e0 <__swsetup_r>
 8006470:	b170      	cbz	r0, 8006490 <_vfiprintf_r+0x5c>
 8006472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006474:	07dc      	lsls	r4, r3, #31
 8006476:	d504      	bpl.n	8006482 <_vfiprintf_r+0x4e>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	b01d      	add	sp, #116	@ 0x74
 800647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	0598      	lsls	r0, r3, #22
 8006486:	d4f7      	bmi.n	8006478 <_vfiprintf_r+0x44>
 8006488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800648a:	f7ff fa79 	bl	8005980 <__retarget_lock_release_recursive>
 800648e:	e7f3      	b.n	8006478 <_vfiprintf_r+0x44>
 8006490:	2300      	movs	r3, #0
 8006492:	9309      	str	r3, [sp, #36]	@ 0x24
 8006494:	2320      	movs	r3, #32
 8006496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800649a:	f8cd 800c 	str.w	r8, [sp, #12]
 800649e:	2330      	movs	r3, #48	@ 0x30
 80064a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006650 <_vfiprintf_r+0x21c>
 80064a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064a8:	f04f 0901 	mov.w	r9, #1
 80064ac:	4623      	mov	r3, r4
 80064ae:	469a      	mov	sl, r3
 80064b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b4:	b10a      	cbz	r2, 80064ba <_vfiprintf_r+0x86>
 80064b6:	2a25      	cmp	r2, #37	@ 0x25
 80064b8:	d1f9      	bne.n	80064ae <_vfiprintf_r+0x7a>
 80064ba:	ebba 0b04 	subs.w	fp, sl, r4
 80064be:	d00b      	beq.n	80064d8 <_vfiprintf_r+0xa4>
 80064c0:	465b      	mov	r3, fp
 80064c2:	4622      	mov	r2, r4
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7ff ffa2 	bl	8006410 <__sfputs_r>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f000 80a7 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064d4:	445a      	add	r2, fp
 80064d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80064d8:	f89a 3000 	ldrb.w	r3, [sl]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 809f 	beq.w	8006620 <_vfiprintf_r+0x1ec>
 80064e2:	2300      	movs	r3, #0
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ec:	f10a 0a01 	add.w	sl, sl, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80064fa:	4654      	mov	r4, sl
 80064fc:	2205      	movs	r2, #5
 80064fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006502:	4853      	ldr	r0, [pc, #332]	@ (8006650 <_vfiprintf_r+0x21c>)
 8006504:	f7f9 fe64 	bl	80001d0 <memchr>
 8006508:	9a04      	ldr	r2, [sp, #16]
 800650a:	b9d8      	cbnz	r0, 8006544 <_vfiprintf_r+0x110>
 800650c:	06d1      	lsls	r1, r2, #27
 800650e:	bf44      	itt	mi
 8006510:	2320      	movmi	r3, #32
 8006512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006516:	0713      	lsls	r3, r2, #28
 8006518:	bf44      	itt	mi
 800651a:	232b      	movmi	r3, #43	@ 0x2b
 800651c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006520:	f89a 3000 	ldrb.w	r3, [sl]
 8006524:	2b2a      	cmp	r3, #42	@ 0x2a
 8006526:	d015      	beq.n	8006554 <_vfiprintf_r+0x120>
 8006528:	9a07      	ldr	r2, [sp, #28]
 800652a:	4654      	mov	r4, sl
 800652c:	2000      	movs	r0, #0
 800652e:	f04f 0c0a 	mov.w	ip, #10
 8006532:	4621      	mov	r1, r4
 8006534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006538:	3b30      	subs	r3, #48	@ 0x30
 800653a:	2b09      	cmp	r3, #9
 800653c:	d94b      	bls.n	80065d6 <_vfiprintf_r+0x1a2>
 800653e:	b1b0      	cbz	r0, 800656e <_vfiprintf_r+0x13a>
 8006540:	9207      	str	r2, [sp, #28]
 8006542:	e014      	b.n	800656e <_vfiprintf_r+0x13a>
 8006544:	eba0 0308 	sub.w	r3, r0, r8
 8006548:	fa09 f303 	lsl.w	r3, r9, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	46a2      	mov	sl, r4
 8006552:	e7d2      	b.n	80064fa <_vfiprintf_r+0xc6>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	9103      	str	r1, [sp, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfbb      	ittet	lt
 8006560:	425b      	neglt	r3, r3
 8006562:	f042 0202 	orrlt.w	r2, r2, #2
 8006566:	9307      	strge	r3, [sp, #28]
 8006568:	9307      	strlt	r3, [sp, #28]
 800656a:	bfb8      	it	lt
 800656c:	9204      	strlt	r2, [sp, #16]
 800656e:	7823      	ldrb	r3, [r4, #0]
 8006570:	2b2e      	cmp	r3, #46	@ 0x2e
 8006572:	d10a      	bne.n	800658a <_vfiprintf_r+0x156>
 8006574:	7863      	ldrb	r3, [r4, #1]
 8006576:	2b2a      	cmp	r3, #42	@ 0x2a
 8006578:	d132      	bne.n	80065e0 <_vfiprintf_r+0x1ac>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006586:	3402      	adds	r4, #2
 8006588:	9305      	str	r3, [sp, #20]
 800658a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006660 <_vfiprintf_r+0x22c>
 800658e:	7821      	ldrb	r1, [r4, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	4650      	mov	r0, sl
 8006594:	f7f9 fe1c 	bl	80001d0 <memchr>
 8006598:	b138      	cbz	r0, 80065aa <_vfiprintf_r+0x176>
 800659a:	9b04      	ldr	r3, [sp, #16]
 800659c:	eba0 000a 	sub.w	r0, r0, sl
 80065a0:	2240      	movs	r2, #64	@ 0x40
 80065a2:	4082      	lsls	r2, r0
 80065a4:	4313      	orrs	r3, r2
 80065a6:	3401      	adds	r4, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ae:	4829      	ldr	r0, [pc, #164]	@ (8006654 <_vfiprintf_r+0x220>)
 80065b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065b4:	2206      	movs	r2, #6
 80065b6:	f7f9 fe0b 	bl	80001d0 <memchr>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d03f      	beq.n	800663e <_vfiprintf_r+0x20a>
 80065be:	4b26      	ldr	r3, [pc, #152]	@ (8006658 <_vfiprintf_r+0x224>)
 80065c0:	bb1b      	cbnz	r3, 800660a <_vfiprintf_r+0x1d6>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	3307      	adds	r3, #7
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	3308      	adds	r3, #8
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d0:	443b      	add	r3, r7
 80065d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d4:	e76a      	b.n	80064ac <_vfiprintf_r+0x78>
 80065d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065da:	460c      	mov	r4, r1
 80065dc:	2001      	movs	r0, #1
 80065de:	e7a8      	b.n	8006532 <_vfiprintf_r+0xfe>
 80065e0:	2300      	movs	r3, #0
 80065e2:	3401      	adds	r4, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4620      	mov	r0, r4
 80065ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f2:	3a30      	subs	r2, #48	@ 0x30
 80065f4:	2a09      	cmp	r2, #9
 80065f6:	d903      	bls.n	8006600 <_vfiprintf_r+0x1cc>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0c6      	beq.n	800658a <_vfiprintf_r+0x156>
 80065fc:	9105      	str	r1, [sp, #20]
 80065fe:	e7c4      	b.n	800658a <_vfiprintf_r+0x156>
 8006600:	fb0c 2101 	mla	r1, ip, r1, r2
 8006604:	4604      	mov	r4, r0
 8006606:	2301      	movs	r3, #1
 8006608:	e7f0      	b.n	80065ec <_vfiprintf_r+0x1b8>
 800660a:	ab03      	add	r3, sp, #12
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	462a      	mov	r2, r5
 8006610:	4b12      	ldr	r3, [pc, #72]	@ (800665c <_vfiprintf_r+0x228>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	4630      	mov	r0, r6
 8006616:	f3af 8000 	nop.w
 800661a:	4607      	mov	r7, r0
 800661c:	1c78      	adds	r0, r7, #1
 800661e:	d1d6      	bne.n	80065ce <_vfiprintf_r+0x19a>
 8006620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006622:	07d9      	lsls	r1, r3, #31
 8006624:	d405      	bmi.n	8006632 <_vfiprintf_r+0x1fe>
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	059a      	lsls	r2, r3, #22
 800662a:	d402      	bmi.n	8006632 <_vfiprintf_r+0x1fe>
 800662c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800662e:	f7ff f9a7 	bl	8005980 <__retarget_lock_release_recursive>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	065b      	lsls	r3, r3, #25
 8006636:	f53f af1f 	bmi.w	8006478 <_vfiprintf_r+0x44>
 800663a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800663c:	e71e      	b.n	800647c <_vfiprintf_r+0x48>
 800663e:	ab03      	add	r3, sp, #12
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	462a      	mov	r2, r5
 8006644:	4b05      	ldr	r3, [pc, #20]	@ (800665c <_vfiprintf_r+0x228>)
 8006646:	a904      	add	r1, sp, #16
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff fc8d 	bl	8005f68 <_printf_i>
 800664e:	e7e4      	b.n	800661a <_vfiprintf_r+0x1e6>
 8006650:	08006a87 	.word	0x08006a87
 8006654:	08006a91 	.word	0x08006a91
 8006658:	00000000 	.word	0x00000000
 800665c:	08006411 	.word	0x08006411
 8006660:	08006a8d 	.word	0x08006a8d

08006664 <__swbuf_r>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	460e      	mov	r6, r1
 8006668:	4614      	mov	r4, r2
 800666a:	4605      	mov	r5, r0
 800666c:	b118      	cbz	r0, 8006676 <__swbuf_r+0x12>
 800666e:	6a03      	ldr	r3, [r0, #32]
 8006670:	b90b      	cbnz	r3, 8006676 <__swbuf_r+0x12>
 8006672:	f7ff f85d 	bl	8005730 <__sinit>
 8006676:	69a3      	ldr	r3, [r4, #24]
 8006678:	60a3      	str	r3, [r4, #8]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	071a      	lsls	r2, r3, #28
 800667e:	d501      	bpl.n	8006684 <__swbuf_r+0x20>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	b943      	cbnz	r3, 8006696 <__swbuf_r+0x32>
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f82a 	bl	80066e0 <__swsetup_r>
 800668c:	b118      	cbz	r0, 8006696 <__swbuf_r+0x32>
 800668e:	f04f 37ff 	mov.w	r7, #4294967295
 8006692:	4638      	mov	r0, r7
 8006694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	6922      	ldr	r2, [r4, #16]
 800669a:	1a98      	subs	r0, r3, r2
 800669c:	6963      	ldr	r3, [r4, #20]
 800669e:	b2f6      	uxtb	r6, r6
 80066a0:	4283      	cmp	r3, r0
 80066a2:	4637      	mov	r7, r6
 80066a4:	dc05      	bgt.n	80066b2 <__swbuf_r+0x4e>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f7ff fe01 	bl	80062b0 <_fflush_r>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d1ed      	bne.n	800668e <__swbuf_r+0x2a>
 80066b2:	68a3      	ldr	r3, [r4, #8]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	60a3      	str	r3, [r4, #8]
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	6022      	str	r2, [r4, #0]
 80066be:	701e      	strb	r6, [r3, #0]
 80066c0:	6962      	ldr	r2, [r4, #20]
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d004      	beq.n	80066d2 <__swbuf_r+0x6e>
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	07db      	lsls	r3, r3, #31
 80066cc:	d5e1      	bpl.n	8006692 <__swbuf_r+0x2e>
 80066ce:	2e0a      	cmp	r6, #10
 80066d0:	d1df      	bne.n	8006692 <__swbuf_r+0x2e>
 80066d2:	4621      	mov	r1, r4
 80066d4:	4628      	mov	r0, r5
 80066d6:	f7ff fdeb 	bl	80062b0 <_fflush_r>
 80066da:	2800      	cmp	r0, #0
 80066dc:	d0d9      	beq.n	8006692 <__swbuf_r+0x2e>
 80066de:	e7d6      	b.n	800668e <__swbuf_r+0x2a>

080066e0 <__swsetup_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	4b29      	ldr	r3, [pc, #164]	@ (8006788 <__swsetup_r+0xa8>)
 80066e4:	4605      	mov	r5, r0
 80066e6:	6818      	ldr	r0, [r3, #0]
 80066e8:	460c      	mov	r4, r1
 80066ea:	b118      	cbz	r0, 80066f4 <__swsetup_r+0x14>
 80066ec:	6a03      	ldr	r3, [r0, #32]
 80066ee:	b90b      	cbnz	r3, 80066f4 <__swsetup_r+0x14>
 80066f0:	f7ff f81e 	bl	8005730 <__sinit>
 80066f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f8:	0719      	lsls	r1, r3, #28
 80066fa:	d422      	bmi.n	8006742 <__swsetup_r+0x62>
 80066fc:	06da      	lsls	r2, r3, #27
 80066fe:	d407      	bmi.n	8006710 <__swsetup_r+0x30>
 8006700:	2209      	movs	r2, #9
 8006702:	602a      	str	r2, [r5, #0]
 8006704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	f04f 30ff 	mov.w	r0, #4294967295
 800670e:	e033      	b.n	8006778 <__swsetup_r+0x98>
 8006710:	0758      	lsls	r0, r3, #29
 8006712:	d512      	bpl.n	800673a <__swsetup_r+0x5a>
 8006714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006716:	b141      	cbz	r1, 800672a <__swsetup_r+0x4a>
 8006718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800671c:	4299      	cmp	r1, r3
 800671e:	d002      	beq.n	8006726 <__swsetup_r+0x46>
 8006720:	4628      	mov	r0, r5
 8006722:	f7ff f95b 	bl	80059dc <_free_r>
 8006726:	2300      	movs	r3, #0
 8006728:	6363      	str	r3, [r4, #52]	@ 0x34
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	2300      	movs	r3, #0
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	6923      	ldr	r3, [r4, #16]
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	89a3      	ldrh	r3, [r4, #12]
 800673c:	f043 0308 	orr.w	r3, r3, #8
 8006740:	81a3      	strh	r3, [r4, #12]
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	b94b      	cbnz	r3, 800675a <__swsetup_r+0x7a>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800674c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006750:	d003      	beq.n	800675a <__swsetup_r+0x7a>
 8006752:	4621      	mov	r1, r4
 8006754:	4628      	mov	r0, r5
 8006756:	f000 f88b 	bl	8006870 <__smakebuf_r>
 800675a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800675e:	f013 0201 	ands.w	r2, r3, #1
 8006762:	d00a      	beq.n	800677a <__swsetup_r+0x9a>
 8006764:	2200      	movs	r2, #0
 8006766:	60a2      	str	r2, [r4, #8]
 8006768:	6962      	ldr	r2, [r4, #20]
 800676a:	4252      	negs	r2, r2
 800676c:	61a2      	str	r2, [r4, #24]
 800676e:	6922      	ldr	r2, [r4, #16]
 8006770:	b942      	cbnz	r2, 8006784 <__swsetup_r+0xa4>
 8006772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006776:	d1c5      	bne.n	8006704 <__swsetup_r+0x24>
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	0799      	lsls	r1, r3, #30
 800677c:	bf58      	it	pl
 800677e:	6962      	ldrpl	r2, [r4, #20]
 8006780:	60a2      	str	r2, [r4, #8]
 8006782:	e7f4      	b.n	800676e <__swsetup_r+0x8e>
 8006784:	2000      	movs	r0, #0
 8006786:	e7f7      	b.n	8006778 <__swsetup_r+0x98>
 8006788:	20000020 	.word	0x20000020

0800678c <_raise_r>:
 800678c:	291f      	cmp	r1, #31
 800678e:	b538      	push	{r3, r4, r5, lr}
 8006790:	4605      	mov	r5, r0
 8006792:	460c      	mov	r4, r1
 8006794:	d904      	bls.n	80067a0 <_raise_r+0x14>
 8006796:	2316      	movs	r3, #22
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	f04f 30ff 	mov.w	r0, #4294967295
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80067a2:	b112      	cbz	r2, 80067aa <_raise_r+0x1e>
 80067a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067a8:	b94b      	cbnz	r3, 80067be <_raise_r+0x32>
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f830 	bl	8006810 <_getpid_r>
 80067b0:	4622      	mov	r2, r4
 80067b2:	4601      	mov	r1, r0
 80067b4:	4628      	mov	r0, r5
 80067b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067ba:	f000 b817 	b.w	80067ec <_kill_r>
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d00a      	beq.n	80067d8 <_raise_r+0x4c>
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	d103      	bne.n	80067ce <_raise_r+0x42>
 80067c6:	2316      	movs	r3, #22
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	2001      	movs	r0, #1
 80067cc:	e7e7      	b.n	800679e <_raise_r+0x12>
 80067ce:	2100      	movs	r1, #0
 80067d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80067d4:	4620      	mov	r0, r4
 80067d6:	4798      	blx	r3
 80067d8:	2000      	movs	r0, #0
 80067da:	e7e0      	b.n	800679e <_raise_r+0x12>

080067dc <raise>:
 80067dc:	4b02      	ldr	r3, [pc, #8]	@ (80067e8 <raise+0xc>)
 80067de:	4601      	mov	r1, r0
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	f7ff bfd3 	b.w	800678c <_raise_r>
 80067e6:	bf00      	nop
 80067e8:	20000020 	.word	0x20000020

080067ec <_kill_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d07      	ldr	r5, [pc, #28]	@ (800680c <_kill_r+0x20>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	f7fc ff83 	bl	8003704 <_kill>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d102      	bne.n	8006808 <_kill_r+0x1c>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	b103      	cbz	r3, 8006808 <_kill_r+0x1c>
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	bd38      	pop	{r3, r4, r5, pc}
 800680a:	bf00      	nop
 800680c:	2001303c 	.word	0x2001303c

08006810 <_getpid_r>:
 8006810:	f7fc bf70 	b.w	80036f4 <_getpid>

08006814 <_malloc_usable_size_r>:
 8006814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006818:	1f18      	subs	r0, r3, #4
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfbc      	itt	lt
 800681e:	580b      	ldrlt	r3, [r1, r0]
 8006820:	18c0      	addlt	r0, r0, r3
 8006822:	4770      	bx	lr

08006824 <__swhatbuf_r>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	460c      	mov	r4, r1
 8006828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800682c:	2900      	cmp	r1, #0
 800682e:	b096      	sub	sp, #88	@ 0x58
 8006830:	4615      	mov	r5, r2
 8006832:	461e      	mov	r6, r3
 8006834:	da0d      	bge.n	8006852 <__swhatbuf_r+0x2e>
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	bf14      	ite	ne
 8006842:	2340      	movne	r3, #64	@ 0x40
 8006844:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006848:	2000      	movs	r0, #0
 800684a:	6031      	str	r1, [r6, #0]
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	b016      	add	sp, #88	@ 0x58
 8006850:	bd70      	pop	{r4, r5, r6, pc}
 8006852:	466a      	mov	r2, sp
 8006854:	f000 f848 	bl	80068e8 <_fstat_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	dbec      	blt.n	8006836 <__swhatbuf_r+0x12>
 800685c:	9901      	ldr	r1, [sp, #4]
 800685e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006862:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006866:	4259      	negs	r1, r3
 8006868:	4159      	adcs	r1, r3
 800686a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800686e:	e7eb      	b.n	8006848 <__swhatbuf_r+0x24>

08006870 <__smakebuf_r>:
 8006870:	898b      	ldrh	r3, [r1, #12]
 8006872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006874:	079d      	lsls	r5, r3, #30
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	d507      	bpl.n	800688c <__smakebuf_r+0x1c>
 800687c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	2301      	movs	r3, #1
 8006886:	6163      	str	r3, [r4, #20]
 8006888:	b003      	add	sp, #12
 800688a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688c:	ab01      	add	r3, sp, #4
 800688e:	466a      	mov	r2, sp
 8006890:	f7ff ffc8 	bl	8006824 <__swhatbuf_r>
 8006894:	9f00      	ldr	r7, [sp, #0]
 8006896:	4605      	mov	r5, r0
 8006898:	4639      	mov	r1, r7
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff f912 	bl	8005ac4 <_malloc_r>
 80068a0:	b948      	cbnz	r0, 80068b6 <__smakebuf_r+0x46>
 80068a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a6:	059a      	lsls	r2, r3, #22
 80068a8:	d4ee      	bmi.n	8006888 <__smakebuf_r+0x18>
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	f043 0302 	orr.w	r3, r3, #2
 80068b2:	81a3      	strh	r3, [r4, #12]
 80068b4:	e7e2      	b.n	800687c <__smakebuf_r+0xc>
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	6020      	str	r0, [r4, #0]
 80068ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068c6:	b15b      	cbz	r3, 80068e0 <__smakebuf_r+0x70>
 80068c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 f81d 	bl	800690c <_isatty_r>
 80068d2:	b128      	cbz	r0, 80068e0 <__smakebuf_r+0x70>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f023 0303 	bic.w	r3, r3, #3
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	431d      	orrs	r5, r3
 80068e4:	81a5      	strh	r5, [r4, #12]
 80068e6:	e7cf      	b.n	8006888 <__smakebuf_r+0x18>

080068e8 <_fstat_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d07      	ldr	r5, [pc, #28]	@ (8006908 <_fstat_r+0x20>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	f7fc ff65 	bl	80037c4 <_fstat>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	d102      	bne.n	8006904 <_fstat_r+0x1c>
 80068fe:	682b      	ldr	r3, [r5, #0]
 8006900:	b103      	cbz	r3, 8006904 <_fstat_r+0x1c>
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	bd38      	pop	{r3, r4, r5, pc}
 8006906:	bf00      	nop
 8006908:	2001303c 	.word	0x2001303c

0800690c <_isatty_r>:
 800690c:	b538      	push	{r3, r4, r5, lr}
 800690e:	4d06      	ldr	r5, [pc, #24]	@ (8006928 <_isatty_r+0x1c>)
 8006910:	2300      	movs	r3, #0
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	f7fc ff64 	bl	80037e4 <_isatty>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_isatty_r+0x1a>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_isatty_r+0x1a>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	2001303c 	.word	0x2001303c

0800692c <_init>:
 800692c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692e:	bf00      	nop
 8006930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006932:	bc08      	pop	{r3}
 8006934:	469e      	mov	lr, r3
 8006936:	4770      	bx	lr

08006938 <_fini>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr
