
App_024_Example_7.4_Send_Receive_Queue_Within_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00007388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800638c  0800638c  0000738c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006390  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00012fb4  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013028  20013028  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a7c  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b61  00000000  00000000  0001ab20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0001d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d90  00000000  00000000  0001e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020838  00000000  00000000  0001f570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145b2  00000000  00000000  0003fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da7ae  00000000  00000000  0005435a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012eb08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004db8  00000000  00000000  0012eb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  00133904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800623c 	.word	0x0800623c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800623c 	.word	0x0800623c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d103      	bne.n	80005da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00c      	b.n	80005f4 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3308      	adds	r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <vListInsert+0x2e>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d2f6      	bcs.n	80005e2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05d      	beq.n	8000772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d059      	beq.n	8000772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c6:	2100      	movs	r1, #0
 80006c8:	fba3 2302 	umull	r2, r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <xQueueGenericReset+0x52>
 80006d0:	2101      	movs	r1, #1
 80006d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006d8:	f002 fad4 	bl	8002c84 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006e8:	fb01 f303 	mul.w	r3, r1, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2200      	movs	r2, #0
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	3b01      	subs	r3, #1
 800070a:	6939      	ldr	r1, [r7, #16]
 800070c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01a      	beq.n	800076c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3310      	adds	r3, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fb1a 	bl	8001d74 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <xQueueGenericReset+0x120>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	e009      	b.n	800076c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3324      	adds	r3, #36	@ 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fefa 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800076c:	f002 fabc 	bl	8002ce8 <vPortExitCritical>
 8000770:	e001      	b.n	8000776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <xQueueGenericReset+0x114>
    __asm volatile
 800077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	60bb      	str	r3, [r7, #8]
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d02e      	beq.n	800081a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007bc:	2100      	movs	r1, #0
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <xQueueGenericCreate+0x28>
 80007ca:	2101      	movs	r1, #1
 80007cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007da:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007de:	d81c      	bhi.n	800081a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3350      	adds	r3, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fb6e 	bl	8002ed0 <pvPortMalloc>
 80007f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01d      	beq.n	8000838 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3350      	adds	r3, #80	@ 0x50
 8000804:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f815 	bl	8000842 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000818:	e00e      	b.n	8000838 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <xQueueGenericCreate+0x94>
    __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
    }
 800083a:	4618      	mov	r0, r3
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e002      	b.n	8000864 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000870:	2101      	movs	r1, #1
 8000872:	69b8      	ldr	r0, [r7, #24]
 8000874:	f7ff ff04 	bl	8000680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000896:	2300      	movs	r3, #0
 8000898:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10b      	bne.n	80008bc <xQueueGenericSend+0x34>
    __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d103      	bne.n	80008ca <xQueueGenericSend+0x42>
 80008c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <xQueueGenericSend+0x46>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <xQueueGenericSend+0x48>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10b      	bne.n	80008ec <xQueueGenericSend+0x64>
    __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d103      	bne.n	80008fa <xQueueGenericSend+0x72>
 80008f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d101      	bne.n	80008fe <xQueueGenericSend+0x76>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <xQueueGenericSend+0x78>
 80008fe:	2300      	movs	r3, #0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10b      	bne.n	800091c <xQueueGenericSend+0x94>
    __asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	623b      	str	r3, [r7, #32]
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800091c:	f001 fc40 	bl	80021a0 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <xQueueGenericSend+0xa4>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <xQueueGenericSend+0xa8>
 800092c:	2301      	movs	r3, #1
 800092e:	e000      	b.n	8000932 <xQueueGenericSend+0xaa>
 8000930:	2300      	movs	r3, #0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d10b      	bne.n	800094e <xQueueGenericSend+0xc6>
    __asm volatile
 8000936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	61fb      	str	r3, [r7, #28]
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	e7fd      	b.n	800094a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800094e:	f002 f999 	bl	8002c84 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800095a:	429a      	cmp	r2, r3
 800095c:	d302      	bcc.n	8000964 <xQueueGenericSend+0xdc>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b02      	cmp	r3, #2
 8000962:	d129      	bne.n	80009b8 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	68b9      	ldr	r1, [r7, #8]
 8000968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800096a:	f000 fac1 	bl	8000ef0 <prvCopyDataToQueue>
 800096e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000974:	2b00      	cmp	r3, #0
 8000976:	d010      	beq.n	800099a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097a:	3324      	adds	r3, #36	@ 0x24
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f9f9 	bl	8001d74 <xTaskRemoveFromEventList>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d013      	beq.n	80009b0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000988:	4b3f      	ldr	r3, [pc, #252]	@ (8000a88 <xQueueGenericSend+0x200>)
 800098a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	f3bf 8f6f 	isb	sy
 8000998:	e00a      	b.n	80009b0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800099c:	2b00      	cmp	r3, #0
 800099e:	d007      	beq.n	80009b0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80009a0:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <xQueueGenericSend+0x200>)
 80009a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	f3bf 8f4f 	dsb	sy
 80009ac:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80009b0:	f002 f99a 	bl	8002ce8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80009b4:	2301      	movs	r3, #1
 80009b6:	e063      	b.n	8000a80 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80009be:	f002 f993 	bl	8002ce8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e05c      	b.n	8000a80 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80009c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 faa9 	bl	8001f28 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80009da:	f002 f985 	bl	8002ce8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80009de:	f000 feb3 	bl	8001748 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80009e2:	f002 f94f 	bl	8002c84 <vPortEnterCritical>
 80009e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009ec:	b25b      	sxtb	r3, r3
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d103      	bne.n	80009fc <xQueueGenericSend+0x174>
 80009f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80009fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d103      	bne.n	8000a12 <xQueueGenericSend+0x18a>
 8000a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a12:	f002 f969 	bl	8002ce8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a16:	1d3a      	adds	r2, r7, #4
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fa98 	bl	8001f54 <xTaskCheckForTimeOut>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d124      	bne.n	8000a74 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a2c:	f000 fb58 	bl	80010e0 <prvIsQueueFull>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d018      	beq.n	8000a68 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a38:	3310      	adds	r3, #16
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f92c 	bl	8001c9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a46:	f000 fae3 	bl	8001010 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000a4a:	f000 fe8b 	bl	8001764 <xTaskResumeAll>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f47f af7c 	bne.w	800094e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <xQueueGenericSend+0x200>)
 8000a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	f3bf 8f4f 	dsb	sy
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	e772      	b.n	800094e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a6a:	f000 fad1 	bl	8001010 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a6e:	f000 fe79 	bl	8001764 <xTaskResumeAll>
 8000a72:	e76c      	b.n	800094e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a76:	f000 facb 	bl	8001010 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a7a:	f000 fe73 	bl	8001764 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a7e:	2300      	movs	r3, #0
        }
    }
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	e000ed04 	.word	0xe000ed04

08000a8c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b092      	sub	sp, #72	@ 0x48
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
 8000a98:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 8000a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d10b      	bne.n	8000abc <xQueueGenericSendFromISR+0x30>
    __asm volatile
 8000aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aa8:	f383 8811 	msr	BASEPRI, r3
 8000aac:	f3bf 8f6f 	isb	sy
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d103      	bne.n	8000aca <xQueueGenericSendFromISR+0x3e>
 8000ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <xQueueGenericSendFromISR+0x42>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <xQueueGenericSendFromISR+0x44>
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d10b      	bne.n	8000aec <xQueueGenericSendFromISR+0x60>
    __asm volatile
 8000ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ad8:	f383 8811 	msr	BASEPRI, r3
 8000adc:	f3bf 8f6f 	isb	sy
 8000ae0:	f3bf 8f4f 	dsb	sy
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d103      	bne.n	8000afa <xQueueGenericSendFromISR+0x6e>
 8000af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d101      	bne.n	8000afe <xQueueGenericSendFromISR+0x72>
 8000afa:	2301      	movs	r3, #1
 8000afc:	e000      	b.n	8000b00 <xQueueGenericSendFromISR+0x74>
 8000afe:	2300      	movs	r3, #0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d10b      	bne.n	8000b1c <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8000b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b08:	f383 8811 	msr	BASEPRI, r3
 8000b0c:	f3bf 8f6f 	isb	sy
 8000b10:	f3bf 8f4f 	dsb	sy
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000b1c:	f002 f996 	bl	8002e4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8000b20:	f3ef 8211 	mrs	r2, BASEPRI
 8000b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b28:	f383 8811 	msr	BASEPRI, r3
 8000b2c:	f3bf 8f6f 	isb	sy
 8000b30:	f3bf 8f4f 	dsb	sy
 8000b34:	623a      	str	r2, [r7, #32]
 8000b36:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000b3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d302      	bcc.n	8000b4e <xQueueGenericSendFromISR+0xc2>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d147      	bne.n	8000bde <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b54:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000b64:	f000 f9c4 	bl	8000ef0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b68:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d112      	bne.n	8000b98 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d02e      	beq.n	8000bd8 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b7c:	3324      	adds	r3, #36	@ 0x24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f8f8 	bl	8001d74 <xTaskRemoveFromEventList>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d026      	beq.n	8000bd8 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e01f      	b.n	8000bd8 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000b98:	f000 fefc 	bl	8001994 <uxTaskGetNumberOfTasks>
 8000b9c:	6338      	str	r0, [r7, #48]	@ 0x30
 8000b9e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d917      	bls.n	8000bd8 <xQueueGenericSendFromISR+0x14c>
 8000ba8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000bac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bae:	d10b      	bne.n	8000bc8 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 8000bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bb4:	f383 8811 	msr	BASEPRI, r3
 8000bb8:	f3bf 8f6f 	isb	sy
 8000bbc:	f3bf 8f4f 	dsb	sy
 8000bc0:	61bb      	str	r3, [r7, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <xQueueGenericSendFromISR+0x138>
 8000bc8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8000bdc:	e001      	b.n	8000be2 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	647b      	str	r3, [r7, #68]	@ 0x44
 8000be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000be4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8000bec:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8000bee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3748      	adds	r7, #72	@ 0x48
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	@ 0x30
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d10b      	bne.n	8000c2a <xQueueReceive+0x32>
    __asm volatile
 8000c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c16:	f383 8811 	msr	BASEPRI, r3
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	623b      	str	r3, [r7, #32]
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	e7fd      	b.n	8000c26 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d103      	bne.n	8000c38 <xQueueReceive+0x40>
 8000c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <xQueueReceive+0x44>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e000      	b.n	8000c3e <xQueueReceive+0x46>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10b      	bne.n	8000c5a <xQueueReceive+0x62>
    __asm volatile
 8000c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c46:	f383 8811 	msr	BASEPRI, r3
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	f3bf 8f4f 	dsb	sy
 8000c52:	61fb      	str	r3, [r7, #28]
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	e7fd      	b.n	8000c56 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000c5a:	f001 faa1 	bl	80021a0 <xTaskGetSchedulerState>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <xQueueReceive+0x72>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d101      	bne.n	8000c6e <xQueueReceive+0x76>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <xQueueReceive+0x78>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10b      	bne.n	8000c8c <xQueueReceive+0x94>
    __asm volatile
 8000c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c78:	f383 8811 	msr	BASEPRI, r3
 8000c7c:	f3bf 8f6f 	isb	sy
 8000c80:	f3bf 8f4f 	dsb	sy
 8000c84:	61bb      	str	r3, [r7, #24]
}
 8000c86:	bf00      	nop
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000c8c:	f001 fffa 	bl	8002c84 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d01f      	beq.n	8000cdc <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ca0:	f000 f990 	bl	8000fc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000caa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00f      	beq.n	8000cd4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	3310      	adds	r3, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f85b 	bl	8001d74 <xTaskRemoveFromEventList>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <xQueueReceive+0x1c0>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	f3bf 8f4f 	dsb	sy
 8000cd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000cd4:	f002 f808 	bl	8002ce8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e069      	b.n	8000db0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000ce2:	f002 f801 	bl	8002ce8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e062      	b.n	8000db0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d106      	bne.n	8000cfe <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f917 	bl	8001f28 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000cfe:	f001 fff3 	bl	8002ce8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000d02:	f000 fd21 	bl	8001748 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000d06:	f001 ffbd 	bl	8002c84 <vPortEnterCritical>
 8000d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d16:	d103      	bne.n	8000d20 <xQueueReceive+0x128>
 8000d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2c:	d103      	bne.n	8000d36 <xQueueReceive+0x13e>
 8000d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000d36:	f001 ffd7 	bl	8002ce8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000d3a:	1d3a      	adds	r2, r7, #4
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f906 	bl	8001f54 <xTaskCheckForTimeOut>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d123      	bne.n	8000d96 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000d4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d50:	f000 f9b0 	bl	80010b4 <prvIsQueueEmpty>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d017      	beq.n	8000d8a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d5c:	3324      	adds	r3, #36	@ 0x24
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 ff9a 	bl	8001c9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000d68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d6a:	f000 f951 	bl	8001010 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000d6e:	f000 fcf9 	bl	8001764 <xTaskResumeAll>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d189      	bne.n	8000c8c <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <xQueueReceive+0x1c0>)
 8000d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	f3bf 8f4f 	dsb	sy
 8000d84:	f3bf 8f6f 	isb	sy
 8000d88:	e780      	b.n	8000c8c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d8c:	f000 f940 	bl	8001010 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000d90:	f000 fce8 	bl	8001764 <xTaskResumeAll>
 8000d94:	e77a      	b.n	8000c8c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d98:	f000 f93a 	bl	8001010 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000d9c:	f000 fce2 	bl	8001764 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000da2:	f000 f987 	bl	80010b4 <prvIsQueueEmpty>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f43f af6f 	beq.w	8000c8c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000dae:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3730      	adds	r7, #48	@ 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	e000ed04 	.word	0xe000ed04

08000dbc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b090      	sub	sp, #64	@ 0x40
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8000dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10b      	bne.n	8000dea <xQueueReceiveFromISR+0x2e>
    __asm volatile
 8000dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dd6:	f383 8811 	msr	BASEPRI, r3
 8000dda:	f3bf 8f6f 	isb	sy
 8000dde:	f3bf 8f4f 	dsb	sy
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d103      	bne.n	8000df8 <xQueueReceiveFromISR+0x3c>
 8000df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <xQueueReceiveFromISR+0x40>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <xQueueReceiveFromISR+0x42>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10b      	bne.n	8000e1a <xQueueReceiveFromISR+0x5e>
    __asm volatile
 8000e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	623b      	str	r3, [r7, #32]
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	e7fd      	b.n	8000e16 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000e1a:	f002 f817 	bl	8002e4c <vPortValidateInterruptPriority>
    __asm volatile
 8000e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8000e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e26:	f383 8811 	msr	BASEPRI, r3
 8000e2a:	f3bf 8f6f 	isb	sy
 8000e2e:	f3bf 8f4f 	dsb	sy
 8000e32:	61fa      	str	r2, [r7, #28]
 8000e34:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8000e36:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d047      	beq.n	8000ed6 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8000e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000e4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e54:	f000 f8b6 	bl	8000fc4 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e5a:	1e5a      	subs	r2, r3, #1
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e5e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8000e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e68:	d112      	bne.n	8000e90 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d02e      	beq.n	8000ed0 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e74:	3310      	adds	r3, #16
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 ff7c 	bl	8001d74 <xTaskRemoveFromEventList>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d026      	beq.n	8000ed0 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d023      	beq.n	8000ed0 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e01f      	b.n	8000ed0 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8000e90:	f000 fd80 	bl	8001994 <uxTaskGetNumberOfTasks>
 8000e94:	62b8      	str	r0, [r7, #40]	@ 0x28
 8000e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000e9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d917      	bls.n	8000ed0 <xQueueReceiveFromISR+0x114>
 8000ea0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8000ea4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ea6:	d10b      	bne.n	8000ec0 <xQueueReceiveFromISR+0x104>
    __asm volatile
 8000ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	617b      	str	r3, [r7, #20]
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <xQueueReceiveFromISR+0x100>
 8000ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ecc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ed4:	e001      	b.n	8000eda <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000edc:	613b      	str	r3, [r7, #16]
    __asm volatile
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	f383 8811 	msr	BASEPRI, r3
}
 8000ee4:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 8000ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3740      	adds	r7, #64	@ 0x40
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f04:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10d      	bne.n	8000f2a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d14d      	bne.n	8000fb2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f95e 	bl	80021dc <xTaskPriorityDisinherit>
 8000f20:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	e043      	b.n	8000fb2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d119      	bne.n	8000f64 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6858      	ldr	r0, [r3, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	f004 fd32 	bl	80059a4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	441a      	add	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d32b      	bcc.n	8000fb2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	e026      	b.n	8000fb2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	68d8      	ldr	r0, [r3, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68b9      	ldr	r1, [r7, #8]
 8000f70:	f004 fd18 	bl	80059a4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	441a      	add	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d207      	bcs.n	8000fa0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	425b      	negs	r3, r3
 8000f9a:	441a      	add	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d105      	bne.n	8000fb2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000fba:	697b      	ldr	r3, [r7, #20]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d018      	beq.n	8001008 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	441a      	add	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68da      	ldr	r2, [r3, #12]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d303      	bcc.n	8000ff8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68d9      	ldr	r1, [r3, #12]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	461a      	mov	r2, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f004 fcce 	bl	80059a4 <memcpy>
    }
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001018:	f001 fe34 	bl	8002c84 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001022:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001024:	e011      	b.n	800104a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	2b00      	cmp	r3, #0
 800102c:	d012      	beq.n	8001054 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3324      	adds	r3, #36	@ 0x24
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fe9e 	bl	8001d74 <xTaskRemoveFromEventList>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800103e:	f000 fff1 	bl	8002024 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	dce9      	bgt.n	8001026 <prvUnlockQueue+0x16>
 8001052:	e000      	b.n	8001056 <prvUnlockQueue+0x46>
                    break;
 8001054:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	22ff      	movs	r2, #255	@ 0xff
 800105a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800105e:	f001 fe43 	bl	8002ce8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001062:	f001 fe0f 	bl	8002c84 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800106c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800106e:	e011      	b.n	8001094 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	691b      	ldr	r3, [r3, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d012      	beq.n	800109e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3310      	adds	r3, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fe79 	bl	8001d74 <xTaskRemoveFromEventList>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001088:	f000 ffcc 	bl	8002024 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	3b01      	subs	r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001094:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dce9      	bgt.n	8001070 <prvUnlockQueue+0x60>
 800109c:	e000      	b.n	80010a0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800109e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	22ff      	movs	r2, #255	@ 0xff
 80010a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80010a8:	f001 fe1e 	bl	8002ce8 <vPortExitCritical>
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010bc:	f001 fde2 	bl	8002c84 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e001      	b.n	80010d2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010d2:	f001 fe09 	bl	8002ce8 <vPortExitCritical>

    return xReturn;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010e8:	f001 fdcc 	bl	8002c84 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d102      	bne.n	80010fe <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e001      	b.n	8001102 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001102:	f001 fdf1 	bl	8002ce8 <vPortExitCritical>

    return xReturn;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	60fb      	str	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d024      	beq.n	800118c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e01e      	b.n	8001186 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001148:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <vQueueAddToRegistry+0x9c>)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	4413      	add	r3, r2
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	d105      	bne.n	8001164 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <vQueueAddToRegistry+0x9c>)
 800115e:	4413      	add	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
                    break;
 8001162:	e013      	b.n	800118c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10a      	bne.n	8001180 <vQueueAddToRegistry+0x70>
 800116a:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <vQueueAddToRegistry+0x9c>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4a0c      	ldr	r2, [pc, #48]	@ (80011ac <vQueueAddToRegistry+0x9c>)
 800117c:	4413      	add	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b07      	cmp	r3, #7
 800118a:	d9dd      	bls.n	8001148 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 800119e:	bf00      	nop
 80011a0:	371c      	adds	r7, #28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	20000090 	.word	0x20000090

080011b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011c0:	f001 fd60 	bl	8002c84 <vPortEnterCritical>
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d103      	bne.n	80011da <vQueueWaitForMessageRestricted+0x2a>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e6:	d103      	bne.n	80011f0 <vQueueWaitForMessageRestricted+0x40>
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011f0:	f001 fd7a 	bl	8002ce8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3324      	adds	r3, #36	@ 0x24
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fd6f 	bl	8001ce8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff00 	bl	8001010 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af04      	add	r7, sp, #16
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fe50 	bl	8002ed0 <pvPortMalloc>
 8001230:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001238:	205c      	movs	r0, #92	@ 0x5c
 800123a:	f001 fe49 	bl	8002ed0 <pvPortMalloc>
 800123e:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001246:	225c      	movs	r2, #92	@ 0x5c
 8001248:	2100      	movs	r1, #0
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f004 fb76 	bl	800593c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	631a      	str	r2, [r3, #48]	@ 0x30
 8001256:	e005      	b.n	8001264 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001258:	6938      	ldr	r0, [r7, #16]
 800125a:	f001 ff6b 	bl	8003134 <vPortFree>
 800125e:	e001      	b.n	8001264 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00d      	beq.n	8001286 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800126a:	2300      	movs	r3, #0
 800126c:	9303      	str	r3, [sp, #12]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 f828 	bl	80012d6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8001286:	697b      	ldr	r3, [r7, #20]
    }
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff ffb3 	bl	8001218 <prvCreateTask>
 80012b2:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f000 f89c 	bl	80013f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e002      	b.n	80012cc <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
    }
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b088      	sub	sp, #32
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80012e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	461a      	mov	r2, r3
 80012ee:	21a5      	movs	r1, #165	@ 0xa5
 80012f0:	f004 fb24 	bl	800593c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80012f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012fe:	3b01      	subs	r3, #1
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f023 0307 	bic.w	r3, r3, #7
 800130c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8001318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800131c:	f383 8811 	msr	BASEPRI, r3
 8001320:	f3bf 8f6f 	isb	sy
 8001324:	f3bf 8f4f 	dsb	sy
 8001328:	617b      	str	r3, [r7, #20]
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01e      	beq.n	8001374 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	e012      	b.n	8001362 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	4413      	add	r3, r2
 8001342:	7819      	ldrb	r1, [r3, #0]
 8001344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	3334      	adds	r3, #52	@ 0x34
 800134c:	460a      	mov	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	2b0e      	cmp	r3, #14
 8001366:	d9e9      	bls.n	800133c <prvInitialiseNewTask+0x66>
 8001368:	e000      	b.n	800136c <prvInitialiseNewTask+0x96>
            {
                break;
 800136a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001376:	2b04      	cmp	r3, #4
 8001378:	d90b      	bls.n	8001392 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800137a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800137e:	f383 8811 	msr	BASEPRI, r3
 8001382:	f3bf 8f6f 	isb	sy
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	613b      	str	r3, [r7, #16]
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	e7fd      	b.n	800138e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001394:	2b04      	cmp	r3, #4
 8001396:	d901      	bls.n	800139c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001398:	2304      	movs	r3, #4
 800139a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800139c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800139e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80013a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80013a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013aa:	3304      	adds	r3, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8f7 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80013b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b4:	3318      	adds	r3, #24
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8f2 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80013c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c4:	f1c3 0205 	rsb	r2, r3, #5
 80013c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	68f9      	ldr	r1, [r7, #12]
 80013d6:	69b8      	ldr	r0, [r7, #24]
 80013d8:	f001 fad8 	bl	800298c <pxPortInitialiseStack>
 80013dc:	4602      	mov	r2, r0
 80013de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80013e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013ee:	bf00      	nop
 80013f0:	3720      	adds	r7, #32
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001400:	f001 fc40 	bl	8002c84 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8001404:	4b41      	ldr	r3, [pc, #260]	@ (800150c <prvAddNewTaskToReadyList+0x114>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a40      	ldr	r2, [pc, #256]	@ (800150c <prvAddNewTaskToReadyList+0x114>)
 800140c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800140e:	4b40      	ldr	r3, [pc, #256]	@ (8001510 <prvAddNewTaskToReadyList+0x118>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d109      	bne.n	800142a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8001416:	4a3e      	ldr	r2, [pc, #248]	@ (8001510 <prvAddNewTaskToReadyList+0x118>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800141c:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <prvAddNewTaskToReadyList+0x114>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d110      	bne.n	8001446 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001424:	f000 fe22 	bl	800206c <prvInitialiseTaskLists>
 8001428:	e00d      	b.n	8001446 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800142a:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <prvAddNewTaskToReadyList+0x11c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d109      	bne.n	8001446 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <prvAddNewTaskToReadyList+0x118>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143c:	429a      	cmp	r2, r3
 800143e:	d802      	bhi.n	8001446 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001440:	4a33      	ldr	r2, [pc, #204]	@ (8001510 <prvAddNewTaskToReadyList+0x118>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8001446:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <prvAddNewTaskToReadyList+0x120>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3301      	adds	r3, #1
 800144c:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <prvAddNewTaskToReadyList+0x120>)
 800144e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001450:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <prvAddNewTaskToReadyList+0x120>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145c:	2201      	movs	r2, #1
 800145e:	409a      	lsls	r2, r3
 8001460:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <prvAddNewTaskToReadyList+0x124>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	4a2d      	ldr	r2, [pc, #180]	@ (800151c <prvAddNewTaskToReadyList+0x124>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800146e:	492c      	ldr	r1, [pc, #176]	@ (8001520 <prvAddNewTaskToReadyList+0x128>)
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	3204      	adds	r2, #4
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	1d1a      	adds	r2, r3, #4
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <prvAddNewTaskToReadyList+0x128>)
 80014ae:	441a      	add	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b8:	4919      	ldr	r1, [pc, #100]	@ (8001520 <prvAddNewTaskToReadyList+0x128>)
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	440b      	add	r3, r1
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014ca:	1c59      	adds	r1, r3, #1
 80014cc:	4814      	ldr	r0, [pc, #80]	@ (8001520 <prvAddNewTaskToReadyList+0x128>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4403      	add	r3, r0
 80014d8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80014da:	f001 fc05 	bl	8002ce8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <prvAddNewTaskToReadyList+0x11c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <prvAddNewTaskToReadyList+0x118>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <prvAddNewTaskToReadyList+0x10c>
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <prvAddNewTaskToReadyList+0x12c>)
 80014f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001a8 	.word	0x200001a8
 8001510:	200000d0 	.word	0x200000d0
 8001514:	200001b4 	.word	0x200001b4
 8001518:	200001c4 	.word	0x200001c4
 800151c:	200001b0 	.word	0x200001b0
 8001520:	200000d4 	.word	0x200000d4
 8001524:	e000ed04 	.word	0xe000ed04

08001528 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );

        configASSERT( pxPreviousWakeTime );
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10b      	bne.n	8001554 <xTaskDelayUntil+0x2c>
    __asm volatile
 800153c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	617b      	str	r3, [r7, #20]
}
 800154e:	bf00      	nop
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10b      	bne.n	8001572 <xTaskDelayUntil+0x4a>
    __asm volatile
 800155a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800155e:	f383 8811 	msr	BASEPRI, r3
 8001562:	f3bf 8f6f 	isb	sy
 8001566:	f3bf 8f4f 	dsb	sy
 800156a:	613b      	str	r3, [r7, #16]
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <xTaskDelayUntil+0x46>

        vTaskSuspendAll();
 8001572:	f000 f8e9 	bl	8001748 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <xTaskDelayUntil+0xf8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	623b      	str	r3, [r7, #32]

            configASSERT( uxSchedulerSuspended == 1U );
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <xTaskDelayUntil+0xfc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d00b      	beq.n	800159c <xTaskDelayUntil+0x74>
    __asm volatile
 8001584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001588:	f383 8811 	msr	BASEPRI, r3
 800158c:	f3bf 8f6f 	isb	sy
 8001590:	f3bf 8f4f 	dsb	sy
 8001594:	60fb      	str	r3, [r7, #12]
}
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <xTaskDelayUntil+0x70>

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d20b      	bcs.n	80015c8 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d211      	bcs.n	80015de <xTaskDelayUntil+0xb6>
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d90d      	bls.n	80015de <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015c6:	e00a      	b.n	80015de <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d303      	bcc.n	80015da <xTaskDelayUntil+0xb2>
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d901      	bls.n	80015de <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 80015da:	2301      	movs	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 fe9a 	bl	800232c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80015f8:	f000 f8b4 	bl	8001764 <xTaskResumeAll>
 80015fc:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d107      	bne.n	8001614 <xTaskDelayUntil+0xec>
        {
            taskYIELD_WITHIN_API();
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <xTaskDelayUntil+0x100>)
 8001606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	f3bf 8f4f 	dsb	sy
 8001610:	f3bf 8f6f 	isb	sy
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskDelayUntil( xShouldDelay );

        return xShouldDelay;
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001616:	4618      	mov	r0, r3
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001ac 	.word	0x200001ac
 8001624:	200001d0 	.word	0x200001d0
 8001628:	e000ed04 	.word	0xe000ed04

0800162c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001632:	2301      	movs	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e011      	b.n	8001664 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <prvCreateIdleTasks+0x88>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	4413      	add	r3, r2
 8001646:	7819      	ldrb	r1, [r3, #0]
 8001648:	463a      	mov	r2, r7
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	4413      	add	r3, r2
 800164e:	460a      	mov	r2, r1
 8001650:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001652:	463a      	mov	r2, r7
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4413      	add	r3, r2
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b0e      	cmp	r3, #14
 8001668:	ddea      	ble.n	8001640 <prvCreateIdleTasks+0x14>
 800166a:	e000      	b.n	800166e <prvCreateIdleTasks+0x42>
        {
            break;
 800166c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
 8001672:	e015      	b.n	80016a0 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <prvCreateIdleTasks+0x8c>)
 8001676:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4a0f      	ldr	r2, [pc, #60]	@ (80016bc <prvCreateIdleTasks+0x90>)
 800167e:	4413      	add	r3, r2
 8001680:	4639      	mov	r1, r7
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2282      	movs	r2, #130	@ 0x82
 800168c:	6938      	ldr	r0, [r7, #16]
 800168e:	f7ff fdff 	bl	8001290 <xTaskCreate>
 8001692:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3301      	adds	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	dde6      	ble.n	8001674 <prvCreateIdleTasks+0x48>
 80016a6:	e000      	b.n	80016aa <prvCreateIdleTasks+0x7e>
        {
            break;
 80016a8:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80016aa:	69fb      	ldr	r3, [r7, #28]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	08006254 	.word	0x08006254
 80016b8:	0800203d 	.word	0x0800203d
 80016bc:	200001cc 	.word	0x200001cc

080016c0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80016c6:	f7ff ffb1 	bl	800162c <prvCreateIdleTasks>
 80016ca:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d102      	bne.n	80016d8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80016d2:	f000 fead 	bl	8002430 <xTimerCreateTimerTask>
 80016d6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d116      	bne.n	800170c <vTaskStartScheduler+0x4c>
    __asm volatile
 80016de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e2:	f383 8811 	msr	BASEPRI, r3
 80016e6:	f3bf 8f6f 	isb	sy
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	60bb      	str	r3, [r7, #8]
}
 80016f0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <vTaskStartScheduler+0x78>)
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <vTaskStartScheduler+0x7c>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <vTaskStartScheduler+0x80>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001706:	f001 f9cd 	bl	8002aa4 <xPortStartScheduler>
 800170a:	e00f      	b.n	800172c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001712:	d10b      	bne.n	800172c <vTaskStartScheduler+0x6c>
    __asm volatile
 8001714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001718:	f383 8811 	msr	BASEPRI, r3
 800171c:	f3bf 8f6f 	isb	sy
 8001720:	f3bf 8f4f 	dsb	sy
 8001724:	607b      	str	r3, [r7, #4]
}
 8001726:	bf00      	nop
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <vTaskStartScheduler+0x84>)
 800172e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200001c8 	.word	0x200001c8
 800173c:	200001b4 	.word	0x200001b4
 8001740:	200001ac 	.word	0x200001ac
 8001744:	20000000 	.word	0x20000000

08001748 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <vTaskSuspendAll+0x18>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	3301      	adds	r3, #1
 8001752:	4a03      	ldr	r2, [pc, #12]	@ (8001760 <vTaskSuspendAll+0x18>)
 8001754:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	200001d0 	.word	0x200001d0

08001764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001772:	f001 fa87 	bl	8002c84 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800177a:	4b75      	ldr	r3, [pc, #468]	@ (8001950 <xTaskResumeAll+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10b      	bne.n	800179a <xTaskResumeAll+0x36>
    __asm volatile
 8001782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001786:	f383 8811 	msr	BASEPRI, r3
 800178a:	f3bf 8f6f 	isb	sy
 800178e:	f3bf 8f4f 	dsb	sy
 8001792:	603b      	str	r3, [r7, #0]
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	e7fd      	b.n	8001796 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800179a:	4b6d      	ldr	r3, [pc, #436]	@ (8001950 <xTaskResumeAll+0x1ec>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001950 <xTaskResumeAll+0x1ec>)
 80017a2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80017a4:	4b6a      	ldr	r3, [pc, #424]	@ (8001950 <xTaskResumeAll+0x1ec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 80ca 	bne.w	8001942 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80017ae:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <xTaskResumeAll+0x1f0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80c5 	beq.w	8001942 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80017b8:	e08e      	b.n	80018d8 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80017ba:	4b67      	ldr	r3, [pc, #412]	@ (8001958 <xTaskResumeAll+0x1f4>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	6a12      	ldr	r2, [r2, #32]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	69d2      	ldr	r2, [r2, #28]
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	3318      	adds	r3, #24
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d103      	bne.n	80017f0 <xTaskResumeAll+0x8c>
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	6a1a      	ldr	r2, [r3, #32]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2200      	movs	r2, #0
 80017f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	6892      	ldr	r2, [r2, #8]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	429a      	cmp	r2, r3
 8001824:	d103      	bne.n	800182e <xTaskResumeAll+0xca>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	2201      	movs	r2, #1
 8001844:	409a      	lsls	r2, r3
 8001846:	4b45      	ldr	r3, [pc, #276]	@ (800195c <xTaskResumeAll+0x1f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4313      	orrs	r3, r2
 800184c:	4a43      	ldr	r2, [pc, #268]	@ (800195c <xTaskResumeAll+0x1f8>)
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001854:	4942      	ldr	r1, [pc, #264]	@ (8001960 <xTaskResumeAll+0x1fc>)
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	440b      	add	r3, r1
 8001860:	3304      	adds	r3, #4
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	3204      	adds	r2, #4
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	1d1a      	adds	r2, r3, #4
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4a33      	ldr	r2, [pc, #204]	@ (8001960 <xTaskResumeAll+0x1fc>)
 8001894:	441a      	add	r2, r3
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	4930      	ldr	r1, [pc, #192]	@ (8001960 <xTaskResumeAll+0x1fc>)
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018b0:	1c59      	adds	r1, r3, #1
 80018b2:	482b      	ldr	r0, [pc, #172]	@ (8001960 <xTaskResumeAll+0x1fc>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4403      	add	r3, r0
 80018be:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <xTaskResumeAll+0x200>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d904      	bls.n	80018d8 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <xTaskResumeAll+0x204>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2101      	movs	r1, #1
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <xTaskResumeAll+0x1f4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f af6c 	bne.w	80017ba <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80018e8:	f000 fc3e 	bl	8002168 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <xTaskResumeAll+0x208>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80018f8:	f000 f858 	bl	80019ac <xTaskIncrementTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8001902:	4a19      	ldr	r2, [pc, #100]	@ (8001968 <xTaskResumeAll+0x204>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	2101      	movs	r1, #1
 8001908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3b01      	subs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ef      	bne.n	80018f8 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001918:	4b14      	ldr	r3, [pc, #80]	@ (800196c <xTaskResumeAll+0x208>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800191e:	4a12      	ldr	r2, [pc, #72]	@ (8001968 <xTaskResumeAll+0x204>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800192a:	2301      	movs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <xTaskResumeAll+0x200>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <xTaskResumeAll+0x20c>)
 8001934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001942:	f001 f9d1 	bl	8002ce8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001946:	69bb      	ldr	r3, [r7, #24]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001d0 	.word	0x200001d0
 8001954:	200001a8 	.word	0x200001a8
 8001958:	20000168 	.word	0x20000168
 800195c:	200001b0 	.word	0x200001b0
 8001960:	200000d4 	.word	0x200000d4
 8001964:	200000d0 	.word	0x200000d0
 8001968:	200001bc 	.word	0x200001bc
 800196c:	200001b8 	.word	0x200001b8
 8001970:	e000ed04 	.word	0xe000ed04

08001974 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <xTaskGetTickCount+0x1c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200001ac 	.word	0x200001ac

08001994 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <uxTaskGetNumberOfTasks+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200001a8 	.word	0x200001a8

080019ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80019b6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <xTaskIncrementTick+0x208>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f040 80ef 	bne.w	8001b9e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80019c0:	4b7d      	ldr	r3, [pc, #500]	@ (8001bb8 <xTaskIncrementTick+0x20c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80019c8:	4a7b      	ldr	r2, [pc, #492]	@ (8001bb8 <xTaskIncrementTick+0x20c>)
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d121      	bne.n	8001a18 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80019d4:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <xTaskIncrementTick+0x210>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <xTaskIncrementTick+0x4a>
    __asm volatile
 80019de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	607b      	str	r3, [r7, #4]
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <xTaskIncrementTick+0x46>
 80019f6:	4b71      	ldr	r3, [pc, #452]	@ (8001bbc <xTaskIncrementTick+0x210>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	4b70      	ldr	r3, [pc, #448]	@ (8001bc0 <xTaskIncrementTick+0x214>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <xTaskIncrementTick+0x210>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	@ (8001bc0 <xTaskIncrementTick+0x214>)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bc4 <xTaskIncrementTick+0x218>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	4a6c      	ldr	r2, [pc, #432]	@ (8001bc4 <xTaskIncrementTick+0x218>)
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	f000 fba8 	bl	8002168 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001a18:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <xTaskIncrementTick+0x21c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	f0c0 80a8 	bcc.w	8001b74 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a24:	4b65      	ldr	r3, [pc, #404]	@ (8001bbc <xTaskIncrementTick+0x210>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d104      	bne.n	8001a38 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001a2e:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <xTaskIncrementTick+0x21c>)
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	601a      	str	r2, [r3, #0]
                    break;
 8001a36:	e09d      	b.n	8001b74 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a38:	4b60      	ldr	r3, [pc, #384]	@ (8001bbc <xTaskIncrementTick+0x210>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d203      	bcs.n	8001a58 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001a50:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc8 <xTaskIncrementTick+0x21c>)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	6013      	str	r3, [r2, #0]
                        break;
 8001a56:	e08d      	b.n	8001b74 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	68d2      	ldr	r2, [r2, #12]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	6892      	ldr	r2, [r2, #8]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d103      	bne.n	8001a86 <xTaskIncrementTick+0xda>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1e5a      	subs	r2, r3, #1
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d01e      	beq.n	8001adc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	6a12      	ldr	r2, [r2, #32]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	69d2      	ldr	r2, [r2, #28]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3318      	adds	r3, #24
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d103      	bne.n	8001acc <xTaskIncrementTick+0x120>
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	1e5a      	subs	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <xTaskIncrementTick+0x220>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	4a38      	ldr	r2, [pc, #224]	@ (8001bcc <xTaskIncrementTick+0x220>)
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af2:	4937      	ldr	r1, [pc, #220]	@ (8001bd0 <xTaskIncrementTick+0x224>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	3304      	adds	r3, #4
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	3204      	adds	r2, #4
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1d1a      	adds	r2, r3, #4
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4a27      	ldr	r2, [pc, #156]	@ (8001bd0 <xTaskIncrementTick+0x224>)
 8001b32:	441a      	add	r2, r3
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3c:	4924      	ldr	r1, [pc, #144]	@ (8001bd0 <xTaskIncrementTick+0x224>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b4e:	1c59      	adds	r1, r3, #1
 8001b50:	481f      	ldr	r0, [pc, #124]	@ (8001bd0 <xTaskIncrementTick+0x224>)
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4403      	add	r3, r0
 8001b5c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <xTaskIncrementTick+0x228>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f67f af5b 	bls.w	8001a24 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b72:	e757      	b.n	8001a24 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001b74:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <xTaskIncrementTick+0x228>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7a:	4915      	ldr	r1, [pc, #84]	@ (8001bd0 <xTaskIncrementTick+0x224>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d901      	bls.n	8001b90 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <xTaskIncrementTick+0x22c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d007      	beq.n	8001ba8 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b9c:	e004      	b.n	8001ba8 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <xTaskIncrementTick+0x230>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <xTaskIncrementTick+0x230>)
 8001ba6:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3728      	adds	r7, #40	@ 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200001d0 	.word	0x200001d0
 8001bb8:	200001ac 	.word	0x200001ac
 8001bbc:	20000160 	.word	0x20000160
 8001bc0:	20000164 	.word	0x20000164
 8001bc4:	200001c0 	.word	0x200001c0
 8001bc8:	200001c8 	.word	0x200001c8
 8001bcc:	200001b0 	.word	0x200001b0
 8001bd0:	200000d4 	.word	0x200000d4
 8001bd4:	200000d0 	.word	0x200000d0
 8001bd8:	200001bc 	.word	0x200001bc
 8001bdc:	200001b8 	.word	0x200001b8

08001be0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001be6:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <vTaskSwitchContext+0xa8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001bee:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <vTaskSwitchContext+0xac>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001bf4:	e041      	b.n	8001c7a <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <vTaskSwitchContext+0xac>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <vTaskSwitchContext+0xb0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f1c3 031f 	rsb	r3, r3, #31
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	4920      	ldr	r1, [pc, #128]	@ (8001c94 <vTaskSwitchContext+0xb4>)
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10b      	bne.n	8001c3e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	607b      	str	r3, [r7, #4]
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <vTaskSwitchContext+0x5a>
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <vTaskSwitchContext+0xb4>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d103      	bne.n	8001c6c <vTaskSwitchContext+0x8c>
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <vTaskSwitchContext+0xb8>)
 8001c74:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <vTaskSwitchContext+0xb8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
    }
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200001d0 	.word	0x200001d0
 8001c8c:	200001bc 	.word	0x200001bc
 8001c90:	200001b0 	.word	0x200001b0
 8001c94:	200000d4 	.word	0x200000d4
 8001c98:	200000d0 	.word	0x200000d0

08001c9c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cb0:	f383 8811 	msr	BASEPRI, r3
 8001cb4:	f3bf 8f6f 	isb	sy
 8001cb8:	f3bf 8f4f 	dsb	sy
 8001cbc:	60fb      	str	r3, [r7, #12]
}
 8001cbe:	bf00      	nop
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <vTaskPlaceOnEventList+0x48>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3318      	adds	r3, #24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fc74 	bl	80005ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f000 fb29 	bl	800232c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200000d0 	.word	0x200000d0

08001ce8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10b      	bne.n	8001d12 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	613b      	str	r3, [r7, #16]
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	61da      	str	r2, [r3, #28]
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	6892      	ldr	r2, [r2, #8]
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	3218      	adds	r2, #24
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f103 0218 	add.w	r2, r3, #24
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	609a      	str	r2, [r3, #8]
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <vTaskPlaceOnEventListRestricted+0x88>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	68b8      	ldr	r0, [r7, #8]
 8001d64:	f000 fae2 	bl	800232c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001d68:	bf00      	nop
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200000d0 	.word	0x200000d0

08001d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001d74:	b480      	push	{r7}
 8001d76:	b08b      	sub	sp, #44	@ 0x2c
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8e:	f383 8811 	msr	BASEPRI, r3
 8001d92:	f3bf 8f6f 	isb	sy
 8001d96:	f3bf 8f4f 	dsb	sy
 8001d9a:	60fb      	str	r3, [r7, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	6a12      	ldr	r2, [r2, #32]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	6a3a      	ldr	r2, [r7, #32]
 8001db8:	69d2      	ldr	r2, [r2, #28]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	3318      	adds	r3, #24
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d103      	bne.n	8001dd0 <xTaskRemoveFromEventList+0x5c>
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	6a1a      	ldr	r2, [r3, #32]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001de0:	4b4b      	ldr	r3, [pc, #300]	@ (8001f10 <xTaskRemoveFromEventList+0x19c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d160      	bne.n	8001eaa <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	6a3a      	ldr	r2, [r7, #32]
 8001df4:	68d2      	ldr	r2, [r2, #12]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	6892      	ldr	r2, [r2, #8]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d103      	bne.n	8001e16 <xTaskRemoveFromEventList+0xa2>
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	409a      	lsls	r2, r3
 8001e2e:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <xTaskRemoveFromEventList+0x1a0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	4a37      	ldr	r2, [pc, #220]	@ (8001f14 <xTaskRemoveFromEventList+0x1a0>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3c:	4936      	ldr	r1, [pc, #216]	@ (8001f18 <xTaskRemoveFromEventList+0x1a4>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3304      	adds	r3, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	3204      	adds	r2, #4
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	1d1a      	adds	r2, r3, #4
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4a27      	ldr	r2, [pc, #156]	@ (8001f18 <xTaskRemoveFromEventList+0x1a4>)
 8001e7c:	441a      	add	r2, r3
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	615a      	str	r2, [r3, #20]
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e86:	4924      	ldr	r1, [pc, #144]	@ (8001f18 <xTaskRemoveFromEventList+0x1a4>)
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a3a      	ldr	r2, [r7, #32]
 8001e96:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e98:	1c59      	adds	r1, r3, #1
 8001e9a:	481f      	ldr	r0, [pc, #124]	@ (8001f18 <xTaskRemoveFromEventList+0x1a4>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	6019      	str	r1, [r3, #0]
 8001ea8:	e01b      	b.n	8001ee2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <xTaskRemoveFromEventList+0x1a8>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	61da      	str	r2, [r3, #28]
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	621a      	str	r2, [r3, #32]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	6a3a      	ldr	r2, [r7, #32]
 8001ec4:	3218      	adds	r2, #24
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	f103 0218 	add.w	r2, r3, #24
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <xTaskRemoveFromEventList+0x1a8>)
 8001ed6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ed8:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <xTaskRemoveFromEventList+0x1a8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <xTaskRemoveFromEventList+0x1a8>)
 8001ee0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <xTaskRemoveFromEventList+0x1ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d905      	bls.n	8001efc <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <xTaskRemoveFromEventList+0x1b0>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e001      	b.n	8001f00 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	372c      	adds	r7, #44	@ 0x2c
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200001d0 	.word	0x200001d0
 8001f14:	200001b0 	.word	0x200001b0
 8001f18:	200000d4 	.word	0x200000d4
 8001f1c:	20000168 	.word	0x20000168
 8001f20:	200000d0 	.word	0x200000d0
 8001f24:	200001bc 	.word	0x200001bc

08001f28 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <vTaskInternalSetTimeOutState+0x24>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001f38:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <vTaskInternalSetTimeOutState+0x28>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	200001c0 	.word	0x200001c0
 8001f50:	200001ac 	.word	0x200001ac

08001f54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10b      	bne.n	8001f7c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	613b      	str	r3, [r7, #16]
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10b      	bne.n	8001f9a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	60fb      	str	r3, [r7, #12]
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	e7fd      	b.n	8001f96 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001f9a:	f000 fe73 	bl	8002c84 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <xTaskCheckForTimeOut+0xc8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d102      	bne.n	8001fbe <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e026      	b.n	800200c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <xTaskCheckForTimeOut+0xcc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d00a      	beq.n	8001fe0 <xTaskCheckForTimeOut+0x8c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d305      	bcc.n	8001fe0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e015      	b.n	800200c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d20b      	bcs.n	8002002 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff96 	bl	8001f28 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	e004      	b.n	800200c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002008:	2301      	movs	r3, #1
 800200a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800200c:	f000 fe6c 	bl	8002ce8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8002010:	69fb      	ldr	r3, [r7, #28]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200001ac 	.word	0x200001ac
 8002020:	200001c0 	.word	0x200001c0

08002024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <vTaskMissedYield+0x14>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	200001bc 	.word	0x200001bc

0800203c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002044:	f000 f852 	bl	80020ec <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <prvIdleTask+0x28>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d9f9      	bls.n	8002044 <prvIdleTask+0x8>
            {
                taskYIELD();
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <prvIdleTask+0x2c>)
 8002052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002060:	e7f0      	b.n	8002044 <prvIdleTask+0x8>
 8002062:	bf00      	nop
 8002064:	200000d4 	.word	0x200000d4
 8002068:	e000ed04 	.word	0xe000ed04

0800206c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002072:	2300      	movs	r3, #0
 8002074:	607b      	str	r3, [r7, #4]
 8002076:	e00c      	b.n	8002092 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <prvInitialiseTaskLists+0x60>)
 8002084:	4413      	add	r3, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa6a 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3301      	adds	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d9ef      	bls.n	8002078 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002098:	480d      	ldr	r0, [pc, #52]	@ (80020d0 <prvInitialiseTaskLists+0x64>)
 800209a:	f7fe fa61 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800209e:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <prvInitialiseTaskLists+0x68>)
 80020a0:	f7fe fa5e 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <prvInitialiseTaskLists+0x6c>)
 80020a6:	f7fe fa5b 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80020aa:	480c      	ldr	r0, [pc, #48]	@ (80020dc <prvInitialiseTaskLists+0x70>)
 80020ac:	f7fe fa58 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80020b0:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <prvInitialiseTaskLists+0x74>)
 80020b2:	f7fe fa55 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <prvInitialiseTaskLists+0x78>)
 80020b8:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <prvInitialiseTaskLists+0x64>)
 80020ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <prvInitialiseTaskLists+0x7c>)
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <prvInitialiseTaskLists+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200000d4 	.word	0x200000d4
 80020d0:	20000138 	.word	0x20000138
 80020d4:	2000014c 	.word	0x2000014c
 80020d8:	20000168 	.word	0x20000168
 80020dc:	2000017c 	.word	0x2000017c
 80020e0:	20000194 	.word	0x20000194
 80020e4:	20000160 	.word	0x20000160
 80020e8:	20000164 	.word	0x20000164

080020ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020f2:	e019      	b.n	8002128 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80020f4:	f000 fdc6 	bl	8002c84 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <prvCheckTasksWaitingTermination+0x50>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fa91 	bl	800062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <prvCheckTasksWaitingTermination+0x54>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3b01      	subs	r3, #1
 8002110:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <prvCheckTasksWaitingTermination+0x54>)
 8002112:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <prvCheckTasksWaitingTermination+0x58>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3b01      	subs	r3, #1
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <prvCheckTasksWaitingTermination+0x58>)
 800211c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800211e:	f000 fde3 	bl	8002ce8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f810 	bl	8002148 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <prvCheckTasksWaitingTermination+0x58>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1e1      	bne.n	80020f4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	2000017c 	.word	0x2000017c
 8002140:	200001a8 	.word	0x200001a8
 8002144:	20000190 	.word	0x20000190

08002148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	4618      	mov	r0, r3
 8002156:	f000 ffed 	bl	8003134 <vPortFree>
            vPortFree( pxTCB );
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 ffea 	bl	8003134 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <prvResetNextTaskUnblockTime+0x30>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <prvResetNextTaskUnblockTime+0x34>)
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800217e:	e005      	b.n	800218c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <prvResetNextTaskUnblockTime+0x30>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	@ (800219c <prvResetNextTaskUnblockTime+0x34>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000160 	.word	0x20000160
 800219c:	200001c8 	.word	0x200001c8

080021a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <xTaskGetSchedulerState+0x34>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80021ae:	2301      	movs	r3, #1
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	e008      	b.n	80021c6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <xTaskGetSchedulerState+0x38>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80021bc:	2302      	movs	r3, #2
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80021c6:	687b      	ldr	r3, [r7, #4]
    }
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	200001b4 	.word	0x200001b4
 80021d8:	200001d0 	.word	0x200001d0

080021dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8090 	beq.w	8002314 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80021f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <xTaskPriorityDisinherit+0x144>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d00b      	beq.n	8002216 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	613b      	str	r3, [r7, #16]
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	e7fd      	b.n	8002212 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	60fb      	str	r3, [r7, #12]
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	e7fd      	b.n	8002232 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223a:	1e5a      	subs	r2, r3, #1
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	429a      	cmp	r2, r3
 800224a:	d063      	beq.n	8002314 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002250:	2b00      	cmp	r3, #0
 8002252:	d15f      	bne.n	8002314 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	3304      	adds	r3, #4
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f9e7 	bl	800062c <uxListRemove>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	2201      	movs	r2, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <xTaskPriorityDisinherit+0x148>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4013      	ands	r3, r2
 8002276:	4a2b      	ldr	r2, [pc, #172]	@ (8002324 <xTaskPriorityDisinherit+0x148>)
 8002278:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002286:	f1c3 0205 	rsb	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	2201      	movs	r2, #1
 8002294:	409a      	lsls	r2, r3
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <xTaskPriorityDisinherit+0x148>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <xTaskPriorityDisinherit+0x148>)
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022a4:	4920      	ldr	r1, [pc, #128]	@ (8002328 <xTaskPriorityDisinherit+0x14c>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	3204      	adds	r2, #4
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1d1a      	adds	r2, r3, #4
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4a11      	ldr	r2, [pc, #68]	@ (8002328 <xTaskPriorityDisinherit+0x14c>)
 80022e4:	441a      	add	r2, r3
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	615a      	str	r2, [r3, #20]
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ee:	490e      	ldr	r1, [pc, #56]	@ (8002328 <xTaskPriorityDisinherit+0x14c>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	4809      	ldr	r0, [pc, #36]	@ (8002328 <xTaskPriorityDisinherit+0x14c>)
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4403      	add	r3, r0
 800230e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002310:	2301      	movs	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002314:	69fb      	ldr	r3, [r7, #28]
    }
 8002316:	4618      	mov	r0, r3
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200000d0 	.word	0x200000d0
 8002324:	200001b0 	.word	0x200001b0
 8002328:	200000d4 	.word	0x200000d4

0800232c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002336:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800233c:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <prvAddCurrentTaskToDelayedList+0xec>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002348:	4b35      	ldr	r3, [pc, #212]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3304      	adds	r3, #4
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f96c 	bl	800062c <uxListRemove>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10b      	bne.n	8002372 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	2201      	movs	r2, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xf8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4013      	ands	r3, r2
 800236e:	4a2d      	ldr	r2, [pc, #180]	@ (8002424 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002370:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d124      	bne.n	80023c4 <prvAddCurrentTaskToDelayedList+0x98>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d021      	beq.n	80023c4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002380:	4b29      	ldr	r3, [pc, #164]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	3204      	adds	r2, #4
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	1d1a      	adds	r2, r3, #4
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002428 <prvAddCurrentTaskToDelayedList+0xfc>)
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80023c2:	e022      	b.n	800240a <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80023c4:	69fa      	ldr	r2, [r7, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023cc:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80023dc:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	f7fe f8e8 	bl	80005ba <vListInsert>
}
 80023ea:	e00e      	b.n	800240a <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002420 <prvAddCurrentTaskToDelayedList+0xf4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3304      	adds	r3, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	69b8      	ldr	r0, [r7, #24]
 80023f6:	f7fe f8e0 	bl	80005ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <prvAddCurrentTaskToDelayedList+0x100>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	429a      	cmp	r2, r3
 8002402:	d202      	bcs.n	800240a <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002404:	4a09      	ldr	r2, [pc, #36]	@ (800242c <prvAddCurrentTaskToDelayedList+0x100>)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	bf00      	nop
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200001ac 	.word	0x200001ac
 8002418:	20000160 	.word	0x20000160
 800241c:	20000164 	.word	0x20000164
 8002420:	200000d0 	.word	0x200000d0
 8002424:	200001b0 	.word	0x200001b0
 8002428:	20000194 	.word	0x20000194
 800242c:	200001c8 	.word	0x200001c8

08002430 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800243a:	f000 fa71 	bl	8002920 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <xTimerCreateTimerTask+0x58>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <xTimerCreateTimerTask+0x5c>)
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	2302      	movs	r3, #2
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002454:	490e      	ldr	r1, [pc, #56]	@ (8002490 <xTimerCreateTimerTask+0x60>)
 8002456:	480f      	ldr	r0, [pc, #60]	@ (8002494 <xTimerCreateTimerTask+0x64>)
 8002458:	f7fe ff1a 	bl	8001290 <xTaskCreate>
 800245c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	603b      	str	r3, [r7, #0]
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800247c:	687b      	ldr	r3, [r7, #4]
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000204 	.word	0x20000204
 800248c:	20000208 	.word	0x20000208
 8002490:	0800625c 	.word	0x0800625c
 8002494:	0800253d 	.word	0x0800253d

08002498 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024a4:	e008      	b.n	80024b8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	4413      	add	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	18d1      	adds	r1, r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f8df 	bl	8002688 <prvInsertTimerInActiveList>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ea      	bne.n	80024a6 <prvReloadTimer+0xe>
        }
    }
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80024e6:	4b14      	ldr	r3, [pc, #80]	@ (8002538 <prvProcessExpiredTimer+0x5c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f899 	bl	800062c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff ffc3 	bl	8002498 <prvReloadTimer>
 8002512:	e008      	b.n	8002526 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	b2da      	uxtb	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	4798      	blx	r3
    }
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200001fc 	.word	0x200001fc

0800253c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002544:	f107 0308 	add.w	r3, r7, #8
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f859 	bl	8002600 <prvGetNextExpireTime>
 800254e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4619      	mov	r1, r3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f805 	bl	8002564 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800255a:	f000 f8d7 	bl	800270c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800255e:	bf00      	nop
 8002560:	e7f0      	b.n	8002544 <prvTimerTask+0x8>
	...

08002564 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800256e:	f7ff f8eb 	bl	8001748 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002572:	f107 0308 	add.w	r3, r7, #8
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f866 	bl	8002648 <prvSampleTimeNow>
 800257c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d130      	bne.n	80025e6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <prvProcessTimerOrBlockTask+0x3c>
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d806      	bhi.n	80025a0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002592:	f7ff f8e7 	bl	8001764 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff9f 	bl	80024dc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800259e:	e024      	b.n	80025ea <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d008      	beq.n	80025b8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80025a6:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <prvProcessTimerOrBlockTask+0x90>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <prvProcessTimerOrBlockTask+0x50>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <prvProcessTimerOrBlockTask+0x52>
 80025b4:	2300      	movs	r3, #0
 80025b6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80025b8:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <prvProcessTimerOrBlockTask+0x94>)
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f7fe fdf3 	bl	80011b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80025ca:	f7ff f8cb 	bl	8001764 <xTaskResumeAll>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <prvProcessTimerOrBlockTask+0x98>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
    }
 80025e4:	e001      	b.n	80025ea <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80025e6:	f7ff f8bd 	bl	8001764 <xTaskResumeAll>
    }
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000200 	.word	0x20000200
 80025f8:	20000204 	.word	0x20000204
 80025fc:	e000ed04 	.word	0xe000ed04

08002600 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002608:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <prvGetNextExpireTime+0x44>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <prvGetNextExpireTime+0x16>
 8002612:	2201      	movs	r2, #1
 8002614:	e000      	b.n	8002618 <prvGetNextExpireTime+0x18>
 8002616:	2200      	movs	r2, #0
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d105      	bne.n	8002630 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <prvGetNextExpireTime+0x44>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e001      	b.n	8002634 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002634:	68fb      	ldr	r3, [r7, #12]
    }
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200001fc 	.word	0x200001fc

08002648 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002650:	f7ff f990 	bl	8001974 <xTaskGetTickCount>
 8002654:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <prvSampleTimeNow+0x3c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	d205      	bcs.n	800266c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002660:	f000 f938 	bl	80028d4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e002      	b.n	8002672 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002672:	4a04      	ldr	r2, [pc, #16]	@ (8002684 <prvSampleTimeNow+0x3c>)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002678:	68fb      	ldr	r3, [r7, #12]
    }
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000020c 	.word	0x2000020c

08002688 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d812      	bhi.n	80026d4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	1ad2      	subs	r2, r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d302      	bcc.n	80026c2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80026bc:	2301      	movs	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	e01b      	b.n	80026fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <prvInsertTimerInActiveList+0x7c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3304      	adds	r3, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fd ff74 	bl	80005ba <vListInsert>
 80026d2:	e012      	b.n	80026fa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d206      	bcs.n	80026ea <prvInsertTimerInActiveList+0x62>
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e007      	b.n	80026fa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026ea:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <prvInsertTimerInActiveList+0x80>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f7fd ff60 	bl	80005ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 80026fa:	697b      	ldr	r3, [r7, #20]
    }
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000200 	.word	0x20000200
 8002708:	200001fc 	.word	0x200001fc

0800270c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	@ 0x28
 8002710:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800271e:	e0c7      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da19      	bge.n	800275a <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	3304      	adds	r3, #4
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10b      	bne.n	800274a <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	61bb      	str	r3, [r7, #24]
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	e7fd      	b.n	8002746 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002750:	6850      	ldr	r0, [r2, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002754:	6892      	ldr	r2, [r2, #8]
 8002756:	4611      	mov	r1, r2
 8002758:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f2c0 80a7 	blt.w	80028b0 <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	3304      	adds	r3, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd ff5a 	bl	800062c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002778:	463b      	mov	r3, r7
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff64 	bl	8002648 <prvSampleTimeNow>
 8002780:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3b01      	subs	r3, #1
 8002786:	2b08      	cmp	r3, #8
 8002788:	f200 808f 	bhi.w	80028aa <prvProcessReceivedCommands+0x19e>
 800278c:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <prvProcessReceivedCommands+0x88>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027b9 	.word	0x080027b9
 8002798:	080027b9 	.word	0x080027b9
 800279c:	08002821 	.word	0x08002821
 80027a0:	08002835 	.word	0x08002835
 80027a4:	08002881 	.word	0x08002881
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027b9 	.word	0x080027b9
 80027b0:	08002821 	.word	0x08002821
 80027b4:	08002835 	.word	0x08002835
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	6a38      	ldr	r0, [r7, #32]
 80027d8:	f7ff ff56 	bl	8002688 <prvInsertTimerInActiveList>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d065      	beq.n	80028ae <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d009      	beq.n	8002804 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	4413      	add	r3, r2
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	4619      	mov	r1, r3
 80027fc:	6a38      	ldr	r0, [r7, #32]
 80027fe:	f7ff fe4b 	bl	8002498 <prvReloadTimer>
 8002802:	e008      	b.n	8002816 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	b2da      	uxtb	r2, r3
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	6a38      	ldr	r0, [r7, #32]
 800281c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800281e:	e046      	b.n	80028ae <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002826:	f023 0301 	bic.w	r3, r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002832:	e03d      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <prvProcessReceivedCommands+0x160>
    __asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	617b      	str	r3, [r7, #20]
}
 8002866:	bf00      	nop
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	18d1      	adds	r1, r2, r3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	6a38      	ldr	r0, [r7, #32]
 800287a:	f7ff ff05 	bl	8002688 <prvInsertTimerInActiveList>
                        break;
 800287e:	e017      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 800288e:	6a38      	ldr	r0, [r7, #32]
 8002890:	f000 fc50 	bl	8003134 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002894:	e00c      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80028a8:	e002      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <prvProcessReceivedCommands+0x1a4>
                        break;
 80028ae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <prvProcessReceivedCommands+0x1c4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1d39      	adds	r1, r7, #4
 80028b6:	2200      	movs	r2, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe f99d 	bl	8000bf8 <xQueueReceive>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f47f af2d 	bne.w	8002720 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000204 	.word	0x20000204

080028d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028da:	e009      	b.n	80028f0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <prvSwitchTimerLists+0x44>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80028e6:	f04f 31ff 	mov.w	r1, #4294967295
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	f7ff fdf6 	bl	80024dc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <prvSwitchTimerLists+0x44>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <prvSwitchTimerLists+0x44>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <prvSwitchTimerLists+0x48>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <prvSwitchTimerLists+0x44>)
 8002906:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002908:	4a04      	ldr	r2, [pc, #16]	@ (800291c <prvSwitchTimerLists+0x48>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
    }
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200001fc 	.word	0x200001fc
 800291c:	20000200 	.word	0x20000200

08002920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002924:	f000 f9ae 	bl	8002c84 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002928:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <prvCheckForValidListAndQueue+0x54>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d11d      	bne.n	800296c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002930:	4811      	ldr	r0, [pc, #68]	@ (8002978 <prvCheckForValidListAndQueue+0x58>)
 8002932:	f7fd fe15 	bl	8000560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002936:	4811      	ldr	r0, [pc, #68]	@ (800297c <prvCheckForValidListAndQueue+0x5c>)
 8002938:	f7fd fe12 	bl	8000560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <prvCheckForValidListAndQueue+0x60>)
 800293e:	4a0e      	ldr	r2, [pc, #56]	@ (8002978 <prvCheckForValidListAndQueue+0x58>)
 8002940:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002942:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <prvCheckForValidListAndQueue+0x64>)
 8002944:	4a0d      	ldr	r2, [pc, #52]	@ (800297c <prvCheckForValidListAndQueue+0x5c>)
 8002946:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002948:	2200      	movs	r2, #0
 800294a:	2110      	movs	r1, #16
 800294c:	200a      	movs	r0, #10
 800294e:	f7fd ff29 	bl	80007a4 <xQueueGenericCreate>
 8002952:	4603      	mov	r3, r0
 8002954:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <prvCheckForValidListAndQueue+0x54>)
 8002956:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <prvCheckForValidListAndQueue+0x54>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002960:	4b04      	ldr	r3, [pc, #16]	@ (8002974 <prvCheckForValidListAndQueue+0x54>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4908      	ldr	r1, [pc, #32]	@ (8002988 <prvCheckForValidListAndQueue+0x68>)
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fbd2 	bl	8001110 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800296c:	f000 f9bc 	bl	8002ce8 <vPortExitCritical>
    }
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000204 	.word	0x20000204
 8002978:	200001d4 	.word	0x200001d4
 800297c:	200001e8 	.word	0x200001e8
 8002980:	200001fc 	.word	0x200001fc
 8002984:	20000200 	.word	0x20000200
 8002988:	08006264 	.word	0x08006264

0800298c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3b04      	subs	r3, #4
 800299c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3b04      	subs	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f023 0201 	bic.w	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3b04      	subs	r3, #4
 80029ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029bc:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <pxPortInitialiseStack+0x64>)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3b14      	subs	r3, #20
 80029c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3b04      	subs	r3, #4
 80029d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f06f 0202 	mvn.w	r2, #2
 80029da:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3b20      	subs	r3, #32
 80029e0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	080029f5 	.word	0x080029f5

080029f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80029fe:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <prvTaskExitError+0x58>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d00b      	beq.n	8002a20 <prvTaskExitError+0x2c>
    __asm volatile
 8002a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0c:	f383 8811 	msr	BASEPRI, r3
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	60fb      	str	r3, [r7, #12]
}
 8002a1a:	bf00      	nop
 8002a1c:	bf00      	nop
 8002a1e:	e7fd      	b.n	8002a1c <prvTaskExitError+0x28>
    __asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
}
 8002a32:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a34:	bf00      	nop
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0fc      	beq.n	8002a36 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	20000004 	.word	0x20000004

08002a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a50:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <pxCurrentTCBConst2>)
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	6808      	ldr	r0, [r1, #0]
 8002a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5a:	f380 8809 	msr	PSP, r0
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f380 8811 	msr	BASEPRI, r0
 8002a6a:	4770      	bx	lr
 8002a6c:	f3af 8000 	nop.w

08002a70 <pxCurrentTCBConst2>:
 8002a70:	200000d0 	.word	0x200000d0
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop

08002a78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a78:	4808      	ldr	r0, [pc, #32]	@ (8002a9c <prvPortStartFirstTask+0x24>)
 8002a7a:	6800      	ldr	r0, [r0, #0]
 8002a7c:	6800      	ldr	r0, [r0, #0]
 8002a7e:	f380 8808 	msr	MSP, r0
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8814 	msr	CONTROL, r0
 8002a8a:	b662      	cpsie	i
 8002a8c:	b661      	cpsie	f
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	df00      	svc	0
 8002a98:	bf00      	nop
 8002a9a:	0000      	.short	0x0000
 8002a9c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop

08002aa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aaa:	4b69      	ldr	r3, [pc, #420]	@ (8002c50 <xPortStartScheduler+0x1ac>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a69      	ldr	r2, [pc, #420]	@ (8002c54 <xPortStartScheduler+0x1b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10b      	bne.n	8002acc <xPortStartScheduler+0x28>
    __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <xPortStartScheduler+0x1ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a61      	ldr	r2, [pc, #388]	@ (8002c58 <xPortStartScheduler+0x1b4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10b      	bne.n	8002aee <xPortStartScheduler+0x4a>
    __asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
 8002ae6:	623b      	str	r3, [r7, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	e7fd      	b.n	8002aea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002aee:	4b5b      	ldr	r3, [pc, #364]	@ (8002c5c <xPortStartScheduler+0x1b8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af6:	332c      	adds	r3, #44	@ 0x2c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a59      	ldr	r2, [pc, #356]	@ (8002c60 <xPortStartScheduler+0x1bc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <xPortStartScheduler+0x74>
    __asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	61fb      	str	r3, [r7, #28]
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	3338      	adds	r3, #56	@ 0x38
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a51      	ldr	r2, [pc, #324]	@ (8002c64 <xPortStartScheduler+0x1c0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <xPortStartScheduler+0x98>
    __asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	61bb      	str	r3, [r7, #24]
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b40:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <xPortStartScheduler+0x1c4>)
 8002b42:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4e:	22ff      	movs	r2, #255	@ 0xff
 8002b50:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b41      	ldr	r3, [pc, #260]	@ (8002c6c <xPortStartScheduler+0x1c8>)
 8002b66:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002b68:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <xPortStartScheduler+0x1c8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <xPortStartScheduler+0xe4>
    __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	617b      	str	r3, [r7, #20]
}
 8002b82:	bf00      	nop
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d013      	beq.n	8002bbe <xPortStartScheduler+0x11a>
    __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	613b      	str	r3, [r7, #16]
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b80      	cmp	r3, #128	@ 0x80
 8002bc8:	d0f1      	beq.n	8002bae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	d103      	bne.n	8002bd8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e004      	b.n	8002be2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f1c3 0307 	rsb	r3, r3, #7
 8002bde:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002be0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002be2:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	4a21      	ldr	r2, [pc, #132]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002bea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bec:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c70 <xPortStartScheduler+0x1cc>)
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002c00:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <xPortStartScheduler+0x1d0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1b      	ldr	r2, [pc, #108]	@ (8002c74 <xPortStartScheduler+0x1d0>)
 8002c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <xPortStartScheduler+0x1d0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a18      	ldr	r2, [pc, #96]	@ (8002c74 <xPortStartScheduler+0x1d0>)
 8002c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c16:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002c18:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <xPortStartScheduler+0x1d4>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002c1e:	f000 f8e5 	bl	8002dec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <xPortStartScheduler+0x1d8>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002c28:	f000 f904 	bl	8002e34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <xPortStartScheduler+0x1dc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a13      	ldr	r2, [pc, #76]	@ (8002c80 <xPortStartScheduler+0x1dc>)
 8002c32:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002c36:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002c38:	f7ff ff1e 	bl	8002a78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002c3c:	f7fe ffd0 	bl	8001be0 <vTaskSwitchContext>
    prvTaskExitError();
 8002c40:	f7ff fed8 	bl	80029f4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3730      	adds	r7, #48	@ 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00
 8002c54:	410fc271 	.word	0x410fc271
 8002c58:	410fc270 	.word	0x410fc270
 8002c5c:	e000ed08 	.word	0xe000ed08
 8002c60:	08002a51 	.word	0x08002a51
 8002c64:	08002d41 	.word	0x08002d41
 8002c68:	e000e400 	.word	0xe000e400
 8002c6c:	20000210 	.word	0x20000210
 8002c70:	20000214 	.word	0x20000214
 8002c74:	e000ed20 	.word	0xe000ed20
 8002c78:	e000ed1c 	.word	0xe000ed1c
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	e000ef34 	.word	0xe000ef34

08002c84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
    __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	607b      	str	r3, [r7, #4]
}
 8002c9c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <vPortEnterCritical+0x5c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <vPortEnterCritical+0x5c>)
 8002ca6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <vPortEnterCritical+0x5c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d110      	bne.n	8002cd2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <vPortEnterCritical+0x60>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00b      	beq.n	8002cd2 <vPortEnterCritical+0x4e>
    __asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	603b      	str	r3, [r7, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <vPortEnterCritical+0x4a>
    }
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20000004 	.word	0x20000004
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <vPortExitCritical+0x50>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10b      	bne.n	8002d0e <vPortExitCritical+0x26>
    __asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	607b      	str	r3, [r7, #4]
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <vPortExitCritical+0x50>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	4a08      	ldr	r2, [pc, #32]	@ (8002d38 <vPortExitCritical+0x50>)
 8002d16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d18:	4b07      	ldr	r3, [pc, #28]	@ (8002d38 <vPortExitCritical+0x50>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <vPortExitCritical+0x44>
 8002d20:	2300      	movs	r3, #0
 8002d22:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	f383 8811 	msr	BASEPRI, r3
}
 8002d2a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	00000000 	.word	0x00000000

08002d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d40:	f3ef 8009 	mrs	r0, PSP
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <pxCurrentTCBConst>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f01e 0f10 	tst.w	lr, #16
 8002d50:	bf08      	it	eq
 8002d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002d64:	f380 8811 	msr	BASEPRI, r0
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f7fe ff36 	bl	8001be0 <vTaskSwitchContext>
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f380 8811 	msr	BASEPRI, r0
 8002d7c:	bc09      	pop	{r0, r3}
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	6808      	ldr	r0, [r1, #0]
 8002d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d86:	f01e 0f10 	tst.w	lr, #16
 8002d8a:	bf08      	it	eq
 8002d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d90:	f380 8809 	msr	PSP, r0
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w

08002da0 <pxCurrentTCBConst>:
 8002da0:	200000d0 	.word	0x200000d0
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop

08002da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
    __asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
}
 8002dc0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002dc2:	f7fe fdf3 	bl	80019ac <xTaskIncrementTick>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <SysTick_Handler+0x40>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f383 8811 	msr	BASEPRI, r3
}
 8002dde:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <vPortSetupTimerInterrupt+0x34>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002df6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <vPortSetupTimerInterrupt+0x38>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <vPortSetupTimerInterrupt+0x3c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <vPortSetupTimerInterrupt+0x40>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	099b      	lsrs	r3, r3, #6
 8002e08:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <vPortSetupTimerInterrupt+0x44>)
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <vPortSetupTimerInterrupt+0x34>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010
 8002e24:	e000e018 	.word	0xe000e018
 8002e28:	20000018 	.word	0x20000018
 8002e2c:	10624dd3 	.word	0x10624dd3
 8002e30:	e000e014 	.word	0xe000e014

08002e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002e44 <vPortEnableVFP+0x10>
 8002e38:	6801      	ldr	r1, [r0, #0]
 8002e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002e3e:	6001      	str	r1, [r0, #0]
 8002e40:	4770      	bx	lr
 8002e42:	0000      	.short	0x0000
 8002e44:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop

08002e4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e52:	f3ef 8305 	mrs	r3, IPSR
 8002e56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d915      	bls.n	8002e8a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <vPortValidateInterruptPriority+0x74>)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e68:	4b16      	ldr	r3, [pc, #88]	@ (8002ec4 <vPortValidateInterruptPriority+0x78>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	7afa      	ldrb	r2, [r7, #11]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d20b      	bcs.n	8002e8a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	607b      	str	r3, [r7, #4]
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <vPortValidateInterruptPriority+0x7c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <vPortValidateInterruptPriority+0x80>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d90b      	bls.n	8002eb2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	603b      	str	r3, [r7, #0]
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	e7fd      	b.n	8002eae <vPortValidateInterruptPriority+0x62>
    }
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	e000e3f0 	.word	0xe000e3f0
 8002ec4:	20000210 	.word	0x20000210
 8002ec8:	e000ed0c 	.word	0xe000ed0c
 8002ecc:	20000214 	.word	0x20000214

08002ed0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08e      	sub	sp, #56	@ 0x38
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d022      	beq.n	8002f28 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002ee2:	2308      	movs	r3, #8
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d81b      	bhi.n	8002f24 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002eec:	2208      	movs	r2, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	f1c3 0308 	rsb	r3, r3, #8
 8002f08:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d804      	bhi.n	8002f1e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	4413      	add	r3, r2
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	e004      	b.n	8002f28 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	e001      	b.n	8002f28 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002f28:	f7fe fc0e 	bl	8001748 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003118 <pvPortMalloc+0x248>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002f34:	f000 f978 	bl	8003228 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f2c0 80d3 	blt.w	80030e6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 80cf 	beq.w	80030e6 <pvPortMalloc+0x216>
 8002f48:	4b74      	ldr	r3, [pc, #464]	@ (800311c <pvPortMalloc+0x24c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	f200 80c9 	bhi.w	80030e6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002f54:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <pvPortMalloc+0x250>)
 8002f56:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002f58:	4b71      	ldr	r3, [pc, #452]	@ (8003120 <pvPortMalloc+0x250>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f60:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <pvPortMalloc+0x254>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d305      	bcc.n	8002f72 <pvPortMalloc+0xa2>
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	4a6f      	ldr	r2, [pc, #444]	@ (8003128 <pvPortMalloc+0x258>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d801      	bhi.n	8002f72 <pvPortMalloc+0xa2>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <pvPortMalloc+0xa4>
 8002f72:	2300      	movs	r3, #0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d129      	bne.n	8002fcc <pvPortMalloc+0xfc>
    __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	623b      	str	r3, [r7, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9c:	4a61      	ldr	r2, [pc, #388]	@ (8003124 <pvPortMalloc+0x254>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d305      	bcc.n	8002fae <pvPortMalloc+0xde>
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	4a60      	ldr	r2, [pc, #384]	@ (8003128 <pvPortMalloc+0x258>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d801      	bhi.n	8002fae <pvPortMalloc+0xde>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <pvPortMalloc+0xe0>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10b      	bne.n	8002fcc <pvPortMalloc+0xfc>
    __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61fb      	str	r3, [r7, #28]
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	e7fd      	b.n	8002fc8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d903      	bls.n	8002fde <pvPortMalloc+0x10e>
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1d8      	bne.n	8002f90 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fde:	4b4e      	ldr	r3, [pc, #312]	@ (8003118 <pvPortMalloc+0x248>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d07e      	beq.n	80030e6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4413      	add	r3, r2
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8003124 <pvPortMalloc+0x254>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d305      	bcc.n	8003006 <pvPortMalloc+0x136>
 8002ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8003128 <pvPortMalloc+0x258>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d801      	bhi.n	8003006 <pvPortMalloc+0x136>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <pvPortMalloc+0x138>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <pvPortMalloc+0x154>
    __asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61bb      	str	r3, [r7, #24]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800302c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d90b      	bls.n	800304e <pvPortMalloc+0x17e>
    __asm volatile
 8003036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	617b      	str	r3, [r7, #20]
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	e7fd      	b.n	800304a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	1ad2      	subs	r2, r2, r3
 8003056:	2308      	movs	r3, #8
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	429a      	cmp	r2, r3
 800305c:	d924      	bls.n	80030a8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800305e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <pvPortMalloc+0x1b8>
    __asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	613b      	str	r3, [r7, #16]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad2      	subs	r2, r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800309a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030a8:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <pvPortMalloc+0x24c>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <pvPortMalloc+0x24c>)
 80030b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030b6:	4b19      	ldr	r3, [pc, #100]	@ (800311c <pvPortMalloc+0x24c>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b1c      	ldr	r3, [pc, #112]	@ (800312c <pvPortMalloc+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d203      	bcs.n	80030ca <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030c2:	4b16      	ldr	r3, [pc, #88]	@ (800311c <pvPortMalloc+0x24c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a19      	ldr	r2, [pc, #100]	@ (800312c <pvPortMalloc+0x25c>)
 80030c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <pvPortMalloc+0x260>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	3301      	adds	r3, #1
 80030e2:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <pvPortMalloc+0x260>)
 80030e4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80030e6:	f7fe fb3d 	bl	8001764 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <pvPortMalloc+0x23c>
    __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60fb      	str	r3, [r7, #12]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <pvPortMalloc+0x238>
    return pvReturn;
 800310c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800310e:	4618      	mov	r0, r3
 8003110:	3738      	adds	r7, #56	@ 0x38
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20012e20 	.word	0x20012e20
 800311c:	20012e24 	.word	0x20012e24
 8003120:	20012e18 	.word	0x20012e18
 8003124:	20000218 	.word	0x20000218
 8003128:	20012e17 	.word	0x20012e17
 800312c:	20012e28 	.word	0x20012e28
 8003130:	20012e2c 	.word	0x20012e2c

08003134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d064      	beq.n	8003210 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003146:	2308      	movs	r3, #8
 8003148:	425b      	negs	r3, r3
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	4a30      	ldr	r2, [pc, #192]	@ (8003218 <vPortFree+0xe4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d305      	bcc.n	8003168 <vPortFree+0x34>
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <vPortFree+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d801      	bhi.n	8003168 <vPortFree+0x34>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <vPortFree+0x36>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10b      	bne.n	8003186 <vPortFree+0x52>
    __asm volatile
 800316e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003172:	f383 8811 	msr	BASEPRI, r3
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	617b      	str	r3, [r7, #20]
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	e7fd      	b.n	8003182 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <vPortFree+0x72>
    __asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	613b      	str	r3, [r7, #16]
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	e7fd      	b.n	80031a2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <vPortFree+0x92>
    __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	60fb      	str	r3, [r7, #12]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0fdb      	lsrs	r3, r3, #31
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01c      	beq.n	8003210 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80031ea:	f7fe faad 	bl	8001748 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <vPortFree+0xec>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4413      	add	r3, r2
 80031f8:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <vPortFree+0xec>)
 80031fa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80031fc:	69b8      	ldr	r0, [r7, #24]
 80031fe:	f000 f86d 	bl	80032dc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <vPortFree+0xf0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a06      	ldr	r2, [pc, #24]	@ (8003224 <vPortFree+0xf0>)
 800320a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800320c:	f7fe faaa 	bl	8001764 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003210:	bf00      	nop
 8003212:	3720      	adds	r7, #32
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000218 	.word	0x20000218
 800321c:	20012e17 	.word	0x20012e17
 8003220:	20012e24 	.word	0x20012e24
 8003224:	20012e30 	.word	0x20012e30

08003228 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800322e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8003232:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003234:	4b24      	ldr	r3, [pc, #144]	@ (80032c8 <prvHeapInit+0xa0>)
 8003236:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3307      	adds	r3, #7
 8003246:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f023 0307 	bic.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	4a1c      	ldr	r2, [pc, #112]	@ (80032c8 <prvHeapInit+0xa0>)
 8003258:	4413      	add	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a1b      	ldr	r2, [pc, #108]	@ (80032cc <prvHeapInit+0xa4>)
 8003260:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003262:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <prvHeapInit+0xa4>)
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003270:	2208      	movs	r2, #8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a13      	ldr	r2, [pc, #76]	@ (80032d0 <prvHeapInit+0xa8>)
 8003284:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003286:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <prvHeapInit+0xa8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <prvHeapInit+0xa8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	1ad2      	subs	r2, r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80032a4:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <prvHeapInit+0xa8>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a08      	ldr	r2, [pc, #32]	@ (80032d4 <prvHeapInit+0xac>)
 80032b2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <prvHeapInit+0xb0>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	20000218 	.word	0x20000218
 80032cc:	20012e18 	.word	0x20012e18
 80032d0:	20012e20 	.word	0x20012e20
 80032d4:	20012e28 	.word	0x20012e28
 80032d8:	20012e24 	.word	0x20012e24

080032dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80032e4:	4b36      	ldr	r3, [pc, #216]	@ (80033c0 <prvInsertBlockIntoFreeList+0xe4>)
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e002      	b.n	80032f0 <prvInsertBlockIntoFreeList+0x14>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d8f7      	bhi.n	80032ea <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a30      	ldr	r2, [pc, #192]	@ (80033c0 <prvInsertBlockIntoFreeList+0xe4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d018      	beq.n	8003334 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a2f      	ldr	r2, [pc, #188]	@ (80033c4 <prvInsertBlockIntoFreeList+0xe8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d305      	bcc.n	8003316 <prvInsertBlockIntoFreeList+0x3a>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4a2e      	ldr	r2, [pc, #184]	@ (80033c8 <prvInsertBlockIntoFreeList+0xec>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d801      	bhi.n	8003316 <prvInsertBlockIntoFreeList+0x3a>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <prvInsertBlockIntoFreeList+0x3c>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	60fb      	str	r3, [r7, #12]
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d108      	bne.n	8003358 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	441a      	add	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	441a      	add	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d118      	bne.n	800339e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <prvInsertBlockIntoFreeList+0xf0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d00d      	beq.n	8003394 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	441a      	add	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e008      	b.n	80033a6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003394:	4b0d      	ldr	r3, [pc, #52]	@ (80033cc <prvInsertBlockIntoFreeList+0xf0>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e003      	b.n	80033a6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d002      	beq.n	80033b4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	20012e18 	.word	0x20012e18
 80033c4:	20000218 	.word	0x20000218
 80033c8:	20012e17 	.word	0x20012e17
 80033cc:	20012e20 	.word	0x20012e20

080033d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033d6:	f000 fbcd 	bl	8003b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033da:	f000 f83b 	bl	8003454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033de:	f000 f8cd 	bl	800357c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80033e2:	f000 f8a1 	bl	8003528 <MX_USART2_UART_Init>
     - the other queue can hold variables of type char*
     
     Both queues can hold a maximum of 10 items.
     A real application should check the return values to ensure the queues
     have been successfully created */
  xIntegerQueue = xQueueCreate( 10, sizeof( uint32_t ) );
 80033e6:	2200      	movs	r2, #0
 80033e8:	2104      	movs	r1, #4
 80033ea:	200a      	movs	r0, #10
 80033ec:	f7fd f9da 	bl	80007a4 <xQueueGenericCreate>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a12      	ldr	r2, [pc, #72]	@ (800343c <main+0x6c>)
 80033f4:	6013      	str	r3, [r2, #0]
  xStringQueue  = xQueueCreate( 10, sizeof( char* ) );
 80033f6:	2200      	movs	r2, #0
 80033f8:	2104      	movs	r1, #4
 80033fa:	200a      	movs	r0, #10
 80033fc:	f7fd f9d2 	bl	80007a4 <xQueueGenericCreate>
 8003400:	4603      	mov	r3, r0
 8003402:	4a0f      	ldr	r2, [pc, #60]	@ (8003440 <main+0x70>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Create the task that uses a queue to pass integers to the EXTI0 interrupt
     service routine. The task is created at priority 1 */
     xTaskCreate( vIntegerGenerator, "IntGen", 1000, NULL, 1, NULL );
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2301      	movs	r3, #1
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2300      	movs	r3, #0
 8003410:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003414:	490b      	ldr	r1, [pc, #44]	@ (8003444 <main+0x74>)
 8003416:	480c      	ldr	r0, [pc, #48]	@ (8003448 <main+0x78>)
 8003418:	f7fd ff3a 	bl	8001290 <xTaskCreate>

  /* Create the task that prints out the strings sent to it from the EXTI0
     interrupt service routine. This task is created at a higher priority of 2 */
  xTaskCreate( vStringPrinter, "String", 1000, NULL, 2, NULL );
 800341c:	2300      	movs	r3, #0
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	2302      	movs	r3, #2
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800342a:	4908      	ldr	r1, [pc, #32]	@ (800344c <main+0x7c>)
 800342c:	4808      	ldr	r0, [pc, #32]	@ (8003450 <main+0x80>)
 800342e:	f7fd ff2f 	bl	8001290 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 8003432:	f7fe f945 	bl	80016c0 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8003436:	bf00      	nop
 8003438:	e7fd      	b.n	8003436 <main+0x66>
 800343a:	bf00      	nop
 800343c:	20012e88 	.word	0x20012e88
 8003440:	20012e8c 	.word	0x20012e8c
 8003444:	0800626c 	.word	0x0800626c
 8003448:	080036ed 	.word	0x080036ed
 800344c:	08006274 	.word	0x08006274
 8003450:	0800375d 	.word	0x0800375d

08003454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b094      	sub	sp, #80	@ 0x50
 8003458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800345a:	f107 0320 	add.w	r3, r7, #32
 800345e:	2230      	movs	r2, #48	@ 0x30
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fa6a 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <SystemClock_Config+0xcc>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <SystemClock_Config+0xcc>)
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003486:	6413      	str	r3, [r2, #64]	@ 0x40
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <SystemClock_Config+0xcc>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <SystemClock_Config+0xd0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <SystemClock_Config+0xd0>)
 800349e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003524 <SystemClock_Config+0xd0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034b0:	2302      	movs	r3, #2
 80034b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034b8:	2310      	movs	r3, #16
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034bc:	2302      	movs	r3, #2
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034c4:	2308      	movs	r3, #8
 80034c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80034c8:	2332      	movs	r3, #50	@ 0x32
 80034ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80034cc:	2304      	movs	r3, #4
 80034ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034d0:	2307      	movs	r3, #7
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034d4:	f107 0320 	add.w	r3, r7, #32
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fe83 	bl	80041e4 <HAL_RCC_OscConfig>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80034e4:	f000 f9b2 	bl	800384c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034e8:	230f      	movs	r3, #15
 80034ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ec:	2302      	movs	r3, #2
 80034ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f001 f8e4 	bl	80046d4 <HAL_RCC_ClockConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003512:	f000 f99b 	bl	800384c <Error_Handler>
  }
}
 8003516:	bf00      	nop
 8003518:	3750      	adds	r7, #80	@ 0x50
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000

08003528 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 800352e:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <MX_USART2_UART_Init+0x50>)
 8003530:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003532:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 8003534:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003538:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003540:	4b0c      	ldr	r3, [pc, #48]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 800354e:	220c      	movs	r2, #12
 8003550:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800355e:	4805      	ldr	r0, [pc, #20]	@ (8003574 <MX_USART2_UART_Init+0x4c>)
 8003560:	f001 fdac 	bl	80050bc <HAL_UART_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800356a:	f000 f96f 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20012e34 	.word	0x20012e34
 8003578:	40004400 	.word	0x40004400

0800357c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003582:	f107 0314 	add.w	r3, r7, #20
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	60da      	str	r2, [r3, #12]
 8003590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
 8003596:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <MX_GPIO_Init+0x11c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a3f      	ldr	r2, [pc, #252]	@ (8003698 <MX_GPIO_Init+0x11c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b39      	ldr	r3, [pc, #228]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	4a38      	ldr	r2, [pc, #224]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	4b32      	ldr	r3, [pc, #200]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a31      	ldr	r2, [pc, #196]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b2f      	ldr	r3, [pc, #188]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b28      	ldr	r3, [pc, #160]	@ (8003698 <MX_GPIO_Init+0x11c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003608:	4824      	ldr	r0, [pc, #144]	@ (800369c <MX_GPIO_Init+0x120>)
 800360a:	f000 fd9f 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800360e:	2301      	movs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003612:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	481f      	ldr	r0, [pc, #124]	@ (80036a0 <MX_GPIO_Init+0x124>)
 8003624:	f000 fbf6 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003628:	2304      	movs	r3, #4
 800362a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	481a      	ldr	r0, [pc, #104]	@ (80036a4 <MX_GPIO_Init+0x128>)
 800363c:	f000 fbea 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8003640:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8003644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	4810      	ldr	r0, [pc, #64]	@ (800369c <MX_GPIO_Init+0x120>)
 800365a:	f000 fbdb 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003662:	2302      	movs	r3, #2
 8003664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800366e:	2306      	movs	r3, #6
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003672:	f107 0314 	add.w	r3, r7, #20
 8003676:	4619      	mov	r1, r3
 8003678:	480b      	ldr	r0, [pc, #44]	@ (80036a8 <MX_GPIO_Init+0x12c>)
 800367a:	f000 fbcb 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2106      	movs	r1, #6
 8003682:	2006      	movs	r0, #6
 8003684:	f000 fb8e 	bl	8003da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003688:	2006      	movs	r0, #6
 800368a:	f000 fba7 	bl	8003ddc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800368e:	bf00      	nop
 8003690:	3728      	adds	r7, #40	@ 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800

080036ac <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e00b      	b.n	80036d4 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	18d1      	adds	r1, r2, r3
 80036c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80036c6:	2201      	movs	r2, #1
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f001 fd47 	bl	800515c <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ed      	bne.n	80036bc <UART2_Print_Text+0x10>
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <vIntegerGenerator>:

static void vIntegerGenerator( void *pvParameters )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  TickType_t xLastExecutionTime;
  uint32_t ulValueToSend = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  int i;

  /* initialize the variable used by the call to vTaskDelayUntil() */
  xLastExecutionTime = xTaskGetTickCount();
 80036f8:	f7fe f93c 	bl	8001974 <xTaskGetTickCount>
 80036fc:	4603      	mov	r3, r0
 80036fe:	613b      	str	r3, [r7, #16]

  for ( ;; )
  {
    /* This is a periodic task. Block until it is time to run again.
       The task will execute every 200ms */
    vTaskDelayUntil( &xLastExecutionTime, pdMS_TO_TICKS( 200 ) );
 8003700:	f107 0310 	add.w	r3, r7, #16
 8003704:	21c8      	movs	r1, #200	@ 0xc8
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd ff0e 	bl	8001528 <xTaskDelayUntil>

    /* Send five numbers to the integer queue, each value one higher than the previous value.
       The numbers are read from the queue by the interrupt service routine (HAL_GPIO_EXTI_Callback()).
       The interrupt service routine always empties the integer queue, so this task is guaranteed to be
       able to write all five values without needing to specify a block time */
    for ( i = 0; i < 5; i++ )
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e00d      	b.n	800372e <vIntegerGenerator+0x42>
    {
      xQueueSendToBack( xIntegerQueue, &ulValueToSend, 0 );
 8003712:	4b0e      	ldr	r3, [pc, #56]	@ (800374c <vIntegerGenerator+0x60>)
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f107 010c 	add.w	r1, r7, #12
 800371a:	2300      	movs	r3, #0
 800371c:	2200      	movs	r2, #0
 800371e:	f7fd f8b3 	bl	8000888 <xQueueGenericSend>
      ulValueToSend++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < 5; i++ )
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3301      	adds	r3, #1
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b04      	cmp	r3, #4
 8003732:	ddee      	ble.n	8003712 <vIntegerGenerator+0x26>
    }

    /* Generate the EXTI0 timeout interrupt by software, so the EXTI0 callback can read the
       values from the integer queue */
    UART2_Print_Text( &huart2, "Generator task - About to generate an EXTI0 interrupt by software.\r\n" );
 8003734:	4906      	ldr	r1, [pc, #24]	@ (8003750 <vIntegerGenerator+0x64>)
 8003736:	4807      	ldr	r0, [pc, #28]	@ (8003754 <vIntegerGenerator+0x68>)
 8003738:	f7ff ffb8 	bl	80036ac <UART2_Print_Text>
    HAL_NVIC_SetPendingIRQ( EXTI0_IRQn );
 800373c:	2006      	movs	r0, #6
 800373e:	f000 fb5b 	bl	8003df8 <HAL_NVIC_SetPendingIRQ>
    UART2_Print_Text( &huart2, "Generator task - EXTI0 interrupt by software generated.\r\n\n\n" );
 8003742:	4905      	ldr	r1, [pc, #20]	@ (8003758 <vIntegerGenerator+0x6c>)
 8003744:	4803      	ldr	r0, [pc, #12]	@ (8003754 <vIntegerGenerator+0x68>)
 8003746:	f7ff ffb1 	bl	80036ac <UART2_Print_Text>
    vTaskDelayUntil( &xLastExecutionTime, pdMS_TO_TICKS( 200 ) );
 800374a:	e7d9      	b.n	8003700 <vIntegerGenerator+0x14>
 800374c:	20012e88 	.word	0x20012e88
 8003750:	0800627c 	.word	0x0800627c
 8003754:	20012e34 	.word	0x20012e34
 8003758:	080062c4 	.word	0x080062c4

0800375c <vStringPrinter>:
  }
}

static void vStringPrinter( void *pvParameters )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  char *pcString;

  for ( ;; )
  {
    /* block on the string queue for wait for data to arrive */
    xQueueReceive( xStringQueue, &pcString, portMAX_DELAY );
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <vStringPrinter+0x34>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f107 010c 	add.w	r1, r7, #12
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fa41 	bl	8000bf8 <xQueueReceive>

    /* print out the string received */
    ( void ) snprintf( ucOutputString, STRING_SIZE, "%s", pcString );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <vStringPrinter+0x38>)
 800377a:	210a      	movs	r1, #10
 800377c:	4806      	ldr	r0, [pc, #24]	@ (8003798 <vStringPrinter+0x3c>)
 800377e:	f002 f8a9 	bl	80058d4 <sniprintf>
    UART2_Print_Text( &huart2, ( const char * ) ucOutputString );
 8003782:	4905      	ldr	r1, [pc, #20]	@ (8003798 <vStringPrinter+0x3c>)
 8003784:	4805      	ldr	r0, [pc, #20]	@ (800379c <vStringPrinter+0x40>)
 8003786:	f7ff ff91 	bl	80036ac <UART2_Print_Text>
    xQueueReceive( xStringQueue, &pcString, portMAX_DELAY );
 800378a:	bf00      	nop
 800378c:	e7ea      	b.n	8003764 <vStringPrinter+0x8>
 800378e:	bf00      	nop
 8003790:	20012e8c 	.word	0x20012e8c
 8003794:	08006300 	.word	0x08006300
 8003798:	20012e7c 	.word	0x20012e7c
 800379c:	20012e34 	.word	0x20012e34

080037a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
     interrupt service routine's stack, and so exist even when the interrupt
     service routine is not executing */
  static const char *pcStrings[] = { "String0\r\n", "String1\r\n", "String2\r\n", "String3\r\n" };

  /* if EXTI0 */
  if ( GPIO_Pin == GPIO_PIN_0 )
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d12d      	bne.n	800380c <HAL_GPIO_EXTI_Callback+0x6c>
  {
    /* used for debugging purposes */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_13 );
 80037b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037b4:	4817      	ldr	r0, [pc, #92]	@ (8003814 <HAL_GPIO_EXTI_Callback+0x74>)
 80037b6:	f000 fce2 	bl	800417e <HAL_GPIO_TogglePin>
    /* As always, xHigherPriorityTaskWoken is initialized to pdFALSE to be able to detect
       it getting set to pdTRUE inside an interrupt safe API function. Note that as an
       interrupt safe API function can only set xHigherPriorityTaskWoken to pdTRUE,
       it is safe to use the same xHigherPriorityTaskWoken variable in both the call
       to xQueueReceiveFromISR() and the call to xQueueSendToBackFromISR() */
    xHigherPriorityTaskWoken = pdFALSE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]

    /* while the integer queue is not empty, read from it until the queue is empty */
    while( xQueueReceiveFromISR( xIntegerQueue, &ulReceivedNumber, &xHigherPriorityTaskWoken ) != errQUEUE_EMPTY )
 80037be:	e00e      	b.n	80037de <HAL_GPIO_EXTI_Callback+0x3e>
    {
      /* truncate the received value of the integer queue to the last two bits (values 0 to 3 inclusive),
         then use the truncated value as an index into the pcStrings[] array to select a string (char *)
         to send on the other string queue */
      ulReceivedNumber &= 0x03;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	60bb      	str	r3, [r7, #8]
      xQueueSendToBackFromISR( xStringQueue, &pcStrings[ ulReceivedNumber ], &xHigherPriorityTaskWoken );
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_GPIO_EXTI_Callback+0x78>)
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4a12      	ldr	r2, [pc, #72]	@ (800381c <HAL_GPIO_EXTI_Callback+0x7c>)
 80037d2:	1899      	adds	r1, r3, r2
 80037d4:	f107 020c 	add.w	r2, r7, #12
 80037d8:	2300      	movs	r3, #0
 80037da:	f7fd f957 	bl	8000a8c <xQueueGenericSendFromISR>
    while( xQueueReceiveFromISR( xIntegerQueue, &ulReceivedNumber, &xHigherPriorityTaskWoken ) != errQUEUE_EMPTY )
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_GPIO_EXTI_Callback+0x80>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f107 020c 	add.w	r2, r7, #12
 80037e6:	f107 0108 	add.w	r1, r7, #8
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fae6 	bl	8000dbc <xQueueReceiveFromISR>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e4      	bne.n	80037c0 <HAL_GPIO_EXTI_Callback+0x20>

       xHigherPriorityTaskWoken is used as the parameter to portYIELD_FROM_ISR().
       - If xHigherPriorityTaskWoken equals pdTRUE, then calling portYIELD_FROM_ISR() will request
         a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE, then calling portYIELD_FROM_ISR() will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_GPIO_EXTI_Callback+0x6c>
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_GPIO_EXTI_Callback+0x84>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
  }
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40020c00 	.word	0x40020c00
 8003818:	20012e8c 	.word	0x20012e8c
 800381c:	20000008 	.word	0x20000008
 8003820:	20012e88 	.word	0x20012e88
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800383a:	f000 f9bd 	bl	8003bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40001000 	.word	0x40001000

0800384c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003850:	b672      	cpsid	i
}
 8003852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003854:	bf00      	nop
 8003856:	e7fd      	b.n	8003854 <Error_Handler+0x8>

08003858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]
 8003862:	4b10      	ldr	r3, [pc, #64]	@ (80038a4 <HAL_MspInit+0x4c>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	4a0f      	ldr	r2, [pc, #60]	@ (80038a4 <HAL_MspInit+0x4c>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800386c:	6453      	str	r3, [r2, #68]	@ 0x44
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <HAL_MspInit+0x4c>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_MspInit+0x4c>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	4a08      	ldr	r2, [pc, #32]	@ (80038a4 <HAL_MspInit+0x4c>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003888:	6413      	str	r3, [r2, #64]	@ 0x40
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_MspInit+0x4c>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	@ 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a19      	ldr	r2, [pc, #100]	@ (800392c <HAL_UART_MspInit+0x84>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d12b      	bne.n	8003922 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	4a10      	ldr	r2, [pc, #64]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_UART_MspInit+0x88>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003902:	230c      	movs	r3, #12
 8003904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003906:	2302      	movs	r3, #2
 8003908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390e:	2303      	movs	r3, #3
 8003910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003912:	2307      	movs	r3, #7
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	@ (8003934 <HAL_UART_MspInit+0x8c>)
 800391e:	f000 fa79 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003922:	bf00      	nop
 8003924:	3728      	adds	r7, #40	@ 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40004400 	.word	0x40004400
 8003930:	40023800 	.word	0x40023800
 8003934:	40020000 	.word	0x40020000

08003938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	@ 0x38
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	4b33      	ldr	r3, [pc, #204]	@ (8003a1c <HAL_InitTick+0xe4>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	4a32      	ldr	r2, [pc, #200]	@ (8003a1c <HAL_InitTick+0xe4>)
 8003952:	f043 0310 	orr.w	r3, r3, #16
 8003956:	6413      	str	r3, [r2, #64]	@ 0x40
 8003958:	4b30      	ldr	r3, [pc, #192]	@ (8003a1c <HAL_InitTick+0xe4>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003964:	f107 0210 	add.w	r2, r7, #16
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f8d0 	bl	8004b14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800397e:	f001 f8a1 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 8003982:	6378      	str	r0, [r7, #52]	@ 0x34
 8003984:	e004      	b.n	8003990 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003986:	f001 f89d 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800398a:	4603      	mov	r3, r0
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <HAL_InitTick+0xe8>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	0c9b      	lsrs	r3, r3, #18
 800399a:	3b01      	subs	r3, #1
 800399c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800399e:	4b21      	ldr	r3, [pc, #132]	@ (8003a24 <HAL_InitTick+0xec>)
 80039a0:	4a21      	ldr	r2, [pc, #132]	@ (8003a28 <HAL_InitTick+0xf0>)
 80039a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80039a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a24 <HAL_InitTick+0xec>)
 80039a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003a24 <HAL_InitTick+0xec>)
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a24 <HAL_InitTick+0xec>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_InitTick+0xec>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039be:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_InitTick+0xec>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80039c4:	4817      	ldr	r0, [pc, #92]	@ (8003a24 <HAL_InitTick+0xec>)
 80039c6:	f001 f8d7 	bl	8004b78 <HAL_TIM_Base_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80039d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d11b      	bne.n	8003a10 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80039d8:	4812      	ldr	r0, [pc, #72]	@ (8003a24 <HAL_InitTick+0xec>)
 80039da:	f001 f927 	bl	8004c2c <HAL_TIM_Base_Start_IT>
 80039de:	4603      	mov	r3, r0
 80039e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80039e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80039ec:	2036      	movs	r0, #54	@ 0x36
 80039ee:	f000 f9f5 	bl	8003ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b0f      	cmp	r3, #15
 80039f6:	d808      	bhi.n	8003a0a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80039f8:	2200      	movs	r2, #0
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	2036      	movs	r0, #54	@ 0x36
 80039fe:	f000 f9d1 	bl	8003da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a02:	4a0a      	ldr	r2, [pc, #40]	@ (8003a2c <HAL_InitTick+0xf4>)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	e002      	b.n	8003a10 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3738      	adds	r7, #56	@ 0x38
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	431bde83 	.word	0x431bde83
 8003a24:	20012e90 	.word	0x20012e90
 8003a28:	40001000 	.word	0x40001000
 8003a2c:	2000001c 	.word	0x2000001c

08003a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <NMI_Handler+0x4>

08003a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <HardFault_Handler+0x4>

08003a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <MemManage_Handler+0x4>

08003a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <BusFault_Handler+0x4>

08003a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <UsageFault_Handler+0x4>

08003a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f000 fba2 	bl	80041b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* callback added manually here since the EXTI0
     interrupt is generated by SW. Otherwise the
     callback won't be called because the GPIO_PIN_0's
     state evaluates to RESET */
  HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7ff fe95 	bl	80037a0 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003a80:	4802      	ldr	r0, [pc, #8]	@ (8003a8c <TIM6_DAC_IRQHandler+0x10>)
 8003a82:	f001 f943 	bl	8004d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20012e90 	.word	0x20012e90

08003a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a98:	4a14      	ldr	r2, [pc, #80]	@ (8003aec <_sbrk+0x5c>)
 8003a9a:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <_sbrk+0x60>)
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <_sbrk+0x64>)
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <_sbrk+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d207      	bcs.n	8003ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ac0:	f001 ff44 	bl	800594c <__errno>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	220c      	movs	r2, #12
 8003ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	e009      	b.n	8003ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <_sbrk+0x64>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ad6:	4b07      	ldr	r3, [pc, #28]	@ (8003af4 <_sbrk+0x64>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	4a05      	ldr	r2, [pc, #20]	@ (8003af4 <_sbrk+0x64>)
 8003ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20020000 	.word	0x20020000
 8003af0:	00000400 	.word	0x00000400
 8003af4:	20012ed8 	.word	0x20012ed8
 8003af8:	20013028 	.word	0x20013028

08003afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <SystemInit+0x20>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	4a05      	ldr	r2, [pc, #20]	@ (8003b1c <SystemInit+0x20>)
 8003b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b24:	f7ff ffea 	bl	8003afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b28:	480c      	ldr	r0, [pc, #48]	@ (8003b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b2a:	490d      	ldr	r1, [pc, #52]	@ (8003b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b30:	e002      	b.n	8003b38 <LoopCopyDataInit>

08003b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b36:	3304      	adds	r3, #4

08003b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b3c:	d3f9      	bcc.n	8003b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b40:	4c0a      	ldr	r4, [pc, #40]	@ (8003b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b44:	e001      	b.n	8003b4a <LoopFillZerobss>

08003b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b48:	3204      	adds	r2, #4

08003b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b4c:	d3fb      	bcc.n	8003b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b4e:	f001 ff03 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b52:	f7ff fc3d 	bl	80033d0 <main>
  bx  lr    
 8003b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003b64:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 8003b68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003b6c:	20013028 	.word	0x20013028

08003b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b70:	e7fe      	b.n	8003b70 <ADC_IRQHandler>
	...

08003b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b78:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb4 <HAL_Init+0x40>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bb4 <HAL_Init+0x40>)
 8003b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b84:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb4 <HAL_Init+0x40>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <HAL_Init+0x40>)
 8003b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b90:	4b08      	ldr	r3, [pc, #32]	@ (8003bb4 <HAL_Init+0x40>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a07      	ldr	r2, [pc, #28]	@ (8003bb4 <HAL_Init+0x40>)
 8003b96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b9c:	2003      	movs	r0, #3
 8003b9e:	f000 f8f6 	bl	8003d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7ff fec8 	bl	8003938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ba8:	f7ff fe56 	bl	8003858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000020 	.word	0x20000020
 8003bdc:	20012edc 	.word	0x20012edc

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	@ (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20012edc 	.word	0x20012edc

08003bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c08:	4b0c      	ldr	r3, [pc, #48]	@ (8003c3c <__NVIC_SetPriorityGrouping+0x44>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c14:	4013      	ands	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2a:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <__NVIC_SetPriorityGrouping+0x44>)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	60d3      	str	r3, [r2, #12]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c44:	4b04      	ldr	r3, [pc, #16]	@ (8003c58 <__NVIC_GetPriorityGrouping+0x18>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	f003 0307 	and.w	r3, r3, #7
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	db0b      	blt.n	8003c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	f003 021f 	and.w	r2, r3, #31
 8003c74:	4907      	ldr	r1, [pc, #28]	@ (8003c94 <__NVIC_EnableIRQ+0x38>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000e100 	.word	0xe000e100

08003c98 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	db0c      	blt.n	8003cc4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	f003 021f 	and.w	r2, r3, #31
 8003cb0:	4907      	ldr	r1, [pc, #28]	@ (8003cd0 <__NVIC_SetPendingIRQ+0x38>)
 8003cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	2001      	movs	r0, #1
 8003cba:	fa00 f202 	lsl.w	r2, r0, r2
 8003cbe:	3340      	adds	r3, #64	@ 0x40
 8003cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100

08003cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	6039      	str	r1, [r7, #0]
 8003cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	db0a      	blt.n	8003cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	490c      	ldr	r1, [pc, #48]	@ (8003d20 <__NVIC_SetPriority+0x4c>)
 8003cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	b2d2      	uxtb	r2, r2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cfc:	e00a      	b.n	8003d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4908      	ldr	r1, [pc, #32]	@ (8003d24 <__NVIC_SetPriority+0x50>)
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	3b04      	subs	r3, #4
 8003d0c:	0112      	lsls	r2, r2, #4
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	440b      	add	r3, r1
 8003d12:	761a      	strb	r2, [r3, #24]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b089      	sub	sp, #36	@ 0x24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f1c3 0307 	rsb	r3, r3, #7
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	bf28      	it	cs
 8003d46:	2304      	movcs	r3, #4
 8003d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d902      	bls.n	8003d58 <NVIC_EncodePriority+0x30>
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3b03      	subs	r3, #3
 8003d56:	e000      	b.n	8003d5a <NVIC_EncodePriority+0x32>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	43d9      	mvns	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d80:	4313      	orrs	r3, r2
         );
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3724      	adds	r7, #36	@ 0x24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff2e 	bl	8003bf8 <__NVIC_SetPriorityGrouping>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db6:	f7ff ff43 	bl	8003c40 <__NVIC_GetPriorityGrouping>
 8003dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	6978      	ldr	r0, [r7, #20]
 8003dc2:	f7ff ffb1 	bl	8003d28 <NVIC_EncodePriority>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff80 	bl	8003cd4 <__NVIC_SetPriority>
}
 8003dd4:	bf00      	nop
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff36 	bl	8003c5c <__NVIC_EnableIRQ>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff ff46 	bl	8003c98 <__NVIC_SetPendingIRQ>
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	@ 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e16b      	b.n	8004108 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 815a 	bne.w	8004102 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d005      	beq.n	8003e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d017      	beq.n	8003f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80b4 	beq.w	8004102 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b60      	ldr	r3, [pc, #384]	@ (8004120 <HAL_GPIO_Init+0x30c>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8004120 <HAL_GPIO_Init+0x30c>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003faa:	4b5d      	ldr	r3, [pc, #372]	@ (8004120 <HAL_GPIO_Init+0x30c>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004124 <HAL_GPIO_Init+0x310>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a52      	ldr	r2, [pc, #328]	@ (8004128 <HAL_GPIO_Init+0x314>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02b      	beq.n	800403a <HAL_GPIO_Init+0x226>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a51      	ldr	r2, [pc, #324]	@ (800412c <HAL_GPIO_Init+0x318>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d025      	beq.n	8004036 <HAL_GPIO_Init+0x222>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a50      	ldr	r2, [pc, #320]	@ (8004130 <HAL_GPIO_Init+0x31c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01f      	beq.n	8004032 <HAL_GPIO_Init+0x21e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4f      	ldr	r2, [pc, #316]	@ (8004134 <HAL_GPIO_Init+0x320>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d019      	beq.n	800402e <HAL_GPIO_Init+0x21a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4e      	ldr	r2, [pc, #312]	@ (8004138 <HAL_GPIO_Init+0x324>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_GPIO_Init+0x216>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4d      	ldr	r2, [pc, #308]	@ (800413c <HAL_GPIO_Init+0x328>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00d      	beq.n	8004026 <HAL_GPIO_Init+0x212>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a4c      	ldr	r2, [pc, #304]	@ (8004140 <HAL_GPIO_Init+0x32c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <HAL_GPIO_Init+0x20e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a4b      	ldr	r2, [pc, #300]	@ (8004144 <HAL_GPIO_Init+0x330>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_GPIO_Init+0x20a>
 800401a:	2307      	movs	r3, #7
 800401c:	e00e      	b.n	800403c <HAL_GPIO_Init+0x228>
 800401e:	2308      	movs	r3, #8
 8004020:	e00c      	b.n	800403c <HAL_GPIO_Init+0x228>
 8004022:	2306      	movs	r3, #6
 8004024:	e00a      	b.n	800403c <HAL_GPIO_Init+0x228>
 8004026:	2305      	movs	r3, #5
 8004028:	e008      	b.n	800403c <HAL_GPIO_Init+0x228>
 800402a:	2304      	movs	r3, #4
 800402c:	e006      	b.n	800403c <HAL_GPIO_Init+0x228>
 800402e:	2303      	movs	r3, #3
 8004030:	e004      	b.n	800403c <HAL_GPIO_Init+0x228>
 8004032:	2302      	movs	r3, #2
 8004034:	e002      	b.n	800403c <HAL_GPIO_Init+0x228>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_GPIO_Init+0x228>
 800403a:	2300      	movs	r3, #0
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f002 0203 	and.w	r2, r2, #3
 8004042:	0092      	lsls	r2, r2, #2
 8004044:	4093      	lsls	r3, r2
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800404c:	4935      	ldr	r1, [pc, #212]	@ (8004124 <HAL_GPIO_Init+0x310>)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405a:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <HAL_GPIO_Init+0x334>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407e:	4a32      	ldr	r2, [pc, #200]	@ (8004148 <HAL_GPIO_Init+0x334>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004084:	4b30      	ldr	r3, [pc, #192]	@ (8004148 <HAL_GPIO_Init+0x334>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a8:	4a27      	ldr	r2, [pc, #156]	@ (8004148 <HAL_GPIO_Init+0x334>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ae:	4b26      	ldr	r3, [pc, #152]	@ (8004148 <HAL_GPIO_Init+0x334>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <HAL_GPIO_Init+0x334>)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004148 <HAL_GPIO_Init+0x334>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040fc:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <HAL_GPIO_Init+0x334>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3301      	adds	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	f67f ae90 	bls.w	8003e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40013800 	.word	0x40013800
 8004128:	40020000 	.word	0x40020000
 800412c:	40020400 	.word	0x40020400
 8004130:	40020800 	.word	0x40020800
 8004134:	40020c00 	.word	0x40020c00
 8004138:	40021000 	.word	0x40021000
 800413c:	40021400 	.word	0x40021400
 8004140:	40021800 	.word	0x40021800
 8004144:	40021c00 	.word	0x40021c00
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004190:	887a      	ldrh	r2, [r7, #2]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4013      	ands	r3, r2
 8004196:	041a      	lsls	r2, r3, #16
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43d9      	mvns	r1, r3
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	400b      	ands	r3, r1
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	619a      	str	r2, [r3, #24]
}
 80041a6:	bf00      	nop
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041be:	4b08      	ldr	r3, [pc, #32]	@ (80041e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d006      	beq.n	80041d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ca:	4a05      	ldr	r2, [pc, #20]	@ (80041e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fae4 	bl	80037a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e267      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d075      	beq.n	80042ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004202:	4b88      	ldr	r3, [pc, #544]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b04      	cmp	r3, #4
 800420c:	d00c      	beq.n	8004228 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b85      	ldr	r3, [pc, #532]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004216:	2b08      	cmp	r3, #8
 8004218:	d112      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800421a:	4b82      	ldr	r3, [pc, #520]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004222:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004226:	d10b      	bne.n	8004240 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004228:	4b7e      	ldr	r3, [pc, #504]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d05b      	beq.n	80042ec <HAL_RCC_OscConfig+0x108>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d157      	bne.n	80042ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e242      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x74>
 800424a:	4b76      	ldr	r3, [pc, #472]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a75      	ldr	r2, [pc, #468]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e01d      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004260:	d10c      	bne.n	800427c <HAL_RCC_OscConfig+0x98>
 8004262:	4b70      	ldr	r3, [pc, #448]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6f      	ldr	r2, [pc, #444]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b6d      	ldr	r3, [pc, #436]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a6c      	ldr	r2, [pc, #432]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	e00b      	b.n	8004294 <HAL_RCC_OscConfig+0xb0>
 800427c:	4b69      	ldr	r3, [pc, #420]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a68      	ldr	r2, [pc, #416]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b66      	ldr	r3, [pc, #408]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a65      	ldr	r2, [pc, #404]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 800428e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d013      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7ff fca0 	bl	8003be0 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7ff fc9c 	bl	8003be0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e207      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0xc0>
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7ff fc8c 	bl	8003be0 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042cc:	f7ff fc88 	bl	8003be0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	@ 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e1f3      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042de:	4b51      	ldr	r3, [pc, #324]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0xe8>
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00b      	beq.n	800431e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b47      	ldr	r3, [pc, #284]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800430e:	2b08      	cmp	r3, #8
 8004310:	d11c      	bne.n	800434c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004312:	4b44      	ldr	r3, [pc, #272]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800431e:	4b41      	ldr	r3, [pc, #260]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_RCC_OscConfig+0x152>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e1c7      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b3b      	ldr	r3, [pc, #236]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4937      	ldr	r1, [pc, #220]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	e03a      	b.n	80043c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004354:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0x244>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7ff fc41 	bl	8003be0 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004362:	f7ff fc3d 	bl	8003be0 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1a8      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004374:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0f0      	beq.n	8004362 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004380:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4925      	ldr	r1, [pc, #148]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004396:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCC_OscConfig+0x244>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7ff fc20 	bl	8003be0 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a4:	f7ff fc1c 	bl	8003be0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e187      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d036      	beq.n	800443c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b15      	ldr	r3, [pc, #84]	@ (800442c <HAL_RCC_OscConfig+0x248>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7ff fc00 	bl	8003be0 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7ff fbfc 	bl	8003be0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e167      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004424 <HAL_RCC_OscConfig+0x240>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x200>
 8004402:	e01b      	b.n	800443c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_OscConfig+0x248>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7ff fbe9 	bl	8003be0 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	e00e      	b.n	8004430 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004412:	f7ff fbe5 	bl	8003be0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d907      	bls.n	8004430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e150      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
 800442c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	4b88      	ldr	r3, [pc, #544]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ea      	bne.n	8004412 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8097 	beq.w	8004578 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2300      	movs	r3, #0
 800444c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800444e:	4b81      	ldr	r3, [pc, #516]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10f      	bne.n	800447a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b7d      	ldr	r3, [pc, #500]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	4a7c      	ldr	r2, [pc, #496]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	@ 0x40
 800446a:	4b7a      	ldr	r3, [pc, #488]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004476:	2301      	movs	r3, #1
 8004478:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447a:	4b77      	ldr	r3, [pc, #476]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d118      	bne.n	80044b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004486:	4b74      	ldr	r3, [pc, #464]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a73      	ldr	r2, [pc, #460]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 800448c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004492:	f7ff fba5 	bl	8003be0 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449a:	f7ff fba1 	bl	8003be0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e10c      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004658 <HAL_RCC_OscConfig+0x474>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x2ea>
 80044c0:	4b64      	ldr	r3, [pc, #400]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c4:	4a63      	ldr	r2, [pc, #396]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x324>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCC_OscConfig+0x30c>
 80044d6:	4b5f      	ldr	r3, [pc, #380]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a5e      	ldr	r2, [pc, #376]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e2:	4b5c      	ldr	r3, [pc, #368]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80044ee:	e00b      	b.n	8004508 <HAL_RCC_OscConfig+0x324>
 80044f0:	4b58      	ldr	r3, [pc, #352]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	4a57      	ldr	r2, [pc, #348]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fc:	4b55      	ldr	r3, [pc, #340]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	4a54      	ldr	r2, [pc, #336]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 0304 	bic.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7ff fb66 	bl	8003be0 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	e00a      	b.n	800452e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004518:	f7ff fb62 	bl	8003be0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e0cb      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800452e:	4b49      	ldr	r3, [pc, #292]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0ee      	beq.n	8004518 <HAL_RCC_OscConfig+0x334>
 800453a:	e014      	b.n	8004566 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453c:	f7ff fb50 	bl	8003be0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7ff fb4c 	bl	8003be0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0b5      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455a:	4b3e      	ldr	r3, [pc, #248]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1ee      	bne.n	8004544 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456c:	4b39      	ldr	r3, [pc, #228]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	4a38      	ldr	r2, [pc, #224]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004572:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80a1 	beq.w	80046c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b08      	cmp	r3, #8
 800458c:	d05c      	beq.n	8004648 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d141      	bne.n	800461a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b31      	ldr	r3, [pc, #196]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7ff fb20 	bl	8003be0 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a4:	f7ff fb1c 	bl	8003be0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e087      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	4b27      	ldr	r3, [pc, #156]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	491b      	ldr	r1, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f2:	f7ff faf5 	bl	8003be0 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fa:	f7ff faf1 	bl	8003be0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e05c      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460c:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x416>
 8004618:	e054      	b.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b10      	ldr	r3, [pc, #64]	@ (800465c <HAL_RCC_OscConfig+0x478>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7ff fade 	bl	8003be0 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004628:	f7ff fada 	bl	8003be0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e045      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	4b06      	ldr	r3, [pc, #24]	@ (8004654 <HAL_RCC_OscConfig+0x470>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x444>
 8004646:	e03d      	b.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d107      	bne.n	8004660 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e038      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
 800465c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004660:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x4ec>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d028      	beq.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d121      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004686:	429a      	cmp	r2, r3
 8004688:	d11a      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004690:	4013      	ands	r3, r2
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d001      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023800 	.word	0x40023800

080046d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0cc      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b68      	ldr	r3, [pc, #416]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d90c      	bls.n	8004710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b65      	ldr	r3, [pc, #404]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b63      	ldr	r3, [pc, #396]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0b8      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004728:	4b59      	ldr	r3, [pc, #356]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a58      	ldr	r2, [pc, #352]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a52      	ldr	r2, [pc, #328]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800474a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b50      	ldr	r3, [pc, #320]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	494d      	ldr	r1, [pc, #308]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d044      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b47      	ldr	r3, [pc, #284]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d119      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d003      	beq.n	8004792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478e:	2b03      	cmp	r3, #3
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b3f      	ldr	r3, [pc, #252]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e06f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e067      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b37      	ldr	r3, [pc, #220]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4934      	ldr	r1, [pc, #208]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c4:	f7ff fa0c 	bl	8003be0 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7ff fa08 	bl	8003be0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b2b      	ldr	r3, [pc, #172]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d20c      	bcs.n	800481c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b22      	ldr	r3, [pc, #136]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b20      	ldr	r3, [pc, #128]	@ (800488c <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e032      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4916      	ldr	r1, [pc, #88]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800485a:	f000 f821 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490a      	ldr	r1, [pc, #40]	@ (8004894 <HAL_RCC_ClockConfig+0x1c0>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004876:	4b09      	ldr	r3, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff f85c 	bl	8003938 <HAL_InitTick>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023c00 	.word	0x40023c00
 8004890:	40023800 	.word	0x40023800
 8004894:	08006334 	.word	0x08006334
 8004898:	20000018 	.word	0x20000018
 800489c:	2000001c 	.word	0x2000001c

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b094      	sub	sp, #80	@ 0x50
 80048a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ac:	2300      	movs	r3, #0
 80048ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048b0:	2300      	movs	r3, #0
 80048b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b8:	4b79      	ldr	r3, [pc, #484]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d00d      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x40>
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	f200 80e1 	bhi.w	8004a8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d003      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x3a>
 80048d2:	e0db      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b73      	ldr	r3, [pc, #460]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80048d8:	e0db      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048da:	4b73      	ldr	r3, [pc, #460]	@ (8004aa8 <HAL_RCC_GetSysClockFreq+0x208>)
 80048dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048de:	e0d8      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e0:	4b6f      	ldr	r3, [pc, #444]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ea:	4b6d      	ldr	r3, [pc, #436]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d063      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b6a      	ldr	r3, [pc, #424]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	2200      	movs	r2, #0
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004900:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	633b      	str	r3, [r7, #48]	@ 0x30
 800490a:	2300      	movs	r3, #0
 800490c:	637b      	str	r3, [r7, #52]	@ 0x34
 800490e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004912:	4622      	mov	r2, r4
 8004914:	462b      	mov	r3, r5
 8004916:	f04f 0000 	mov.w	r0, #0
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	0159      	lsls	r1, r3, #5
 8004920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004924:	0150      	lsls	r0, r2, #5
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4621      	mov	r1, r4
 800492c:	1a51      	subs	r1, r2, r1
 800492e:	6139      	str	r1, [r7, #16]
 8004930:	4629      	mov	r1, r5
 8004932:	eb63 0301 	sbc.w	r3, r3, r1
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004944:	4659      	mov	r1, fp
 8004946:	018b      	lsls	r3, r1, #6
 8004948:	4651      	mov	r1, sl
 800494a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800494e:	4651      	mov	r1, sl
 8004950:	018a      	lsls	r2, r1, #6
 8004952:	4651      	mov	r1, sl
 8004954:	ebb2 0801 	subs.w	r8, r2, r1
 8004958:	4659      	mov	r1, fp
 800495a:	eb63 0901 	sbc.w	r9, r3, r1
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800496a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004972:	4690      	mov	r8, r2
 8004974:	4699      	mov	r9, r3
 8004976:	4623      	mov	r3, r4
 8004978:	eb18 0303 	adds.w	r3, r8, r3
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	462b      	mov	r3, r5
 8004980:	eb49 0303 	adc.w	r3, r9, r3
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004992:	4629      	mov	r1, r5
 8004994:	024b      	lsls	r3, r1, #9
 8004996:	4621      	mov	r1, r4
 8004998:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800499c:	4621      	mov	r1, r4
 800499e:	024a      	lsls	r2, r1, #9
 80049a0:	4610      	mov	r0, r2
 80049a2:	4619      	mov	r1, r3
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049a6:	2200      	movs	r2, #0
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049b0:	f7fb fc5e 	bl	8000270 <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4613      	mov	r3, r2
 80049ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049bc:	e058      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049be:	4b38      	ldr	r3, [pc, #224]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	099b      	lsrs	r3, r3, #6
 80049c4:	2200      	movs	r2, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	4611      	mov	r1, r2
 80049ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ce:	623b      	str	r3, [r7, #32]
 80049d0:	2300      	movs	r3, #0
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	f04f 0000 	mov.w	r0, #0
 80049e0:	f04f 0100 	mov.w	r1, #0
 80049e4:	0159      	lsls	r1, r3, #5
 80049e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ea:	0150      	lsls	r0, r2, #5
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4641      	mov	r1, r8
 80049f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049f6:	4649      	mov	r1, r9
 80049f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a10:	ebb2 040a 	subs.w	r4, r2, sl
 8004a14:	eb63 050b 	sbc.w	r5, r3, fp
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	00eb      	lsls	r3, r5, #3
 8004a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a26:	00e2      	lsls	r2, r4, #3
 8004a28:	4614      	mov	r4, r2
 8004a2a:	461d      	mov	r5, r3
 8004a2c:	4643      	mov	r3, r8
 8004a2e:	18e3      	adds	r3, r4, r3
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	464b      	mov	r3, r9
 8004a34:	eb45 0303 	adc.w	r3, r5, r3
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a46:	4629      	mov	r1, r5
 8004a48:	028b      	lsls	r3, r1, #10
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a50:	4621      	mov	r1, r4
 8004a52:	028a      	lsls	r2, r1, #10
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61bb      	str	r3, [r7, #24]
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	f7fb fc04 	bl	8000270 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3750      	adds	r7, #80	@ 0x50
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	00f42400 	.word	0x00f42400
 8004aa8:	007a1200 	.word	0x007a1200

08004aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	@ (8004ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000018 	.word	0x20000018

08004ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac8:	f7ff fff0 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	4903      	ldr	r1, [pc, #12]	@ (8004ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	08006344 	.word	0x08006344

08004aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af0:	f7ff ffdc 	bl	8004aac <HAL_RCC_GetHCLKFreq>
 8004af4:	4602      	mov	r2, r0
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	0b5b      	lsrs	r3, r3, #13
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	4903      	ldr	r1, [pc, #12]	@ (8004b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b02:	5ccb      	ldrb	r3, [r1, r3]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	08006344 	.word	0x08006344

08004b14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	220f      	movs	r2, #15
 8004b22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b24:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 0203 	and.w	r2, r3, #3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b30:	4b0f      	ldr	r3, [pc, #60]	@ (8004b70 <HAL_RCC_GetClockConfig+0x5c>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b48:	4b09      	ldr	r3, [pc, #36]	@ (8004b70 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	08db      	lsrs	r3, r3, #3
 8004b4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b56:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <HAL_RCC_GetClockConfig+0x60>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0207 	and.w	r2, r3, #7
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	601a      	str	r2, [r3, #0]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40023c00 	.word	0x40023c00

08004b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e041      	b.n	8004c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f839 	bl	8004c16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 f9c0 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e04e      	b.n	8004ce2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a23      	ldr	r2, [pc, #140]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6e:	d01d      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1f      	ldr	r2, [pc, #124]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	@ (8004cfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1b      	ldr	r2, [pc, #108]	@ (8004d00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a19      	ldr	r2, [pc, #100]	@ (8004d04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x80>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d111      	bne.n	8004cd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d010      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	e007      	b.n	8004ce0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40010400 	.word	0x40010400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40001800 	.word	0x40001800

08004d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d020      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01b      	beq.n	8004d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0202 	mvn.w	r2, #2
 8004d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8d2 	bl	8004f00 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8c4 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8d5 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d020      	beq.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0204 	mvn.w	r2, #4
 8004d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8ac 	bl	8004f00 <HAL_TIM_IC_CaptureCallback>
 8004da8:	e005      	b.n	8004db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f89e 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8af 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d020      	beq.n	8004e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01b      	beq.n	8004e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0208 	mvn.w	r2, #8
 8004dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f886 	bl	8004f00 <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f878 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f889 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d01b      	beq.n	8004e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0210 	mvn.w	r2, #16
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f860 	bl	8004f00 <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f852 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f863 	bl	8004f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00c      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0201 	mvn.w	r2, #1
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fe fcd8 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00c      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d007      	beq.n	8004e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f906 	bl	80050a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f834 	bl	8004f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00c      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0220 	mvn.w	r2, #32
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8d8 	bl	8005094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a46      	ldr	r2, [pc, #280]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d00f      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a43      	ldr	r2, [pc, #268]	@ (800506c <TIM_Base_SetConfig+0x130>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a42      	ldr	r2, [pc, #264]	@ (8005070 <TIM_Base_SetConfig+0x134>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a41      	ldr	r2, [pc, #260]	@ (8005074 <TIM_Base_SetConfig+0x138>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a40      	ldr	r2, [pc, #256]	@ (8005078 <TIM_Base_SetConfig+0x13c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d108      	bne.n	8004f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a35      	ldr	r2, [pc, #212]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9c:	d027      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a32      	ldr	r2, [pc, #200]	@ (800506c <TIM_Base_SetConfig+0x130>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d023      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a31      	ldr	r2, [pc, #196]	@ (8005070 <TIM_Base_SetConfig+0x134>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <TIM_Base_SetConfig+0x138>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <TIM_Base_SetConfig+0x13c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d017      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800507c <TIM_Base_SetConfig+0x140>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005080 <TIM_Base_SetConfig+0x144>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005084 <TIM_Base_SetConfig+0x148>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8005088 <TIM_Base_SetConfig+0x14c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800508c <TIM_Base_SetConfig+0x150>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a29      	ldr	r2, [pc, #164]	@ (8005090 <TIM_Base_SetConfig+0x154>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	@ (8005068 <TIM_Base_SetConfig+0x12c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <TIM_Base_SetConfig+0x13c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d103      	bne.n	800503c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d105      	bne.n	800505a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	611a      	str	r2, [r3, #16]
  }
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	40001800 	.word	0x40001800
 800508c:	40001c00 	.word	0x40001c00
 8005090:	40002000 	.word	0x40002000

08005094 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e042      	b.n	8005154 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fe fbe0 	bl	80038a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2224      	movs	r2, #36	@ 0x24
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f973 	bl	80053ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	@ 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b20      	cmp	r3, #32
 800517a:	d175      	bne.n	8005268 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Transmit+0x2c>
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e06e      	b.n	800526a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2221      	movs	r2, #33	@ 0x21
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800519a:	f7fe fd21 	bl	8003be0 <HAL_GetTick>
 800519e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	88fa      	ldrh	r2, [r7, #6]
 80051a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b4:	d108      	bne.n	80051c8 <HAL_UART_Transmit+0x6c>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e003      	b.n	80051d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051d0:	e02e      	b.n	8005230 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f848 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e03a      	b.n	800526a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10b      	bne.n	8005212 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	3302      	adds	r3, #2
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	e007      	b.n	8005222 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1cb      	bne.n	80051d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	2140      	movs	r1, #64	@ 0x40
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f814 	bl	8005272 <UART_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e006      	b.n	800526a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e000      	b.n	800526a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	603b      	str	r3, [r7, #0]
 800527e:	4613      	mov	r3, r2
 8005280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	e03b      	b.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d037      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fe fca8 	bl	8003be0 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e03a      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d023      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b80      	cmp	r3, #128	@ 0x80
 80052b8:	d020      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b40      	cmp	r3, #64	@ 0x40
 80052be:	d01d      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0308 	and.w	r3, r3, #8
 80052ca:	2b08      	cmp	r3, #8
 80052cc:	d116      	bne.n	80052fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f81d 	bl	8005324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2208      	movs	r2, #8
 80052ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e00f      	b.n	800531c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	429a      	cmp	r2, r3
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	429a      	cmp	r2, r3
 8005318:	d0b4      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b095      	sub	sp, #84	@ 0x54
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	330c      	adds	r3, #12
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534c:	643a      	str	r2, [r7, #64]	@ 0x40
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005380:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	2b01      	cmp	r3, #1
 800539a:	d119      	bne.n	80053d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0310 	bic.w	r3, r3, #16
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053de:	bf00      	nop
 80053e0:	3754      	adds	r7, #84	@ 0x54
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f0:	b0c0      	sub	sp, #256	@ 0x100
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	68d9      	ldr	r1, [r3, #12]
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	ea40 0301 	orr.w	r3, r0, r1
 8005414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	431a      	orrs	r2, r3
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	431a      	orrs	r2, r3
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005444:	f021 010c 	bic.w	r1, r1, #12
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005452:	430b      	orrs	r3, r1
 8005454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005466:	6999      	ldr	r1, [r3, #24]
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	ea40 0301 	orr.w	r3, r0, r1
 8005472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b8f      	ldr	r3, [pc, #572]	@ (80056b8 <UART_SetConfig+0x2cc>)
 800547c:	429a      	cmp	r2, r3
 800547e:	d005      	beq.n	800548c <UART_SetConfig+0xa0>
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b8d      	ldr	r3, [pc, #564]	@ (80056bc <UART_SetConfig+0x2d0>)
 8005488:	429a      	cmp	r2, r3
 800548a:	d104      	bne.n	8005496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800548c:	f7ff fb2e 	bl	8004aec <HAL_RCC_GetPCLK2Freq>
 8005490:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005494:	e003      	b.n	800549e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005496:	f7ff fb15 	bl	8004ac4 <HAL_RCC_GetPCLK1Freq>
 800549a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054a8:	f040 810c 	bne.w	80056c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b0:	2200      	movs	r2, #0
 80054b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054c6:	415b      	adcs	r3, r3
 80054c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054ce:	4621      	mov	r1, r4
 80054d0:	eb12 0801 	adds.w	r8, r2, r1
 80054d4:	4629      	mov	r1, r5
 80054d6:	eb43 0901 	adc.w	r9, r3, r1
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054ee:	4690      	mov	r8, r2
 80054f0:	4699      	mov	r9, r3
 80054f2:	4623      	mov	r3, r4
 80054f4:	eb18 0303 	adds.w	r3, r8, r3
 80054f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054fc:	462b      	mov	r3, r5
 80054fe:	eb49 0303 	adc.w	r3, r9, r3
 8005502:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005512:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800551a:	460b      	mov	r3, r1
 800551c:	18db      	adds	r3, r3, r3
 800551e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005520:	4613      	mov	r3, r2
 8005522:	eb42 0303 	adc.w	r3, r2, r3
 8005526:	657b      	str	r3, [r7, #84]	@ 0x54
 8005528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800552c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005530:	f7fa fe9e 	bl	8000270 <__aeabi_uldivmod>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4b61      	ldr	r3, [pc, #388]	@ (80056c0 <UART_SetConfig+0x2d4>)
 800553a:	fba3 2302 	umull	r2, r3, r3, r2
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	011c      	lsls	r4, r3, #4
 8005542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800554c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	1891      	adds	r1, r2, r2
 800555a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800555c:	415b      	adcs	r3, r3
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005564:	4641      	mov	r1, r8
 8005566:	eb12 0a01 	adds.w	sl, r2, r1
 800556a:	4649      	mov	r1, r9
 800556c:	eb43 0b01 	adc.w	fp, r3, r1
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800557c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005584:	4692      	mov	sl, r2
 8005586:	469b      	mov	fp, r3
 8005588:	4643      	mov	r3, r8
 800558a:	eb1a 0303 	adds.w	r3, sl, r3
 800558e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005592:	464b      	mov	r3, r9
 8005594:	eb4b 0303 	adc.w	r3, fp, r3
 8005598:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055b0:	460b      	mov	r3, r1
 80055b2:	18db      	adds	r3, r3, r3
 80055b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b6:	4613      	mov	r3, r2
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055c6:	f7fa fe53 	bl	8000270 <__aeabi_uldivmod>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	4611      	mov	r1, r2
 80055d0:	4b3b      	ldr	r3, [pc, #236]	@ (80056c0 <UART_SetConfig+0x2d4>)
 80055d2:	fba3 2301 	umull	r2, r3, r3, r1
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	2264      	movs	r2, #100	@ 0x64
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	1acb      	subs	r3, r1, r3
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055e6:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <UART_SetConfig+0x2d4>)
 80055e8:	fba3 2302 	umull	r2, r3, r3, r2
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055f4:	441c      	add	r4, r3
 80055f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005600:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005608:	4642      	mov	r2, r8
 800560a:	464b      	mov	r3, r9
 800560c:	1891      	adds	r1, r2, r2
 800560e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005610:	415b      	adcs	r3, r3
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005618:	4641      	mov	r1, r8
 800561a:	1851      	adds	r1, r2, r1
 800561c:	6339      	str	r1, [r7, #48]	@ 0x30
 800561e:	4649      	mov	r1, r9
 8005620:	414b      	adcs	r3, r1
 8005622:	637b      	str	r3, [r7, #52]	@ 0x34
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005630:	4659      	mov	r1, fp
 8005632:	00cb      	lsls	r3, r1, #3
 8005634:	4651      	mov	r1, sl
 8005636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563a:	4651      	mov	r1, sl
 800563c:	00ca      	lsls	r2, r1, #3
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	4603      	mov	r3, r0
 8005644:	4642      	mov	r2, r8
 8005646:	189b      	adds	r3, r3, r2
 8005648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800564c:	464b      	mov	r3, r9
 800564e:	460a      	mov	r2, r1
 8005650:	eb42 0303 	adc.w	r3, r2, r3
 8005654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005664:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800566c:	460b      	mov	r3, r1
 800566e:	18db      	adds	r3, r3, r3
 8005670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005672:	4613      	mov	r3, r2
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800567e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005682:	f7fa fdf5 	bl	8000270 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <UART_SetConfig+0x2d4>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	@ 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	3332      	adds	r3, #50	@ 0x32
 800569e:	4a08      	ldr	r2, [pc, #32]	@ (80056c0 <UART_SetConfig+0x2d4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f003 0207 	and.w	r2, r3, #7
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4422      	add	r2, r4
 80056b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056b4:	e106      	b.n	80058c4 <UART_SetConfig+0x4d8>
 80056b6:	bf00      	nop
 80056b8:	40011000 	.word	0x40011000
 80056bc:	40011400 	.word	0x40011400
 80056c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056d6:	4642      	mov	r2, r8
 80056d8:	464b      	mov	r3, r9
 80056da:	1891      	adds	r1, r2, r2
 80056dc:	6239      	str	r1, [r7, #32]
 80056de:	415b      	adcs	r3, r3
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056e6:	4641      	mov	r1, r8
 80056e8:	1854      	adds	r4, r2, r1
 80056ea:	4649      	mov	r1, r9
 80056ec:	eb43 0501 	adc.w	r5, r3, r1
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	00eb      	lsls	r3, r5, #3
 80056fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056fe:	00e2      	lsls	r2, r4, #3
 8005700:	4614      	mov	r4, r2
 8005702:	461d      	mov	r5, r3
 8005704:	4643      	mov	r3, r8
 8005706:	18e3      	adds	r3, r4, r3
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800570c:	464b      	mov	r3, r9
 800570e:	eb45 0303 	adc.w	r3, r5, r3
 8005712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005722:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005732:	4629      	mov	r1, r5
 8005734:	008b      	lsls	r3, r1, #2
 8005736:	4621      	mov	r1, r4
 8005738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800573c:	4621      	mov	r1, r4
 800573e:	008a      	lsls	r2, r1, #2
 8005740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005744:	f7fa fd94 	bl	8000270 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b60      	ldr	r3, [pc, #384]	@ (80058d0 <UART_SetConfig+0x4e4>)
 800574e:	fba3 2302 	umull	r2, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	011c      	lsls	r4, r3, #4
 8005756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575a:	2200      	movs	r2, #0
 800575c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005760:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005768:	4642      	mov	r2, r8
 800576a:	464b      	mov	r3, r9
 800576c:	1891      	adds	r1, r2, r2
 800576e:	61b9      	str	r1, [r7, #24]
 8005770:	415b      	adcs	r3, r3
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005778:	4641      	mov	r1, r8
 800577a:	1851      	adds	r1, r2, r1
 800577c:	6139      	str	r1, [r7, #16]
 800577e:	4649      	mov	r1, r9
 8005780:	414b      	adcs	r3, r1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	f04f 0200 	mov.w	r2, #0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005790:	4659      	mov	r1, fp
 8005792:	00cb      	lsls	r3, r1, #3
 8005794:	4651      	mov	r1, sl
 8005796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800579a:	4651      	mov	r1, sl
 800579c:	00ca      	lsls	r2, r1, #3
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	4603      	mov	r3, r0
 80057a4:	4642      	mov	r2, r8
 80057a6:	189b      	adds	r3, r3, r2
 80057a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057ac:	464b      	mov	r3, r9
 80057ae:	460a      	mov	r2, r1
 80057b0:	eb42 0303 	adc.w	r3, r2, r3
 80057b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057d0:	4649      	mov	r1, r9
 80057d2:	008b      	lsls	r3, r1, #2
 80057d4:	4641      	mov	r1, r8
 80057d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057da:	4641      	mov	r1, r8
 80057dc:	008a      	lsls	r2, r1, #2
 80057de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057e2:	f7fa fd45 	bl	8000270 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	4b38      	ldr	r3, [pc, #224]	@ (80058d0 <UART_SetConfig+0x4e4>)
 80057ee:	fba3 2301 	umull	r2, r3, r3, r1
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2264      	movs	r2, #100	@ 0x64
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	1acb      	subs	r3, r1, r3
 80057fc:	011b      	lsls	r3, r3, #4
 80057fe:	3332      	adds	r3, #50	@ 0x32
 8005800:	4a33      	ldr	r2, [pc, #204]	@ (80058d0 <UART_SetConfig+0x4e4>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800580c:	441c      	add	r4, r3
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	673b      	str	r3, [r7, #112]	@ 0x70
 8005816:	677a      	str	r2, [r7, #116]	@ 0x74
 8005818:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	1891      	adds	r1, r2, r2
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	415b      	adcs	r3, r3
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800582c:	4641      	mov	r1, r8
 800582e:	1851      	adds	r1, r2, r1
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	4649      	mov	r1, r9
 8005834:	414b      	adcs	r3, r1
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005844:	4659      	mov	r1, fp
 8005846:	00cb      	lsls	r3, r1, #3
 8005848:	4651      	mov	r1, sl
 800584a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800584e:	4651      	mov	r1, sl
 8005850:	00ca      	lsls	r2, r1, #3
 8005852:	4610      	mov	r0, r2
 8005854:	4619      	mov	r1, r3
 8005856:	4603      	mov	r3, r0
 8005858:	4642      	mov	r2, r8
 800585a:	189b      	adds	r3, r3, r2
 800585c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800585e:	464b      	mov	r3, r9
 8005860:	460a      	mov	r2, r1
 8005862:	eb42 0303 	adc.w	r3, r2, r3
 8005866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	663b      	str	r3, [r7, #96]	@ 0x60
 8005872:	667a      	str	r2, [r7, #100]	@ 0x64
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005880:	4649      	mov	r1, r9
 8005882:	008b      	lsls	r3, r1, #2
 8005884:	4641      	mov	r1, r8
 8005886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800588a:	4641      	mov	r1, r8
 800588c:	008a      	lsls	r2, r1, #2
 800588e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005892:	f7fa fced 	bl	8000270 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <UART_SetConfig+0x4e4>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	@ 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	3332      	adds	r3, #50	@ 0x32
 80058ae:	4a08      	ldr	r2, [pc, #32]	@ (80058d0 <UART_SetConfig+0x4e4>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4422      	add	r2, r4
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058ca:	46bd      	mov	sp, r7
 80058cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d0:	51eb851f 	.word	0x51eb851f

080058d4 <sniprintf>:
 80058d4:	b40c      	push	{r2, r3}
 80058d6:	b530      	push	{r4, r5, lr}
 80058d8:	4b17      	ldr	r3, [pc, #92]	@ (8005938 <sniprintf+0x64>)
 80058da:	1e0c      	subs	r4, r1, #0
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	b09d      	sub	sp, #116	@ 0x74
 80058e0:	da08      	bge.n	80058f4 <sniprintf+0x20>
 80058e2:	238b      	movs	r3, #139	@ 0x8b
 80058e4:	602b      	str	r3, [r5, #0]
 80058e6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ea:	b01d      	add	sp, #116	@ 0x74
 80058ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058f0:	b002      	add	sp, #8
 80058f2:	4770      	bx	lr
 80058f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058fc:	bf14      	ite	ne
 80058fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005902:	4623      	moveq	r3, r4
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	9307      	str	r3, [sp, #28]
 8005908:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	9006      	str	r0, [sp, #24]
 8005910:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005914:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005916:	ab21      	add	r3, sp, #132	@ 0x84
 8005918:	a902      	add	r1, sp, #8
 800591a:	4628      	mov	r0, r5
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	f000 f9a3 	bl	8005c68 <_svfiprintf_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	bfbc      	itt	lt
 8005926:	238b      	movlt	r3, #139	@ 0x8b
 8005928:	602b      	strlt	r3, [r5, #0]
 800592a:	2c00      	cmp	r4, #0
 800592c:	d0dd      	beq.n	80058ea <sniprintf+0x16>
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	2200      	movs	r2, #0
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e7d9      	b.n	80058ea <sniprintf+0x16>
 8005936:	bf00      	nop
 8005938:	20000024 	.word	0x20000024

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	@ (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000024 	.word	0x20000024

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	@ (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	@ (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	@ (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	@ (800599c <__libc_init_array+0x44>)
 800596c:	f000 fc66 	bl	800623c <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08006388 	.word	0x08006388
 8005994:	08006388 	.word	0x08006388
 8005998:	08006388 	.word	0x08006388
 800599c:	0800638c 	.word	0x0800638c

080059a0 <__retarget_lock_acquire_recursive>:
 80059a0:	4770      	bx	lr

080059a2 <__retarget_lock_release_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <memcpy>:
 80059a4:	440a      	add	r2, r1
 80059a6:	4291      	cmp	r1, r2
 80059a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ac:	d100      	bne.n	80059b0 <memcpy+0xc>
 80059ae:	4770      	bx	lr
 80059b0:	b510      	push	{r4, lr}
 80059b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ba:	4291      	cmp	r1, r2
 80059bc:	d1f9      	bne.n	80059b2 <memcpy+0xe>
 80059be:	bd10      	pop	{r4, pc}

080059c0 <_free_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d041      	beq.n	8005a4c <_free_r+0x8c>
 80059c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059cc:	1f0c      	subs	r4, r1, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bfb8      	it	lt
 80059d2:	18e4      	addlt	r4, r4, r3
 80059d4:	f000 f8e0 	bl	8005b98 <__malloc_lock>
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <_free_r+0x90>)
 80059da:	6813      	ldr	r3, [r2, #0]
 80059dc:	b933      	cbnz	r3, 80059ec <_free_r+0x2c>
 80059de:	6063      	str	r3, [r4, #4]
 80059e0:	6014      	str	r4, [r2, #0]
 80059e2:	4628      	mov	r0, r5
 80059e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e8:	f000 b8dc 	b.w	8005ba4 <__malloc_unlock>
 80059ec:	42a3      	cmp	r3, r4
 80059ee:	d908      	bls.n	8005a02 <_free_r+0x42>
 80059f0:	6820      	ldr	r0, [r4, #0]
 80059f2:	1821      	adds	r1, r4, r0
 80059f4:	428b      	cmp	r3, r1
 80059f6:	bf01      	itttt	eq
 80059f8:	6819      	ldreq	r1, [r3, #0]
 80059fa:	685b      	ldreq	r3, [r3, #4]
 80059fc:	1809      	addeq	r1, r1, r0
 80059fe:	6021      	streq	r1, [r4, #0]
 8005a00:	e7ed      	b.n	80059de <_free_r+0x1e>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x4c>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x42>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1850      	adds	r0, r2, r1
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x6c>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	4401      	add	r1, r0
 8005a18:	1850      	adds	r0, r2, r1
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1e0      	bne.n	80059e2 <_free_r+0x22>
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	4408      	add	r0, r1
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	e7da      	b.n	80059e2 <_free_r+0x22>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x74>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	e7d6      	b.n	80059e2 <_free_r+0x22>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	1821      	adds	r1, r4, r0
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1809      	addeq	r1, r1, r0
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7ca      	b.n	80059e2 <_free_r+0x22>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	20013024 	.word	0x20013024

08005a54 <sbrk_aligned>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4e0f      	ldr	r6, [pc, #60]	@ (8005a94 <sbrk_aligned+0x40>)
 8005a58:	460c      	mov	r4, r1
 8005a5a:	6831      	ldr	r1, [r6, #0]
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	b911      	cbnz	r1, 8005a66 <sbrk_aligned+0x12>
 8005a60:	f000 fba6 	bl	80061b0 <_sbrk_r>
 8005a64:	6030      	str	r0, [r6, #0]
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 fba1 	bl	80061b0 <_sbrk_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d103      	bne.n	8005a7a <sbrk_aligned+0x26>
 8005a72:	f04f 34ff 	mov.w	r4, #4294967295
 8005a76:	4620      	mov	r0, r4
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	1cc4      	adds	r4, r0, #3
 8005a7c:	f024 0403 	bic.w	r4, r4, #3
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	d0f8      	beq.n	8005a76 <sbrk_aligned+0x22>
 8005a84:	1a21      	subs	r1, r4, r0
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fb92 	bl	80061b0 <_sbrk_r>
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d1f2      	bne.n	8005a76 <sbrk_aligned+0x22>
 8005a90:	e7ef      	b.n	8005a72 <sbrk_aligned+0x1e>
 8005a92:	bf00      	nop
 8005a94:	20013020 	.word	0x20013020

08005a98 <_malloc_r>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	1ccd      	adds	r5, r1, #3
 8005a9e:	f025 0503 	bic.w	r5, r5, #3
 8005aa2:	3508      	adds	r5, #8
 8005aa4:	2d0c      	cmp	r5, #12
 8005aa6:	bf38      	it	cc
 8005aa8:	250c      	movcc	r5, #12
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	4606      	mov	r6, r0
 8005aae:	db01      	blt.n	8005ab4 <_malloc_r+0x1c>
 8005ab0:	42a9      	cmp	r1, r5
 8005ab2:	d904      	bls.n	8005abe <_malloc_r+0x26>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	6033      	str	r3, [r6, #0]
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b94 <_malloc_r+0xfc>
 8005ac2:	f000 f869 	bl	8005b98 <__malloc_lock>
 8005ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aca:	461c      	mov	r4, r3
 8005acc:	bb44      	cbnz	r4, 8005b20 <_malloc_r+0x88>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f7ff ffbf 	bl	8005a54 <sbrk_aligned>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	4604      	mov	r4, r0
 8005ada:	d158      	bne.n	8005b8e <_malloc_r+0xf6>
 8005adc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ae0:	4627      	mov	r7, r4
 8005ae2:	2f00      	cmp	r7, #0
 8005ae4:	d143      	bne.n	8005b6e <_malloc_r+0xd6>
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	d04b      	beq.n	8005b82 <_malloc_r+0xea>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	4639      	mov	r1, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	eb04 0903 	add.w	r9, r4, r3
 8005af4:	f000 fb5c 	bl	80061b0 <_sbrk_r>
 8005af8:	4581      	cmp	r9, r0
 8005afa:	d142      	bne.n	8005b82 <_malloc_r+0xea>
 8005afc:	6821      	ldr	r1, [r4, #0]
 8005afe:	1a6d      	subs	r5, r5, r1
 8005b00:	4629      	mov	r1, r5
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ffa6 	bl	8005a54 <sbrk_aligned>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d03a      	beq.n	8005b82 <_malloc_r+0xea>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	442b      	add	r3, r5
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	f8d8 3000 	ldr.w	r3, [r8]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	bb62      	cbnz	r2, 8005b74 <_malloc_r+0xdc>
 8005b1a:	f8c8 7000 	str.w	r7, [r8]
 8005b1e:	e00f      	b.n	8005b40 <_malloc_r+0xa8>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	1b52      	subs	r2, r2, r5
 8005b24:	d420      	bmi.n	8005b68 <_malloc_r+0xd0>
 8005b26:	2a0b      	cmp	r2, #11
 8005b28:	d917      	bls.n	8005b5a <_malloc_r+0xc2>
 8005b2a:	1961      	adds	r1, r4, r5
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	bf18      	it	ne
 8005b32:	6059      	strne	r1, [r3, #4]
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	bf08      	it	eq
 8005b38:	f8c8 1000 	streq.w	r1, [r8]
 8005b3c:	5162      	str	r2, [r4, r5]
 8005b3e:	604b      	str	r3, [r1, #4]
 8005b40:	4630      	mov	r0, r6
 8005b42:	f000 f82f 	bl	8005ba4 <__malloc_unlock>
 8005b46:	f104 000b 	add.w	r0, r4, #11
 8005b4a:	1d23      	adds	r3, r4, #4
 8005b4c:	f020 0007 	bic.w	r0, r0, #7
 8005b50:	1ac2      	subs	r2, r0, r3
 8005b52:	bf1c      	itt	ne
 8005b54:	1a1b      	subne	r3, r3, r0
 8005b56:	50a3      	strne	r3, [r4, r2]
 8005b58:	e7af      	b.n	8005aba <_malloc_r+0x22>
 8005b5a:	6862      	ldr	r2, [r4, #4]
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	bf0c      	ite	eq
 8005b60:	f8c8 2000 	streq.w	r2, [r8]
 8005b64:	605a      	strne	r2, [r3, #4]
 8005b66:	e7eb      	b.n	8005b40 <_malloc_r+0xa8>
 8005b68:	4623      	mov	r3, r4
 8005b6a:	6864      	ldr	r4, [r4, #4]
 8005b6c:	e7ae      	b.n	8005acc <_malloc_r+0x34>
 8005b6e:	463c      	mov	r4, r7
 8005b70:	687f      	ldr	r7, [r7, #4]
 8005b72:	e7b6      	b.n	8005ae2 <_malloc_r+0x4a>
 8005b74:	461a      	mov	r2, r3
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d1fb      	bne.n	8005b74 <_malloc_r+0xdc>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6053      	str	r3, [r2, #4]
 8005b80:	e7de      	b.n	8005b40 <_malloc_r+0xa8>
 8005b82:	230c      	movs	r3, #12
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	4630      	mov	r0, r6
 8005b88:	f000 f80c 	bl	8005ba4 <__malloc_unlock>
 8005b8c:	e794      	b.n	8005ab8 <_malloc_r+0x20>
 8005b8e:	6005      	str	r5, [r0, #0]
 8005b90:	e7d6      	b.n	8005b40 <_malloc_r+0xa8>
 8005b92:	bf00      	nop
 8005b94:	20013024 	.word	0x20013024

08005b98 <__malloc_lock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	@ (8005ba0 <__malloc_lock+0x8>)
 8005b9a:	f7ff bf01 	b.w	80059a0 <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	2001301c 	.word	0x2001301c

08005ba4 <__malloc_unlock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	@ (8005bac <__malloc_unlock+0x8>)
 8005ba6:	f7ff befc 	b.w	80059a2 <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	2001301c 	.word	0x2001301c

08005bb0 <__ssputs_r>:
 8005bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	688e      	ldr	r6, [r1, #8]
 8005bb6:	461f      	mov	r7, r3
 8005bb8:	42be      	cmp	r6, r7
 8005bba:	680b      	ldr	r3, [r1, #0]
 8005bbc:	4682      	mov	sl, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	4690      	mov	r8, r2
 8005bc2:	d82d      	bhi.n	8005c20 <__ssputs_r+0x70>
 8005bc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bcc:	d026      	beq.n	8005c1c <__ssputs_r+0x6c>
 8005bce:	6965      	ldr	r5, [r4, #20]
 8005bd0:	6909      	ldr	r1, [r1, #16]
 8005bd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd6:	eba3 0901 	sub.w	r9, r3, r1
 8005bda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bde:	1c7b      	adds	r3, r7, #1
 8005be0:	444b      	add	r3, r9
 8005be2:	106d      	asrs	r5, r5, #1
 8005be4:	429d      	cmp	r5, r3
 8005be6:	bf38      	it	cc
 8005be8:	461d      	movcc	r5, r3
 8005bea:	0553      	lsls	r3, r2, #21
 8005bec:	d527      	bpl.n	8005c3e <__ssputs_r+0x8e>
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7ff ff52 	bl	8005a98 <_malloc_r>
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	b360      	cbz	r0, 8005c52 <__ssputs_r+0xa2>
 8005bf8:	6921      	ldr	r1, [r4, #16]
 8005bfa:	464a      	mov	r2, r9
 8005bfc:	f7ff fed2 	bl	80059a4 <memcpy>
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	6126      	str	r6, [r4, #16]
 8005c0e:	6165      	str	r5, [r4, #20]
 8005c10:	444e      	add	r6, r9
 8005c12:	eba5 0509 	sub.w	r5, r5, r9
 8005c16:	6026      	str	r6, [r4, #0]
 8005c18:	60a5      	str	r5, [r4, #8]
 8005c1a:	463e      	mov	r6, r7
 8005c1c:	42be      	cmp	r6, r7
 8005c1e:	d900      	bls.n	8005c22 <__ssputs_r+0x72>
 8005c20:	463e      	mov	r6, r7
 8005c22:	6820      	ldr	r0, [r4, #0]
 8005c24:	4632      	mov	r2, r6
 8005c26:	4641      	mov	r1, r8
 8005c28:	f000 faa8 	bl	800617c <memmove>
 8005c2c:	68a3      	ldr	r3, [r4, #8]
 8005c2e:	1b9b      	subs	r3, r3, r6
 8005c30:	60a3      	str	r3, [r4, #8]
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	4433      	add	r3, r6
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	2000      	movs	r0, #0
 8005c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3e:	462a      	mov	r2, r5
 8005c40:	f000 fac6 	bl	80061d0 <_realloc_r>
 8005c44:	4606      	mov	r6, r0
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d1e0      	bne.n	8005c0c <__ssputs_r+0x5c>
 8005c4a:	6921      	ldr	r1, [r4, #16]
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	f7ff feb7 	bl	80059c0 <_free_r>
 8005c52:	230c      	movs	r3, #12
 8005c54:	f8ca 3000 	str.w	r3, [sl]
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	e7e9      	b.n	8005c3a <__ssputs_r+0x8a>
	...

08005c68 <_svfiprintf_r>:
 8005c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6c:	4698      	mov	r8, r3
 8005c6e:	898b      	ldrh	r3, [r1, #12]
 8005c70:	061b      	lsls	r3, r3, #24
 8005c72:	b09d      	sub	sp, #116	@ 0x74
 8005c74:	4607      	mov	r7, r0
 8005c76:	460d      	mov	r5, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	d510      	bpl.n	8005c9e <_svfiprintf_r+0x36>
 8005c7c:	690b      	ldr	r3, [r1, #16]
 8005c7e:	b973      	cbnz	r3, 8005c9e <_svfiprintf_r+0x36>
 8005c80:	2140      	movs	r1, #64	@ 0x40
 8005c82:	f7ff ff09 	bl	8005a98 <_malloc_r>
 8005c86:	6028      	str	r0, [r5, #0]
 8005c88:	6128      	str	r0, [r5, #16]
 8005c8a:	b930      	cbnz	r0, 8005c9a <_svfiprintf_r+0x32>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	b01d      	add	sp, #116	@ 0x74
 8005c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9a:	2340      	movs	r3, #64	@ 0x40
 8005c9c:	616b      	str	r3, [r5, #20]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ca2:	2320      	movs	r3, #32
 8005ca4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ca8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cac:	2330      	movs	r3, #48	@ 0x30
 8005cae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e4c <_svfiprintf_r+0x1e4>
 8005cb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cb6:	f04f 0901 	mov.w	r9, #1
 8005cba:	4623      	mov	r3, r4
 8005cbc:	469a      	mov	sl, r3
 8005cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc2:	b10a      	cbz	r2, 8005cc8 <_svfiprintf_r+0x60>
 8005cc4:	2a25      	cmp	r2, #37	@ 0x25
 8005cc6:	d1f9      	bne.n	8005cbc <_svfiprintf_r+0x54>
 8005cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ccc:	d00b      	beq.n	8005ce6 <_svfiprintf_r+0x7e>
 8005cce:	465b      	mov	r3, fp
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f7ff ff6b 	bl	8005bb0 <__ssputs_r>
 8005cda:	3001      	adds	r0, #1
 8005cdc:	f000 80a7 	beq.w	8005e2e <_svfiprintf_r+0x1c6>
 8005ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce2:	445a      	add	r2, fp
 8005ce4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 809f 	beq.w	8005e2e <_svfiprintf_r+0x1c6>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cfa:	f10a 0a01 	add.w	sl, sl, #1
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d08:	4654      	mov	r4, sl
 8005d0a:	2205      	movs	r2, #5
 8005d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d10:	484e      	ldr	r0, [pc, #312]	@ (8005e4c <_svfiprintf_r+0x1e4>)
 8005d12:	f7fa fa5d 	bl	80001d0 <memchr>
 8005d16:	9a04      	ldr	r2, [sp, #16]
 8005d18:	b9d8      	cbnz	r0, 8005d52 <_svfiprintf_r+0xea>
 8005d1a:	06d0      	lsls	r0, r2, #27
 8005d1c:	bf44      	itt	mi
 8005d1e:	2320      	movmi	r3, #32
 8005d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d24:	0711      	lsls	r1, r2, #28
 8005d26:	bf44      	itt	mi
 8005d28:	232b      	movmi	r3, #43	@ 0x2b
 8005d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d34:	d015      	beq.n	8005d62 <_svfiprintf_r+0xfa>
 8005d36:	9a07      	ldr	r2, [sp, #28]
 8005d38:	4654      	mov	r4, sl
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f04f 0c0a 	mov.w	ip, #10
 8005d40:	4621      	mov	r1, r4
 8005d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d46:	3b30      	subs	r3, #48	@ 0x30
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	d94b      	bls.n	8005de4 <_svfiprintf_r+0x17c>
 8005d4c:	b1b0      	cbz	r0, 8005d7c <_svfiprintf_r+0x114>
 8005d4e:	9207      	str	r2, [sp, #28]
 8005d50:	e014      	b.n	8005d7c <_svfiprintf_r+0x114>
 8005d52:	eba0 0308 	sub.w	r3, r0, r8
 8005d56:	fa09 f303 	lsl.w	r3, r9, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	9304      	str	r3, [sp, #16]
 8005d5e:	46a2      	mov	sl, r4
 8005d60:	e7d2      	b.n	8005d08 <_svfiprintf_r+0xa0>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	1d19      	adds	r1, r3, #4
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	9103      	str	r1, [sp, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfbb      	ittet	lt
 8005d6e:	425b      	neglt	r3, r3
 8005d70:	f042 0202 	orrlt.w	r2, r2, #2
 8005d74:	9307      	strge	r3, [sp, #28]
 8005d76:	9307      	strlt	r3, [sp, #28]
 8005d78:	bfb8      	it	lt
 8005d7a:	9204      	strlt	r2, [sp, #16]
 8005d7c:	7823      	ldrb	r3, [r4, #0]
 8005d7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d80:	d10a      	bne.n	8005d98 <_svfiprintf_r+0x130>
 8005d82:	7863      	ldrb	r3, [r4, #1]
 8005d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d86:	d132      	bne.n	8005dee <_svfiprintf_r+0x186>
 8005d88:	9b03      	ldr	r3, [sp, #12]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	9203      	str	r2, [sp, #12]
 8005d90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d94:	3402      	adds	r4, #2
 8005d96:	9305      	str	r3, [sp, #20]
 8005d98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e5c <_svfiprintf_r+0x1f4>
 8005d9c:	7821      	ldrb	r1, [r4, #0]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	4650      	mov	r0, sl
 8005da2:	f7fa fa15 	bl	80001d0 <memchr>
 8005da6:	b138      	cbz	r0, 8005db8 <_svfiprintf_r+0x150>
 8005da8:	9b04      	ldr	r3, [sp, #16]
 8005daa:	eba0 000a 	sub.w	r0, r0, sl
 8005dae:	2240      	movs	r2, #64	@ 0x40
 8005db0:	4082      	lsls	r2, r0
 8005db2:	4313      	orrs	r3, r2
 8005db4:	3401      	adds	r4, #1
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dbc:	4824      	ldr	r0, [pc, #144]	@ (8005e50 <_svfiprintf_r+0x1e8>)
 8005dbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dc2:	2206      	movs	r2, #6
 8005dc4:	f7fa fa04 	bl	80001d0 <memchr>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d036      	beq.n	8005e3a <_svfiprintf_r+0x1d2>
 8005dcc:	4b21      	ldr	r3, [pc, #132]	@ (8005e54 <_svfiprintf_r+0x1ec>)
 8005dce:	bb1b      	cbnz	r3, 8005e18 <_svfiprintf_r+0x1b0>
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	3307      	adds	r3, #7
 8005dd4:	f023 0307 	bic.w	r3, r3, #7
 8005dd8:	3308      	adds	r3, #8
 8005dda:	9303      	str	r3, [sp, #12]
 8005ddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dde:	4433      	add	r3, r6
 8005de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de2:	e76a      	b.n	8005cba <_svfiprintf_r+0x52>
 8005de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de8:	460c      	mov	r4, r1
 8005dea:	2001      	movs	r0, #1
 8005dec:	e7a8      	b.n	8005d40 <_svfiprintf_r+0xd8>
 8005dee:	2300      	movs	r3, #0
 8005df0:	3401      	adds	r4, #1
 8005df2:	9305      	str	r3, [sp, #20]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f04f 0c0a 	mov.w	ip, #10
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e00:	3a30      	subs	r2, #48	@ 0x30
 8005e02:	2a09      	cmp	r2, #9
 8005e04:	d903      	bls.n	8005e0e <_svfiprintf_r+0x1a6>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0c6      	beq.n	8005d98 <_svfiprintf_r+0x130>
 8005e0a:	9105      	str	r1, [sp, #20]
 8005e0c:	e7c4      	b.n	8005d98 <_svfiprintf_r+0x130>
 8005e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e12:	4604      	mov	r4, r0
 8005e14:	2301      	movs	r3, #1
 8005e16:	e7f0      	b.n	8005dfa <_svfiprintf_r+0x192>
 8005e18:	ab03      	add	r3, sp, #12
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e58 <_svfiprintf_r+0x1f0>)
 8005e20:	a904      	add	r1, sp, #16
 8005e22:	4638      	mov	r0, r7
 8005e24:	f3af 8000 	nop.w
 8005e28:	1c42      	adds	r2, r0, #1
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	d1d6      	bne.n	8005ddc <_svfiprintf_r+0x174>
 8005e2e:	89ab      	ldrh	r3, [r5, #12]
 8005e30:	065b      	lsls	r3, r3, #25
 8005e32:	f53f af2d 	bmi.w	8005c90 <_svfiprintf_r+0x28>
 8005e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e38:	e72c      	b.n	8005c94 <_svfiprintf_r+0x2c>
 8005e3a:	ab03      	add	r3, sp, #12
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <_svfiprintf_r+0x1f0>)
 8005e42:	a904      	add	r1, sp, #16
 8005e44:	4638      	mov	r0, r7
 8005e46:	f000 f879 	bl	8005f3c <_printf_i>
 8005e4a:	e7ed      	b.n	8005e28 <_svfiprintf_r+0x1c0>
 8005e4c:	0800634c 	.word	0x0800634c
 8005e50:	08006356 	.word	0x08006356
 8005e54:	00000000 	.word	0x00000000
 8005e58:	08005bb1 	.word	0x08005bb1
 8005e5c:	08006352 	.word	0x08006352

08005e60 <_printf_common>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	4616      	mov	r6, r2
 8005e66:	4698      	mov	r8, r3
 8005e68:	688a      	ldr	r2, [r1, #8]
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	bfb8      	it	lt
 8005e74:	4613      	movlt	r3, r2
 8005e76:	6033      	str	r3, [r6, #0]
 8005e78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e7c:	4607      	mov	r7, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b10a      	cbz	r2, 8005e86 <_printf_common+0x26>
 8005e82:	3301      	adds	r3, #1
 8005e84:	6033      	str	r3, [r6, #0]
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	0699      	lsls	r1, r3, #26
 8005e8a:	bf42      	ittt	mi
 8005e8c:	6833      	ldrmi	r3, [r6, #0]
 8005e8e:	3302      	addmi	r3, #2
 8005e90:	6033      	strmi	r3, [r6, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	f015 0506 	ands.w	r5, r5, #6
 8005e98:	d106      	bne.n	8005ea8 <_printf_common+0x48>
 8005e9a:	f104 0a19 	add.w	sl, r4, #25
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	6832      	ldr	r2, [r6, #0]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dc26      	bgt.n	8005ef6 <_printf_common+0x96>
 8005ea8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	3b00      	subs	r3, #0
 8005eb0:	bf18      	it	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	0692      	lsls	r2, r2, #26
 8005eb6:	d42b      	bmi.n	8005f10 <_printf_common+0xb0>
 8005eb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ebc:	4641      	mov	r1, r8
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	47c8      	blx	r9
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	d01e      	beq.n	8005f04 <_printf_common+0xa4>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	6922      	ldr	r2, [r4, #16]
 8005eca:	f003 0306 	and.w	r3, r3, #6
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	bf02      	ittt	eq
 8005ed2:	68e5      	ldreq	r5, [r4, #12]
 8005ed4:	6833      	ldreq	r3, [r6, #0]
 8005ed6:	1aed      	subeq	r5, r5, r3
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	bf0c      	ite	eq
 8005edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ee0:	2500      	movne	r5, #0
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	bfc4      	itt	gt
 8005ee6:	1a9b      	subgt	r3, r3, r2
 8005ee8:	18ed      	addgt	r5, r5, r3
 8005eea:	2600      	movs	r6, #0
 8005eec:	341a      	adds	r4, #26
 8005eee:	42b5      	cmp	r5, r6
 8005ef0:	d11a      	bne.n	8005f28 <_printf_common+0xc8>
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	e008      	b.n	8005f08 <_printf_common+0xa8>
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4652      	mov	r2, sl
 8005efa:	4641      	mov	r1, r8
 8005efc:	4638      	mov	r0, r7
 8005efe:	47c8      	blx	r9
 8005f00:	3001      	adds	r0, #1
 8005f02:	d103      	bne.n	8005f0c <_printf_common+0xac>
 8005f04:	f04f 30ff 	mov.w	r0, #4294967295
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	e7c6      	b.n	8005e9e <_printf_common+0x3e>
 8005f10:	18e1      	adds	r1, r4, r3
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	2030      	movs	r0, #48	@ 0x30
 8005f16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f1a:	4422      	add	r2, r4
 8005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f24:	3302      	adds	r3, #2
 8005f26:	e7c7      	b.n	8005eb8 <_printf_common+0x58>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c8      	blx	r9
 8005f32:	3001      	adds	r0, #1
 8005f34:	d0e6      	beq.n	8005f04 <_printf_common+0xa4>
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7d9      	b.n	8005eee <_printf_common+0x8e>
	...

08005f3c <_printf_i>:
 8005f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	7e0f      	ldrb	r7, [r1, #24]
 8005f42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f44:	2f78      	cmp	r7, #120	@ 0x78
 8005f46:	4691      	mov	r9, r2
 8005f48:	4680      	mov	r8, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	469a      	mov	sl, r3
 8005f4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f52:	d807      	bhi.n	8005f64 <_printf_i+0x28>
 8005f54:	2f62      	cmp	r7, #98	@ 0x62
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x32>
 8005f58:	2f00      	cmp	r7, #0
 8005f5a:	f000 80d2 	beq.w	8006102 <_printf_i+0x1c6>
 8005f5e:	2f58      	cmp	r7, #88	@ 0x58
 8005f60:	f000 80b9 	beq.w	80060d6 <_printf_i+0x19a>
 8005f64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f6c:	e03a      	b.n	8005fe4 <_printf_i+0xa8>
 8005f6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f72:	2b15      	cmp	r3, #21
 8005f74:	d8f6      	bhi.n	8005f64 <_printf_i+0x28>
 8005f76:	a101      	add	r1, pc, #4	@ (adr r1, 8005f7c <_printf_i+0x40>)
 8005f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f7c:	08005fd5 	.word	0x08005fd5
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005f65 	.word	0x08005f65
 8005f88:	08005f65 	.word	0x08005f65
 8005f8c:	08005f65 	.word	0x08005f65
 8005f90:	08005f65 	.word	0x08005f65
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005f65 	.word	0x08005f65
 8005f9c:	08005f65 	.word	0x08005f65
 8005fa0:	08005f65 	.word	0x08005f65
 8005fa4:	08005f65 	.word	0x08005f65
 8005fa8:	080060e9 	.word	0x080060e9
 8005fac:	08006013 	.word	0x08006013
 8005fb0:	080060a3 	.word	0x080060a3
 8005fb4:	08005f65 	.word	0x08005f65
 8005fb8:	08005f65 	.word	0x08005f65
 8005fbc:	0800610b 	.word	0x0800610b
 8005fc0:	08005f65 	.word	0x08005f65
 8005fc4:	08006013 	.word	0x08006013
 8005fc8:	08005f65 	.word	0x08005f65
 8005fcc:	08005f65 	.word	0x08005f65
 8005fd0:	080060ab 	.word	0x080060ab
 8005fd4:	6833      	ldr	r3, [r6, #0]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6032      	str	r2, [r6, #0]
 8005fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e09d      	b.n	8006124 <_printf_i+0x1e8>
 8005fe8:	6833      	ldr	r3, [r6, #0]
 8005fea:	6820      	ldr	r0, [r4, #0]
 8005fec:	1d19      	adds	r1, r3, #4
 8005fee:	6031      	str	r1, [r6, #0]
 8005ff0:	0606      	lsls	r6, r0, #24
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_i+0xbc>
 8005ff4:	681d      	ldr	r5, [r3, #0]
 8005ff6:	e003      	b.n	8006000 <_printf_i+0xc4>
 8005ff8:	0645      	lsls	r5, r0, #25
 8005ffa:	d5fb      	bpl.n	8005ff4 <_printf_i+0xb8>
 8005ffc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006000:	2d00      	cmp	r5, #0
 8006002:	da03      	bge.n	800600c <_printf_i+0xd0>
 8006004:	232d      	movs	r3, #45	@ 0x2d
 8006006:	426d      	negs	r5, r5
 8006008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800600c:	4859      	ldr	r0, [pc, #356]	@ (8006174 <_printf_i+0x238>)
 800600e:	230a      	movs	r3, #10
 8006010:	e011      	b.n	8006036 <_printf_i+0xfa>
 8006012:	6821      	ldr	r1, [r4, #0]
 8006014:	6833      	ldr	r3, [r6, #0]
 8006016:	0608      	lsls	r0, r1, #24
 8006018:	f853 5b04 	ldr.w	r5, [r3], #4
 800601c:	d402      	bmi.n	8006024 <_printf_i+0xe8>
 800601e:	0649      	lsls	r1, r1, #25
 8006020:	bf48      	it	mi
 8006022:	b2ad      	uxthmi	r5, r5
 8006024:	2f6f      	cmp	r7, #111	@ 0x6f
 8006026:	4853      	ldr	r0, [pc, #332]	@ (8006174 <_printf_i+0x238>)
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	bf14      	ite	ne
 800602c:	230a      	movne	r3, #10
 800602e:	2308      	moveq	r3, #8
 8006030:	2100      	movs	r1, #0
 8006032:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006036:	6866      	ldr	r6, [r4, #4]
 8006038:	60a6      	str	r6, [r4, #8]
 800603a:	2e00      	cmp	r6, #0
 800603c:	bfa2      	ittt	ge
 800603e:	6821      	ldrge	r1, [r4, #0]
 8006040:	f021 0104 	bicge.w	r1, r1, #4
 8006044:	6021      	strge	r1, [r4, #0]
 8006046:	b90d      	cbnz	r5, 800604c <_printf_i+0x110>
 8006048:	2e00      	cmp	r6, #0
 800604a:	d04b      	beq.n	80060e4 <_printf_i+0x1a8>
 800604c:	4616      	mov	r6, r2
 800604e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006052:	fb03 5711 	mls	r7, r3, r1, r5
 8006056:	5dc7      	ldrb	r7, [r0, r7]
 8006058:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800605c:	462f      	mov	r7, r5
 800605e:	42bb      	cmp	r3, r7
 8006060:	460d      	mov	r5, r1
 8006062:	d9f4      	bls.n	800604e <_printf_i+0x112>
 8006064:	2b08      	cmp	r3, #8
 8006066:	d10b      	bne.n	8006080 <_printf_i+0x144>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07df      	lsls	r7, r3, #31
 800606c:	d508      	bpl.n	8006080 <_printf_i+0x144>
 800606e:	6923      	ldr	r3, [r4, #16]
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	4299      	cmp	r1, r3
 8006074:	bfde      	ittt	le
 8006076:	2330      	movle	r3, #48	@ 0x30
 8006078:	f806 3c01 	strble.w	r3, [r6, #-1]
 800607c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006080:	1b92      	subs	r2, r2, r6
 8006082:	6122      	str	r2, [r4, #16]
 8006084:	f8cd a000 	str.w	sl, [sp]
 8006088:	464b      	mov	r3, r9
 800608a:	aa03      	add	r2, sp, #12
 800608c:	4621      	mov	r1, r4
 800608e:	4640      	mov	r0, r8
 8006090:	f7ff fee6 	bl	8005e60 <_printf_common>
 8006094:	3001      	adds	r0, #1
 8006096:	d14a      	bne.n	800612e <_printf_i+0x1f2>
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	b004      	add	sp, #16
 800609e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	f043 0320 	orr.w	r3, r3, #32
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	4833      	ldr	r0, [pc, #204]	@ (8006178 <_printf_i+0x23c>)
 80060ac:	2778      	movs	r7, #120	@ 0x78
 80060ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060b2:	6823      	ldr	r3, [r4, #0]
 80060b4:	6831      	ldr	r1, [r6, #0]
 80060b6:	061f      	lsls	r7, r3, #24
 80060b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80060bc:	d402      	bmi.n	80060c4 <_printf_i+0x188>
 80060be:	065f      	lsls	r7, r3, #25
 80060c0:	bf48      	it	mi
 80060c2:	b2ad      	uxthmi	r5, r5
 80060c4:	6031      	str	r1, [r6, #0]
 80060c6:	07d9      	lsls	r1, r3, #31
 80060c8:	bf44      	itt	mi
 80060ca:	f043 0320 	orrmi.w	r3, r3, #32
 80060ce:	6023      	strmi	r3, [r4, #0]
 80060d0:	b11d      	cbz	r5, 80060da <_printf_i+0x19e>
 80060d2:	2310      	movs	r3, #16
 80060d4:	e7ac      	b.n	8006030 <_printf_i+0xf4>
 80060d6:	4827      	ldr	r0, [pc, #156]	@ (8006174 <_printf_i+0x238>)
 80060d8:	e7e9      	b.n	80060ae <_printf_i+0x172>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	f023 0320 	bic.w	r3, r3, #32
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	e7f6      	b.n	80060d2 <_printf_i+0x196>
 80060e4:	4616      	mov	r6, r2
 80060e6:	e7bd      	b.n	8006064 <_printf_i+0x128>
 80060e8:	6833      	ldr	r3, [r6, #0]
 80060ea:	6825      	ldr	r5, [r4, #0]
 80060ec:	6961      	ldr	r1, [r4, #20]
 80060ee:	1d18      	adds	r0, r3, #4
 80060f0:	6030      	str	r0, [r6, #0]
 80060f2:	062e      	lsls	r6, r5, #24
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	d501      	bpl.n	80060fc <_printf_i+0x1c0>
 80060f8:	6019      	str	r1, [r3, #0]
 80060fa:	e002      	b.n	8006102 <_printf_i+0x1c6>
 80060fc:	0668      	lsls	r0, r5, #25
 80060fe:	d5fb      	bpl.n	80060f8 <_printf_i+0x1bc>
 8006100:	8019      	strh	r1, [r3, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	4616      	mov	r6, r2
 8006108:	e7bc      	b.n	8006084 <_printf_i+0x148>
 800610a:	6833      	ldr	r3, [r6, #0]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	6032      	str	r2, [r6, #0]
 8006110:	681e      	ldr	r6, [r3, #0]
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	2100      	movs	r1, #0
 8006116:	4630      	mov	r0, r6
 8006118:	f7fa f85a 	bl	80001d0 <memchr>
 800611c:	b108      	cbz	r0, 8006122 <_printf_i+0x1e6>
 800611e:	1b80      	subs	r0, r0, r6
 8006120:	6060      	str	r0, [r4, #4]
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	2300      	movs	r3, #0
 8006128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800612c:	e7aa      	b.n	8006084 <_printf_i+0x148>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	4632      	mov	r2, r6
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	47d0      	blx	sl
 8006138:	3001      	adds	r0, #1
 800613a:	d0ad      	beq.n	8006098 <_printf_i+0x15c>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	079b      	lsls	r3, r3, #30
 8006140:	d413      	bmi.n	800616a <_printf_i+0x22e>
 8006142:	68e0      	ldr	r0, [r4, #12]
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	4298      	cmp	r0, r3
 8006148:	bfb8      	it	lt
 800614a:	4618      	movlt	r0, r3
 800614c:	e7a6      	b.n	800609c <_printf_i+0x160>
 800614e:	2301      	movs	r3, #1
 8006150:	4632      	mov	r2, r6
 8006152:	4649      	mov	r1, r9
 8006154:	4640      	mov	r0, r8
 8006156:	47d0      	blx	sl
 8006158:	3001      	adds	r0, #1
 800615a:	d09d      	beq.n	8006098 <_printf_i+0x15c>
 800615c:	3501      	adds	r5, #1
 800615e:	68e3      	ldr	r3, [r4, #12]
 8006160:	9903      	ldr	r1, [sp, #12]
 8006162:	1a5b      	subs	r3, r3, r1
 8006164:	42ab      	cmp	r3, r5
 8006166:	dcf2      	bgt.n	800614e <_printf_i+0x212>
 8006168:	e7eb      	b.n	8006142 <_printf_i+0x206>
 800616a:	2500      	movs	r5, #0
 800616c:	f104 0619 	add.w	r6, r4, #25
 8006170:	e7f5      	b.n	800615e <_printf_i+0x222>
 8006172:	bf00      	nop
 8006174:	0800635d 	.word	0x0800635d
 8006178:	0800636e 	.word	0x0800636e

0800617c <memmove>:
 800617c:	4288      	cmp	r0, r1
 800617e:	b510      	push	{r4, lr}
 8006180:	eb01 0402 	add.w	r4, r1, r2
 8006184:	d902      	bls.n	800618c <memmove+0x10>
 8006186:	4284      	cmp	r4, r0
 8006188:	4623      	mov	r3, r4
 800618a:	d807      	bhi.n	800619c <memmove+0x20>
 800618c:	1e43      	subs	r3, r0, #1
 800618e:	42a1      	cmp	r1, r4
 8006190:	d008      	beq.n	80061a4 <memmove+0x28>
 8006192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800619a:	e7f8      	b.n	800618e <memmove+0x12>
 800619c:	4402      	add	r2, r0
 800619e:	4601      	mov	r1, r0
 80061a0:	428a      	cmp	r2, r1
 80061a2:	d100      	bne.n	80061a6 <memmove+0x2a>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061ae:	e7f7      	b.n	80061a0 <memmove+0x24>

080061b0 <_sbrk_r>:
 80061b0:	b538      	push	{r3, r4, r5, lr}
 80061b2:	4d06      	ldr	r5, [pc, #24]	@ (80061cc <_sbrk_r+0x1c>)
 80061b4:	2300      	movs	r3, #0
 80061b6:	4604      	mov	r4, r0
 80061b8:	4608      	mov	r0, r1
 80061ba:	602b      	str	r3, [r5, #0]
 80061bc:	f7fd fc68 	bl	8003a90 <_sbrk>
 80061c0:	1c43      	adds	r3, r0, #1
 80061c2:	d102      	bne.n	80061ca <_sbrk_r+0x1a>
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	b103      	cbz	r3, 80061ca <_sbrk_r+0x1a>
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	bd38      	pop	{r3, r4, r5, pc}
 80061cc:	20013018 	.word	0x20013018

080061d0 <_realloc_r>:
 80061d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d4:	4680      	mov	r8, r0
 80061d6:	4615      	mov	r5, r2
 80061d8:	460c      	mov	r4, r1
 80061da:	b921      	cbnz	r1, 80061e6 <_realloc_r+0x16>
 80061dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	4611      	mov	r1, r2
 80061e2:	f7ff bc59 	b.w	8005a98 <_malloc_r>
 80061e6:	b92a      	cbnz	r2, 80061f4 <_realloc_r+0x24>
 80061e8:	f7ff fbea 	bl	80059c0 <_free_r>
 80061ec:	2400      	movs	r4, #0
 80061ee:	4620      	mov	r0, r4
 80061f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061f4:	f000 f81a 	bl	800622c <_malloc_usable_size_r>
 80061f8:	4285      	cmp	r5, r0
 80061fa:	4606      	mov	r6, r0
 80061fc:	d802      	bhi.n	8006204 <_realloc_r+0x34>
 80061fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006202:	d8f4      	bhi.n	80061ee <_realloc_r+0x1e>
 8006204:	4629      	mov	r1, r5
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff fc46 	bl	8005a98 <_malloc_r>
 800620c:	4607      	mov	r7, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d0ec      	beq.n	80061ec <_realloc_r+0x1c>
 8006212:	42b5      	cmp	r5, r6
 8006214:	462a      	mov	r2, r5
 8006216:	4621      	mov	r1, r4
 8006218:	bf28      	it	cs
 800621a:	4632      	movcs	r2, r6
 800621c:	f7ff fbc2 	bl	80059a4 <memcpy>
 8006220:	4621      	mov	r1, r4
 8006222:	4640      	mov	r0, r8
 8006224:	f7ff fbcc 	bl	80059c0 <_free_r>
 8006228:	463c      	mov	r4, r7
 800622a:	e7e0      	b.n	80061ee <_realloc_r+0x1e>

0800622c <_malloc_usable_size_r>:
 800622c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006230:	1f18      	subs	r0, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	bfbc      	itt	lt
 8006236:	580b      	ldrlt	r3, [r1, r0]
 8006238:	18c0      	addlt	r0, r0, r3
 800623a:	4770      	bx	lr

0800623c <_init>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr

08006248 <_fini>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr
