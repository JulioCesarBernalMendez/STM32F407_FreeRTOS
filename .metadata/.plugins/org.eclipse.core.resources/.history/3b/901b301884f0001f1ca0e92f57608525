
App_015_Example_5.3_Using_a_Queue_Set.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007078  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007364  08007364  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007364  08007364  00008364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800736c  0800736c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800736c  0800736c  0000836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007370  08007370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007374  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          000198d8  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200198ec  200198ec  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018106  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003218  00000000  00000000  0002114a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  00024368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111f  00000000  00000000  00025970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244d3  00000000  00000000  00026a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019648  00000000  00000000  0004af62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eae6d  00000000  00000000  000645aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014f417  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cc4  00000000  00000000  0014f45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000c1  00000000  00000000  00155120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071f0 	.word	0x080071f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080071f0 	.word	0x080071f0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e74 	.word	0x20012e74

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fb6b 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f86d 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f8ff 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8d3 	bl	8000710 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056a:	4b2a      	ldr	r3, [pc, #168]	@ (8000614 <main+0xc0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a29      	ldr	r2, [pc, #164]	@ (8000614 <main+0xc0>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 8000576:	f005 f919 	bl	80057ac <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057a:	f005 fe6f 	bl	800625c <SEGGER_SYSVIEW_Start>

  /* Create the two queues, both of which send character pointers.
     The priority of the receiving task is above the priority of the
     sending tasks, so the queues will never have more than one item
     in them at any one time */
  xQueue1 = xQueueCreate( 1, sizeof( char * ) );
 800057e:	2200      	movs	r2, #0
 8000580:	2104      	movs	r1, #4
 8000582:	2001      	movs	r0, #1
 8000584:	f002 fada 	bl	8002b3c <xQueueGenericCreate>
 8000588:	4603      	mov	r3, r0
 800058a:	4a23      	ldr	r2, [pc, #140]	@ (8000618 <main+0xc4>)
 800058c:	6013      	str	r3, [r2, #0]
  xQueue2 = xQueueCreate( 1, sizeof( char * ) );
 800058e:	2200      	movs	r2, #0
 8000590:	2104      	movs	r1, #4
 8000592:	2001      	movs	r0, #1
 8000594:	f002 fad2 	bl	8002b3c <xQueueGenericCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a20      	ldr	r2, [pc, #128]	@ (800061c <main+0xc8>)
 800059c:	6013      	str	r3, [r2, #0]

  /* Create the queue set.
     Two queues will be added to the set, each of which can contain 1 item,
     so the maximum number of queue handles the queue set will ever
     have to hold at one item is 2 (2 queues multiplied by 1 item per queue) */
  xQueueSet = xQueueCreateSet( 1 * 2 );
 800059e:	2002      	movs	r0, #2
 80005a0:	f002 ff07 	bl	80033b2 <xQueueCreateSet>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000620 <main+0xcc>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* add the two queues to the set */
  xQueueAddToSet( xQueue1, xQueueSet );
 80005aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <main+0xc4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000620 <main+0xcc>)
 80005b0:	6812      	ldr	r2, [r2, #0]
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 ff14 	bl	80033e2 <xQueueAddToSet>
  xQueueAddToSet( xQueue2, xQueueSet );
 80005ba:	4b18      	ldr	r3, [pc, #96]	@ (800061c <main+0xc8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <main+0xcc>)
 80005c0:	6812      	ldr	r2, [r2, #0]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 ff0c 	bl	80033e2 <xQueueAddToSet>

  /* create the tasks that send to the queues (their priority is lower than that of
     the receiving task) */
  xTaskCreate( vSenderTask1, "Sender1", 1000, NULL, 1, NULL );
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005d8:	4912      	ldr	r1, [pc, #72]	@ (8000624 <main+0xd0>)
 80005da:	4813      	ldr	r0, [pc, #76]	@ (8000628 <main+0xd4>)
 80005dc:	f002 fff2 	bl	80035c4 <xTaskCreate>
  xTaskCreate( vSenderTask2, "Sender2", 1000, NULL, 1, NULL );
 80005e0:	2300      	movs	r3, #0
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2300      	movs	r3, #0
 80005ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ee:	490f      	ldr	r1, [pc, #60]	@ (800062c <main+0xd8>)
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <main+0xdc>)
 80005f2:	f002 ffe7 	bl	80035c4 <xTaskCreate>

  /* create the task that reads from the queue set to determine which of the
     two queues contain data (higher priority than sending tasks) */
  xTaskCreate( vReceiverTask, "Receiver", 1000, NULL, 2, NULL );
 80005f6:	2300      	movs	r3, #0
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000604:	490b      	ldr	r1, [pc, #44]	@ (8000634 <main+0xe0>)
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <main+0xe4>)
 8000608:	f002 ffdc 	bl	80035c4 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 800060c:	f003 f9ca 	bl	80039a4 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0xbc>
 8000614:	e0001000 	.word	0xe0001000
 8000618:	20000078 	.word	0x20000078
 800061c:	2000007c 	.word	0x2000007c
 8000620:	20000080 	.word	0x20000080
 8000624:	08007208 	.word	0x08007208
 8000628:	080008c5 	.word	0x080008c5
 800062c:	08007210 	.word	0x08007210
 8000630:	080008f9 	.word	0x080008f9
 8000634:	08007218 	.word	0x08007218
 8000638:	0800092d 	.word	0x0800092d

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fd95 	bl	800717a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a4:	2302      	movs	r3, #2
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ac:	2308      	movs	r3, #8
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006b0:	2332      	movs	r3, #50	@ 0x32
 80006b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fd91 	bl	80011e8 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006cc:	f000 f95e 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fff2 	bl	80016d8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fa:	f000 f947 	bl	800098c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_USART2_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART2_UART_Init+0x4c>)
 8000748:	f001 fcba 	bl	80020c0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f91b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000030 	.word	0x20000030
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	@ 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <MX_GPIO_Init+0x10c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a3b      	ldr	r2, [pc, #236]	@ (8000870 <MX_GPIO_Init+0x10c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b39      	ldr	r3, [pc, #228]	@ (8000870 <MX_GPIO_Init+0x10c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b35      	ldr	r3, [pc, #212]	@ (8000870 <MX_GPIO_Init+0x10c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a34      	ldr	r2, [pc, #208]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b27      	ldr	r3, [pc, #156]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b24      	ldr	r3, [pc, #144]	@ (8000870 <MX_GPIO_Init+0x10c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007f0:	4820      	ldr	r0, [pc, #128]	@ (8000874 <MX_GPIO_Init+0x110>)
 80007f2:	f000 fcdf 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	481b      	ldr	r0, [pc, #108]	@ (8000878 <MX_GPIO_Init+0x114>)
 800080c:	f000 fb36 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000810:	2304      	movs	r3, #4
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4816      	ldr	r0, [pc, #88]	@ (800087c <MX_GPIO_Init+0x118>)
 8000824:	f000 fb2a 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000828:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <MX_GPIO_Init+0x110>)
 8000842:	f000 fb1b 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000846:	2380      	movs	r3, #128	@ 0x80
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000856:	2306      	movs	r3, #6
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4807      	ldr	r0, [pc, #28]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000862:	f000 fb0b 	bl	8000e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	@ 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40020c00 	.word	0x40020c00
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	40020800 	.word	0x40020800

08000884 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 800088e:	2300      	movs	r3, #0
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e00b      	b.n	80008ac <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8000894:	7bfb      	ldrb	r3, [r7, #15]
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	18d1      	adds	r1, r2, r3
 800089a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800089e:	2201      	movs	r2, #1
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f001 fc5d 	bl	8002160 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	3301      	adds	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1ed      	bne.n	8000894 <UART2_Print_Text+0x10>
  }
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <vSenderTask1>:

void vSenderTask1( void *pvParameters )
{ 
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* get 100 milliseconds equivalency in tick interrupts */
  const TickType_t xBlockTime = pdMS_TO_TICKS( 100 );
 80008cc:	2364      	movs	r3, #100	@ 0x64
 80008ce:	60fb      	str	r3, [r7, #12]

  /* string to be printed out by task 1 */
  const char * const pcMessage = "Message from vSenderTask1\n\r";
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <vSenderTask1+0x2c>)
 80008d2:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* block for 100ms */
    vTaskDelay( xBlockTime );
 80008d4:	68f8      	ldr	r0, [r7, #12]
 80008d6:	f002 ffe3 	bl	80038a0 <vTaskDelay>
       because the priority of the task that reads from the queue is
       higher than the priority of this task; as soon as this task writes
       to the queue it will be pre-empted by the task that reads from the
       queue, so the queue will already be empty again by the time the
       call to xQueueSend() returns. The block time is set to 0 */
    xQueueSend( xQueue1, &pcMessage, 0 );
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <vSenderTask1+0x30>)
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f107 0108 	add.w	r1, r7, #8
 80008e2:	2300      	movs	r3, #0
 80008e4:	2200      	movs	r2, #0
 80008e6:	f002 f9a7 	bl	8002c38 <xQueueGenericSend>
    vTaskDelay( xBlockTime );
 80008ea:	bf00      	nop
 80008ec:	e7f2      	b.n	80008d4 <vSenderTask1+0x10>
 80008ee:	bf00      	nop
 80008f0:	08007224 	.word	0x08007224
 80008f4:	20000078 	.word	0x20000078

080008f8 <vSenderTask2>:
  }
}

void vSenderTask2( void *pvParameters )
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* get 200 milliseconds equivalency in tick interrupts */
  const TickType_t xBlockTime = pdMS_TO_TICKS( 200 );
 8000900:	23c8      	movs	r3, #200	@ 0xc8
 8000902:	60fb      	str	r3, [r7, #12]

  /* string to be printed out by task 2 */
  const char * const pcMessage = "Message from vSenderTask2\n\r";
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <vSenderTask2+0x2c>)
 8000906:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* block for 200ms */
    vTaskDelay( xBlockTime );
 8000908:	68f8      	ldr	r0, [r7, #12]
 800090a:	f002 ffc9 	bl	80038a0 <vTaskDelay>
       because the priority of the task that reads from the queue is
       higher than the priority of this task; as soon as this task writes
       to the queue it will be pre-empted by the task that reads from the
       queue, so the queue will already be empty again by the time the
       call to xQueueSend() returns. The block time is set to 0 */
    xQueueSend( xQueue2, &pcMessage, 0 );
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <vSenderTask2+0x30>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	f107 0108 	add.w	r1, r7, #8
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	f002 f98d 	bl	8002c38 <xQueueGenericSend>
    vTaskDelay( xBlockTime );
 800091e:	bf00      	nop
 8000920:	e7f2      	b.n	8000908 <vSenderTask2+0x10>
 8000922:	bf00      	nop
 8000924:	08007240 	.word	0x08007240
 8000928:	2000007c 	.word	0x2000007c

0800092c <vReceiverTask>:
  }
}

void vReceiverTask( void *pvParameters )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
       contain data.
       Cast the QueueSetMemberHandle_t value returned from
       xQueueSelectFromSet() to a QueueHandle_t, as it is known all the
       members of the set are queues (the queue set does not contain any
       semaphores) */
    xQueueThatContainsData = ( QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY );
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <vReceiverTask+0x34>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f04f 31ff 	mov.w	r1, #4294967295
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fd76 	bl	800342e <xQueueSelectFromSet>
 8000942:	60f8      	str	r0, [r7, #12]
       queues in the set contained data, and xQueueThatContainsData cannot
       be NULL.
       Read from the queue. It is not necessary to specify a
       block time because it is known the queue contains data.
       The block time is set to 0 */
    xQueueReceive( xQueueThatContainsData, &pcReceivedString, 0 );
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f002 fa9d 	bl	8002e8c <xQueueReceive>

    /* print the string received from the queue */
    UART2_Print_Text( &huart2, pcReceivedString );
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	4619      	mov	r1, r3
 8000956:	4803      	ldr	r0, [pc, #12]	@ (8000964 <vReceiverTask+0x38>)
 8000958:	f7ff ff94 	bl	8000884 <UART2_Print_Text>
    xQueueThatContainsData = ( QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY );
 800095c:	bf00      	nop
 800095e:	e7e9      	b.n	8000934 <vReceiverTask+0x8>
 8000960:	20000080 	.word	0x20000080
 8000964:	20000030 	.word	0x20000030

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	@ (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f97d 	bl	8000c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40001000 	.word	0x40001000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 fa1b 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	@ (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa0d 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	@ 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	4a32      	ldr	r2, [pc, #200]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a92:	f043 0310 	orr.w	r3, r3, #16
 8000a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a98:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <HAL_InitTick+0xe4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa4:	f107 0210 	add.w	r2, r7, #16
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f001 f832 	bl	8001b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000abe:	f001 f803 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8000ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac6:	f000 ffff 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8000aca:	4603      	mov	r3, r0
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <HAL_InitTick+0xe8>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	3b01      	subs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <HAL_InitTick+0xec>)
 8000ae0:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <HAL_InitTick+0xf0>)
 8000ae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_InitTick+0xec>)
 8000ae6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aec:	4a1d      	ldr	r2, [pc, #116]	@ (8000b64 <HAL_InitTick+0xec>)
 8000aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000af0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_InitTick+0xec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_InitTick+0xec>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b04:	4817      	ldr	r0, [pc, #92]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b06:	f001 f839 	bl	8001b7c <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d11b      	bne.n	8000b50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b18:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <HAL_InitTick+0xec>)
 8000b1a:	f001 f889 	bl	8001c30 <HAL_TIM_Base_Start_IT>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d111      	bne.n	8000b50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2c:	2036      	movs	r0, #54	@ 0x36
 8000b2e:	f000 f997 	bl	8000e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b0f      	cmp	r3, #15
 8000b36:	d808      	bhi.n	8000b4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2036      	movs	r0, #54	@ 0x36
 8000b3e:	f000 f973 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_InitTick+0xf4>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e002      	b.n	8000b50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3738      	adds	r7, #56	@ 0x38
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	431bde83 	.word	0x431bde83
 8000b64:	20000084 	.word	0x20000084
 8000b68:	40001000 	.word	0x40001000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <NMI_Handler+0x4>

08000b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <TIM6_DAC_IRQHandler+0x10>)
 8000bae:	f001 f8af 	bl	8001d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000084 	.word	0x20000084

08000bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <SystemInit+0x20>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc6:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <SystemInit+0x20>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be4:	f7ff ffea 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	@ (8000c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f006 fabd 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fc9f 	bl	8000554 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c24:	08007374 	.word	0x08007374
  ldr r2, =_sbss
 8000c28:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c2c:	200198ec 	.word	0x200198ec

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c74 <HAL_Init+0x40>)
 8000c3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <HAL_Init+0x40>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a07      	ldr	r2, [pc, #28]	@ (8000c74 <HAL_Init+0x40>)
 8000c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f000 f8d8 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff08 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c68:	f7ff fe96 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023c00 	.word	0x40023c00

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	200000cc 	.word	0x200000cc

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	@ (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200000cc 	.word	0x200000cc

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	@ (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	@ (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	@ (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	@ 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e16b      	b.n	8001170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 815a 	bne.w	800116a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80b4 	beq.w	800116a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b60      	ldr	r3, [pc, #384]	@ (8001188 <HAL_GPIO_Init+0x30c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a5f      	ldr	r2, [pc, #380]	@ (8001188 <HAL_GPIO_Init+0x30c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b5d      	ldr	r3, [pc, #372]	@ (8001188 <HAL_GPIO_Init+0x30c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a5b      	ldr	r2, [pc, #364]	@ (800118c <HAL_GPIO_Init+0x310>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a52      	ldr	r2, [pc, #328]	@ (8001190 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d02b      	beq.n	80010a2 <HAL_GPIO_Init+0x226>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a51      	ldr	r2, [pc, #324]	@ (8001194 <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d025      	beq.n	800109e <HAL_GPIO_Init+0x222>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a50      	ldr	r2, [pc, #320]	@ (8001198 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d01f      	beq.n	800109a <HAL_GPIO_Init+0x21e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4f      	ldr	r2, [pc, #316]	@ (800119c <HAL_GPIO_Init+0x320>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x21a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4e      	ldr	r2, [pc, #312]	@ (80011a0 <HAL_GPIO_Init+0x324>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x216>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4d      	ldr	r2, [pc, #308]	@ (80011a4 <HAL_GPIO_Init+0x328>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x212>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4c      	ldr	r2, [pc, #304]	@ (80011a8 <HAL_GPIO_Init+0x32c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x20e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4b      	ldr	r2, [pc, #300]	@ (80011ac <HAL_GPIO_Init+0x330>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x20a>
 8001082:	2307      	movs	r3, #7
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001086:	2308      	movs	r3, #8
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x228>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	@ (800118c <HAL_GPIO_Init+0x310>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a32      	ldr	r2, [pc, #200]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b26      	ldr	r3, [pc, #152]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <HAL_GPIO_Init+0x334>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae90 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	@ 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40013c00 	.word	0x40013c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e267      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d075      	beq.n	80012f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	4b88      	ldr	r3, [pc, #544]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b04      	cmp	r3, #4
 8001210:	d00c      	beq.n	800122c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001212:	4b85      	ldr	r3, [pc, #532]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d112      	bne.n	8001244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4b82      	ldr	r3, [pc, #520]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800122a:	d10b      	bne.n	8001244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122c:	4b7e      	ldr	r3, [pc, #504]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d05b      	beq.n	80012f0 <HAL_RCC_OscConfig+0x108>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d157      	bne.n	80012f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e242      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800124c:	d106      	bne.n	800125c <HAL_RCC_OscConfig+0x74>
 800124e:	4b76      	ldr	r3, [pc, #472]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a75      	ldr	r2, [pc, #468]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01d      	b.n	8001298 <HAL_RCC_OscConfig+0xb0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b70      	ldr	r3, [pc, #448]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6f      	ldr	r2, [pc, #444]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800126c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b6d      	ldr	r3, [pc, #436]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a6c      	ldr	r2, [pc, #432]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e00b      	b.n	8001298 <HAL_RCC_OscConfig+0xb0>
 8001280:	4b69      	ldr	r3, [pc, #420]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a68      	ldr	r2, [pc, #416]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a65      	ldr	r2, [pc, #404]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcfe 	bl	8000ca0 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fcfa 	bl	8000ca0 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	@ 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e207      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0xc0>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fcea 	bl	8000ca0 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fce6 	bl	8000ca0 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	@ 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e1f3      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e2:	4b51      	ldr	r3, [pc, #324]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0xe8>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d063      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d11c      	bne.n	8001350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b44      	ldr	r3, [pc, #272]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001322:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <HAL_RCC_OscConfig+0x152>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e1c7      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b3b      	ldr	r3, [pc, #236]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4937      	ldr	r1, [pc, #220]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	e03a      	b.n	80013c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d020      	beq.n	800139a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001358:	4b34      	ldr	r3, [pc, #208]	@ (800142c <HAL_RCC_OscConfig+0x244>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fc9f 	bl	8000ca0 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fc9b 	bl	8000ca0 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e1a8      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4925      	ldr	r1, [pc, #148]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
 8001398:	e015      	b.n	80013c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	4b24      	ldr	r3, [pc, #144]	@ (800142c <HAL_RCC_OscConfig+0x244>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fc7e 	bl	8000ca0 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc7a 	bl	8000ca0 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e187      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d036      	beq.n	8001440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d016      	beq.n	8001408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <HAL_RCC_OscConfig+0x248>)
 80013dc:	2201      	movs	r2, #1
 80013de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e0:	f7ff fc5e 	bl	8000ca0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc5a 	bl	8000ca0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e167      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_RCC_OscConfig+0x240>)
 80013fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x200>
 8001406:	e01b      	b.n	8001440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_OscConfig+0x248>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800140e:	f7ff fc47 	bl	8000ca0 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	e00e      	b.n	8001434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001416:	f7ff fc43 	bl	8000ca0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d907      	bls.n	8001434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e150      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
 8001428:	40023800 	.word	0x40023800
 800142c:	42470000 	.word	0x42470000
 8001430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b88      	ldr	r3, [pc, #544]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ea      	bne.n	8001416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 8097 	beq.w	800157c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b81      	ldr	r3, [pc, #516]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b7d      	ldr	r3, [pc, #500]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a7c      	ldr	r2, [pc, #496]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b7a      	ldr	r3, [pc, #488]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b77      	ldr	r3, [pc, #476]	@ (800165c <HAL_RCC_OscConfig+0x474>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148a:	4b74      	ldr	r3, [pc, #464]	@ (800165c <HAL_RCC_OscConfig+0x474>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a73      	ldr	r2, [pc, #460]	@ (800165c <HAL_RCC_OscConfig+0x474>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001496:	f7ff fc03 	bl	8000ca0 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149e:	f7ff fbff 	bl	8000ca0 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e10c      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b0:	4b6a      	ldr	r3, [pc, #424]	@ (800165c <HAL_RCC_OscConfig+0x474>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x2ea>
 80014c4:	4b64      	ldr	r3, [pc, #400]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014c8:	4a63      	ldr	r2, [pc, #396]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80014d0:	e01c      	b.n	800150c <HAL_RCC_OscConfig+0x324>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x30c>
 80014da:	4b5f      	ldr	r3, [pc, #380]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014de:	4a5e      	ldr	r2, [pc, #376]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0x324>
 80014f4:	4b58      	ldr	r3, [pc, #352]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f8:	4a57      	ldr	r2, [pc, #348]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001500:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001504:	4a54      	ldr	r2, [pc, #336]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001506:	f023 0304 	bic.w	r3, r3, #4
 800150a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d015      	beq.n	8001540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fbc4 	bl	8000ca0 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151c:	f7ff fbc0 	bl	8000ca0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e0cb      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001532:	4b49      	ldr	r3, [pc, #292]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0ee      	beq.n	800151c <HAL_RCC_OscConfig+0x334>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fbae 	bl	8000ca0 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff fbaa 	bl	8000ca0 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e0b5      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1ee      	bne.n	8001548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001570:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a38      	ldr	r2, [pc, #224]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a1 	beq.w	80016c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b08      	cmp	r3, #8
 8001590:	d05c      	beq.n	800164c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b02      	cmp	r3, #2
 8001598:	d141      	bne.n	800161e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_RCC_OscConfig+0x478>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fb7e 	bl	8000ca0 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a8:	f7ff fb7a 	bl	8000ca0 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e087      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69da      	ldr	r2, [r3, #28]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	019b      	lsls	r3, r3, #6
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	3b01      	subs	r3, #1
 80015e0:	041b      	lsls	r3, r3, #16
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	491b      	ldr	r1, [pc, #108]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <HAL_RCC_OscConfig+0x478>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb53 	bl	8000ca0 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fb4f 	bl	8000ca0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e05c      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x416>
 800161c:	e054      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_RCC_OscConfig+0x478>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fb3c 	bl	8000ca0 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162c:	f7ff fb38 	bl	8000ca0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e045      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_RCC_OscConfig+0x470>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x444>
 800164a:	e03d      	b.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e038      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000
 8001660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_RCC_OscConfig+0x4ec>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d028      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d11a      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800169a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800169c:	4293      	cmp	r3, r2
 800169e:	d111      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016aa:	085b      	lsrs	r3, r3, #1
 80016ac:	3b01      	subs	r3, #1
 80016ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d107      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0cc      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ec:	4b68      	ldr	r3, [pc, #416]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	683a      	ldr	r2, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d90c      	bls.n	8001714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fa:	4b65      	ldr	r3, [pc, #404]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001702:	4b63      	ldr	r3, [pc, #396]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0b8      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800172c:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a58      	ldr	r2, [pc, #352]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	4a52      	ldr	r2, [pc, #328]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800174e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001750:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	494d      	ldr	r1, [pc, #308]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d044      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001776:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d119      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e07f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d003      	beq.n	8001796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	2b03      	cmp	r3, #3
 8001794:	d107      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	4b3f      	ldr	r3, [pc, #252]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e067      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f023 0203 	bic.w	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4934      	ldr	r1, [pc, #208]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c8:	f7ff fa6a 	bl	8000ca0 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d0:	f7ff fa66 	bl	8000ca0 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e04f      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 020c 	and.w	r2, r3, #12
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1eb      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f8:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d20c      	bcs.n	8001820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e032      	b.n	8001886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182c:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4916      	ldr	r1, [pc, #88]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d009      	beq.n	800185e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	490e      	ldr	r1, [pc, #56]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185e:	f000 f821 	bl	80018a4 <HAL_RCC_GetSysClockFreq>
 8001862:	4602      	mov	r2, r0
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490a      	ldr	r1, [pc, #40]	@ (8001898 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	fa22 f303 	lsr.w	r3, r2, r3
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x1c4>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_RCC_ClockConfig+0x1c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f8fa 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00
 8001894:	40023800 	.word	0x40023800
 8001898:	08007324 	.word	0x08007324
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004

080018a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a8:	b094      	sub	sp, #80	@ 0x50
 80018aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80018b0:	2300      	movs	r3, #0
 80018b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018bc:	4b79      	ldr	r3, [pc, #484]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d00d      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x40>
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	f200 80e1 	bhi.w	8001a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0x34>
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d003      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x3a>
 80018d6:	e0db      	b.n	8001a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80018da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80018dc:	e0db      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b73      	ldr	r3, [pc, #460]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x208>)
 80018e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018e2:	e0d8      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ee:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d063      	beq.n	80019c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	2200      	movs	r2, #0
 8001902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001904:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
 800190e:	2300      	movs	r3, #0
 8001910:	637b      	str	r3, [r7, #52]	@ 0x34
 8001912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001916:	4622      	mov	r2, r4
 8001918:	462b      	mov	r3, r5
 800191a:	f04f 0000 	mov.w	r0, #0
 800191e:	f04f 0100 	mov.w	r1, #0
 8001922:	0159      	lsls	r1, r3, #5
 8001924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001928:	0150      	lsls	r0, r2, #5
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4621      	mov	r1, r4
 8001930:	1a51      	subs	r1, r2, r1
 8001932:	6139      	str	r1, [r7, #16]
 8001934:	4629      	mov	r1, r5
 8001936:	eb63 0301 	sbc.w	r3, r3, r1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001948:	4659      	mov	r1, fp
 800194a:	018b      	lsls	r3, r1, #6
 800194c:	4651      	mov	r1, sl
 800194e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001952:	4651      	mov	r1, sl
 8001954:	018a      	lsls	r2, r1, #6
 8001956:	4651      	mov	r1, sl
 8001958:	ebb2 0801 	subs.w	r8, r2, r1
 800195c:	4659      	mov	r1, fp
 800195e:	eb63 0901 	sbc.w	r9, r3, r1
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800196e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001976:	4690      	mov	r8, r2
 8001978:	4699      	mov	r9, r3
 800197a:	4623      	mov	r3, r4
 800197c:	eb18 0303 	adds.w	r3, r8, r3
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	462b      	mov	r3, r5
 8001984:	eb49 0303 	adc.w	r3, r9, r3
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001996:	4629      	mov	r1, r5
 8001998:	024b      	lsls	r3, r1, #9
 800199a:	4621      	mov	r1, r4
 800199c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019a0:	4621      	mov	r1, r4
 80019a2:	024a      	lsls	r2, r1, #9
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019aa:	2200      	movs	r2, #0
 80019ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80019b4:	f7fe fc56 	bl	8000264 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019c0:	e058      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	099b      	lsrs	r3, r3, #6
 80019c8:	2200      	movs	r2, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	4611      	mov	r1, r2
 80019ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019dc:	4642      	mov	r2, r8
 80019de:	464b      	mov	r3, r9
 80019e0:	f04f 0000 	mov.w	r0, #0
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	0159      	lsls	r1, r3, #5
 80019ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ee:	0150      	lsls	r0, r2, #5
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4641      	mov	r1, r8
 80019f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a14:	ebb2 040a 	subs.w	r4, r2, sl
 8001a18:	eb63 050b 	sbc.w	r5, r3, fp
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	00eb      	lsls	r3, r5, #3
 8001a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a2a:	00e2      	lsls	r2, r4, #3
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4643      	mov	r3, r8
 8001a32:	18e3      	adds	r3, r4, r3
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	464b      	mov	r3, r9
 8001a38:	eb45 0303 	adc.w	r3, r5, r3
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	028b      	lsls	r3, r1, #10
 8001a4e:	4621      	mov	r1, r4
 8001a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a54:	4621      	mov	r1, r4
 8001a56:	028a      	lsls	r2, r1, #10
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	61fa      	str	r2, [r7, #28]
 8001a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a68:	f7fe fbfc 	bl	8000264 <__aeabi_uldivmod>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4613      	mov	r3, r2
 8001a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001a84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a8e:	e002      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3750      	adds	r7, #80	@ 0x50
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000

08001ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001acc:	f7ff fff0 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0a9b      	lsrs	r3, r3, #10
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4903      	ldr	r1, [pc, #12]	@ (8001aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08007334 	.word	0x08007334

08001af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001af4:	f7ff ffdc 	bl	8001ab0 <HAL_RCC_GetHCLKFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0b5b      	lsrs	r3, r3, #13
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4903      	ldr	r1, [pc, #12]	@ (8001b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	08007334 	.word	0x08007334

08001b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	220f      	movs	r2, #15
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b28:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b34:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <HAL_RCC_GetClockConfig+0x60>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0207 	and.w	r2, r3, #7
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e041      	b.n	8001c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f839 	bl	8001c1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f000 f9c0 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d001      	beq.n	8001c48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e04e      	b.n	8001ce6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d022      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c72:	d01d      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d018      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a1e      	ldr	r2, [pc, #120]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xcc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00e      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d009      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xd8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d004      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a18      	ldr	r2, [pc, #96]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xdc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d111      	bne.n	8001cd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d010      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 0201 	orr.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd2:	e007      	b.n	8001ce4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	40000800 	.word	0x40000800
 8001d00:	40000c00 	.word	0x40000c00
 8001d04:	40010400 	.word	0x40010400
 8001d08:	40014000 	.word	0x40014000
 8001d0c:	40001800 	.word	0x40001800

08001d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0202 	mvn.w	r2, #2
 8001d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8d2 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8c4 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8d5 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d020      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0204 	mvn.w	r2, #4
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8ac 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f89e 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8af 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d020      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0208 	mvn.w	r2, #8
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2204      	movs	r2, #4
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f886 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f878 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f889 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d020      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01b      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0210 	mvn.w	r2, #16
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f860 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f852 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f863 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fd76 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f906 	bl	80020ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f834 	bl	8001f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8d8 	bl	8002098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a46      	ldr	r2, [pc, #280]	@ (800206c <TIM_Base_SetConfig+0x12c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a43      	ldr	r2, [pc, #268]	@ (8002070 <TIM_Base_SetConfig+0x130>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a42      	ldr	r2, [pc, #264]	@ (8002074 <TIM_Base_SetConfig+0x134>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a41      	ldr	r2, [pc, #260]	@ (8002078 <TIM_Base_SetConfig+0x138>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a40      	ldr	r2, [pc, #256]	@ (800207c <TIM_Base_SetConfig+0x13c>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a35      	ldr	r2, [pc, #212]	@ (800206c <TIM_Base_SetConfig+0x12c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa0:	d027      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a32      	ldr	r2, [pc, #200]	@ (8002070 <TIM_Base_SetConfig+0x130>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d023      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a31      	ldr	r2, [pc, #196]	@ (8002074 <TIM_Base_SetConfig+0x134>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a30      	ldr	r2, [pc, #192]	@ (8002078 <TIM_Base_SetConfig+0x138>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <TIM_Base_SetConfig+0x13c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d017      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2e      	ldr	r2, [pc, #184]	@ (8002080 <TIM_Base_SetConfig+0x140>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8002084 <TIM_Base_SetConfig+0x144>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00f      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002088 <TIM_Base_SetConfig+0x148>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <TIM_Base_SetConfig+0x14c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8002090 <TIM_Base_SetConfig+0x150>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a29      	ldr	r2, [pc, #164]	@ (8002094 <TIM_Base_SetConfig+0x154>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d108      	bne.n	8002004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a10      	ldr	r2, [pc, #64]	@ (800206c <TIM_Base_SetConfig+0x12c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0xf8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <TIM_Base_SetConfig+0x13c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f023 0201 	bic.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]
  }
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40010000 	.word	0x40010000
 8002070:	40000400 	.word	0x40000400
 8002074:	40000800 	.word	0x40000800
 8002078:	40000c00 	.word	0x40000c00
 800207c:	40010400 	.word	0x40010400
 8002080:	40014000 	.word	0x40014000
 8002084:	40014400 	.word	0x40014400
 8002088:	40014800 	.word	0x40014800
 800208c:	40001800 	.word	0x40001800
 8002090:	40001c00 	.word	0x40001c00
 8002094:	40002000 	.word	0x40002000

08002098 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e042      	b.n	8002158 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fc7e 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2224      	movs	r2, #36	@ 0x24
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f973 	bl	80023f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b20      	cmp	r3, #32
 800217e:	d175      	bne.n	800226c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_UART_Transmit+0x2c>
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e06e      	b.n	800226e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2221      	movs	r2, #33	@ 0x21
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800219e:	f7fe fd7f 	bl	8000ca0 <HAL_GetTick>
 80021a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021b8:	d108      	bne.n	80021cc <HAL_UART_Transmit+0x6c>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	e003      	b.n	80021d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021d4:	e02e      	b.n	8002234 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	2180      	movs	r1, #128	@ 0x80
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f848 	bl	8002276 <UART_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e03a      	b.n	800226e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10b      	bne.n	8002216 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	3302      	adds	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	e007      	b.n	8002226 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	3301      	adds	r3, #1
 8002224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1cb      	bne.n	80021d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	2140      	movs	r1, #64	@ 0x40
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f814 	bl	8002276 <UART_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e006      	b.n	800226e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	e000      	b.n	800226e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
  }
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4613      	mov	r3, r2
 8002284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002286:	e03b      	b.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228e:	d037      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002290:	f7fe fd06 	bl	8000ca0 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d302      	bcc.n	80022a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e03a      	b.n	8002320 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d023      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b80      	cmp	r3, #128	@ 0x80
 80022bc:	d020      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b40      	cmp	r3, #64	@ 0x40
 80022c2:	d01d      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d116      	bne.n	8002300 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f81d 	bl	8002328 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2208      	movs	r2, #8
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e00f      	b.n	8002320 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4013      	ands	r3, r2
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	429a      	cmp	r2, r3
 800231c:	d0b4      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002328:	b480      	push	{r7}
 800232a:	b095      	sub	sp, #84	@ 0x54
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	e853 3f00 	ldrex	r3, [r3]
 800233e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	330c      	adds	r3, #12
 800234e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002350:	643a      	str	r2, [r7, #64]	@ 0x40
 8002352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002356:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800235e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e5      	bne.n	8002330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3314      	adds	r3, #20
 800236a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	e853 3f00 	ldrex	r3, [r3]
 8002372:	61fb      	str	r3, [r7, #28]
   return(result);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f023 0301 	bic.w	r3, r3, #1
 800237a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	3314      	adds	r3, #20
 8002382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800238a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238c:	e841 2300 	strex	r3, r2, [r1]
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e5      	bne.n	8002364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	2b01      	cmp	r3, #1
 800239e:	d119      	bne.n	80023d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	e853 3f00 	ldrex	r3, [r3]
 80023ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f023 0310 	bic.w	r3, r3, #16
 80023b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023c0:	61ba      	str	r2, [r7, #24]
 80023c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	613b      	str	r3, [r7, #16]
   return(result);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023e2:	bf00      	nop
 80023e4:	3754      	adds	r7, #84	@ 0x54
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b0c0      	sub	sp, #256	@ 0x100
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	ea40 0301 	orr.w	r3, r0, r1
 8002418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	431a      	orrs	r2, r3
 8002428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	431a      	orrs	r2, r3
 8002430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002448:	f021 010c 	bic.w	r1, r1, #12
 800244c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002456:	430b      	orrs	r3, r1
 8002458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800246a:	6999      	ldr	r1, [r3, #24]
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	ea40 0301 	orr.w	r3, r0, r1
 8002476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b8f      	ldr	r3, [pc, #572]	@ (80026bc <UART_SetConfig+0x2cc>)
 8002480:	429a      	cmp	r2, r3
 8002482:	d005      	beq.n	8002490 <UART_SetConfig+0xa0>
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b8d      	ldr	r3, [pc, #564]	@ (80026c0 <UART_SetConfig+0x2d0>)
 800248c:	429a      	cmp	r2, r3
 800248e:	d104      	bne.n	800249a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002490:	f7ff fb2e 	bl	8001af0 <HAL_RCC_GetPCLK2Freq>
 8002494:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002498:	e003      	b.n	80024a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800249a:	f7ff fb15 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 800249e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ac:	f040 810c 	bne.w	80026c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024b4:	2200      	movs	r2, #0
 80024b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024c2:	4622      	mov	r2, r4
 80024c4:	462b      	mov	r3, r5
 80024c6:	1891      	adds	r1, r2, r2
 80024c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024ca:	415b      	adcs	r3, r3
 80024cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024d2:	4621      	mov	r1, r4
 80024d4:	eb12 0801 	adds.w	r8, r2, r1
 80024d8:	4629      	mov	r1, r5
 80024da:	eb43 0901 	adc.w	r9, r3, r1
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f2:	4690      	mov	r8, r2
 80024f4:	4699      	mov	r9, r3
 80024f6:	4623      	mov	r3, r4
 80024f8:	eb18 0303 	adds.w	r3, r8, r3
 80024fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002500:	462b      	mov	r3, r5
 8002502:	eb49 0303 	adc.w	r3, r9, r3
 8002506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002516:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800251a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800251e:	460b      	mov	r3, r1
 8002520:	18db      	adds	r3, r3, r3
 8002522:	653b      	str	r3, [r7, #80]	@ 0x50
 8002524:	4613      	mov	r3, r2
 8002526:	eb42 0303 	adc.w	r3, r2, r3
 800252a:	657b      	str	r3, [r7, #84]	@ 0x54
 800252c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002534:	f7fd fe96 	bl	8000264 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4b61      	ldr	r3, [pc, #388]	@ (80026c4 <UART_SetConfig+0x2d4>)
 800253e:	fba3 2302 	umull	r2, r3, r3, r2
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	011c      	lsls	r4, r3, #4
 8002546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002550:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002558:	4642      	mov	r2, r8
 800255a:	464b      	mov	r3, r9
 800255c:	1891      	adds	r1, r2, r2
 800255e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002560:	415b      	adcs	r3, r3
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002568:	4641      	mov	r1, r8
 800256a:	eb12 0a01 	adds.w	sl, r2, r1
 800256e:	4649      	mov	r1, r9
 8002570:	eb43 0b01 	adc.w	fp, r3, r1
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002588:	4692      	mov	sl, r2
 800258a:	469b      	mov	fp, r3
 800258c:	4643      	mov	r3, r8
 800258e:	eb1a 0303 	adds.w	r3, sl, r3
 8002592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002596:	464b      	mov	r3, r9
 8002598:	eb4b 0303 	adc.w	r3, fp, r3
 800259c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80025a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80025ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80025b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80025b4:	460b      	mov	r3, r1
 80025b6:	18db      	adds	r3, r3, r3
 80025b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80025ba:	4613      	mov	r3, r2
 80025bc:	eb42 0303 	adc.w	r3, r2, r3
 80025c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025ca:	f7fd fe4b 	bl	8000264 <__aeabi_uldivmod>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4611      	mov	r1, r2
 80025d4:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <UART_SetConfig+0x2d4>)
 80025d6:	fba3 2301 	umull	r2, r3, r3, r1
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2264      	movs	r2, #100	@ 0x64
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	1acb      	subs	r3, r1, r3
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025ea:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <UART_SetConfig+0x2d4>)
 80025ec:	fba3 2302 	umull	r2, r3, r3, r2
 80025f0:	095b      	lsrs	r3, r3, #5
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025f8:	441c      	add	r4, r3
 80025fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002604:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800260c:	4642      	mov	r2, r8
 800260e:	464b      	mov	r3, r9
 8002610:	1891      	adds	r1, r2, r2
 8002612:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002614:	415b      	adcs	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800261c:	4641      	mov	r1, r8
 800261e:	1851      	adds	r1, r2, r1
 8002620:	6339      	str	r1, [r7, #48]	@ 0x30
 8002622:	4649      	mov	r1, r9
 8002624:	414b      	adcs	r3, r1
 8002626:	637b      	str	r3, [r7, #52]	@ 0x34
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002634:	4659      	mov	r1, fp
 8002636:	00cb      	lsls	r3, r1, #3
 8002638:	4651      	mov	r1, sl
 800263a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800263e:	4651      	mov	r1, sl
 8002640:	00ca      	lsls	r2, r1, #3
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	4603      	mov	r3, r0
 8002648:	4642      	mov	r2, r8
 800264a:	189b      	adds	r3, r3, r2
 800264c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002650:	464b      	mov	r3, r9
 8002652:	460a      	mov	r2, r1
 8002654:	eb42 0303 	adc.w	r3, r2, r3
 8002658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800265c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002668:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800266c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002670:	460b      	mov	r3, r1
 8002672:	18db      	adds	r3, r3, r3
 8002674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002676:	4613      	mov	r3, r2
 8002678:	eb42 0303 	adc.w	r3, r2, r3
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800267e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002686:	f7fd fded 	bl	8000264 <__aeabi_uldivmod>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <UART_SetConfig+0x2d4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	@ 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	3332      	adds	r3, #50	@ 0x32
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <UART_SetConfig+0x2d4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 0207 	and.w	r2, r3, #7
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4422      	add	r2, r4
 80026b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026b8:	e106      	b.n	80028c8 <UART_SetConfig+0x4d8>
 80026ba:	bf00      	nop
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026da:	4642      	mov	r2, r8
 80026dc:	464b      	mov	r3, r9
 80026de:	1891      	adds	r1, r2, r2
 80026e0:	6239      	str	r1, [r7, #32]
 80026e2:	415b      	adcs	r3, r3
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ea:	4641      	mov	r1, r8
 80026ec:	1854      	adds	r4, r2, r1
 80026ee:	4649      	mov	r1, r9
 80026f0:	eb43 0501 	adc.w	r5, r3, r1
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	00eb      	lsls	r3, r5, #3
 80026fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002702:	00e2      	lsls	r2, r4, #3
 8002704:	4614      	mov	r4, r2
 8002706:	461d      	mov	r5, r3
 8002708:	4643      	mov	r3, r8
 800270a:	18e3      	adds	r3, r4, r3
 800270c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002710:	464b      	mov	r3, r9
 8002712:	eb45 0303 	adc.w	r3, r5, r3
 8002716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800271a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002736:	4629      	mov	r1, r5
 8002738:	008b      	lsls	r3, r1, #2
 800273a:	4621      	mov	r1, r4
 800273c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002740:	4621      	mov	r1, r4
 8002742:	008a      	lsls	r2, r1, #2
 8002744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002748:	f7fd fd8c 	bl	8000264 <__aeabi_uldivmod>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4b60      	ldr	r3, [pc, #384]	@ (80028d4 <UART_SetConfig+0x4e4>)
 8002752:	fba3 2302 	umull	r2, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	011c      	lsls	r4, r3, #4
 800275a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002764:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800276c:	4642      	mov	r2, r8
 800276e:	464b      	mov	r3, r9
 8002770:	1891      	adds	r1, r2, r2
 8002772:	61b9      	str	r1, [r7, #24]
 8002774:	415b      	adcs	r3, r3
 8002776:	61fb      	str	r3, [r7, #28]
 8002778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277c:	4641      	mov	r1, r8
 800277e:	1851      	adds	r1, r2, r1
 8002780:	6139      	str	r1, [r7, #16]
 8002782:	4649      	mov	r1, r9
 8002784:	414b      	adcs	r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	00cb      	lsls	r3, r1, #3
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800279e:	4651      	mov	r1, sl
 80027a0:	00ca      	lsls	r2, r1, #3
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	4642      	mov	r2, r8
 80027aa:	189b      	adds	r3, r3, r2
 80027ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027d4:	4649      	mov	r1, r9
 80027d6:	008b      	lsls	r3, r1, #2
 80027d8:	4641      	mov	r1, r8
 80027da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027de:	4641      	mov	r1, r8
 80027e0:	008a      	lsls	r2, r1, #2
 80027e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027e6:	f7fd fd3d 	bl	8000264 <__aeabi_uldivmod>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	4b38      	ldr	r3, [pc, #224]	@ (80028d4 <UART_SetConfig+0x4e4>)
 80027f2:	fba3 2301 	umull	r2, r3, r3, r1
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2264      	movs	r2, #100	@ 0x64
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	@ 0x32
 8002804:	4a33      	ldr	r2, [pc, #204]	@ (80028d4 <UART_SetConfig+0x4e4>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002810:	441c      	add	r4, r3
 8002812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002816:	2200      	movs	r2, #0
 8002818:	673b      	str	r3, [r7, #112]	@ 0x70
 800281a:	677a      	str	r2, [r7, #116]	@ 0x74
 800281c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002820:	4642      	mov	r2, r8
 8002822:	464b      	mov	r3, r9
 8002824:	1891      	adds	r1, r2, r2
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	415b      	adcs	r3, r3
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002830:	4641      	mov	r1, r8
 8002832:	1851      	adds	r1, r2, r1
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	4649      	mov	r1, r9
 8002838:	414b      	adcs	r3, r1
 800283a:	607b      	str	r3, [r7, #4]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002848:	4659      	mov	r1, fp
 800284a:	00cb      	lsls	r3, r1, #3
 800284c:	4651      	mov	r1, sl
 800284e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002852:	4651      	mov	r1, sl
 8002854:	00ca      	lsls	r2, r1, #3
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	4603      	mov	r3, r0
 800285c:	4642      	mov	r2, r8
 800285e:	189b      	adds	r3, r3, r2
 8002860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002862:	464b      	mov	r3, r9
 8002864:	460a      	mov	r2, r1
 8002866:	eb42 0303 	adc.w	r3, r2, r3
 800286a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
 8002876:	667a      	str	r2, [r7, #100]	@ 0x64
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002884:	4649      	mov	r1, r9
 8002886:	008b      	lsls	r3, r1, #2
 8002888:	4641      	mov	r1, r8
 800288a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800288e:	4641      	mov	r1, r8
 8002890:	008a      	lsls	r2, r1, #2
 8002892:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002896:	f7fd fce5 	bl	8000264 <__aeabi_uldivmod>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <UART_SetConfig+0x4e4>)
 80028a0:	fba3 1302 	umull	r1, r3, r3, r2
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	2164      	movs	r1, #100	@ 0x64
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	3332      	adds	r3, #50	@ 0x32
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <UART_SetConfig+0x4e4>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4422      	add	r2, r4
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028ce:	46bd      	mov	sp, r7
 80028d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d4:	51eb851f 	.word	0x51eb851f

080028d8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f103 0208 	add.w	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f103 0208 	add.w	r2, r3, #8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0208 	add.w	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 800290c:	f240 1019 	movw	r0, #281	@ 0x119
 8002910:	f003 ffe6 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800292a:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 800292e:	f003 ffd7 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d103      	bne.n	800295a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e00c      	b.n	8002974 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3308      	adds	r3, #8
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e002      	b.n	8002968 <vListInsert+0x2e>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d2f6      	bcs.n	8002962 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80029a0:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80029a4:	f003 ff9c 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6852      	ldr	r2, [r2, #4]
 80029d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d103      	bne.n	80029e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f240 101d 	movw	r0, #285	@ 0x11d
 80029fe:	f003 ffab 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2c:	f383 8811 	msr	BASEPRI, r3
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d05d      	beq.n	8002b02 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d059      	beq.n	8002b02 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a56:	2100      	movs	r1, #0
 8002a58:	fba3 2302 	umull	r2, r3, r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d000      	beq.n	8002a62 <xQueueGenericReset+0x52>
 8002a60:	2101      	movs	r1, #1
 8002a62:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d14c      	bne.n	8002b02 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002a68:	f002 fae4 	bl	8005034 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a74:	6939      	ldr	r1, [r7, #16]
 8002a76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	441a      	add	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2200      	movs	r2, #0
 8002a86:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	441a      	add	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	22ff      	movs	r2, #255	@ 0xff
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	22ff      	movs	r2, #255	@ 0xff
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d114      	bne.n	8002ae8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01a      	beq.n	8002afc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	3310      	adds	r3, #16
 8002aca:	4618      	mov	r0, r3
 8002acc:	f001 fb1a 	bl	8004104 <xTaskRemoveFromEventList>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ad6:	4b18      	ldr	r3, [pc, #96]	@ (8002b38 <xQueueGenericReset+0x128>)
 8002ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	e009      	b.n	8002afc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	3310      	adds	r3, #16
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fef3 	bl	80028d8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	3324      	adds	r3, #36	@ 0x24
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff feee 	bl	80028d8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002afc:	f002 facc 	bl	8005098 <vPortExitCritical>
 8002b00:	e001      	b.n	8002b06 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <xQueueGenericReset+0x114>
    __asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	60bb      	str	r3, [r7, #8]
}
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	4619      	mov	r1, r3
 8002b28:	2096      	movs	r0, #150	@ 0x96
 8002b2a:	f003 ff15 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002b2e:	697b      	ldr	r3, [r7, #20]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	e000ed04 	.word	0xe000ed04

08002b3c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	4613      	mov	r3, r2
 8002b48:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02e      	beq.n	8002bb2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b54:	2100      	movs	r1, #0
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d000      	beq.n	8002b64 <xQueueGenericCreate+0x28>
 8002b62:	2101      	movs	r1, #1
 8002b64:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d123      	bne.n	8002bb2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b72:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 8002b76:	d81c      	bhi.n	8002bb2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3354      	adds	r3, #84	@ 0x54
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fb82 	bl	8005290 <pvPortMalloc>
 8002b8c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01d      	beq.n	8002bd0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3354      	adds	r3, #84	@ 0x54
 8002b9c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b9e:	79fa      	ldrb	r2, [r7, #7]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f81e 	bl	8002bec <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002bb0:	e00e      	b.n	8002bd0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <xQueueGenericCreate+0x94>
    __asm volatile
 8002bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bbc:	f383 8811 	msr	BASEPRI, r3
 8002bc0:	f3bf 8f6f 	isb	sy
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	613b      	str	r3, [r7, #16]
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 f85a 	bl	8006c8c <SEGGER_SYSVIEW_ShrinkId>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4619      	mov	r1, r3
 8002bdc:	2098      	movs	r0, #152	@ 0x98
 8002bde:	f003 febb 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002be2:	69fb      	ldr	r3, [r7, #28]
    }
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	e002      	b.n	8002c0e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	69b8      	ldr	r0, [r7, #24]
 8002c1e:	f7ff fef7 	bl	8002a10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	@ 0x38
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c46:	2300      	movs	r3, #0
 8002c48:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10b      	bne.n	8002c6c <xQueueGenericSend+0x34>
    __asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <xQueueGenericSend+0x42>
 8002c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericSend+0x46>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericSend+0x48>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <xQueueGenericSend+0x64>
    __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	623b      	str	r3, [r7, #32]
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d103      	bne.n	8002caa <xQueueGenericSend+0x72>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <xQueueGenericSend+0x76>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueGenericSend+0x78>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <xQueueGenericSend+0x94>
    __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61fb      	str	r3, [r7, #28]
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ccc:	f001 fc3c 	bl	8004548 <xTaskGetSchedulerState>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d102      	bne.n	8002cdc <xQueueGenericSend+0xa4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <xQueueGenericSend+0xa8>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <xQueueGenericSend+0xaa>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <xQueueGenericSend+0xc6>
    __asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	61bb      	str	r3, [r7, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002cfe:	f002 f999 	bl	8005034 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <xQueueGenericSend+0xdc>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d149      	bne.n	8002da8 <xQueueGenericSend+0x170>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d20:	f000 f9a2 	bl	8003068 <prvCopyDataToQueue>
 8002d24:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( pxQueue->pxQueueSetContainer != NULL )
 8002d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d014      	beq.n	8002d58 <xQueueGenericSend+0x120>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d102      	bne.n	8002d3a <xQueueGenericSend+0x102>
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d12e      	bne.n	8002d98 <xQueueGenericSend+0x160>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d3c:	f000 fb93 	bl	8003466 <prvNotifyQueueSetContainer>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <xQueueGenericSend+0x160>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002d46:	4b50      	ldr	r3, [pc, #320]	@ (8002e88 <xQueueGenericSend+0x250>)
 8002d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	e01f      	b.n	8002d98 <xQueueGenericSend+0x160>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <xQueueGenericSend+0x14a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	3324      	adds	r3, #36	@ 0x24
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f9cd 	bl	8004104 <xTaskRemoveFromEventList>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <xQueueGenericSend+0x160>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002d70:	4b45      	ldr	r3, [pc, #276]	@ (8002e88 <xQueueGenericSend+0x250>)
 8002d72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	e00a      	b.n	8002d98 <xQueueGenericSend+0x160>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d007      	beq.n	8002d98 <xQueueGenericSend+0x160>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002d88:	4b3f      	ldr	r3, [pc, #252]	@ (8002e88 <xQueueGenericSend+0x250>)
 8002d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002d98:	f002 f97e 	bl	8005098 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	20a1      	movs	r0, #161	@ 0xa1
 8002da0:	f003 fdda 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e06b      	b.n	8002e80 <xQueueGenericSend+0x248>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <xQueueGenericSend+0x186>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002dae:	f002 f973 	bl	8005098 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002db2:	2100      	movs	r1, #0
 8002db4:	20a1      	movs	r0, #161	@ 0xa1
 8002db6:	f003 fdcf 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e060      	b.n	8002e80 <xQueueGenericSend+0x248>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <xQueueGenericSend+0x19a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f001 fa7b 	bl	80042c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002dd2:	f002 f961 	bl	8005098 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dd6:	f000 fe3f 	bl	8003a58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002dda:	f002 f92b 	bl	8005034 <vPortEnterCritical>
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de4:	b25b      	sxtb	r3, r3
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d103      	bne.n	8002df4 <xQueueGenericSend+0x1bc>
 8002dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d103      	bne.n	8002e0a <xQueueGenericSend+0x1d2>
 8002e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e0a:	f002 f945 	bl	8005098 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e0e:	1d3a      	adds	r2, r7, #4
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 fa6c 	bl	80042f4 <xTaskCheckForTimeOut>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d124      	bne.n	8002e6c <xQueueGenericSend+0x234>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e24:	f000 fa25 	bl	8003272 <prvIsQueueFull>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d018      	beq.n	8002e60 <xQueueGenericSend+0x228>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	3310      	adds	r3, #16
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f8f2 	bl	8004020 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e3e:	f000 f9a3 	bl	8003188 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002e42:	f000 fe17 	bl	8003a74 <xTaskResumeAll>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f47f af58 	bne.w	8002cfe <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <xQueueGenericSend+0x250>)
 8002e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	e74e      	b.n	8002cfe <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002e60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e62:	f000 f991 	bl	8003188 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e66:	f000 fe05 	bl	8003a74 <xTaskResumeAll>
 8002e6a:	e748      	b.n	8002cfe <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e6e:	f000 f98b 	bl	8003188 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e72:	f000 fdff 	bl	8003a74 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 8002e76:	2100      	movs	r1, #0
 8002e78:	20a1      	movs	r0, #161	@ 0xa1
 8002e7a:	f003 fd6d 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8002e7e:	2300      	movs	r3, #0
        }
    }
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3738      	adds	r7, #56	@ 0x38
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	@ 0x30
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10b      	bne.n	8002ebe <xQueueReceive+0x32>
    __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	623b      	str	r3, [r7, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <xQueueReceive+0x40>
 8002ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <xQueueReceive+0x44>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <xQueueReceive+0x46>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <xQueueReceive+0x62>
    __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	61fb      	str	r3, [r7, #28]
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eee:	f001 fb2b 	bl	8004548 <xTaskGetSchedulerState>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <xQueueReceive+0x72>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <xQueueReceive+0x76>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <xQueueReceive+0x78>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <xQueueReceive+0x94>
    __asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	61bb      	str	r3, [r7, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f20:	f002 f888 	bl	8005034 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d023      	beq.n	8002f78 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f34:	f000 f902 	bl	800313c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00f      	beq.n	8002f68 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	3310      	adds	r3, #16
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f001 f8d9 	bl	8004104 <xTaskRemoveFromEventList>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f58:	4b42      	ldr	r3, [pc, #264]	@ (8003064 <xQueueReceive+0x1d8>)
 8002f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002f68:	f002 f896 	bl	8005098 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	20a4      	movs	r0, #164	@ 0xa4
 8002f70:	f003 fcf2 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e071      	b.n	800305c <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f7e:	f002 f88b 	bl	8005098 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002f82:	2100      	movs	r1, #0
 8002f84:	20a4      	movs	r0, #164	@ 0xa4
 8002f86:	f003 fce7 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e066      	b.n	800305c <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d106      	bne.n	8002fa2 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 f993 	bl	80042c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002fa2:	f002 f879 	bl	8005098 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002fa6:	f000 fd57 	bl	8003a58 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002faa:	f002 f843 	bl	8005034 <vPortEnterCritical>
 8002fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fba:	d103      	bne.n	8002fc4 <xQueueReceive+0x138>
 8002fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fca:	b25b      	sxtb	r3, r3
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d103      	bne.n	8002fda <xQueueReceive+0x14e>
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fda:	f002 f85d 	bl	8005098 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fde:	1d3a      	adds	r2, r7, #4
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 f984 	bl	80042f4 <xTaskCheckForTimeOut>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d123      	bne.n	800303a <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ff4:	f000 f927 	bl	8003246 <prvIsQueueEmpty>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003000:	3324      	adds	r3, #36	@ 0x24
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f001 f80a 	bl	8004020 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800300c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800300e:	f000 f8bb 	bl	8003188 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003012:	f000 fd2f 	bl	8003a74 <xTaskResumeAll>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d181      	bne.n	8002f20 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800301c:	4b11      	ldr	r3, [pc, #68]	@ (8003064 <xQueueReceive+0x1d8>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	e778      	b.n	8002f20 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800302e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003030:	f000 f8aa 	bl	8003188 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003034:	f000 fd1e 	bl	8003a74 <xTaskResumeAll>
 8003038:	e772      	b.n	8002f20 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800303a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800303c:	f000 f8a4 	bl	8003188 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003040:	f000 fd18 	bl	8003a74 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003044:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003046:	f000 f8fe 	bl	8003246 <prvIsQueueEmpty>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	f43f af67 	beq.w	8002f20 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003052:	2100      	movs	r1, #0
 8003054:	20a4      	movs	r0, #164	@ 0xa4
 8003056:	f003 fc7f 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800305a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3730      	adds	r7, #48	@ 0x30
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	e000ed04 	.word	0xe000ed04

08003068 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10d      	bne.n	80030a2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d14d      	bne.n	800312a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f001 fa7a 	bl	800458c <xTaskPriorityDisinherit>
 8003098:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	e043      	b.n	800312a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d119      	bne.n	80030dc <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6858      	ldr	r0, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	461a      	mov	r2, r3
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	f004 f88e 	bl	80071d4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	441a      	add	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d32b      	bcc.n	800312a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e026      	b.n	800312a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68d8      	ldr	r0, [r3, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	461a      	mov	r2, r3
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	f004 f874 	bl	80071d4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	425b      	negs	r3, r3
 80030f6:	441a      	add	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68da      	ldr	r2, [r3, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d207      	bcs.n	8003118 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	425b      	negs	r3, r3
 8003112:	441a      	add	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d105      	bne.n	800312a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	3b01      	subs	r3, #1
 8003128:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003132:	697b      	ldr	r3, [r7, #20]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d018      	beq.n	8003180 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	441a      	add	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	429a      	cmp	r2, r3
 8003166:	d303      	bcc.n	8003170 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	461a      	mov	r2, r3
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f004 f82a 	bl	80071d4 <memcpy>
    }
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003190:	f001 ff50 	bl	8005034 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800319a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800319c:	e01e      	b.n	80031dc <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f95d 	bl	8003466 <prvNotifyQueueSetContainer>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d010      	beq.n	80031d4 <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 80031b2:	f001 f90b 	bl	80043cc <vTaskMissedYield>
 80031b6:	e00d      	b.n	80031d4 <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3324      	adds	r3, #36	@ 0x24
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 ff9d 	bl	8004104 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 80031d0:	f001 f8fc 	bl	80043cc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80031dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dcdc      	bgt.n	800319e <prvUnlockQueue+0x16>
 80031e4:	e000      	b.n	80031e8 <prvUnlockQueue+0x60>
                        break;
 80031e6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80031f0:	f001 ff52 	bl	8005098 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80031f4:	f001 ff1e 	bl	8005034 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031fe:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003200:	e011      	b.n	8003226 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d012      	beq.n	8003230 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3310      	adds	r3, #16
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff78 	bl	8004104 <xTaskRemoveFromEventList>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 800321a:	f001 f8d7 	bl	80043cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	3b01      	subs	r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800322a:	2b00      	cmp	r3, #0
 800322c:	dce9      	bgt.n	8003202 <prvUnlockQueue+0x7a>
 800322e:	e000      	b.n	8003232 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8003230:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	22ff      	movs	r2, #255	@ 0xff
 8003236:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800323a:	f001 ff2d 	bl	8005098 <vPortExitCritical>
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800324e:	f001 fef1 	bl	8005034 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800325a:	2301      	movs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	e001      	b.n	8003264 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003264:	f001 ff18 	bl	8005098 <vPortExitCritical>

    return xReturn;
 8003268:	68fb      	ldr	r3, [r7, #12]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800327a:	f001 fedb 	bl	8005034 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	429a      	cmp	r2, r3
 8003288:	d102      	bne.n	8003290 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	e001      	b.n	8003294 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003294:	f001 ff00 	bl	8005098 <vPortExitCritical>

    return xReturn;
 8003298:	68fb      	ldr	r3, [r7, #12]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	60fb      	str	r3, [r7, #12]
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	e7fd      	b.n	80032cc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d024      	beq.n	8003320 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e01e      	b.n	800331a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80032dc:	4a18      	ldr	r2, [pc, #96]	@ (8003340 <vQueueAddToRegistry+0x9c>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d105      	bne.n	80032f8 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4a13      	ldr	r2, [pc, #76]	@ (8003340 <vQueueAddToRegistry+0x9c>)
 80032f2:	4413      	add	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
                    break;
 80032f6:	e013      	b.n	8003320 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <vQueueAddToRegistry+0x70>
 80032fe:	4a10      	ldr	r2, [pc, #64]	@ (8003340 <vQueueAddToRegistry+0x9c>)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4a0c      	ldr	r2, [pc, #48]	@ (8003340 <vQueueAddToRegistry+0x9c>)
 8003310:	4413      	add	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3301      	adds	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b07      	cmp	r3, #7
 800331e:	d9dd      	bls.n	80032dc <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003332:	20b6      	movs	r0, #182	@ 0xb6
 8003334:	f003 fad4 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	200000d0 	.word	0x200000d0

08003344 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003354:	f001 fe6e 	bl	8005034 <vPortEnterCritical>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800335e:	b25b      	sxtb	r3, r3
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d103      	bne.n	800336e <vQueueWaitForMessageRestricted+0x2a>
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003374:	b25b      	sxtb	r3, r3
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d103      	bne.n	8003384 <vQueueWaitForMessageRestricted+0x40>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003384:	f001 fe88 	bl	8005098 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d106      	bne.n	800339e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	3324      	adds	r3, #36	@ 0x24
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fe69 	bl	8004070 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff fef2 	bl	8003188 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80033a4:	20b9      	movs	r0, #185	@ 0xb9
 80033a6:	f003 fa9b 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80033aa:	bf00      	nop
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
        QueueSetHandle_t pxQueue;

        traceENTER_xQueueCreateSet( uxEventQueueLength );

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 80033ba:	2200      	movs	r2, #0
 80033bc:	2104      	movs	r1, #4
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fbbc 	bl	8002b3c <xQueueGenericCreate>
 80033c4:	60f8      	str	r0, [r7, #12]

        traceRETURN_xQueueCreateSet( pxQueue );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 fc5f 	bl	8006c8c <SEGGER_SYSVIEW_ShrinkId>
 80033ce:	4603      	mov	r3, r0
 80033d0:	4619      	mov	r1, r3
 80033d2:	20ba      	movs	r0, #186	@ 0xba
 80033d4:	f003 fac0 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxQueue;
 80033d8:	68fb      	ldr	r3, [r7, #12]
    }
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceENTER_xQueueAddToSet( xQueueOrSemaphore, xQueueSet );

        taskENTER_CRITICAL();
 80033ec:	f001 fe22 	bl	8005034 <vPortEnterCritical>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <xQueueAddToSet+0x1c>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e00b      	b.n	8003416 <xQueueAddToSet+0x34>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <xQueueAddToSet+0x2a>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e004      	b.n	8003416 <xQueueAddToSet+0x34>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	649a      	str	r2, [r3, #72]	@ 0x48
                xReturn = pdPASS;
 8003412:	2301      	movs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 8003416:	f001 fe3f 	bl	8005098 <vPortExitCritical>

        traceRETURN_xQueueAddToSet( xReturn );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4619      	mov	r1, r3
 800341e:	20bb      	movs	r0, #187	@ 0xbb
 8003420:	f003 fa9a 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003424:	68fb      	ldr	r3, [r7, #12]
    }
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
        QueueSetMemberHandle_t xReturn = NULL;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueSelectFromSet( xQueueSet, xTicksToWait );

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait );
 800343c:	f107 030c 	add.w	r3, r7, #12
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fd21 	bl	8002e8c <xQueueReceive>

        traceRETURN_xQueueSelectFromSet( xReturn );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4618      	mov	r0, r3
 800344e:	f003 fc1d 	bl	8006c8c <SEGGER_SYSVIEW_ShrinkId>
 8003452:	4603      	mov	r3, r0
 8003454:	4619      	mov	r1, r3
 8003456:	20bd      	movs	r0, #189	@ 0xbd
 8003458:	f003 fa7e 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800345c:	68fb      	ldr	r3, [r7, #12]
    }
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8003466:	b580      	push	{r7, lr}
 8003468:	b08a      	sub	sp, #40	@ 0x28
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <prvNotifyQueueSetContainer+0x30>
    __asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	617b      	str	r3, [r7, #20]
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d30b      	bcc.n	80034ba <prvNotifyQueueSetContainer+0x54>
    __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	613b      	str	r3, [r7, #16]
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <prvNotifyQueueSetContainer+0x50>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d23d      	bcs.n	8003542 <prvNotifyQueueSetContainer+0xdc>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034cc:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	4619      	mov	r1, r3
 80034d4:	6a38      	ldr	r0, [r7, #32]
 80034d6:	f7ff fdc7 	bl	8003068 <prvCopyDataToQueue>
 80034da:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 80034dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e4:	d10e      	bne.n	8003504 <prvNotifyQueueSetContainer+0x9e>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d029      	beq.n	8003542 <prvNotifyQueueSetContainer+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	3324      	adds	r3, #36	@ 0x24
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe06 	bl	8004104 <xTaskRemoveFromEventList>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d021      	beq.n	8003542 <prvNotifyQueueSetContainer+0xdc>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 80034fe:	2301      	movs	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
 8003502:	e01e      	b.n	8003542 <prvNotifyQueueSetContainer+0xdc>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8003504:	f000 fbf0 	bl	8003ce8 <uxTaskGetNumberOfTasks>
 8003508:	61b8      	str	r0, [r7, #24]
 800350a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d916      	bls.n	8003542 <prvNotifyQueueSetContainer+0xdc>
 8003514:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003518:	2b7f      	cmp	r3, #127	@ 0x7f
 800351a:	d10b      	bne.n	8003534 <prvNotifyQueueSetContainer+0xce>
    __asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	60fb      	str	r3, [r7, #12]
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <prvNotifyQueueSetContainer+0xca>
 8003534:	7ffb      	ldrb	r3, [r7, #31]
 8003536:	3301      	adds	r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	b25a      	sxtb	r2, r3
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003544:	4618      	mov	r0, r3
 8003546:	3728      	adds	r7, #40	@ 0x28
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	@ 0x28
 8003550:	af04      	add	r7, sp, #16
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fe96 	bl	8005290 <pvPortMalloc>
 8003564:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800356c:	2058      	movs	r0, #88	@ 0x58
 800356e:	f001 fe8f 	bl	8005290 <pvPortMalloc>
 8003572:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800357a:	2258      	movs	r2, #88	@ 0x58
 800357c:	2100      	movs	r1, #0
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f003 fdfb 	bl	800717a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
 800358a:	e005      	b.n	8003598 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800358c:	6938      	ldr	r0, [r7, #16]
 800358e:	f001 ffb1 	bl	80054f4 <vPortFree>
 8003592:	e001      	b.n	8003598 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800359e:	2300      	movs	r3, #0
 80035a0:	9303      	str	r3, [sp, #12]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	9302      	str	r3, [sp, #8]
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f82d 	bl	8003614 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80035ba:	697b      	ldr	r3, [r7, #20]
    }
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff ffb3 	bl	800354c <prvCreateTask>
 80035e6:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80035ee:	6938      	ldr	r0, [r7, #16]
 80035f0:	f000 f8a0 	bl	8003734 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80035f4:	2301      	movs	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e002      	b.n	8003600 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035fa:	f04f 33ff 	mov.w	r3, #4294967295
 80035fe:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4619      	mov	r1, r3
 8003604:	20c2      	movs	r0, #194	@ 0xc2
 8003606:	f003 f9a7 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800360a:	697b      	ldr	r3, [r7, #20]
    }
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003624:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	461a      	mov	r2, r3
 800362c:	21a5      	movs	r1, #165	@ 0xa5
 800362e:	f003 fda4 	bl	800717a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363c:	3b01      	subs	r3, #1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f023 0307 	bic.w	r3, r3, #7
 800364a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	617b      	str	r3, [r7, #20]
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	e7fd      	b.n	800366a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01e      	beq.n	80036b2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	e012      	b.n	80036a0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	4413      	add	r3, r2
 8003680:	7819      	ldrb	r1, [r3, #0]
 8003682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	4413      	add	r3, r2
 8003688:	3334      	adds	r3, #52	@ 0x34
 800368a:	460a      	mov	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d006      	beq.n	80036a8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3301      	adds	r3, #1
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b09      	cmp	r3, #9
 80036a4:	d9e9      	bls.n	800367a <prvInitialiseNewTask+0x66>
 80036a6:	e000      	b.n	80036aa <prvInitialiseNewTask+0x96>
            {
                break;
 80036a8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d90b      	bls.n	80036d0 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	613b      	str	r3, [r7, #16]
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	e7fd      	b.n	80036cc <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d901      	bls.n	80036da <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d6:	2304      	movs	r3, #4
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036de:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	3304      	adds	r3, #4
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff f916 	bl	800291c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	3318      	adds	r3, #24
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff f911 	bl	800291c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	f1c3 0205 	rsb	r2, r3, #5
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	69b8      	ldr	r0, [r7, #24]
 8003716:	f001 fb0f 	bl	8004d38 <pxPortInitialiseStack>
 800371a:	4602      	mov	r2, r0
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800372c:	bf00      	nop
 800372e:	3720      	adds	r7, #32
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003734:	b5b0      	push	{r4, r5, r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800373c:	f001 fc7a 	bl	8005034 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003740:	4b50      	ldr	r3, [pc, #320]	@ (8003884 <prvAddNewTaskToReadyList+0x150>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	3301      	adds	r3, #1
 8003746:	4a4f      	ldr	r2, [pc, #316]	@ (8003884 <prvAddNewTaskToReadyList+0x150>)
 8003748:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800374a:	4b4f      	ldr	r3, [pc, #316]	@ (8003888 <prvAddNewTaskToReadyList+0x154>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003752:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <prvAddNewTaskToReadyList+0x154>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003758:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <prvAddNewTaskToReadyList+0x150>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d110      	bne.n	8003782 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003760:	f000 fe58 	bl	8004414 <prvInitialiseTaskLists>
 8003764:	e00d      	b.n	8003782 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003766:	4b49      	ldr	r3, [pc, #292]	@ (800388c <prvAddNewTaskToReadyList+0x158>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800376e:	4b46      	ldr	r3, [pc, #280]	@ (8003888 <prvAddNewTaskToReadyList+0x154>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	429a      	cmp	r2, r3
 800377a:	d802      	bhi.n	8003782 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800377c:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <prvAddNewTaskToReadyList+0x154>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003782:	4b43      	ldr	r3, [pc, #268]	@ (8003890 <prvAddNewTaskToReadyList+0x15c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3301      	adds	r3, #1
 8003788:	4a41      	ldr	r2, [pc, #260]	@ (8003890 <prvAddNewTaskToReadyList+0x15c>)
 800378a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800378c:	4b40      	ldr	r3, [pc, #256]	@ (8003890 <prvAddNewTaskToReadyList+0x15c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <prvAddNewTaskToReadyList+0x94>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4618      	mov	r0, r3
 800379e:	f003 f94f 	bl	8006a40 <SEGGER_SYSVIEW_OnTaskCreate>
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	461d      	mov	r5, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461c      	mov	r4, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	1ae3      	subs	r3, r4, r3
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	462b      	mov	r3, r5
 80037c4:	f003 fc40 	bl	8007048 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 f9bc 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	2201      	movs	r2, #1
 80037d6:	409a      	lsls	r2, r3
 80037d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003894 <prvAddNewTaskToReadyList+0x160>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	4a2d      	ldr	r2, [pc, #180]	@ (8003894 <prvAddNewTaskToReadyList+0x160>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e6:	492c      	ldr	r1, [pc, #176]	@ (8003898 <prvAddNewTaskToReadyList+0x164>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3304      	adds	r3, #4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	3204      	adds	r2, #4
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1d1a      	adds	r2, r3, #4
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4a1c      	ldr	r2, [pc, #112]	@ (8003898 <prvAddNewTaskToReadyList+0x164>)
 8003826:	441a      	add	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	615a      	str	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003830:	4919      	ldr	r1, [pc, #100]	@ (8003898 <prvAddNewTaskToReadyList+0x164>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	4814      	ldr	r0, [pc, #80]	@ (8003898 <prvAddNewTaskToReadyList+0x164>)
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4403      	add	r3, r0
 8003850:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003852:	f001 fc21 	bl	8005098 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <prvAddNewTaskToReadyList+0x158>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800385e:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <prvAddNewTaskToReadyList+0x154>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	d207      	bcs.n	800387c <prvAddNewTaskToReadyList+0x148>
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <prvAddNewTaskToReadyList+0x168>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}
 8003884:	200001e8 	.word	0x200001e8
 8003888:	20000110 	.word	0x20000110
 800388c:	200001f4 	.word	0x200001f4
 8003890:	20000204 	.word	0x20000204
 8003894:	200001f0 	.word	0x200001f0
 8003898:	20000114 	.word	0x20000114
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80038b2:	f000 f8d1 	bl	8003a58 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80038b6:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <vTaskDelay+0x68>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d00b      	beq.n	80038d6 <vTaskDelay+0x36>
    __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	e7fd      	b.n	80038d2 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038d6:	2100      	movs	r1, #0
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 ff07 	bl	80046ec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80038de:	f000 f8c9 	bl	8003a74 <xTaskResumeAll>
 80038e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d107      	bne.n	80038fa <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80038ea:	4b08      	ldr	r3, [pc, #32]	@ (800390c <vTaskDelay+0x6c>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80038fa:	20c5      	movs	r0, #197	@ 0xc5
 80038fc:	f002 fff0 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000210 	.word	0x20000210
 800390c:	e000ed04 	.word	0xe000ed04

08003910 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	@ 0x28
 8003914:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003916:	2301      	movs	r3, #1
 8003918:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e011      	b.n	8003948 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003924:	4a1c      	ldr	r2, [pc, #112]	@ (8003998 <prvCreateIdleTasks+0x88>)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4413      	add	r3, r2
 800392a:	7819      	ldrb	r1, [r3, #0]
 800392c:	1d3a      	adds	r2, r7, #4
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4413      	add	r3, r2
 8003932:	460a      	mov	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003936:	1d3a      	adds	r2, r7, #4
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4413      	add	r3, r2
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b09      	cmp	r3, #9
 800394c:	ddea      	ble.n	8003924 <prvCreateIdleTasks+0x14>
 800394e:	e000      	b.n	8003952 <prvCreateIdleTasks+0x42>
        {
            break;
 8003950:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	e015      	b.n	8003984 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003958:	4b10      	ldr	r3, [pc, #64]	@ (800399c <prvCreateIdleTasks+0x8c>)
 800395a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4a0f      	ldr	r2, [pc, #60]	@ (80039a0 <prvCreateIdleTasks+0x90>)
 8003962:	4413      	add	r3, r2
 8003964:	1d39      	adds	r1, r7, #4
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2300      	movs	r3, #0
 800396e:	2282      	movs	r2, #130	@ 0x82
 8003970:	6938      	ldr	r0, [r7, #16]
 8003972:	f7ff fe27 	bl	80035c4 <xTaskCreate>
 8003976:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	3301      	adds	r3, #1
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	dde6      	ble.n	8003958 <prvCreateIdleTasks+0x48>
 800398a:	e000      	b.n	800398e <prvCreateIdleTasks+0x7e>
        {
            break;
 800398c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800398e:	69fb      	ldr	r3, [r7, #28]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	0800725c 	.word	0x0800725c
 800399c:	080043e5 	.word	0x080043e5
 80039a0:	2000020c 	.word	0x2000020c

080039a4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80039aa:	f7ff ffb1 	bl	8003910 <prvCreateIdleTasks>
 80039ae:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80039b6:	f000 ff27 	bl	8004808 <xTimerCreateTimerTask>
 80039ba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d124      	bne.n	8003a0c <vTaskStartScheduler+0x68>
    __asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	60bb      	str	r3, [r7, #8]
}
 80039d4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80039d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <vTaskStartScheduler+0x9c>)
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295
 80039dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <vTaskStartScheduler+0xa0>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039e4:	4b18      	ldr	r3, [pc, #96]	@ (8003a48 <vTaskStartScheduler+0xa4>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80039ea:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <vTaskStartScheduler+0xa8>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b18      	ldr	r3, [pc, #96]	@ (8003a50 <vTaskStartScheduler+0xac>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d102      	bne.n	80039fc <vTaskStartScheduler+0x58>
 80039f6:	f003 f807 	bl	8006a08 <SEGGER_SYSVIEW_OnIdle>
 80039fa:	e004      	b.n	8003a06 <vTaskStartScheduler+0x62>
 80039fc:	4b14      	ldr	r3, [pc, #80]	@ (8003a50 <vTaskStartScheduler+0xac>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 f85f 	bl	8006ac4 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003a06:	f001 fa25 	bl	8004e54 <xPortStartScheduler>
 8003a0a:	e00f      	b.n	8003a2c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d10b      	bne.n	8003a2c <vTaskStartScheduler+0x88>
    __asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	607b      	str	r3, [r7, #4]
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <vTaskStartScheduler+0xb0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003a30:	20cd      	movs	r0, #205	@ 0xcd
 8003a32:	f002 ff55 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000208 	.word	0x20000208
 8003a44:	200001f4 	.word	0x200001f4
 8003a48:	200001ec 	.word	0x200001ec
 8003a4c:	2000020c 	.word	0x2000020c
 8003a50:	20000110 	.word	0x20000110
 8003a54:	2000000c 	.word	0x2000000c

08003a58 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003a5c:	4b04      	ldr	r3, [pc, #16]	@ (8003a70 <vTaskSuspendAll+0x18>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	4a03      	ldr	r2, [pc, #12]	@ (8003a70 <vTaskSuspendAll+0x18>)
 8003a64:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003a66:	20cf      	movs	r0, #207	@ 0xcf
 8003a68:	f002 ff3a 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000210 	.word	0x20000210

08003a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003a82:	f001 fad7 	bl	8005034 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003a8a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c74 <xTaskResumeAll+0x200>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10b      	bne.n	8003aaa <xTaskResumeAll+0x36>
    __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003aaa:	4b72      	ldr	r3, [pc, #456]	@ (8003c74 <xTaskResumeAll+0x200>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a70      	ldr	r2, [pc, #448]	@ (8003c74 <xTaskResumeAll+0x200>)
 8003ab2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c74 <xTaskResumeAll+0x200>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 80ce 	bne.w	8003c5a <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abe:	4b6e      	ldr	r3, [pc, #440]	@ (8003c78 <xTaskResumeAll+0x204>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80c9 	beq.w	8003c5a <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac8:	e092      	b.n	8003bf0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003aca:	4b6c      	ldr	r3, [pc, #432]	@ (8003c7c <xTaskResumeAll+0x208>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	6a12      	ldr	r2, [r2, #32]
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	69d2      	ldr	r2, [r2, #28]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3318      	adds	r3, #24
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d103      	bne.n	8003b00 <xTaskResumeAll+0x8c>
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1e5a      	subs	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d103      	bne.n	8003b3e <xTaskResumeAll+0xca>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2200      	movs	r2, #0
 8003b42:	615a      	str	r2, [r3, #20]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	1e5a      	subs	r2, r3, #1
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f002 fff9 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	4b48      	ldr	r3, [pc, #288]	@ (8003c80 <xTaskResumeAll+0x20c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	4a46      	ldr	r2, [pc, #280]	@ (8003c80 <xTaskResumeAll+0x20c>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	4945      	ldr	r1, [pc, #276]	@ (8003c84 <xTaskResumeAll+0x210>)
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	3304      	adds	r3, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	3204      	adds	r2, #4
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	1d1a      	adds	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a36      	ldr	r2, [pc, #216]	@ (8003c84 <xTaskResumeAll+0x210>)
 8003bac:	441a      	add	r2, r3
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	615a      	str	r2, [r3, #20]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb6:	4933      	ldr	r1, [pc, #204]	@ (8003c84 <xTaskResumeAll+0x210>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bc8:	1c59      	adds	r1, r3, #1
 8003bca:	482e      	ldr	r0, [pc, #184]	@ (8003c84 <xTaskResumeAll+0x210>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4403      	add	r3, r0
 8003bd6:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c88 <xTaskResumeAll+0x214>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d904      	bls.n	8003bf0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003be6:	4a29      	ldr	r2, [pc, #164]	@ (8003c8c <xTaskResumeAll+0x218>)
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2101      	movs	r1, #1
 8003bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf0:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <xTaskResumeAll+0x208>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af68 	bne.w	8003aca <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003c00:	f000 fc86 	bl	8004510 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c04:	4b22      	ldr	r3, [pc, #136]	@ (8003c90 <xTaskResumeAll+0x21c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003c10:	f000 f878 	bl	8003d04 <xTaskIncrementTick>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <xTaskResumeAll+0x218>)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ef      	bne.n	8003c10 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003c30:	4b17      	ldr	r3, [pc, #92]	@ (8003c90 <xTaskResumeAll+0x21c>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003c36:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <xTaskResumeAll+0x218>)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003c46:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <xTaskResumeAll+0x214>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <xTaskResumeAll+0x220>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c5a:	f001 fa1d 	bl	8005098 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4619      	mov	r1, r3
 8003c62:	20d0      	movs	r0, #208	@ 0xd0
 8003c64:	f002 fe78 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003c68:	69bb      	ldr	r3, [r7, #24]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000210 	.word	0x20000210
 8003c78:	200001e8 	.word	0x200001e8
 8003c7c:	200001a8 	.word	0x200001a8
 8003c80:	200001f0 	.word	0x200001f0
 8003c84:	20000114 	.word	0x20000114
 8003c88:	20000110 	.word	0x20000110
 8003c8c:	200001fc 	.word	0x200001fc
 8003c90:	200001f8 	.word	0x200001f8
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <xTaskGetTickCount+0x20>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	20d1      	movs	r0, #209	@ 0xd1
 8003ca8:	f002 fe56 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003cac:	687b      	ldr	r3, [r7, #4]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200001ec 	.word	0x200001ec

08003cbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cc2:	f001 faa3 	bl	800520c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003cca:	4b06      	ldr	r3, [pc, #24]	@ (8003ce4 <xTaskGetTickCountFromISR+0x28>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	20d2      	movs	r0, #210	@ 0xd2
 8003cd4:	f002 fe40 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003cd8:	683b      	ldr	r3, [r7, #0]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200001ec 	.word	0x200001ec

08003ce8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <uxTaskGetNumberOfTasks+0x18>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	20d3      	movs	r0, #211	@ 0xd3
 8003cf4:	f002 fe30 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003cf8:	4b01      	ldr	r3, [pc, #4]	@ (8003d00 <uxTaskGetNumberOfTasks+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200001e8 	.word	0x200001e8

08003d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	@ 0x28
 8003d08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d0e:	4b83      	ldr	r3, [pc, #524]	@ (8003f1c <xTaskIncrementTick+0x218>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f040 80f3 	bne.w	8003efe <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d18:	4b81      	ldr	r3, [pc, #516]	@ (8003f20 <xTaskIncrementTick+0x21c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d20:	4a7f      	ldr	r2, [pc, #508]	@ (8003f20 <xTaskIncrementTick+0x21c>)
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d121      	bne.n	8003d70 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f24 <xTaskIncrementTick+0x220>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <xTaskIncrementTick+0x4a>
    __asm volatile
 8003d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	607b      	str	r3, [r7, #4]
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	e7fd      	b.n	8003d4a <xTaskIncrementTick+0x46>
 8003d4e:	4b75      	ldr	r3, [pc, #468]	@ (8003f24 <xTaskIncrementTick+0x220>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	4b74      	ldr	r3, [pc, #464]	@ (8003f28 <xTaskIncrementTick+0x224>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a72      	ldr	r2, [pc, #456]	@ (8003f24 <xTaskIncrementTick+0x220>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4a72      	ldr	r2, [pc, #456]	@ (8003f28 <xTaskIncrementTick+0x224>)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b72      	ldr	r3, [pc, #456]	@ (8003f2c <xTaskIncrementTick+0x228>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	4a70      	ldr	r2, [pc, #448]	@ (8003f2c <xTaskIncrementTick+0x228>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	f000 fbd0 	bl	8004510 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d70:	4b6f      	ldr	r3, [pc, #444]	@ (8003f30 <xTaskIncrementTick+0x22c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	f0c0 80ac 	bcc.w	8003ed4 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7c:	4b69      	ldr	r3, [pc, #420]	@ (8003f24 <xTaskIncrementTick+0x220>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d104      	bne.n	8003d90 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003d86:	4b6a      	ldr	r3, [pc, #424]	@ (8003f30 <xTaskIncrementTick+0x22c>)
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	601a      	str	r2, [r3, #0]
                    break;
 8003d8e:	e0a1      	b.n	8003ed4 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d90:	4b64      	ldr	r3, [pc, #400]	@ (8003f24 <xTaskIncrementTick+0x220>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d203      	bcs.n	8003db0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003da8:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <xTaskIncrementTick+0x22c>)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6013      	str	r3, [r2, #0]
                        break;
 8003dae:	e091      	b.n	8003ed4 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	6892      	ldr	r2, [r2, #8]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d103      	bne.n	8003dde <xTaskIncrementTick+0xda>
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01e      	beq.n	8003e34 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	6a12      	ldr	r2, [r2, #32]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	69d2      	ldr	r2, [r2, #28]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	3318      	adds	r3, #24
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d103      	bne.n	8003e24 <xTaskIncrementTick+0x120>
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2200      	movs	r2, #0
 8003e28:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 fe86 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	4b3b      	ldr	r3, [pc, #236]	@ (8003f34 <xTaskIncrementTick+0x230>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	@ (8003f34 <xTaskIncrementTick+0x230>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e52:	4939      	ldr	r1, [pc, #228]	@ (8003f38 <xTaskIncrementTick+0x234>)
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3304      	adds	r3, #4
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	3204      	adds	r2, #4
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1d1a      	adds	r2, r3, #4
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a29      	ldr	r2, [pc, #164]	@ (8003f38 <xTaskIncrementTick+0x234>)
 8003e92:	441a      	add	r2, r3
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	615a      	str	r2, [r3, #20]
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9c:	4926      	ldr	r1, [pc, #152]	@ (8003f38 <xTaskIncrementTick+0x234>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003eae:	1c59      	adds	r1, r3, #1
 8003eb0:	4821      	ldr	r0, [pc, #132]	@ (8003f38 <xTaskIncrementTick+0x234>)
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4403      	add	r3, r0
 8003ebc:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <xTaskIncrementTick+0x238>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f67f af57 	bls.w	8003d7c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed2:	e753      	b.n	8003d7c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003ed4:	4b19      	ldr	r3, [pc, #100]	@ (8003f3c <xTaskIncrementTick+0x238>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eda:	4917      	ldr	r1, [pc, #92]	@ (8003f38 <xTaskIncrementTick+0x234>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d901      	bls.n	8003ef0 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <xTaskIncrementTick+0x23c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003efc:	e004      	b.n	8003f08 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003efe:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <xTaskIncrementTick+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	4a0f      	ldr	r2, [pc, #60]	@ (8003f44 <xTaskIncrementTick+0x240>)
 8003f06:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	20db      	movs	r0, #219	@ 0xdb
 8003f0e:	f002 fd23 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3728      	adds	r7, #40	@ 0x28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000210 	.word	0x20000210
 8003f20:	200001ec 	.word	0x200001ec
 8003f24:	200001a0 	.word	0x200001a0
 8003f28:	200001a4 	.word	0x200001a4
 8003f2c:	20000200 	.word	0x20000200
 8003f30:	20000208 	.word	0x20000208
 8003f34:	200001f0 	.word	0x200001f0
 8003f38:	20000114 	.word	0x20000114
 8003f3c:	20000110 	.word	0x20000110
 8003f40:	200001fc 	.word	0x200001fc
 8003f44:	200001f8 	.word	0x200001f8

08003f48 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8004008 <vTaskSwitchContext+0xc0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003f56:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <vTaskSwitchContext+0xc4>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003f5c:	e04f      	b.n	8003ffe <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800400c <vTaskSwitchContext+0xc4>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <vTaskSwitchContext+0xc8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	fab3 f383 	clz	r3, r3
 8003f70:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003f72:	7afb      	ldrb	r3, [r7, #11]
 8003f74:	f1c3 031f 	rsb	r3, r3, #31
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	4926      	ldr	r1, [pc, #152]	@ (8004014 <vTaskSwitchContext+0xcc>)
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <vTaskSwitchContext+0x5e>
    __asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	607b      	str	r3, [r7, #4]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <vTaskSwitchContext+0x5a>
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4a18      	ldr	r2, [pc, #96]	@ (8004014 <vTaskSwitchContext+0xcc>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	605a      	str	r2, [r3, #4]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d103      	bne.n	8003fd4 <vTaskSwitchContext+0x8c>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	605a      	str	r2, [r3, #4]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4a0f      	ldr	r2, [pc, #60]	@ (8004018 <vTaskSwitchContext+0xd0>)
 8003fdc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003fde:	4b0f      	ldr	r3, [pc, #60]	@ (800401c <vTaskSwitchContext+0xd4>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <vTaskSwitchContext+0xd0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d102      	bne.n	8003ff0 <vTaskSwitchContext+0xa8>
 8003fea:	f002 fd0d 	bl	8006a08 <SEGGER_SYSVIEW_OnIdle>
 8003fee:	e004      	b.n	8003ffa <vTaskSwitchContext+0xb2>
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <vTaskSwitchContext+0xd0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 fd65 	bl	8006ac4 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003ffa:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <vTaskSwitchContext+0xd0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
    }
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000210 	.word	0x20000210
 800400c:	200001fc 	.word	0x200001fc
 8004010:	200001f0 	.word	0x200001f0
 8004014:	20000114 	.word	0x20000114
 8004018:	20000110 	.word	0x20000110
 800401c:	2000020c 	.word	0x2000020c

08004020 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004048:	4b08      	ldr	r3, [pc, #32]	@ (800406c <vTaskPlaceOnEventList+0x4c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3318      	adds	r3, #24
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fe fc72 	bl	800293a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004056:	2101      	movs	r1, #1
 8004058:	6838      	ldr	r0, [r7, #0]
 800405a:	f000 fb47 	bl	80046ec <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800405e:	20e1      	movs	r0, #225	@ 0xe1
 8004060:	f002 fc3e 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000110 	.word	0x20000110

08004070 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	613b      	str	r3, [r7, #16]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <vTaskPlaceOnEventListRestricted+0x90>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	61da      	str	r2, [r3, #28]
 80040a8:	4b15      	ldr	r3, [pc, #84]	@ (8004100 <vTaskPlaceOnEventListRestricted+0x90>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	621a      	str	r2, [r3, #32]
 80040b2:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <vTaskPlaceOnEventListRestricted+0x90>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	3218      	adds	r2, #24
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	4b10      	ldr	r3, [pc, #64]	@ (8004100 <vTaskPlaceOnEventListRestricted+0x90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f103 0218 	add.w	r2, r3, #24
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	609a      	str	r2, [r3, #8]
 80040ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004100 <vTaskPlaceOnEventListRestricted+0x90>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f000 fafe 	bl	80046ec <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80040f0:	20e3      	movs	r0, #227	@ 0xe3
 80040f2:	f002 fbf5 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80040f6:	bf00      	nop
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000110 	.word	0x20000110

08004104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	@ 0x28
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	60fb      	str	r3, [r7, #12]
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	e7fd      	b.n	800412e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	6a12      	ldr	r2, [r2, #32]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	69d2      	ldr	r2, [r2, #28]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	3318      	adds	r3, #24
 8004154:	429a      	cmp	r2, r3
 8004156:	d103      	bne.n	8004160 <xTaskRemoveFromEventList+0x5c>
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	6a1a      	ldr	r2, [r3, #32]
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2200      	movs	r2, #0
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1e5a      	subs	r2, r3, #1
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004170:	4b4e      	ldr	r3, [pc, #312]	@ (80042ac <xTaskRemoveFromEventList+0x1a8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d164      	bne.n	8004242 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	6a3a      	ldr	r2, [r7, #32]
 800418e:	6892      	ldr	r2, [r2, #8]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	3304      	adds	r3, #4
 800419a:	429a      	cmp	r2, r3
 800419c:	d103      	bne.n	80041a6 <xTaskRemoveFromEventList+0xa2>
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	1e5a      	subs	r2, r3, #1
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f002 fcc5 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	2201      	movs	r2, #1
 80041c4:	409a      	lsls	r2, r3
 80041c6:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <xTaskRemoveFromEventList+0x1ac>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	4a38      	ldr	r2, [pc, #224]	@ (80042b0 <xTaskRemoveFromEventList+0x1ac>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d4:	4937      	ldr	r1, [pc, #220]	@ (80042b4 <xTaskRemoveFromEventList+0x1b0>)
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3304      	adds	r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	60da      	str	r2, [r3, #12]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	6a3a      	ldr	r2, [r7, #32]
 80041fa:	3204      	adds	r2, #4
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a28      	ldr	r2, [pc, #160]	@ (80042b4 <xTaskRemoveFromEventList+0x1b0>)
 8004214:	441a      	add	r2, r3
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	615a      	str	r2, [r3, #20]
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800421e:	4925      	ldr	r1, [pc, #148]	@ (80042b4 <xTaskRemoveFromEventList+0x1b0>)
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004230:	1c59      	adds	r1, r3, #1
 8004232:	4820      	ldr	r0, [pc, #128]	@ (80042b4 <xTaskRemoveFromEventList+0x1b0>)
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4403      	add	r3, r0
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	e01b      	b.n	800427a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004242:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <xTaskRemoveFromEventList+0x1b4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	61da      	str	r2, [r3, #28]
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	621a      	str	r2, [r3, #32]
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	6a3a      	ldr	r2, [r7, #32]
 800425c:	3218      	adds	r2, #24
 800425e:	605a      	str	r2, [r3, #4]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	f103 0218 	add.w	r2, r3, #24
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <xTaskRemoveFromEventList+0x1b4>)
 800426e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <xTaskRemoveFromEventList+0x1b4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	4a10      	ldr	r2, [pc, #64]	@ (80042b8 <xTaskRemoveFromEventList+0x1b4>)
 8004278:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427e:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <xTaskRemoveFromEventList+0x1b8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	429a      	cmp	r2, r3
 8004286:	d905      	bls.n	8004294 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <xTaskRemoveFromEventList+0x1bc>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	e001      	b.n	8004298 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	4619      	mov	r1, r3
 800429c:	20e4      	movs	r0, #228	@ 0xe4
 800429e:	f002 fb5b 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3728      	adds	r7, #40	@ 0x28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000210 	.word	0x20000210
 80042b0:	200001f0 	.word	0x200001f0
 80042b4:	20000114 	.word	0x20000114
 80042b8:	200001a8 	.word	0x200001a8
 80042bc:	20000110 	.word	0x20000110
 80042c0:	200001fc 	.word	0x200001fc

080042c4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042cc:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <vTaskInternalSetTimeOutState+0x28>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <vTaskInternalSetTimeOutState+0x2c>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80042dc:	20e7      	movs	r0, #231	@ 0xe7
 80042de:	f002 faff 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000200 	.word	0x20000200
 80042f0:	200001ec 	.word	0x200001ec

080042f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	60fb      	str	r3, [r7, #12]
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800433a:	f000 fe7b 	bl	8005034 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800433e:	4b21      	ldr	r3, [pc, #132]	@ (80043c4 <xTaskCheckForTimeOut+0xd0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004356:	d102      	bne.n	800435e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
 800435c:	e026      	b.n	80043ac <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	4b19      	ldr	r3, [pc, #100]	@ (80043c8 <xTaskCheckForTimeOut+0xd4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d00a      	beq.n	8004380 <xTaskCheckForTimeOut+0x8c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	429a      	cmp	r2, r3
 8004372:	d305      	bcc.n	8004380 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e015      	b.n	80043ac <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	429a      	cmp	r2, r3
 8004388:	d20b      	bcs.n	80043a2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad2      	subs	r2, r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ff94 	bl	80042c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e004      	b.n	80043ac <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80043ac:	f000 fe74 	bl	8005098 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	4619      	mov	r1, r3
 80043b4:	20e8      	movs	r0, #232	@ 0xe8
 80043b6:	f002 facf 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80043ba:	69fb      	ldr	r3, [r7, #28]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200001ec 	.word	0x200001ec
 80043c8:	20000200 	.word	0x20000200

080043cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <vTaskMissedYield+0x14>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80043d6:	20e9      	movs	r0, #233	@ 0xe9
 80043d8:	f002 fa82 	bl	80068e0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	200001fc 	.word	0x200001fc

080043e4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80043ec:	f000 f852 	bl	8004494 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <prvIdleTask+0x28>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d9f9      	bls.n	80043ec <prvIdleTask+0x8>
            {
                taskYIELD();
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <prvIdleTask+0x2c>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004408:	e7f0      	b.n	80043ec <prvIdleTask+0x8>
 800440a:	bf00      	nop
 800440c:	20000114 	.word	0x20000114
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800441a:	2300      	movs	r3, #0
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	e00c      	b.n	800443a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4a12      	ldr	r2, [pc, #72]	@ (8004474 <prvInitialiseTaskLists+0x60>)
 800442c:	4413      	add	r3, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fa52 	bl	80028d8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3301      	adds	r3, #1
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d9ef      	bls.n	8004420 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004440:	480d      	ldr	r0, [pc, #52]	@ (8004478 <prvInitialiseTaskLists+0x64>)
 8004442:	f7fe fa49 	bl	80028d8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004446:	480d      	ldr	r0, [pc, #52]	@ (800447c <prvInitialiseTaskLists+0x68>)
 8004448:	f7fe fa46 	bl	80028d8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800444c:	480c      	ldr	r0, [pc, #48]	@ (8004480 <prvInitialiseTaskLists+0x6c>)
 800444e:	f7fe fa43 	bl	80028d8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004452:	480c      	ldr	r0, [pc, #48]	@ (8004484 <prvInitialiseTaskLists+0x70>)
 8004454:	f7fe fa40 	bl	80028d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004458:	480b      	ldr	r0, [pc, #44]	@ (8004488 <prvInitialiseTaskLists+0x74>)
 800445a:	f7fe fa3d 	bl	80028d8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800445e:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <prvInitialiseTaskLists+0x78>)
 8004460:	4a05      	ldr	r2, [pc, #20]	@ (8004478 <prvInitialiseTaskLists+0x64>)
 8004462:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <prvInitialiseTaskLists+0x7c>)
 8004466:	4a05      	ldr	r2, [pc, #20]	@ (800447c <prvInitialiseTaskLists+0x68>)
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000114 	.word	0x20000114
 8004478:	20000178 	.word	0x20000178
 800447c:	2000018c 	.word	0x2000018c
 8004480:	200001a8 	.word	0x200001a8
 8004484:	200001bc 	.word	0x200001bc
 8004488:	200001d4 	.word	0x200001d4
 800448c:	200001a0 	.word	0x200001a0
 8004490:	200001a4 	.word	0x200001a4

08004494 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800449a:	e019      	b.n	80044d0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800449c:	f000 fdca 	bl	8005034 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80044a0:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <prvCheckTasksWaitingTermination+0x50>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fa7f 	bl	80029b0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	4a0b      	ldr	r2, [pc, #44]	@ (80044e8 <prvCheckTasksWaitingTermination+0x54>)
 80044ba:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044c4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80044c6:	f000 fde7 	bl	8005098 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f810 	bl	80044f0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <prvCheckTasksWaitingTermination+0x58>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e1      	bne.n	800449c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200001bc 	.word	0x200001bc
 80044e8:	200001e8 	.word	0x200001e8
 80044ec:	200001d0 	.word	0x200001d0

080044f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fff9 	bl	80054f4 <vPortFree>
            vPortFree( pxTCB );
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fff6 	bl	80054f4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004514:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <prvResetNextTaskUnblockTime+0x30>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d104      	bne.n	8004528 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800451e:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <prvResetNextTaskUnblockTime+0x34>)
 8004520:	f04f 32ff 	mov.w	r2, #4294967295
 8004524:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004526:	e005      	b.n	8004534 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004528:	4b05      	ldr	r3, [pc, #20]	@ (8004540 <prvResetNextTaskUnblockTime+0x30>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <prvResetNextTaskUnblockTime+0x34>)
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200001a0 	.word	0x200001a0
 8004544:	20000208 	.word	0x20000208

08004548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <xTaskGetSchedulerState+0x3c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004556:	2301      	movs	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	e008      	b.n	800456e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800455c:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <xTaskGetSchedulerState+0x40>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004564:	2302      	movs	r3, #2
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e001      	b.n	800456e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4619      	mov	r1, r3
 8004572:	20f5      	movs	r0, #245	@ 0xf5
 8004574:	f002 f9f0 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004578:	687b      	ldr	r3, [r7, #4]
    }
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	200001f4 	.word	0x200001f4
 8004588:	20000210 	.word	0x20000210

0800458c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 8094 	beq.w	80046cc <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80045a4:	4b4e      	ldr	r3, [pc, #312]	@ (80046e0 <xTaskPriorityDisinherit+0x154>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d00b      	beq.n	80045c6 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	613b      	str	r3, [r7, #16]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	60fb      	str	r3, [r7, #12]
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	e7fd      	b.n	80045e2 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d067      	beq.n	80046cc <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d163      	bne.n	80046cc <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	3304      	adds	r3, #4
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f9d1 	bl	80029b0 <uxListRemove>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	2201      	movs	r2, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	4b30      	ldr	r3, [pc, #192]	@ (80046e4 <xTaskPriorityDisinherit+0x158>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4013      	ands	r3, r2
 8004626:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <xTaskPriorityDisinherit+0x158>)
 8004628:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004636:	f1c3 0205 	rsb	r2, r3, #5
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4618      	mov	r0, r3
 8004642:	f002 fa81 	bl	8006b48 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	2201      	movs	r2, #1
 800464c:	409a      	lsls	r2, r3
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <xTaskPriorityDisinherit+0x158>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	4a23      	ldr	r2, [pc, #140]	@ (80046e4 <xTaskPriorityDisinherit+0x158>)
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800465c:	4922      	ldr	r1, [pc, #136]	@ (80046e8 <xTaskPriorityDisinherit+0x15c>)
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3304      	adds	r3, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	3204      	adds	r2, #4
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	1d1a      	adds	r2, r3, #4
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4a13      	ldr	r2, [pc, #76]	@ (80046e8 <xTaskPriorityDisinherit+0x15c>)
 800469c:	441a      	add	r2, r3
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	615a      	str	r2, [r3, #20]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a6:	4910      	ldr	r1, [pc, #64]	@ (80046e8 <xTaskPriorityDisinherit+0x15c>)
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	480b      	ldr	r0, [pc, #44]	@ (80046e8 <xTaskPriorityDisinherit+0x15c>)
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4619      	mov	r1, r3
 80046d0:	20f7      	movs	r0, #247	@ 0xf7
 80046d2:	f002 f941 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80046d6:	69fb      	ldr	r3, [r7, #28]
    }
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000110 	.word	0x20000110
 80046e4:	200001f0 	.word	0x200001f0
 80046e8:	20000114 	.word	0x20000114

080046ec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046f6:	4b3d      	ldr	r3, [pc, #244]	@ (80047ec <prvAddCurrentTaskToDelayedList+0x100>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80046fc:	4b3c      	ldr	r3, [pc, #240]	@ (80047f0 <prvAddCurrentTaskToDelayedList+0x104>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004702:	4b3c      	ldr	r3, [pc, #240]	@ (80047f4 <prvAddCurrentTaskToDelayedList+0x108>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004708:	4b3b      	ldr	r3, [pc, #236]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe f94e 	bl	80029b0 <uxListRemove>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800471a:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004720:	2201      	movs	r2, #1
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	4b34      	ldr	r3, [pc, #208]	@ (80047fc <prvAddCurrentTaskToDelayedList+0x110>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4013      	ands	r3, r2
 800472e:	4a33      	ldr	r2, [pc, #204]	@ (80047fc <prvAddCurrentTaskToDelayedList+0x110>)
 8004730:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d124      	bne.n	8004784 <prvAddCurrentTaskToDelayedList+0x98>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d021      	beq.n	8004784 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <prvAddCurrentTaskToDelayedList+0x114>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	4b2c      	ldr	r3, [pc, #176]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	4b2a      	ldr	r3, [pc, #168]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	6892      	ldr	r2, [r2, #8]
 8004756:	60da      	str	r2, [r3, #12]
 8004758:	4b27      	ldr	r3, [pc, #156]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	3204      	adds	r2, #4
 8004762:	605a      	str	r2, [r3, #4]
 8004764:	4b24      	ldr	r3, [pc, #144]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1d1a      	adds	r2, r3, #4
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	609a      	str	r2, [r3, #8]
 800476e:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <prvAddCurrentTaskToDelayedList+0x114>)
 8004774:	615a      	str	r2, [r3, #20]
 8004776:	4b22      	ldr	r3, [pc, #136]	@ (8004800 <prvAddCurrentTaskToDelayedList+0x114>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	4a20      	ldr	r2, [pc, #128]	@ (8004800 <prvAddCurrentTaskToDelayedList+0x114>)
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004782:	e02e      	b.n	80047e2 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800478c:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	429a      	cmp	r2, r3
 800479a:	d20d      	bcs.n	80047b8 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800479c:	4b16      	ldr	r3, [pc, #88]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2104      	movs	r1, #4
 80047a2:	4618      	mov	r0, r3
 80047a4:	f002 fa12 	bl	8006bcc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80047a8:	4b13      	ldr	r3, [pc, #76]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	6978      	ldr	r0, [r7, #20]
 80047b2:	f7fe f8c2 	bl	800293a <vListInsert>
}
 80047b6:	e014      	b.n	80047e2 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80047b8:	4b0f      	ldr	r3, [pc, #60]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2104      	movs	r1, #4
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 fa04 	bl	8006bcc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80047c4:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	69b8      	ldr	r0, [r7, #24]
 80047ce:	f7fe f8b4 	bl	800293a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80047d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <prvAddCurrentTaskToDelayedList+0x118>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d202      	bcs.n	80047e2 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80047dc:	4a09      	ldr	r2, [pc, #36]	@ (8004804 <prvAddCurrentTaskToDelayedList+0x118>)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6013      	str	r3, [r2, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	200001ec 	.word	0x200001ec
 80047f0:	200001a0 	.word	0x200001a0
 80047f4:	200001a4 	.word	0x200001a4
 80047f8:	20000110 	.word	0x20000110
 80047fc:	200001f0 	.word	0x200001f0
 8004800:	200001d4 	.word	0x200001d4
 8004804:	20000208 	.word	0x20000208

08004808 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004812:	f000 fa5b 	bl	8004ccc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <xTimerCreateTimerTask+0x64>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00b      	beq.n	8004836 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800481e:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <xTimerCreateTimerTask+0x68>)
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	2302      	movs	r3, #2
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800482c:	4911      	ldr	r1, [pc, #68]	@ (8004874 <xTimerCreateTimerTask+0x6c>)
 800482e:	4812      	ldr	r0, [pc, #72]	@ (8004878 <xTimerCreateTimerTask+0x70>)
 8004830:	f7fe fec8 	bl	80035c4 <xTaskCreate>
 8004834:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	603b      	str	r3, [r7, #0]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4619      	mov	r1, r3
 8004858:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800485c:	f002 f87c 	bl	8006958 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004860:	687b      	ldr	r3, [r7, #4]
    }
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000244 	.word	0x20000244
 8004870:	20000248 	.word	0x20000248
 8004874:	08007264 	.word	0x08007264
 8004878:	08004921 	.word	0x08004921

0800487c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004888:	e008      	b.n	800489c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	4413      	add	r3, r2
 8004892:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	699a      	ldr	r2, [r3, #24]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	18d1      	adds	r1, r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f8df 	bl	8004a6c <prvInsertTimerInActiveList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ea      	bne.n	800488a <prvReloadTimer+0xe>
        }
    }
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048ca:	4b14      	ldr	r3, [pc, #80]	@ (800491c <prvProcessExpiredTimer+0x5c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe f869 	bl	80029b0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f7ff ffc3 	bl	800487c <prvReloadTimer>
 80048f6:	e008      	b.n	800490a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	4798      	blx	r3
    }
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	2000023c 	.word	0x2000023c

08004920 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f859 	bl	80049e4 <prvGetNextExpireTime>
 8004932:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4619      	mov	r1, r3
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f805 	bl	8004948 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800493e:	f000 f8d7 	bl	8004af0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004942:	bf00      	nop
 8004944:	e7f0      	b.n	8004928 <prvTimerTask+0x8>
	...

08004948 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004952:	f7ff f881 	bl	8003a58 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f866 	bl	8004a2c <prvSampleTimeNow>
 8004960:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d130      	bne.n	80049ca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	429a      	cmp	r2, r3
 8004974:	d806      	bhi.n	8004984 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004976:	f7ff f87d 	bl	8003a74 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800497a:	68f9      	ldr	r1, [r7, #12]
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff9f 	bl	80048c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004982:	e024      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800498a:	4b13      	ldr	r3, [pc, #76]	@ (80049d8 <prvProcessTimerOrBlockTask+0x90>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <prvProcessTimerOrBlockTask+0x50>
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <prvProcessTimerOrBlockTask+0x52>
 8004998:	2300      	movs	r3, #0
 800499a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800499c:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <prvProcessTimerOrBlockTask+0x94>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fe fccb 	bl	8003344 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80049ae:	f7ff f861 	bl	8003a74 <xTaskResumeAll>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10a      	bne.n	80049ce <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80049b8:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <prvProcessTimerOrBlockTask+0x98>)
 80049ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	f3bf 8f6f 	isb	sy
    }
 80049c8:	e001      	b.n	80049ce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80049ca:	f7ff f853 	bl	8003a74 <xTaskResumeAll>
    }
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000240 	.word	0x20000240
 80049dc:	20000244 	.word	0x20000244
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004a28 <prvGetNextExpireTime+0x44>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <prvGetNextExpireTime+0x16>
 80049f6:	2201      	movs	r2, #1
 80049f8:	e000      	b.n	80049fc <prvGetNextExpireTime+0x18>
 80049fa:	2200      	movs	r2, #0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a08:	4b07      	ldr	r3, [pc, #28]	@ (8004a28 <prvGetNextExpireTime+0x44>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e001      	b.n	8004a18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a18:	68fb      	ldr	r3, [r7, #12]
    }
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	2000023c 	.word	0x2000023c

08004a2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004a34:	f7ff f930 	bl	8003c98 <xTaskGetTickCount>
 8004a38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <prvSampleTimeNow+0x3c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d205      	bcs.n	8004a50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004a44:	f000 f91c 	bl	8004c80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a56:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <prvSampleTimeNow+0x3c>)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
    }
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	2000024c 	.word	0x2000024c

08004a6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d812      	bhi.n	8004ab8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad2      	subs	r2, r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e01b      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <prvInsertTimerInActiveList+0x7c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fd ff42 	bl	800293a <vListInsert>
 8004ab6:	e012      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d206      	bcs.n	8004ace <prvInsertTimerInActiveList+0x62>
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e007      	b.n	8004ade <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ace:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <prvInsertTimerInActiveList+0x80>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f7fd ff2e 	bl	800293a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ade:	697b      	ldr	r3, [r7, #20]
    }
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000240 	.word	0x20000240
 8004aec:	2000023c 	.word	0x2000023c

08004af0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004b02:	e0a9      	b.n	8004c58 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f2c0 80a6 	blt.w	8004c58 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fd ff47 	bl	80029b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff81 	bl	8004a2c <prvSampleTimeNow>
 8004b2a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	f200 808e 	bhi.w	8004c52 <prvProcessReceivedCommands+0x162>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <prvProcessReceivedCommands+0x4c>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004bc9 	.word	0x08004bc9
 8004b48:	08004bdd 	.word	0x08004bdd
 8004b4c:	08004c29 	.word	0x08004c29
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004bc9 	.word	0x08004bc9
 8004b5c:	08004bdd 	.word	0x08004bdd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	69f8      	ldr	r0, [r7, #28]
 8004b80:	f7ff ff74 	bl	8004a6c <prvInsertTimerInActiveList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d065      	beq.n	8004c56 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d009      	beq.n	8004bac <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	69f8      	ldr	r0, [r7, #28]
 8004ba6:	f7ff fe69 	bl	800487c <prvReloadTimer>
 8004baa:	e008      	b.n	8004bbe <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	69f8      	ldr	r0, [r7, #28]
 8004bc4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004bc6:	e046      	b.n	8004c56 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004bda:	e03d      	b.n	8004c58 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	617b      	str	r3, [r7, #20]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	18d1      	adds	r1, r2, r3
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	69f8      	ldr	r0, [r7, #28]
 8004c22:	f7ff ff23 	bl	8004a6c <prvInsertTimerInActiveList>
                        break;
 8004c26:	e017      	b.n	8004c58 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d103      	bne.n	8004c3e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004c36:	69f8      	ldr	r0, [r7, #28]
 8004c38:	f000 fc5c 	bl	80054f4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c3c:	e00c      	b.n	8004c58 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004c50:	e002      	b.n	8004c58 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <prvProcessReceivedCommands+0x168>
                        break;
 8004c56:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004c58:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <prvProcessReceivedCommands+0x18c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f107 0108 	add.w	r1, r7, #8
 8004c60:	2200      	movs	r2, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fe f912 	bl	8002e8c <xQueueReceive>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f47f af4a 	bne.w	8004b04 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000244 	.word	0x20000244

08004c80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c86:	e009      	b.n	8004c9c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c88:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc4 <prvSwitchTimerLists+0x44>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004c92:	f04f 31ff 	mov.w	r1, #4294967295
 8004c96:	6838      	ldr	r0, [r7, #0]
 8004c98:	f7ff fe12 	bl	80048c0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c9c:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <prvSwitchTimerLists+0x44>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004ca6:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <prvSwitchTimerLists+0x44>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004cac:	4b06      	ldr	r3, [pc, #24]	@ (8004cc8 <prvSwitchTimerLists+0x48>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	@ (8004cc4 <prvSwitchTimerLists+0x44>)
 8004cb2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004cb4:	4a04      	ldr	r2, [pc, #16]	@ (8004cc8 <prvSwitchTimerLists+0x48>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
    }
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	2000023c 	.word	0x2000023c
 8004cc8:	20000240 	.word	0x20000240

08004ccc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004cd0:	f000 f9b0 	bl	8005034 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004cd4:	4b12      	ldr	r3, [pc, #72]	@ (8004d20 <prvCheckForValidListAndQueue+0x54>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11d      	bne.n	8004d18 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004cdc:	4811      	ldr	r0, [pc, #68]	@ (8004d24 <prvCheckForValidListAndQueue+0x58>)
 8004cde:	f7fd fdfb 	bl	80028d8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ce2:	4811      	ldr	r0, [pc, #68]	@ (8004d28 <prvCheckForValidListAndQueue+0x5c>)
 8004ce4:	f7fd fdf8 	bl	80028d8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ce8:	4b10      	ldr	r3, [pc, #64]	@ (8004d2c <prvCheckForValidListAndQueue+0x60>)
 8004cea:	4a0e      	ldr	r2, [pc, #56]	@ (8004d24 <prvCheckForValidListAndQueue+0x58>)
 8004cec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004cee:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <prvCheckForValidListAndQueue+0x64>)
 8004cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <prvCheckForValidListAndQueue+0x5c>)
 8004cf2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	210c      	movs	r1, #12
 8004cf8:	200a      	movs	r0, #10
 8004cfa:	f7fd ff1f 	bl	8002b3c <xQueueGenericCreate>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a07      	ldr	r2, [pc, #28]	@ (8004d20 <prvCheckForValidListAndQueue+0x54>)
 8004d02:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d04:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <prvCheckForValidListAndQueue+0x54>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d0c:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <prvCheckForValidListAndQueue+0x54>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4908      	ldr	r1, [pc, #32]	@ (8004d34 <prvCheckForValidListAndQueue+0x68>)
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fac6 	bl	80032a4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d18:	f000 f9be 	bl	8005098 <vPortExitCritical>
    }
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000244 	.word	0x20000244
 8004d24:	20000214 	.word	0x20000214
 8004d28:	20000228 	.word	0x20000228
 8004d2c:	2000023c 	.word	0x2000023c
 8004d30:	20000240 	.word	0x20000240
 8004d34:	0800726c 	.word	0x0800726c

08004d38 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3b04      	subs	r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004d68:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <pxPortInitialiseStack+0x64>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b14      	subs	r3, #20
 8004d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b04      	subs	r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f06f 0202 	mvn.w	r2, #2
 8004d86:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3b20      	subs	r3, #32
 8004d8c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	08004da1 	.word	0x08004da1

08004da0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004daa:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <prvTaskExitError+0x58>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d00b      	beq.n	8004dcc <prvTaskExitError+0x2c>
    __asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <prvTaskExitError+0x28>
    __asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60bb      	str	r3, [r7, #8]
}
 8004dde:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004de0:	bf00      	nop
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0fc      	beq.n	8004de2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	20000010 	.word	0x20000010
 8004dfc:	00000000 	.word	0x00000000

08004e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	4770      	bx	lr
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst2>:
 8004e20:	20000110 	.word	0x20000110
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004e28:	4808      	ldr	r0, [pc, #32]	@ (8004e4c <prvPortStartFirstTask+0x24>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8814 	msr	CONTROL, r0
 8004e3a:	b662      	cpsie	i
 8004e3c:	b661      	cpsie	f
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	df00      	svc	0
 8004e48:	bf00      	nop
 8004e4a:	0000      	.short	0x0000
 8004e4c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop

08004e54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08c      	sub	sp, #48	@ 0x30
 8004e58:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e5a:	4b69      	ldr	r3, [pc, #420]	@ (8005000 <xPortStartScheduler+0x1ac>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a69      	ldr	r2, [pc, #420]	@ (8005004 <xPortStartScheduler+0x1b0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10b      	bne.n	8004e7c <xPortStartScheduler+0x28>
    __asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e7c:	4b60      	ldr	r3, [pc, #384]	@ (8005000 <xPortStartScheduler+0x1ac>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a61      	ldr	r2, [pc, #388]	@ (8005008 <xPortStartScheduler+0x1b4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10b      	bne.n	8004e9e <xPortStartScheduler+0x4a>
    __asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	623b      	str	r3, [r7, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800500c <xPortStartScheduler+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea6:	332c      	adds	r3, #44	@ 0x2c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a59      	ldr	r2, [pc, #356]	@ (8005010 <xPortStartScheduler+0x1bc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <xPortStartScheduler+0x74>
    __asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	61fb      	str	r3, [r7, #28]
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	e7fd      	b.n	8004ec4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	3338      	adds	r3, #56	@ 0x38
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a51      	ldr	r2, [pc, #324]	@ (8005014 <xPortStartScheduler+0x1c0>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00b      	beq.n	8004eec <xPortStartScheduler+0x98>
    __asm volatile
 8004ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	61bb      	str	r3, [r7, #24]
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	e7fd      	b.n	8004ee8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ef0:	4b49      	ldr	r3, [pc, #292]	@ (8005018 <xPortStartScheduler+0x1c4>)
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	22ff      	movs	r2, #255	@ 0xff
 8004f00:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	4b41      	ldr	r3, [pc, #260]	@ (800501c <xPortStartScheduler+0x1c8>)
 8004f16:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004f18:	4b40      	ldr	r3, [pc, #256]	@ (800501c <xPortStartScheduler+0x1c8>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10b      	bne.n	8004f38 <xPortStartScheduler+0xe4>
    __asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	617b      	str	r3, [r7, #20]
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	e7fd      	b.n	8004f34 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d013      	beq.n	8004f6e <xPortStartScheduler+0x11a>
    __asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	613b      	str	r3, [r7, #16]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	2b80      	cmp	r3, #128	@ 0x80
 8004f78:	d0f1      	beq.n	8004f5e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d103      	bne.n	8004f88 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004f80:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e004      	b.n	8004f92 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f1c3 0307 	rsb	r3, r3, #7
 8004f8e:	4a24      	ldr	r2, [pc, #144]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004f90:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f92:	4b23      	ldr	r3, [pc, #140]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	4a21      	ldr	r2, [pc, #132]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004f9a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f9c:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <xPortStartScheduler+0x1cc>)
 8004fa6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8005024 <xPortStartScheduler+0x1d0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <xPortStartScheduler+0x1d0>)
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004fbc:	4b19      	ldr	r3, [pc, #100]	@ (8005024 <xPortStartScheduler+0x1d0>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <xPortStartScheduler+0x1d0>)
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004fc8:	4b17      	ldr	r3, [pc, #92]	@ (8005028 <xPortStartScheduler+0x1d4>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004fce:	f000 f8ed 	bl	80051ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004fd2:	4b16      	ldr	r3, [pc, #88]	@ (800502c <xPortStartScheduler+0x1d8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004fd8:	f000 f90c 	bl	80051f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <xPortStartScheduler+0x1dc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a13      	ldr	r2, [pc, #76]	@ (8005030 <xPortStartScheduler+0x1dc>)
 8004fe2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004fe8:	f7ff ff1e 	bl	8004e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004fec:	f7fe ffac 	bl	8003f48 <vTaskSwitchContext>
    prvTaskExitError();
 8004ff0:	f7ff fed6 	bl	8004da0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	@ 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00
 8005004:	410fc271 	.word	0x410fc271
 8005008:	410fc270 	.word	0x410fc270
 800500c:	e000ed08 	.word	0xe000ed08
 8005010:	08004e01 	.word	0x08004e01
 8005014:	080050f1 	.word	0x080050f1
 8005018:	e000e400 	.word	0xe000e400
 800501c:	20000250 	.word	0x20000250
 8005020:	20000254 	.word	0x20000254
 8005024:	e000ed20 	.word	0xe000ed20
 8005028:	e000ed1c 	.word	0xe000ed1c
 800502c:	20000010 	.word	0x20000010
 8005030:	e000ef34 	.word	0xe000ef34

08005034 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
    __asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	607b      	str	r3, [r7, #4]
}
 800504c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800504e:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <vPortEnterCritical+0x5c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a0e      	ldr	r2, [pc, #56]	@ (8005090 <vPortEnterCritical+0x5c>)
 8005056:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005058:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <vPortEnterCritical+0x5c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d110      	bne.n	8005082 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005060:	4b0c      	ldr	r3, [pc, #48]	@ (8005094 <vPortEnterCritical+0x60>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00b      	beq.n	8005082 <vPortEnterCritical+0x4e>
    __asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <vPortEnterCritical+0x4a>
    }
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000010 	.word	0x20000010
 8005094:	e000ed04 	.word	0xe000ed04

08005098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <vPortExitCritical+0x50>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <vPortExitCritical+0x26>
    __asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	607b      	str	r3, [r7, #4]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80050be:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <vPortExitCritical+0x50>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	4a08      	ldr	r2, [pc, #32]	@ (80050e8 <vPortExitCritical+0x50>)
 80050c6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80050c8:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <vPortExitCritical+0x50>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <vPortExitCritical+0x44>
 80050d0:	2300      	movs	r3, #0
 80050d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80050da:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20000010 	.word	0x20000010
 80050ec:	00000000 	.word	0x00000000

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7fe ff12 	bl	8003f48 <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000110 	.word	0x20000110
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
    __asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005172:	f001 fb3b 	bl	80067ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005176:	f7fe fdc5 	bl	8003d04 <xTaskIncrementTick>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d006      	beq.n	800518e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005180:	f001 fb92 	bl	80068a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005184:	4b08      	ldr	r3, [pc, #32]	@ (80051a8 <SysTick_Handler+0x50>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e001      	b.n	8005192 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800518e:	f001 fb6f 	bl	8006870 <SEGGER_SYSVIEW_RecordExitISR>
 8005192:	2300      	movs	r3, #0
 8005194:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	f383 8811 	msr	BASEPRI, r3
}
 800519c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800519e:	bf00      	nop
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
 8005202:	0000      	.short	0x0000
 8005204:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop

0800520c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005212:	f3ef 8305 	mrs	r3, IPSR
 8005216:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b0f      	cmp	r3, #15
 800521c:	d915      	bls.n	800524a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800521e:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <vPortValidateInterruptPriority+0x74>)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005228:	4b16      	ldr	r3, [pc, #88]	@ (8005284 <vPortValidateInterruptPriority+0x78>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	7afa      	ldrb	r2, [r7, #11]
 800522e:	429a      	cmp	r2, r3
 8005230:	d20b      	bcs.n	800524a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800524a:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <vPortValidateInterruptPriority+0x7c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005252:	4b0e      	ldr	r3, [pc, #56]	@ (800528c <vPortValidateInterruptPriority+0x80>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d90b      	bls.n	8005272 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	603b      	str	r3, [r7, #0]
}
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	e7fd      	b.n	800526e <vPortValidateInterruptPriority+0x62>
    }
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e3f0 	.word	0xe000e3f0
 8005284:	20000250 	.word	0x20000250
 8005288:	e000ed0c 	.word	0xe000ed0c
 800528c:	20000254 	.word	0x20000254

08005290 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	@ 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d022      	beq.n	80052e8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80052a2:	2308      	movs	r3, #8
 80052a4:	43db      	mvns	r3, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d81b      	bhi.n	80052e4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80052ac:	2208      	movs	r2, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d014      	beq.n	80052e8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	f1c3 0308 	rsb	r3, r3, #8
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	43db      	mvns	r3, r3
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d804      	bhi.n	80052de <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d8:	4413      	add	r3, r2
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	e004      	b.n	80052e8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	607b      	str	r3, [r7, #4]
 80052e2:	e001      	b.n	80052e8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80052e8:	f7fe fbb6 	bl	8003a58 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80052ec:	4b7a      	ldr	r3, [pc, #488]	@ (80054d8 <pvPortMalloc+0x248>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80052f4:	f000 f978 	bl	80055e8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f2c0 80d3 	blt.w	80054a6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80cf 	beq.w	80054a6 <pvPortMalloc+0x216>
 8005308:	4b74      	ldr	r3, [pc, #464]	@ (80054dc <pvPortMalloc+0x24c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	f200 80c9 	bhi.w	80054a6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005314:	4b72      	ldr	r3, [pc, #456]	@ (80054e0 <pvPortMalloc+0x250>)
 8005316:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005318:	4b71      	ldr	r3, [pc, #452]	@ (80054e0 <pvPortMalloc+0x250>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800531e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005320:	4a70      	ldr	r2, [pc, #448]	@ (80054e4 <pvPortMalloc+0x254>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d305      	bcc.n	8005332 <pvPortMalloc+0xa2>
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	4a6f      	ldr	r2, [pc, #444]	@ (80054e8 <pvPortMalloc+0x258>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d801      	bhi.n	8005332 <pvPortMalloc+0xa2>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <pvPortMalloc+0xa4>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d129      	bne.n	800538c <pvPortMalloc+0xfc>
    __asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	623b      	str	r3, [r7, #32]
}
 800534a:	bf00      	nop
 800534c:	bf00      	nop
 800534e:	e7fd      	b.n	800534c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8005354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800535a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535c:	4a61      	ldr	r2, [pc, #388]	@ (80054e4 <pvPortMalloc+0x254>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d305      	bcc.n	800536e <pvPortMalloc+0xde>
 8005362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005364:	4a60      	ldr	r2, [pc, #384]	@ (80054e8 <pvPortMalloc+0x258>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d801      	bhi.n	800536e <pvPortMalloc+0xde>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <pvPortMalloc+0xe0>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <pvPortMalloc+0xfc>
    __asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61fb      	str	r3, [r7, #28]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d903      	bls.n	800539e <pvPortMalloc+0x10e>
 8005396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1d8      	bne.n	8005350 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800539e:	4b4e      	ldr	r3, [pc, #312]	@ (80054d8 <pvPortMalloc+0x248>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d07e      	beq.n	80054a6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	4413      	add	r3, r2
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80053b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b4:	4a4b      	ldr	r2, [pc, #300]	@ (80054e4 <pvPortMalloc+0x254>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d305      	bcc.n	80053c6 <pvPortMalloc+0x136>
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	4a4a      	ldr	r2, [pc, #296]	@ (80054e8 <pvPortMalloc+0x258>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d801      	bhi.n	80053c6 <pvPortMalloc+0x136>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <pvPortMalloc+0x138>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10b      	bne.n	80053e4 <pvPortMalloc+0x154>
    __asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61bb      	str	r3, [r7, #24]
}
 80053de:	bf00      	nop
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80053ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d90b      	bls.n	800540e <pvPortMalloc+0x17e>
    __asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	617b      	str	r3, [r7, #20]
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	e7fd      	b.n	800540a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	2308      	movs	r3, #8
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	429a      	cmp	r2, r3
 800541c:	d924      	bls.n	8005468 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800541e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4413      	add	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00b      	beq.n	8005448 <pvPortMalloc+0x1b8>
    __asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005460:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005466:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <pvPortMalloc+0x24c>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <pvPortMalloc+0x24c>)
 8005474:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005476:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <pvPortMalloc+0x24c>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b1c      	ldr	r3, [pc, #112]	@ (80054ec <pvPortMalloc+0x25c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d203      	bcs.n	800548a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005482:	4b16      	ldr	r3, [pc, #88]	@ (80054dc <pvPortMalloc+0x24c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <pvPortMalloc+0x25c>)
 8005488:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800548a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800549c:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <pvPortMalloc+0x260>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	4a13      	ldr	r2, [pc, #76]	@ (80054f0 <pvPortMalloc+0x260>)
 80054a4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80054a6:	f7fe fae5 	bl	8003a74 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <pvPortMalloc+0x23c>
    __asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	60fb      	str	r3, [r7, #12]
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	e7fd      	b.n	80054c8 <pvPortMalloc+0x238>
    return pvReturn;
 80054cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3738      	adds	r7, #56	@ 0x38
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20012e60 	.word	0x20012e60
 80054dc:	20012e64 	.word	0x20012e64
 80054e0:	20012e58 	.word	0x20012e58
 80054e4:	20000258 	.word	0x20000258
 80054e8:	20012e57 	.word	0x20012e57
 80054ec:	20012e68 	.word	0x20012e68
 80054f0:	20012e6c 	.word	0x20012e6c

080054f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d064      	beq.n	80055d0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005506:	2308      	movs	r3, #8
 8005508:	425b      	negs	r3, r3
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	4413      	add	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	4a30      	ldr	r2, [pc, #192]	@ (80055d8 <vPortFree+0xe4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d305      	bcc.n	8005528 <vPortFree+0x34>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4a2f      	ldr	r2, [pc, #188]	@ (80055dc <vPortFree+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d801      	bhi.n	8005528 <vPortFree+0x34>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <vPortFree+0x36>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <vPortFree+0x52>
    __asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	617b      	str	r3, [r7, #20]
}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	e7fd      	b.n	8005542 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	db0b      	blt.n	8005566 <vPortFree+0x72>
    __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	613b      	str	r3, [r7, #16]
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	e7fd      	b.n	8005562 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <vPortFree+0x92>
    __asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60fb      	str	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	0fdb      	lsrs	r3, r3, #31
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01c      	beq.n	80055d0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d118      	bne.n	80055d0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80055aa:	f7fe fa55 	bl	8003a58 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4b0b      	ldr	r3, [pc, #44]	@ (80055e0 <vPortFree+0xec>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	4a09      	ldr	r2, [pc, #36]	@ (80055e0 <vPortFree+0xec>)
 80055ba:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055bc:	69b8      	ldr	r0, [r7, #24]
 80055be:	f000 f86d 	bl	800569c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80055c2:	4b08      	ldr	r3, [pc, #32]	@ (80055e4 <vPortFree+0xf0>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3301      	adds	r3, #1
 80055c8:	4a06      	ldr	r2, [pc, #24]	@ (80055e4 <vPortFree+0xf0>)
 80055ca:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80055cc:	f7fe fa52 	bl	8003a74 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80055d0:	bf00      	nop
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20000258 	.word	0x20000258
 80055dc:	20012e57 	.word	0x20012e57
 80055e0:	20012e64 	.word	0x20012e64
 80055e4:	20012e70 	.word	0x20012e70

080055e8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ee:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80055f4:	4b24      	ldr	r3, [pc, #144]	@ (8005688 <prvHeapInit+0xa0>)
 80055f6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3307      	adds	r3, #7
 8005606:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <prvHeapInit+0xa0>)
 8005618:	4413      	add	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <prvHeapInit+0xa4>)
 8005620:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005622:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <prvHeapInit+0xa4>)
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a13      	ldr	r2, [pc, #76]	@ (8005690 <prvHeapInit+0xa8>)
 8005644:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <prvHeapInit+0xa8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <prvHeapInit+0xa8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005664:	4b0a      	ldr	r3, [pc, #40]	@ (8005690 <prvHeapInit+0xa8>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a08      	ldr	r2, [pc, #32]	@ (8005694 <prvHeapInit+0xac>)
 8005672:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a07      	ldr	r2, [pc, #28]	@ (8005698 <prvHeapInit+0xb0>)
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000258 	.word	0x20000258
 800568c:	20012e58 	.word	0x20012e58
 8005690:	20012e60 	.word	0x20012e60
 8005694:	20012e68 	.word	0x20012e68
 8005698:	20012e64 	.word	0x20012e64

0800569c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80056a4:	4b36      	ldr	r3, [pc, #216]	@ (8005780 <prvInsertBlockIntoFreeList+0xe4>)
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	e002      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x14>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d8f7      	bhi.n	80056aa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	4a30      	ldr	r2, [pc, #192]	@ (8005780 <prvInsertBlockIntoFreeList+0xe4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d018      	beq.n	80056f4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	@ (8005784 <prvInsertBlockIntoFreeList+0xe8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d305      	bcc.n	80056d6 <prvInsertBlockIntoFreeList+0x3a>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005788 <prvInsertBlockIntoFreeList+0xec>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d801      	bhi.n	80056d6 <prvInsertBlockIntoFreeList+0x3a>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <prvInsertBlockIntoFreeList+0x3c>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10b      	bne.n	80056f4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80056dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	60fb      	str	r3, [r7, #12]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d108      	bne.n	8005718 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	441a      	add	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	441a      	add	r2, r3
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d118      	bne.n	800575e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b16      	ldr	r3, [pc, #88]	@ (800578c <prvInsertBlockIntoFreeList+0xf0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d00d      	beq.n	8005754 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	441a      	add	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e008      	b.n	8005766 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005754:	4b0d      	ldr	r3, [pc, #52]	@ (800578c <prvInsertBlockIntoFreeList+0xf0>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e003      	b.n	8005766 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	429a      	cmp	r2, r3
 800576c:	d002      	beq.n	8005774 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20012e58 	.word	0x20012e58
 8005784:	20000258 	.word	0x20000258
 8005788:	20012e57 	.word	0x20012e57
 800578c:	20012e60 	.word	0x20012e60

08005790 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005794:	4803      	ldr	r0, [pc, #12]	@ (80057a4 <_cbSendSystemDesc+0x14>)
 8005796:	f000 ffd3 	bl	8006740 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800579a:	4803      	ldr	r0, [pc, #12]	@ (80057a8 <_cbSendSystemDesc+0x18>)
 800579c:	f000 ffd0 	bl	8006740 <SEGGER_SYSVIEW_SendSysDesc>
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	08007274 	.word	0x08007274
 80057a8:	080072a0 	.word	0x080072a0

080057ac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80057b0:	4b06      	ldr	r3, [pc, #24]	@ (80057cc <SEGGER_SYSVIEW_Conf+0x20>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <SEGGER_SYSVIEW_Conf+0x20>)
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <SEGGER_SYSVIEW_Conf+0x24>)
 80057ba:	4a06      	ldr	r2, [pc, #24]	@ (80057d4 <SEGGER_SYSVIEW_Conf+0x28>)
 80057bc:	f000 fc46 	bl	800604c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80057c0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80057c4:	f000 fc86 	bl	80060d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80057c8:	bf00      	nop
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20000000 	.word	0x20000000
 80057d0:	08005791 	.word	0x08005791
 80057d4:	0800735c 	.word	0x0800735c

080057d8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80057de:	4b26      	ldr	r3, [pc, #152]	@ (8005878 <_DoInit+0xa0>)
 80057e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80057e2:	22a8      	movs	r2, #168	@ 0xa8
 80057e4:	2100      	movs	r1, #0
 80057e6:	6838      	ldr	r0, [r7, #0]
 80057e8:	f001 fcc7 	bl	800717a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2203      	movs	r2, #3
 80057f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2203      	movs	r2, #3
 80057f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	4a20      	ldr	r2, [pc, #128]	@ (800587c <_DoInit+0xa4>)
 80057fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4a1f      	ldr	r2, [pc, #124]	@ (8005880 <_DoInit+0xa8>)
 8005802:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800580a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2200      	movs	r2, #0
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	4a16      	ldr	r2, [pc, #88]	@ (800587c <_DoInit+0xa4>)
 8005822:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4a17      	ldr	r2, [pc, #92]	@ (8005884 <_DoInit+0xac>)
 8005828:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2200      	movs	r2, #0
 800583a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005842:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005846:	2300      	movs	r3, #0
 8005848:	607b      	str	r3, [r7, #4]
 800584a:	e00c      	b.n	8005866 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1c3 030f 	rsb	r3, r3, #15
 8005852:	4a0d      	ldr	r2, [pc, #52]	@ (8005888 <_DoInit+0xb0>)
 8005854:	5cd1      	ldrb	r1, [r2, r3]
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	460a      	mov	r2, r1
 800585e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3301      	adds	r3, #1
 8005864:	607b      	str	r3, [r7, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b0f      	cmp	r3, #15
 800586a:	d9ef      	bls.n	800584c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800586c:	f3bf 8f5f 	dmb	sy
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20012e74 	.word	0x20012e74
 800587c:	080072b0 	.word	0x080072b0
 8005880:	20012f1c 	.word	0x20012f1c
 8005884:	2001331c 	.word	0x2001331c
 8005888:	0800733c 	.word	0x0800733c

0800588c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	@ 0x30
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005898:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <SEGGER_RTT_ReadNoLock+0x108>)
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b53      	cmp	r3, #83	@ 0x53
 80058a4:	d001      	beq.n	80058aa <SEGGER_RTT_ReadNoLock+0x1e>
 80058a6:	f7ff ff97 	bl	80057d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	3360      	adds	r3, #96	@ 0x60
 80058b6:	4a37      	ldr	r2, [pc, #220]	@ (8005994 <SEGGER_RTT_ReadNoLock+0x108>)
 80058b8:	4413      	add	r3, r2
 80058ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058cc:	2300      	movs	r3, #0
 80058ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d92b      	bls.n	8005930 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bf28      	it	cs
 80058ea:	4613      	movcs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	4413      	add	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	6939      	ldr	r1, [r7, #16]
 80058fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80058fe:	f001 fc69 	bl	80071d4 <memcpy>
    NumBytesRead += NumBytesRem;
 8005902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4413      	add	r3, r2
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800590a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4413      	add	r3, r2
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800591a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4413      	add	r3, r2
 8005920:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005928:	429a      	cmp	r2, r3
 800592a:	d101      	bne.n	8005930 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800592c:	2300      	movs	r3, #0
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4293      	cmp	r3, r2
 800593e:	bf28      	it	cs
 8005940:	4613      	movcs	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d019      	beq.n	800597e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	4413      	add	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	6939      	ldr	r1, [r7, #16]
 8005958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800595a:	f001 fc3b 	bl	80071d4 <memcpy>
    NumBytesRead += NumBytesRem;
 800595e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005988:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	@ 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20012e74 	.word	0x20012e74

08005998 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059a6:	4b3d      	ldr	r3, [pc, #244]	@ (8005a9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059a8:	61bb      	str	r3, [r7, #24]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b53      	cmp	r3, #83	@ 0x53
 80059b2:	d001      	beq.n	80059b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80059b4:	f7ff ff10 	bl	80057d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80059b8:	f3ef 8311 	mrs	r3, BASEPRI
 80059bc:	f04f 0120 	mov.w	r1, #32
 80059c0:	f381 8811 	msr	BASEPRI, r1
 80059c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059c6:	4b35      	ldr	r3, [pc, #212]	@ (8005a9c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059ce:	6939      	ldr	r1, [r7, #16]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	440b      	add	r3, r1
 80059de:	3304      	adds	r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	dbeb      	blt.n	80059ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80059f6:	e000      	b.n	80059fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	da3f      	bge.n	8005a84 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a04:	6939      	ldr	r1, [r7, #16]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	440b      	add	r3, r1
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a18:	6939      	ldr	r1, [r7, #16]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	3304      	adds	r3, #4
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3320      	adds	r3, #32
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a42:	6939      	ldr	r1, [r7, #16]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	3328      	adds	r3, #40	@ 0x28
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a56:	6939      	ldr	r1, [r7, #16]
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	3324      	adds	r3, #36	@ 0x24
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a6a:	6939      	ldr	r1, [r7, #16]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	332c      	adds	r3, #44	@ 0x2c
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a7e:	f3bf 8f5f 	dmb	sy
 8005a82:	e002      	b.n	8005a8a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a90:	69fb      	ldr	r3, [r7, #28]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3720      	adds	r7, #32
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20012e74 	.word	0x20012e74

08005aa0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	@ 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005aae:	4b21      	ldr	r3, [pc, #132]	@ (8005b34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b53      	cmp	r3, #83	@ 0x53
 8005aba:	d001      	beq.n	8005ac0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005abc:	f7ff fe8c 	bl	80057d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ac2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d82c      	bhi.n	8005b24 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005aca:	f3ef 8311 	mrs	r3, BASEPRI
 8005ace:	f04f 0120 	mov.w	r1, #32
 8005ad2:	f381 8811 	msr	BASEPRI, r1
 8005ad6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	3360      	adds	r3, #96	@ 0x60
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b12:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b14:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b22:	e002      	b.n	8005b2a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3728      	adds	r7, #40	@ 0x28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20012e74 	.word	0x20012e74

08005b38 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	60fa      	str	r2, [r7, #12]
 8005b4e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d90a      	bls.n	8005b6c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b5a:	e007      	b.n	8005b6c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	1c53      	adds	r3, r2, #1
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1c59      	adds	r1, r3, #1
 8005b66:	60f9      	str	r1, [r7, #12]
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	1e5a      	subs	r2, r3, #1
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <_EncodeStr+0x46>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ee      	bne.n	8005b5c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3307      	adds	r3, #7
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bb6:	4b34      	ldr	r3, [pc, #208]	@ (8005c88 <_HandleIncomingPacket+0xd8>)
 8005bb8:	7e1b      	ldrb	r3, [r3, #24]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	1cfb      	adds	r3, r7, #3
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f7ff fe63 	bl	800588c <SEGGER_RTT_ReadNoLock>
 8005bc6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d057      	beq.n	8005c7e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005bce:	78fb      	ldrb	r3, [r7, #3]
 8005bd0:	2b80      	cmp	r3, #128	@ 0x80
 8005bd2:	d031      	beq.n	8005c38 <_HandleIncomingPacket+0x88>
 8005bd4:	2b80      	cmp	r3, #128	@ 0x80
 8005bd6:	dc40      	bgt.n	8005c5a <_HandleIncomingPacket+0xaa>
 8005bd8:	2b07      	cmp	r3, #7
 8005bda:	dc15      	bgt.n	8005c08 <_HandleIncomingPacket+0x58>
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dd3c      	ble.n	8005c5a <_HandleIncomingPacket+0xaa>
 8005be0:	3b01      	subs	r3, #1
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d839      	bhi.n	8005c5a <_HandleIncomingPacket+0xaa>
 8005be6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <_HandleIncomingPacket+0x3c>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c0f 	.word	0x08005c0f
 8005bf0:	08005c15 	.word	0x08005c15
 8005bf4:	08005c1b 	.word	0x08005c1b
 8005bf8:	08005c21 	.word	0x08005c21
 8005bfc:	08005c27 	.word	0x08005c27
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c0a:	d033      	beq.n	8005c74 <_HandleIncomingPacket+0xc4>
 8005c0c:	e025      	b.n	8005c5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c0e:	f000 fb25 	bl	800625c <SEGGER_SYSVIEW_Start>
      break;
 8005c12:	e034      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c14:	f000 fbdc 	bl	80063d0 <SEGGER_SYSVIEW_Stop>
      break;
 8005c18:	e031      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c1a:	f000 fdb5 	bl	8006788 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c1e:	e02e      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c20:	f000 fd7a 	bl	8006718 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c24:	e02b      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c26:	f000 fbf9 	bl	800641c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c2a:	e028      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c2c:	f001 f8e6 	bl	8006dfc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c30:	e025      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c32:	f001 f8c5 	bl	8006dc0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c36:	e022      	b.n	8005c7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c38:	4b13      	ldr	r3, [pc, #76]	@ (8005c88 <_HandleIncomingPacket+0xd8>)
 8005c3a:	7e1b      	ldrb	r3, [r3, #24]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	1cfb      	adds	r3, r7, #3
 8005c40:	2201      	movs	r2, #1
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7ff fe22 	bl	800588c <SEGGER_RTT_ReadNoLock>
 8005c48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 f82a 	bl	8006cac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c58:	e00e      	b.n	8005c78 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	b25b      	sxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	da0c      	bge.n	8005c7c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c62:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <_HandleIncomingPacket+0xd8>)
 8005c64:	7e1b      	ldrb	r3, [r3, #24]
 8005c66:	4618      	mov	r0, r3
 8005c68:	1cfb      	adds	r3, r7, #3
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7ff fe0d 	bl	800588c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c72:	e003      	b.n	8005c7c <_HandleIncomingPacket+0xcc>
      break;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <_HandleIncomingPacket+0xce>
      break;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <_HandleIncomingPacket+0xce>
      break;
 8005c7c:	bf00      	nop
    }
  }
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20019734 	.word	0x20019734

08005c8c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08c      	sub	sp, #48	@ 0x30
 8005c90:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c92:	2301      	movs	r3, #1
 8005c94:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c96:	1d3b      	adds	r3, r7, #4
 8005c98:	3301      	adds	r3, #1
 8005c9a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca0:	4b31      	ldr	r3, [pc, #196]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca6:	e00b      	b.n	8005cc0 <_TrySendOverflowPacket+0x34>
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cae:	1c59      	adds	r1, r3, #1
 8005cb0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005cb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	09db      	lsrs	r3, r3, #7
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cc4:	d8f0      	bhi.n	8005ca8 <_TrySendOverflowPacket+0x1c>
 8005cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cd6:	4b25      	ldr	r3, [pc, #148]	@ (8005d6c <_TrySendOverflowPacket+0xe0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005cdc:	4b22      	ldr	r3, [pc, #136]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	623b      	str	r3, [r7, #32]
 8005cee:	e00b      	b.n	8005d08 <_TrySendOverflowPacket+0x7c>
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	6279      	str	r1, [r7, #36]	@ 0x24
 8005cfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	09db      	lsrs	r3, r3, #7
 8005d06:	623b      	str	r3, [r7, #32]
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d0c:	d8f0      	bhi.n	8005cf0 <_TrySendOverflowPacket+0x64>
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005d1e:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	4618      	mov	r0, r3
 8005d24:	1d3b      	adds	r3, r7, #4
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	4619      	mov	r1, r3
 8005d30:	f7fa fa4e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d34:	4603      	mov	r3, r0
 8005d36:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d44:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	4b06      	ldr	r3, [pc, #24]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e004      	b.n	8005d5c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d52:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	3301      	adds	r3, #1
 8005d58:	4a03      	ldr	r2, [pc, #12]	@ (8005d68 <_TrySendOverflowPacket+0xdc>)
 8005d5a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d5c:	693b      	ldr	r3, [r7, #16]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3730      	adds	r7, #48	@ 0x30
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20019734 	.word	0x20019734
 8005d6c:	e0001004 	.word	0xe0001004

08005d70 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	@ 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d7c:	4b98      	ldr	r3, [pc, #608]	@ (8005fe0 <_SendPacket+0x270>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d010      	beq.n	8005da6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d84:	4b96      	ldr	r3, [pc, #600]	@ (8005fe0 <_SendPacket+0x270>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 812d 	beq.w	8005fe8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d8e:	4b94      	ldr	r3, [pc, #592]	@ (8005fe0 <_SendPacket+0x270>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d109      	bne.n	8005daa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d96:	f7ff ff79 	bl	8005c8c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d9a:	4b91      	ldr	r3, [pc, #580]	@ (8005fe0 <_SendPacket+0x270>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	f040 8124 	bne.w	8005fec <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005da4:	e001      	b.n	8005daa <_SendPacket+0x3a>
    goto Send;
 8005da6:	bf00      	nop
 8005da8:	e000      	b.n	8005dac <_SendPacket+0x3c>
Send:
 8005daa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b1f      	cmp	r3, #31
 8005db0:	d809      	bhi.n	8005dc6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005db2:	4b8b      	ldr	r3, [pc, #556]	@ (8005fe0 <_SendPacket+0x270>)
 8005db4:	69da      	ldr	r2, [r3, #28]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 8115 	bne.w	8005ff0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b17      	cmp	r3, #23
 8005dca:	d807      	bhi.n	8005ddc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e0c4      	b.n	8005f66 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005de8:	d912      	bls.n	8005e10 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	09da      	lsrs	r2, r3, #7
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	3a01      	subs	r2, #1
 8005e02:	60fa      	str	r2, [r7, #12]
 8005e04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	e006      	b.n	8005e1e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b7e      	cmp	r3, #126	@ 0x7e
 8005e22:	d807      	bhi.n	8005e34 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e098      	b.n	8005f66 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e3a:	d212      	bcs.n	8005e62 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	09da      	lsrs	r2, r3, #7
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	3a01      	subs	r2, #1
 8005e54:	60fa      	str	r2, [r7, #12]
 8005e56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	e081      	b.n	8005f66 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e68:	d21d      	bcs.n	8005ea6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	0b9a      	lsrs	r2, r3, #14
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	b2d2      	uxtb	r2, r2
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	09db      	lsrs	r3, r3, #7
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	3a01      	subs	r2, #1
 8005e84:	60fa      	str	r2, [r7, #12]
 8005e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	3a01      	subs	r2, #1
 8005e98:	60fa      	str	r2, [r7, #12]
 8005e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e05f      	b.n	8005f66 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eac:	d228      	bcs.n	8005f00 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0d5a      	lsrs	r2, r3, #21
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0b9b      	lsrs	r3, r3, #14
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	3a01      	subs	r2, #1
 8005ec8:	60fa      	str	r2, [r7, #12]
 8005eca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	09db      	lsrs	r3, r3, #7
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	3a01      	subs	r2, #1
 8005ede:	60fa      	str	r2, [r7, #12]
 8005ee0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	3a01      	subs	r2, #1
 8005ef2:	60fa      	str	r2, [r7, #12]
 8005ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e032      	b.n	8005f66 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0f1a      	lsrs	r2, r3, #28
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	0d5b      	lsrs	r3, r3, #21
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	60fa      	str	r2, [r7, #12]
 8005f1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0b9b      	lsrs	r3, r3, #14
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	3a01      	subs	r2, #1
 8005f30:	60fa      	str	r2, [r7, #12]
 8005f32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	3a01      	subs	r2, #1
 8005f46:	60fa      	str	r2, [r7, #12]
 8005f48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	60fa      	str	r2, [r7, #12]
 8005f5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f66:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe4 <_SendPacket+0x274>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe0 <_SendPacket+0x270>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	e00b      	b.n	8005f98 <_SendPacket+0x228>
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	1c59      	adds	r1, r3, #1
 8005f88:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	09db      	lsrs	r3, r3, #7
 8005f96:	623b      	str	r3, [r7, #32]
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f9c:	d8f0      	bhi.n	8005f80 <_SendPacket+0x210>
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8005fae:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <_SendPacket+0x270>)
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	f7fa f907 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fc2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fca:	4a05      	ldr	r2, [pc, #20]	@ (8005fe0 <_SendPacket+0x270>)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	60d3      	str	r3, [r2, #12]
 8005fd0:	e00f      	b.n	8005ff2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fd2:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <_SendPacket+0x270>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b01      	ldr	r3, [pc, #4]	@ (8005fe0 <_SendPacket+0x270>)
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e008      	b.n	8005ff2 <_SendPacket+0x282>
 8005fe0:	20019734 	.word	0x20019734
 8005fe4:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005fe8:	bf00      	nop
 8005fea:	e002      	b.n	8005ff2 <_SendPacket+0x282>
      goto SendDone;
 8005fec:	bf00      	nop
 8005fee:	e000      	b.n	8005ff2 <_SendPacket+0x282>
      goto SendDone;
 8005ff0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <_SendPacket+0x2d4>)
 8005ff4:	7e1b      	ldrb	r3, [r3, #24]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4a13      	ldr	r2, [pc, #76]	@ (8006048 <_SendPacket+0x2d8>)
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	440b      	add	r3, r1
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	336c      	adds	r3, #108	@ 0x6c
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	4b0e      	ldr	r3, [pc, #56]	@ (8006044 <_SendPacket+0x2d4>)
 800600a:	7e1b      	ldrb	r3, [r3, #24]
 800600c:	4618      	mov	r0, r3
 800600e:	490e      	ldr	r1, [pc, #56]	@ (8006048 <_SendPacket+0x2d8>)
 8006010:	4603      	mov	r3, r0
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	4403      	add	r3, r0
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	3370      	adds	r3, #112	@ 0x70
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d00b      	beq.n	800603a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006022:	4b08      	ldr	r3, [pc, #32]	@ (8006044 <_SendPacket+0x2d4>)
 8006024:	789b      	ldrb	r3, [r3, #2]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d107      	bne.n	800603a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <_SendPacket+0x2d4>)
 800602c:	2201      	movs	r2, #1
 800602e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006030:	f7ff fdbe 	bl	8005bb0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006034:	4b03      	ldr	r3, [pc, #12]	@ (8006044 <_SendPacket+0x2d4>)
 8006036:	2200      	movs	r2, #0
 8006038:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800603a:	bf00      	nop
 800603c:	3728      	adds	r7, #40	@ 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20019734 	.word	0x20019734
 8006048:	20012e74 	.word	0x20012e74

0800604c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800605a:	2300      	movs	r3, #0
 800605c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8006060:	4917      	ldr	r1, [pc, #92]	@ (80060c0 <SEGGER_SYSVIEW_Init+0x74>)
 8006062:	4818      	ldr	r0, [pc, #96]	@ (80060c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006064:	f7ff fc98 	bl	8005998 <SEGGER_RTT_AllocUpBuffer>
 8006068:	4603      	mov	r3, r0
 800606a:	b2da      	uxtb	r2, r3
 800606c:	4b16      	ldr	r3, [pc, #88]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800606e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006070:	4b15      	ldr	r3, [pc, #84]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006072:	785a      	ldrb	r2, [r3, #1]
 8006074:	4b14      	ldr	r3, [pc, #80]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006076:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006078:	4b13      	ldr	r3, [pc, #76]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800607a:	7e1b      	ldrb	r3, [r3, #24]
 800607c:	4618      	mov	r0, r3
 800607e:	2300      	movs	r3, #0
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	2308      	movs	r3, #8
 8006084:	4a11      	ldr	r2, [pc, #68]	@ (80060cc <SEGGER_SYSVIEW_Init+0x80>)
 8006086:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006088:	f7ff fd0a 	bl	8005aa0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006092:	4b0f      	ldr	r3, [pc, #60]	@ (80060d0 <SEGGER_SYSVIEW_Init+0x84>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0c      	ldr	r2, [pc, #48]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006098:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800609a:	4a0b      	ldr	r2, [pc, #44]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80060a0:	4a09      	ldr	r2, [pc, #36]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80060a6:	4a08      	ldr	r2, [pc, #32]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060ac:	4a06      	ldr	r2, [pc, #24]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2001332c 	.word	0x2001332c
 80060c4:	080072c4 	.word	0x080072c4
 80060c8:	20019734 	.word	0x20019734
 80060cc:	2001972c 	.word	0x2001972c
 80060d0:	e0001004 	.word	0xe0001004

080060d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060dc:	4a04      	ldr	r2, [pc, #16]	@ (80060f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6113      	str	r3, [r2, #16]
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20019734 	.word	0x20019734

080060f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006100:	f04f 0120 	mov.w	r1, #32
 8006104:	f381 8811 	msr	BASEPRI, r1
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	4808      	ldr	r0, [pc, #32]	@ (800612c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800610c:	f7ff fd44 	bl	8005b98 <_PreparePacket>
 8006110:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68b8      	ldr	r0, [r7, #8]
 8006118:	f7ff fe2a 	bl	8005d70 <_SendPacket>
  RECORD_END();
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f383 8811 	msr	BASEPRI, r3
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20019764 	.word	0x20019764

08006130 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800613a:	f3ef 8311 	mrs	r3, BASEPRI
 800613e:	f04f 0120 	mov.w	r1, #32
 8006142:	f381 8811 	msr	BASEPRI, r1
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	4816      	ldr	r0, [pc, #88]	@ (80061a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800614a:	f7ff fd25 	bl	8005b98 <_PreparePacket>
 800614e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	e00b      	b.n	8006176 <SEGGER_SYSVIEW_RecordU32+0x46>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	1c59      	adds	r1, r3, #1
 8006166:	61f9      	str	r1, [r7, #28]
 8006168:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	09db      	lsrs	r3, r3, #7
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b7f      	cmp	r3, #127	@ 0x7f
 800617a:	d8f0      	bhi.n	800615e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	61fa      	str	r2, [r7, #28]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68f9      	ldr	r1, [r7, #12]
 8006190:	6938      	ldr	r0, [r7, #16]
 8006192:	f7ff fded 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f383 8811 	msr	BASEPRI, r3
}
 800619c:	bf00      	nop
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20019764 	.word	0x20019764

080061a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08c      	sub	sp, #48	@ 0x30
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061b4:	f3ef 8311 	mrs	r3, BASEPRI
 80061b8:	f04f 0120 	mov.w	r1, #32
 80061bc:	f381 8811 	msr	BASEPRI, r1
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	4825      	ldr	r0, [pc, #148]	@ (8006258 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80061c4:	f7ff fce8 	bl	8005b98 <_PreparePacket>
 80061c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061d6:	e00b      	b.n	80061f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ec:	09db      	lsrs	r3, r3, #7
 80061ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80061f4:	d8f0      	bhi.n	80061d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	627b      	str	r3, [r7, #36]	@ 0x24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	623b      	str	r3, [r7, #32]
 800620e:	e00b      	b.n	8006228 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	1c59      	adds	r1, r3, #1
 8006218:	6279      	str	r1, [r7, #36]	@ 0x24
 800621a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	09db      	lsrs	r3, r3, #7
 8006226:	623b      	str	r3, [r7, #32]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	2b7f      	cmp	r3, #127	@ 0x7f
 800622c:	d8f0      	bhi.n	8006210 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	627a      	str	r2, [r7, #36]	@ 0x24
 8006234:	6a3a      	ldr	r2, [r7, #32]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	6979      	ldr	r1, [r7, #20]
 8006242:	69b8      	ldr	r0, [r7, #24]
 8006244:	f7ff fd94 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
 8006250:	3730      	adds	r7, #48	@ 0x30
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20019764 	.word	0x20019764

0800625c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	@ 0x30
 8006260:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006262:	4b58      	ldr	r3, [pc, #352]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	f04f 0120 	mov.w	r1, #32
 8006270:	f381 8811 	msr	BASEPRI, r1
 8006274:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006276:	4b53      	ldr	r3, [pc, #332]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	220a      	movs	r2, #10
 800627c:	4952      	ldr	r1, [pc, #328]	@ (80063c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800627e:	4618      	mov	r0, r3
 8006280:	f7f9 ffa6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800628a:	200a      	movs	r0, #10
 800628c:	f7ff ff32 	bl	80060f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006290:	f3ef 8311 	mrs	r3, BASEPRI
 8006294:	f04f 0120 	mov.w	r1, #32
 8006298:	f381 8811 	msr	BASEPRI, r1
 800629c:	60bb      	str	r3, [r7, #8]
 800629e:	484b      	ldr	r0, [pc, #300]	@ (80063cc <SEGGER_SYSVIEW_Start+0x170>)
 80062a0:	f7ff fc7a 	bl	8005b98 <_PreparePacket>
 80062a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ae:	4b45      	ldr	r3, [pc, #276]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062b4:	e00b      	b.n	80062ce <SEGGER_SYSVIEW_Start+0x72>
 80062b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062bc:	1c59      	adds	r1, r3, #1
 80062be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	09db      	lsrs	r3, r3, #7
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d2:	d8f0      	bhi.n	80062b6 <SEGGER_SYSVIEW_Start+0x5a>
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e8:	4b36      	ldr	r3, [pc, #216]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e00b      	b.n	8006308 <SEGGER_SYSVIEW_Start+0xac>
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80062fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b7f      	cmp	r3, #127	@ 0x7f
 800630c:	d8f0      	bhi.n	80062f0 <SEGGER_SYSVIEW_Start+0x94>
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	627a      	str	r2, [r7, #36]	@ 0x24
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	61fb      	str	r3, [r7, #28]
 8006322:	4b28      	ldr	r3, [pc, #160]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e00b      	b.n	8006342 <SEGGER_SYSVIEW_Start+0xe6>
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	b2da      	uxtb	r2, r3
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	61f9      	str	r1, [r7, #28]
 8006334:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	09db      	lsrs	r3, r3, #7
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b7f      	cmp	r3, #127	@ 0x7f
 8006346:	d8f0      	bhi.n	800632a <SEGGER_SYSVIEW_Start+0xce>
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	61fa      	str	r2, [r7, #28]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e00b      	b.n	800637a <SEGGER_SYSVIEW_Start+0x11e>
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	1c59      	adds	r1, r3, #1
 800636a:	6179      	str	r1, [r7, #20]
 800636c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	09db      	lsrs	r3, r3, #7
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b7f      	cmp	r3, #127	@ 0x7f
 800637e:	d8f0      	bhi.n	8006362 <SEGGER_SYSVIEW_Start+0x106>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	617a      	str	r2, [r7, #20]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006390:	2218      	movs	r2, #24
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f7ff fceb 	bl	8005d70 <_SendPacket>
      RECORD_END();
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80063a0:	4b08      	ldr	r3, [pc, #32]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80063a8:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <SEGGER_SYSVIEW_Start+0x168>)
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80063ae:	f000 f9eb 	bl	8006788 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80063b2:	f000 f9b1 	bl	8006718 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80063b6:	f000 fd21 	bl	8006dfc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80063ba:	bf00      	nop
 80063bc:	3730      	adds	r7, #48	@ 0x30
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20019734 	.word	0x20019734
 80063c8:	08007350 	.word	0x08007350
 80063cc:	20019764 	.word	0x20019764

080063d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063d6:	f3ef 8311 	mrs	r3, BASEPRI
 80063da:	f04f 0120 	mov.w	r1, #32
 80063de:	f381 8811 	msr	BASEPRI, r1
 80063e2:	607b      	str	r3, [r7, #4]
 80063e4:	480b      	ldr	r0, [pc, #44]	@ (8006414 <SEGGER_SYSVIEW_Stop+0x44>)
 80063e6:	f7ff fbd7 	bl	8005b98 <_PreparePacket>
 80063ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <SEGGER_SYSVIEW_Stop+0x48>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063f4:	220b      	movs	r2, #11
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6838      	ldr	r0, [r7, #0]
 80063fa:	f7ff fcb9 	bl	8005d70 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <SEGGER_SYSVIEW_Stop+0x48>)
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f383 8811 	msr	BASEPRI, r3
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20019764 	.word	0x20019764
 8006418:	20019734 	.word	0x20019734

0800641c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	@ 0x30
 8006420:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006422:	f3ef 8311 	mrs	r3, BASEPRI
 8006426:	f04f 0120 	mov.w	r1, #32
 800642a:	f381 8811 	msr	BASEPRI, r1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	4845      	ldr	r0, [pc, #276]	@ (8006548 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006432:	f7ff fbb1 	bl	8005b98 <_PreparePacket>
 8006436:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006440:	4b42      	ldr	r3, [pc, #264]	@ (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006446:	e00b      	b.n	8006460 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	b2da      	uxtb	r2, r3
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006452:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645c:	09db      	lsrs	r3, r3, #7
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006462:	2b7f      	cmp	r3, #127	@ 0x7f
 8006464:	d8f0      	bhi.n	8006448 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800646c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
 800647a:	4b34      	ldr	r3, [pc, #208]	@ (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	623b      	str	r3, [r7, #32]
 8006480:	e00b      	b.n	800649a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	1c59      	adds	r1, r3, #1
 800648a:	6279      	str	r1, [r7, #36]	@ 0x24
 800648c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	09db      	lsrs	r3, r3, #7
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	2b7f      	cmp	r3, #127	@ 0x7f
 800649e:	d8f0      	bhi.n	8006482 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80064a6:	6a3a      	ldr	r2, [r7, #32]
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	61fb      	str	r3, [r7, #28]
 80064b4:	4b25      	ldr	r3, [pc, #148]	@ (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e00b      	b.n	80064d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	1c59      	adds	r1, r3, #1
 80064c4:	61f9      	str	r1, [r7, #28]
 80064c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	09db      	lsrs	r3, r3, #7
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064d8:	d8f0      	bhi.n	80064bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	61fa      	str	r2, [r7, #28]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	e00b      	b.n	800650c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	1c59      	adds	r1, r3, #1
 80064fc:	6179      	str	r1, [r7, #20]
 80064fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	09db      	lsrs	r3, r3, #7
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006510:	d8f0      	bhi.n	80064f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	617a      	str	r2, [r7, #20]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006522:	2218      	movs	r2, #24
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f7ff fc22 	bl	8005d70 <_SendPacket>
  RECORD_END();
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006532:	4b06      	ldr	r3, [pc, #24]	@ (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800653a:	4b04      	ldr	r3, [pc, #16]	@ (800654c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800653c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653e:	4798      	blx	r3
  }
}
 8006540:	bf00      	nop
 8006542:	3730      	adds	r7, #48	@ 0x30
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20019764 	.word	0x20019764
 800654c:	20019734 	.word	0x20019734

08006550 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b092      	sub	sp, #72	@ 0x48
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006558:	f3ef 8311 	mrs	r3, BASEPRI
 800655c:	f04f 0120 	mov.w	r1, #32
 8006560:	f381 8811 	msr	BASEPRI, r1
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	486a      	ldr	r0, [pc, #424]	@ (8006710 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006568:	f7ff fb16 	bl	8005b98 <_PreparePacket>
 800656c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	647b      	str	r3, [r7, #68]	@ 0x44
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b66      	ldr	r3, [pc, #408]	@ (8006714 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	643b      	str	r3, [r7, #64]	@ 0x40
 8006582:	e00b      	b.n	800659c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006586:	b2da      	uxtb	r2, r3
 8006588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	6479      	str	r1, [r7, #68]	@ 0x44
 800658e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006598:	09db      	lsrs	r3, r3, #7
 800659a:	643b      	str	r3, [r7, #64]	@ 0x40
 800659c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800659e:	2b7f      	cmp	r3, #127	@ 0x7f
 80065a0:	d8f0      	bhi.n	8006584 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80065a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80065a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065bc:	e00b      	b.n	80065d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c4:	1c59      	adds	r1, r3, #1
 80065c6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80065c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	09db      	lsrs	r3, r3, #7
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065da:	d8f0      	bhi.n	80065be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	4619      	mov	r1, r3
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fa9f 	bl	8005b38 <_EncodeStr>
 80065fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065fc:	2209      	movs	r2, #9
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	6938      	ldr	r0, [r7, #16]
 8006602:	f7ff fbb5 	bl	8005d70 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b40      	ldr	r3, [pc, #256]	@ (8006714 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	633b      	str	r3, [r7, #48]	@ 0x30
 800661a:	e00b      	b.n	8006634 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800661c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661e:	b2da      	uxtb	r2, r3
 8006620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	6379      	str	r1, [r7, #52]	@ 0x34
 8006626:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	09db      	lsrs	r3, r3, #7
 8006632:	633b      	str	r3, [r7, #48]	@ 0x30
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	2b7f      	cmp	r3, #127	@ 0x7f
 8006638:	d8f0      	bhi.n	800661c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800663a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006654:	e00b      	b.n	800666e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	b2da      	uxtb	r2, r3
 800665a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665c:	1c59      	adds	r1, r3, #1
 800665e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006660:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	09db      	lsrs	r3, r3, #7
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	2b7f      	cmp	r3, #127	@ 0x7f
 8006672:	d8f0      	bhi.n	8006656 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800667a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006682:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	627b      	str	r3, [r7, #36]	@ 0x24
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	623b      	str	r3, [r7, #32]
 800668e:	e00b      	b.n	80066a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	6279      	str	r1, [r7, #36]	@ 0x24
 800669a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	09db      	lsrs	r3, r3, #7
 80066a6:	623b      	str	r3, [r7, #32]
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ac:	d8f0      	bhi.n	8006690 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80066b4:	6a3a      	ldr	r2, [r7, #32]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e00b      	b.n	80066e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	61f9      	str	r1, [r7, #28]
 80066d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	09db      	lsrs	r3, r3, #7
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066e4:	d8f0      	bhi.n	80066c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	61fa      	str	r2, [r7, #28]
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066f6:	2215      	movs	r2, #21
 80066f8:	68f9      	ldr	r1, [r7, #12]
 80066fa:	6938      	ldr	r0, [r7, #16]
 80066fc:	f7ff fb38 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f383 8811 	msr	BASEPRI, r3
}
 8006706:	bf00      	nop
 8006708:	3748      	adds	r7, #72	@ 0x48
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20019764 	.word	0x20019764
 8006714:	20019734 	.word	0x20019734

08006718 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800671c:	4b07      	ldr	r3, [pc, #28]	@ (800673c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800672e:	4b03      	ldr	r3, [pc, #12]	@ (800673c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	4798      	blx	r3
  }
}
 8006736:	bf00      	nop
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20019734 	.word	0x20019734

08006740 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006748:	f3ef 8311 	mrs	r3, BASEPRI
 800674c:	f04f 0120 	mov.w	r1, #32
 8006750:	f381 8811 	msr	BASEPRI, r1
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	480b      	ldr	r0, [pc, #44]	@ (8006784 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006758:	f7ff fa1e 	bl	8005b98 <_PreparePacket>
 800675c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800675e:	2280      	movs	r2, #128	@ 0x80
 8006760:	6879      	ldr	r1, [r7, #4]
 8006762:	6938      	ldr	r0, [r7, #16]
 8006764:	f7ff f9e8 	bl	8005b38 <_EncodeStr>
 8006768:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800676a:	220e      	movs	r2, #14
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	6938      	ldr	r0, [r7, #16]
 8006770:	f7ff fafe 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f383 8811 	msr	BASEPRI, r3
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20019764 	.word	0x20019764

08006788 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800678e:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01a      	beq.n	80067cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006796:	4b13      	ldr	r3, [pc, #76]	@ (80067e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d015      	beq.n	80067cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80067a0:	4b10      	ldr	r3, [pc, #64]	@ (80067e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4798      	blx	r3
 80067a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80067ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	000a      	movs	r2, r1
 80067bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067be:	4613      	mov	r3, r2
 80067c0:	461a      	mov	r2, r3
 80067c2:	4621      	mov	r1, r4
 80067c4:	200d      	movs	r0, #13
 80067c6:	f7ff fcef 	bl	80061a8 <SEGGER_SYSVIEW_RecordU32x2>
 80067ca:	e006      	b.n	80067da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4619      	mov	r1, r3
 80067d2:	200c      	movs	r0, #12
 80067d4:	f7ff fcac 	bl	8006130 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20019734 	.word	0x20019734
 80067e8:	e0001004 	.word	0xe0001004

080067ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067f2:	f3ef 8311 	mrs	r3, BASEPRI
 80067f6:	f04f 0120 	mov.w	r1, #32
 80067fa:	f381 8811 	msr	BASEPRI, r1
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	4819      	ldr	r0, [pc, #100]	@ (8006868 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006802:	f7ff f9c9 	bl	8005b98 <_PreparePacket>
 8006806:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800680c:	4b17      	ldr	r3, [pc, #92]	@ (800686c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e00b      	b.n	8006838 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	6179      	str	r1, [r7, #20]
 800682a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	09db      	lsrs	r3, r3, #7
 8006836:	613b      	str	r3, [r7, #16]
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b7f      	cmp	r3, #127	@ 0x7f
 800683c:	d8f0      	bhi.n	8006820 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	617a      	str	r2, [r7, #20]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800684e:	2202      	movs	r2, #2
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	f7ff fa8c 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f383 8811 	msr	BASEPRI, r3
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20019764 	.word	0x20019764
 800686c:	e000ed04 	.word	0xe000ed04

08006870 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006876:	f3ef 8311 	mrs	r3, BASEPRI
 800687a:	f04f 0120 	mov.w	r1, #32
 800687e:	f381 8811 	msr	BASEPRI, r1
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	4807      	ldr	r0, [pc, #28]	@ (80068a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006886:	f7ff f987 	bl	8005b98 <_PreparePacket>
 800688a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800688c:	2203      	movs	r2, #3
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f7ff fa6d 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20019764 	.word	0x20019764

080068a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	f04f 0120 	mov.w	r1, #32
 80068b6:	f381 8811 	msr	BASEPRI, r1
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	4807      	ldr	r0, [pc, #28]	@ (80068dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80068be:	f7ff f96b 	bl	8005b98 <_PreparePacket>
 80068c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80068c4:	2212      	movs	r2, #18
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6838      	ldr	r0, [r7, #0]
 80068ca:	f7ff fa51 	bl	8005d70 <_SendPacket>
  RECORD_END();
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f383 8811 	msr	BASEPRI, r3
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20019764 	.word	0x20019764

080068e0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068e8:	f3ef 8311 	mrs	r3, BASEPRI
 80068ec:	f04f 0120 	mov.w	r1, #32
 80068f0:	f381 8811 	msr	BASEPRI, r1
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	4817      	ldr	r0, [pc, #92]	@ (8006954 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80068f8:	f7ff f94e 	bl	8005b98 <_PreparePacket>
 80068fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	61f9      	str	r1, [r7, #28]
 8006916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b7f      	cmp	r3, #127	@ 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	61fa      	str	r2, [r7, #28]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800693a:	221c      	movs	r2, #28
 800693c:	68f9      	ldr	r1, [r7, #12]
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f7ff fa16 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f383 8811 	msr	BASEPRI, r3
}
 800694a:	bf00      	nop
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20019764 	.word	0x20019764

08006958 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006962:	f3ef 8311 	mrs	r3, BASEPRI
 8006966:	f04f 0120 	mov.w	r1, #32
 800696a:	f381 8811 	msr	BASEPRI, r1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	4824      	ldr	r0, [pc, #144]	@ (8006a04 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006972:	f7ff f911 	bl	8005b98 <_PreparePacket>
 8006976:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	623b      	str	r3, [r7, #32]
 8006984:	e00b      	b.n	800699e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006990:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	09db      	lsrs	r3, r3, #7
 800699c:	623b      	str	r3, [r7, #32]
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a2:	d8f0      	bhi.n	8006986 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80069aa:	6a3a      	ldr	r2, [r7, #32]
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e00b      	b.n	80069d6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	1c59      	adds	r1, r3, #1
 80069c6:	61f9      	str	r1, [r7, #28]
 80069c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	09db      	lsrs	r3, r3, #7
 80069d4:	61bb      	str	r3, [r7, #24]
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80069da:	d8f0      	bhi.n	80069be <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	61fa      	str	r2, [r7, #28]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	b2d2      	uxtb	r2, r2
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80069ec:	221c      	movs	r2, #28
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6938      	ldr	r0, [r7, #16]
 80069f2:	f7ff f9bd 	bl	8005d70 <_SendPacket>
  RECORD_END();
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f383 8811 	msr	BASEPRI, r3
}
 80069fc:	bf00      	nop
 80069fe:	3728      	adds	r7, #40	@ 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20019764 	.word	0x20019764

08006a08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a12:	f04f 0120 	mov.w	r1, #32
 8006a16:	f381 8811 	msr	BASEPRI, r1
 8006a1a:	607b      	str	r3, [r7, #4]
 8006a1c:	4807      	ldr	r0, [pc, #28]	@ (8006a3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a1e:	f7ff f8bb 	bl	8005b98 <_PreparePacket>
 8006a22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a24:	2211      	movs	r2, #17
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6838      	ldr	r0, [r7, #0]
 8006a2a:	f7ff f9a1 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	20019764 	.word	0x20019764

08006a40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a48:	f3ef 8311 	mrs	r3, BASEPRI
 8006a4c:	f04f 0120 	mov.w	r1, #32
 8006a50:	f381 8811 	msr	BASEPRI, r1
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	4819      	ldr	r0, [pc, #100]	@ (8006abc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a58:	f7ff f89e 	bl	8005b98 <_PreparePacket>
 8006a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a62:	4b17      	ldr	r3, [pc, #92]	@ (8006ac0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e00b      	b.n	8006a8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	61f9      	str	r1, [r7, #28]
 8006a80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a92:	d8f0      	bhi.n	8006a76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	61fa      	str	r2, [r7, #28]
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	6938      	ldr	r0, [r7, #16]
 8006aaa:	f7ff f961 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f383 8811 	msr	BASEPRI, r3
}
 8006ab4:	bf00      	nop
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	20019764 	.word	0x20019764
 8006ac0:	20019734 	.word	0x20019734

08006ac4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006acc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad0:	f04f 0120 	mov.w	r1, #32
 8006ad4:	f381 8811 	msr	BASEPRI, r1
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	4819      	ldr	r0, [pc, #100]	@ (8006b40 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006adc:	f7ff f85c 	bl	8005b98 <_PreparePacket>
 8006ae0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ae6:	4b17      	ldr	r3, [pc, #92]	@ (8006b44 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	e00b      	b.n	8006b12 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	1c59      	adds	r1, r3, #1
 8006b02:	61f9      	str	r1, [r7, #28]
 8006b04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	701a      	strb	r2, [r3, #0]
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	09db      	lsrs	r3, r3, #7
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b16:	d8f0      	bhi.n	8006afa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	61fa      	str	r2, [r7, #28]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b28:	2204      	movs	r2, #4
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	6938      	ldr	r0, [r7, #16]
 8006b2e:	f7ff f91f 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f383 8811 	msr	BASEPRI, r3
}
 8006b38:	bf00      	nop
 8006b3a:	3720      	adds	r7, #32
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20019764 	.word	0x20019764
 8006b44:	20019734 	.word	0x20019734

08006b48 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b50:	f3ef 8311 	mrs	r3, BASEPRI
 8006b54:	f04f 0120 	mov.w	r1, #32
 8006b58:	f381 8811 	msr	BASEPRI, r1
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	4819      	ldr	r0, [pc, #100]	@ (8006bc4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b60:	f7ff f81a 	bl	8005b98 <_PreparePacket>
 8006b64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b6a:	4b17      	ldr	r3, [pc, #92]	@ (8006bc8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	61f9      	str	r1, [r7, #28]
 8006b88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	61fa      	str	r2, [r7, #28]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006bac:	2206      	movs	r2, #6
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	6938      	ldr	r0, [r7, #16]
 8006bb2:	f7ff f8dd 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20019764 	.word	0x20019764
 8006bc8:	20019734 	.word	0x20019734

08006bcc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	@ 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006bda:	f04f 0120 	mov.w	r1, #32
 8006bde:	f381 8811 	msr	BASEPRI, r1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	4827      	ldr	r0, [pc, #156]	@ (8006c84 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006be6:	f7fe ffd7 	bl	8005b98 <_PreparePacket>
 8006bea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bf0:	4b25      	ldr	r3, [pc, #148]	@ (8006c88 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	623b      	str	r3, [r7, #32]
 8006c02:	e00b      	b.n	8006c1c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	1c59      	adds	r1, r3, #1
 8006c0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	09db      	lsrs	r3, r3, #7
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c20:	d8f0      	bhi.n	8006c04 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c28:	6a3a      	ldr	r2, [r7, #32]
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	e00b      	b.n	8006c54 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	1c59      	adds	r1, r3, #1
 8006c44:	61f9      	str	r1, [r7, #28]
 8006c46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	09db      	lsrs	r3, r3, #7
 8006c52:	61bb      	str	r3, [r7, #24]
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c58:	d8f0      	bhi.n	8006c3c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	61fa      	str	r2, [r7, #28]
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c6a:	2207      	movs	r2, #7
 8006c6c:	68f9      	ldr	r1, [r7, #12]
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f7ff f87e 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f383 8811 	msr	BASEPRI, r3
}
 8006c7a:	bf00      	nop
 8006c7c:	3728      	adds	r7, #40	@ 0x28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20019764 	.word	0x20019764
 8006c88:	20019734 	.word	0x20019734

08006c8c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c94:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	1ad3      	subs	r3, r2, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	20019734 	.word	0x20019734

08006cac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	@ 0x30
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006cb6:	4b40      	ldr	r3, [pc, #256]	@ (8006db8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d077      	beq.n	8006dae <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8006db8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc8:	e008      	b.n	8006cdc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d007      	beq.n	8006ce6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	3301      	adds	r3, #1
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3f2      	bcc.n	8006cca <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ce4:	e000      	b.n	8006ce8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ce6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d055      	beq.n	8006d9a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cee:	f3ef 8311 	mrs	r3, BASEPRI
 8006cf2:	f04f 0120 	mov.w	r1, #32
 8006cf6:	f381 8811 	msr	BASEPRI, r1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	482f      	ldr	r0, [pc, #188]	@ (8006dbc <SEGGER_SYSVIEW_SendModule+0x110>)
 8006cfe:	f7fe ff4b 	bl	8005b98 <_PreparePacket>
 8006d02:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	623b      	str	r3, [r7, #32]
 8006d10:	e00b      	b.n	8006d2a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	623b      	str	r3, [r7, #32]
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d2e:	d8f0      	bhi.n	8006d12 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d36:	6a3a      	ldr	r2, [r7, #32]
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e00b      	b.n	8006d64 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1c59      	adds	r1, r3, #1
 8006d54:	61f9      	str	r1, [r7, #28]
 8006d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	09db      	lsrs	r3, r3, #7
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d68:	d8f0      	bhi.n	8006d4c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	61fa      	str	r2, [r7, #28]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2280      	movs	r2, #128	@ 0x80
 8006d80:	4619      	mov	r1, r3
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7fe fed8 	bl	8005b38 <_EncodeStr>
 8006d88:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d8a:	2216      	movs	r2, #22
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	6938      	ldr	r0, [r7, #16]
 8006d90:	f7fe ffee 	bl	8005d70 <_SendPacket>
      RECORD_END();
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <SEGGER_SYSVIEW_SendModule+0x102>
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4798      	blx	r3
    }
  }
}
 8006dae:	bf00      	nop
 8006db0:	3730      	adds	r7, #48	@ 0x30
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	2001975c 	.word	0x2001975c
 8006dbc:	20019764 	.word	0x20019764

08006dc0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00f      	beq.n	8006dee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006dce:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f2      	bne.n	8006dd4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2001975c 	.word	0x2001975c

08006dfc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006e02:	f3ef 8311 	mrs	r3, BASEPRI
 8006e06:	f04f 0120 	mov.w	r1, #32
 8006e0a:	f381 8811 	msr	BASEPRI, r1
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	4817      	ldr	r0, [pc, #92]	@ (8006e70 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006e12:	f7fe fec1 	bl	8005b98 <_PreparePacket>
 8006e16:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	4b14      	ldr	r3, [pc, #80]	@ (8006e74 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e00b      	b.n	8006e40 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1c59      	adds	r1, r3, #1
 8006e30:	6179      	str	r1, [r7, #20]
 8006e32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	09db      	lsrs	r3, r3, #7
 8006e3e:	613b      	str	r3, [r7, #16]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e44:	d8f0      	bhi.n	8006e28 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	617a      	str	r2, [r7, #20]
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e56:	221b      	movs	r2, #27
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	68b8      	ldr	r0, [r7, #8]
 8006e5c:	f7fe ff88 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f383 8811 	msr	BASEPRI, r3
}
 8006e66:	bf00      	nop
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20019764 	.word	0x20019764
 8006e74:	20019760 	.word	0x20019760

08006e78 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	@ 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e80:	f3ef 8311 	mrs	r3, BASEPRI
 8006e84:	f04f 0120 	mov.w	r1, #32
 8006e88:	f381 8811 	msr	BASEPRI, r1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	4827      	ldr	r0, [pc, #156]	@ (8006f2c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e90:	f7fe fe82 	bl	8005b98 <_PreparePacket>
 8006e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e96:	2280      	movs	r2, #128	@ 0x80
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f7fe fe4c 	bl	8005b38 <_EncodeStr>
 8006ea0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e00b      	b.n	8006ec4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006eb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	09db      	lsrs	r3, r3, #7
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec8:	d8f0      	bhi.n	8006eac <SEGGER_SYSVIEW_Warn+0x34>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e00b      	b.n	8006efc <SEGGER_SYSVIEW_Warn+0x84>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	61f9      	str	r1, [r7, #28]
 8006eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f00:	d8f0      	bhi.n	8006ee4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	61fa      	str	r2, [r7, #28]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f12:	221a      	movs	r2, #26
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	6938      	ldr	r0, [r7, #16]
 8006f18:	f7fe ff2a 	bl	8005d70 <_SendPacket>
  RECORD_END();
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
}
 8006f22:	bf00      	nop
 8006f24:	3728      	adds	r7, #40	@ 0x28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20019764 	.word	0x20019764

08006f30 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006f36:	2300      	movs	r3, #0
 8006f38:	607b      	str	r3, [r7, #4]
 8006f3a:	e033      	b.n	8006fa4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006f3c:	491e      	ldr	r1, [pc, #120]	@ (8006fb8 <_cbSendTaskList+0x88>)
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	491a      	ldr	r1, [pc, #104]	@ (8006fb8 <_cbSendTaskList+0x88>)
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	4c16      	ldr	r4, [pc, #88]	@ (8006fb8 <_cbSendTaskList+0x88>)
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4613      	mov	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4423      	add	r3, r4
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	681c      	ldr	r4, [r3, #0]
 8006f70:	4d11      	ldr	r5, [pc, #68]	@ (8006fb8 <_cbSendTaskList+0x88>)
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	442b      	add	r3, r5
 8006f7e:	330c      	adds	r3, #12
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	4e0d      	ldr	r6, [pc, #52]	@ (8006fb8 <_cbSendTaskList+0x88>)
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4433      	add	r3, r6
 8006f90:	3310      	adds	r3, #16
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	462b      	mov	r3, r5
 8006f98:	4622      	mov	r2, r4
 8006f9a:	f000 f8bd 	bl	8007118 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <_cbSendTaskList+0x8c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d3c6      	bcc.n	8006f3c <_cbSendTaskList+0xc>
  }
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb8:	20019848 	.word	0x20019848
 8006fbc:	200198e8 	.word	0x200198e8

08006fc0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006fc8:	f7fc fe78 	bl	8003cbc <xTaskGetTickCountFromISR>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2200      	movs	r2, #0
 8006fd0:	469a      	mov	sl, r3
 8006fd2:	4693      	mov	fp, r2
 8006fd4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	f04f 0a00 	mov.w	sl, #0
 8006fe4:	f04f 0b00 	mov.w	fp, #0
 8006fe8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8006fec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8006ff0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	1a14      	subs	r4, r2, r0
 8006ffa:	eb63 0501 	sbc.w	r5, r3, r1
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	00ab      	lsls	r3, r5, #2
 8007008:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800700c:	00a2      	lsls	r2, r4, #2
 800700e:	4614      	mov	r4, r2
 8007010:	461d      	mov	r5, r3
 8007012:	eb14 0800 	adds.w	r8, r4, r0
 8007016:	eb45 0901 	adc.w	r9, r5, r1
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800702a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800702e:	4690      	mov	r8, r2
 8007030:	4699      	mov	r9, r3
 8007032:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007036:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007048 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007056:	2205      	movs	r2, #5
 8007058:	492b      	ldr	r1, [pc, #172]	@ (8007108 <SYSVIEW_AddTask+0xc0>)
 800705a:	68b8      	ldr	r0, [r7, #8]
 800705c:	f000 f87d 	bl	800715a <memcmp>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d04b      	beq.n	80070fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007066:	4b29      	ldr	r3, [pc, #164]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b07      	cmp	r3, #7
 800706c:	d903      	bls.n	8007076 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800706e:	4828      	ldr	r0, [pc, #160]	@ (8007110 <SYSVIEW_AddTask+0xc8>)
 8007070:	f7ff ff02 	bl	8006e78 <SEGGER_SYSVIEW_Warn>
    return;
 8007074:	e044      	b.n	8007100 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007076:	4b25      	ldr	r3, [pc, #148]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4926      	ldr	r1, [pc, #152]	@ (8007114 <SYSVIEW_AddTask+0xcc>)
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800708a:	4b20      	ldr	r3, [pc, #128]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4921      	ldr	r1, [pc, #132]	@ (8007114 <SYSVIEW_AddTask+0xcc>)
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	3304      	adds	r3, #4
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80070a0:	4b1a      	ldr	r3, [pc, #104]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	491b      	ldr	r1, [pc, #108]	@ (8007114 <SYSVIEW_AddTask+0xcc>)
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	440b      	add	r3, r1
 80070b0:	3308      	adds	r3, #8
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80070b6:	4b15      	ldr	r3, [pc, #84]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4916      	ldr	r1, [pc, #88]	@ (8007114 <SYSVIEW_AddTask+0xcc>)
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	330c      	adds	r3, #12
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80070cc:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	4910      	ldr	r1, [pc, #64]	@ (8007114 <SYSVIEW_AddTask+0xcc>)
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	440b      	add	r3, r1
 80070dc:	3310      	adds	r3, #16
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80070e2:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	4a08      	ldr	r2, [pc, #32]	@ (800710c <SYSVIEW_AddTask+0xc4>)
 80070ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 f80e 	bl	8007118 <SYSVIEW_SendTaskInfo>
 80070fc:	e000      	b.n	8007100 <SYSVIEW_AddTask+0xb8>
    return;
 80070fe:	bf00      	nop

}
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	080072cc 	.word	0x080072cc
 800710c:	200198e8 	.word	0x200198e8
 8007110:	080072d4 	.word	0x080072d4
 8007114:	20019848 	.word	0x20019848

08007118 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	@ 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007126:	f107 0314 	add.w	r3, r7, #20
 800712a:	2214      	movs	r2, #20
 800712c:	2100      	movs	r1, #0
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f823 	bl	800717a <memset>
  TaskInfo.TaskID     = TaskID;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007148:	f107 0314 	add.w	r3, r7, #20
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff f9ff 	bl	8006550 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007152:	bf00      	nop
 8007154:	3728      	adds	r7, #40	@ 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <memcmp>:
 800715a:	b510      	push	{r4, lr}
 800715c:	3901      	subs	r1, #1
 800715e:	4402      	add	r2, r0
 8007160:	4290      	cmp	r0, r2
 8007162:	d101      	bne.n	8007168 <memcmp+0xe>
 8007164:	2000      	movs	r0, #0
 8007166:	e005      	b.n	8007174 <memcmp+0x1a>
 8007168:	7803      	ldrb	r3, [r0, #0]
 800716a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800716e:	42a3      	cmp	r3, r4
 8007170:	d001      	beq.n	8007176 <memcmp+0x1c>
 8007172:	1b18      	subs	r0, r3, r4
 8007174:	bd10      	pop	{r4, pc}
 8007176:	3001      	adds	r0, #1
 8007178:	e7f2      	b.n	8007160 <memcmp+0x6>

0800717a <memset>:
 800717a:	4402      	add	r2, r0
 800717c:	4603      	mov	r3, r0
 800717e:	4293      	cmp	r3, r2
 8007180:	d100      	bne.n	8007184 <memset+0xa>
 8007182:	4770      	bx	lr
 8007184:	f803 1b01 	strb.w	r1, [r3], #1
 8007188:	e7f9      	b.n	800717e <memset+0x4>
	...

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	@ (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	@ (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	@ (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	@ (80071d0 <__libc_init_array+0x44>)
 80071a0:	f000 f826 	bl	80071f0 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800736c 	.word	0x0800736c
 80071c8:	0800736c 	.word	0x0800736c
 80071cc:	0800736c 	.word	0x0800736c
 80071d0:	08007370 	.word	0x08007370

080071d4 <memcpy>:
 80071d4:	440a      	add	r2, r1
 80071d6:	4291      	cmp	r1, r2
 80071d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071dc:	d100      	bne.n	80071e0 <memcpy+0xc>
 80071de:	4770      	bx	lr
 80071e0:	b510      	push	{r4, lr}
 80071e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ea:	4291      	cmp	r1, r2
 80071ec:	d1f9      	bne.n	80071e2 <memcpy+0xe>
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
