
App_015_Example_5.3_Using_a_Queue_Set.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00006588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005594  08005594  00006594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005598  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00012e60  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e74  20012e74  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001268c  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a47  00000000  00000000  000196d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  0001c118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8f  00000000  00000000  0001d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000201a3  00000000  00000000  0001dff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e3d  00000000  00000000  0003e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e07  00000000  00000000  00051fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bdde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048d8  00000000  00000000  0012be24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001306fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054ec 	.word	0x080054ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080054ec 	.word	0x080054ec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f103 0208 	add.w	r2, r3, #8
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f04f 32ff 	mov.w	r2, #4294967295
 80004d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800051a:	b480      	push	{r7}
 800051c:	b085      	sub	sp, #20
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
 8000522:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d103      	bne.n	800053a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e00c      	b.n	8000554 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3308      	adds	r3, #8
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e002      	b.n	8000548 <vListInsert+0x2e>
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	d2f6      	bcs.n	8000542 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	683a      	ldr	r2, [r7, #0]
 800056e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6892      	ldr	r2, [r2, #8]
 80005a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6852      	ldr	r2, [r2, #4]
 80005ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d103      	bne.n	80005c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1e5a      	subs	r2, r3, #1
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10b      	bne.n	8000610 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d05d      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800061a:	2b00      	cmp	r3, #0
 800061c:	d059      	beq.n	80006d2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000626:	2100      	movs	r1, #0
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d000      	beq.n	8000632 <xQueueGenericReset+0x52>
 8000630:	2101      	movs	r1, #1
 8000632:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14c      	bne.n	80006d2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000638:	f002 fa04 	bl	8002a44 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	693b      	ldr	r3, [r7, #16]
 8000642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000648:	fb01 f303 	mul.w	r3, r1, r3
 800064c:	441a      	add	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000658:	693b      	ldr	r3, [r7, #16]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	693b      	ldr	r3, [r7, #16]
 8000666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000668:	3b01      	subs	r3, #1
 800066a:	6939      	ldr	r1, [r7, #16]
 800066c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800066e:	fb01 f303 	mul.w	r3, r1, r3
 8000672:	441a      	add	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	22ff      	movs	r2, #255	@ 0xff
 800067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	22ff      	movs	r2, #255	@ 0xff
 8000684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d114      	bne.n	80006b8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	691b      	ldr	r3, [r3, #16]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	3310      	adds	r3, #16
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fa62 	bl	8001b64 <xTaskRemoveFromEventList>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <xQueueGenericReset+0x120>)
 80006a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	e009      	b.n	80006cc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3310      	adds	r3, #16
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff feff 	bl	80004c0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3324      	adds	r3, #36	@ 0x24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fefa 	bl	80004c0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80006cc:	f002 f9ec 	bl	8002aa8 <vPortExitCritical>
 80006d0:	e001      	b.n	80006d6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10b      	bne.n	80006f4 <xQueueGenericReset+0x114>
    __asm volatile
 80006dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	60bb      	str	r3, [r7, #8]
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80006f4:	697b      	ldr	r3, [r7, #20]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed04 	.word	0xe000ed04

08000704 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	4613      	mov	r3, r2
 8000710:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d02e      	beq.n	800077a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800071c:	2100      	movs	r1, #0
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fba3 2302 	umull	r2, r3, r3, r2
 8000726:	2b00      	cmp	r3, #0
 8000728:	d000      	beq.n	800072c <xQueueGenericCreate+0x28>
 800072a:	2101      	movs	r1, #1
 800072c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800072e:	2b00      	cmp	r3, #0
 8000730:	d123      	bne.n	800077a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800073a:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 800073e:	d81c      	bhi.n	800077a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	3354      	adds	r3, #84	@ 0x54
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fa5c 	bl	8002c0c <pvPortMalloc>
 8000754:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d01d      	beq.n	8000798 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3354      	adds	r3, #84	@ 0x54
 8000764:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	4613      	mov	r3, r2
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f815 	bl	80007a2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000778:	e00e      	b.n	8000798 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10b      	bne.n	8000798 <xQueueGenericCreate+0x94>
    __asm volatile
 8000780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000784:	f383 8811 	msr	BASEPRI, r3
 8000788:	f3bf 8f6f 	isb	sy
 800078c:	f3bf 8f4f 	dsb	sy
 8000790:	613b      	str	r3, [r7, #16]
}
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000798:	69fb      	ldr	r3, [r7, #28]
    }
 800079a:	4618      	mov	r0, r3
 800079c:	3720      	adds	r7, #32
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	60f8      	str	r0, [r7, #12]
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d103      	bne.n	80007be <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	69ba      	ldr	r2, [r7, #24]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	e002      	b.n	80007c4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80007d0:	2101      	movs	r1, #1
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f7ff ff04 	bl	80005e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	78fa      	ldrb	r2, [r7, #3]
 80007dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
    {
        pxNewQueue->pxQueueSetContainer = NULL;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	2200      	movs	r2, #0
 80007e4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	@ 0x38
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80007fe:	2300      	movs	r3, #0
 8000800:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8000806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000808:	2b00      	cmp	r3, #0
 800080a:	d10b      	bne.n	8000824 <xQueueGenericSend+0x34>
    __asm volatile
 800080c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000810:	f383 8811 	msr	BASEPRI, r3
 8000814:	f3bf 8f6f 	isb	sy
 8000818:	f3bf 8f4f 	dsb	sy
 800081c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d103      	bne.n	8000832 <xQueueGenericSend+0x42>
 800082a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <xQueueGenericSend+0x46>
 8000832:	2301      	movs	r3, #1
 8000834:	e000      	b.n	8000838 <xQueueGenericSend+0x48>
 8000836:	2300      	movs	r3, #0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d10b      	bne.n	8000854 <xQueueGenericSend+0x64>
    __asm volatile
 800083c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000840:	f383 8811 	msr	BASEPRI, r3
 8000844:	f3bf 8f6f 	isb	sy
 8000848:	f3bf 8f4f 	dsb	sy
 800084c:	623b      	str	r3, [r7, #32]
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d103      	bne.n	8000862 <xQueueGenericSend+0x72>
 800085a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800085c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800085e:	2b01      	cmp	r3, #1
 8000860:	d101      	bne.n	8000866 <xQueueGenericSend+0x76>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <xQueueGenericSend+0x78>
 8000866:	2300      	movs	r3, #0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d10b      	bne.n	8000884 <xQueueGenericSend+0x94>
    __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61fb      	str	r3, [r7, #28]
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000884:	f001 fb84 	bl	8001f90 <xTaskGetSchedulerState>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <xQueueGenericSend+0xa4>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d101      	bne.n	8000898 <xQueueGenericSend+0xa8>
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <xQueueGenericSend+0xaa>
 8000898:	2300      	movs	r3, #0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <xQueueGenericSend+0xc6>
    __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	61bb      	str	r3, [r7, #24]
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80008b6:	f002 f8c5 	bl	8002a44 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80008ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d302      	bcc.n	80008cc <xQueueGenericSend+0xdc>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d145      	bne.n	8000958 <xQueueGenericSend+0x168>
            {
                traceQUEUE_SEND( pxQueue );

                #if ( configUSE_QUEUE_SETS == 1 )
                {
                    const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80008cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008d8:	f000 f98a 	bl	8000bf0 <prvCopyDataToQueue>
 80008dc:	62b8      	str	r0, [r7, #40]	@ 0x28

                    if( pxQueue->pxQueueSetContainer != NULL )
 80008de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <xQueueGenericSend+0x120>
                    {
                        if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d102      	bne.n	80008f2 <xQueueGenericSend+0x102>
 80008ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d12e      	bne.n	8000950 <xQueueGenericSend+0x160>
                            /* Do not notify the queue set as an existing item
                             * was overwritten in the queue so the number of items
                             * in the queue has not changed. */
                            mtCOVERAGE_TEST_MARKER();
                        }
                        else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80008f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80008f4:	f000 fb61 	bl	8000fba <prvNotifyQueueSetContainer>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d028      	beq.n	8000950 <xQueueGenericSend+0x160>
                        {
                            /* The queue is a member of a queue set, and posting
                             * to the queue set caused a higher priority task to
                             * unblock. A context switch is required. */
                            queueYIELD_IF_USING_PREEMPTION();
 80008fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000a28 <xQueueGenericSend+0x238>)
 8000900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	e01f      	b.n	8000950 <xQueueGenericSend+0x160>
                    }
                    else
                    {
                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000914:	2b00      	cmp	r3, #0
 8000916:	d010      	beq.n	800093a <xQueueGenericSend+0x14a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800091a:	3324      	adds	r3, #36	@ 0x24
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f921 	bl	8001b64 <xTaskRemoveFromEventList>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d013      	beq.n	8000950 <xQueueGenericSend+0x160>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to
                                 * do this from within the critical section - the
                                 * kernel takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8000928:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <xQueueGenericSend+0x238>)
 800092a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	f3bf 8f6f 	isb	sy
 8000938:	e00a      	b.n	8000950 <xQueueGenericSend+0x160>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800093a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800093c:	2b00      	cmp	r3, #0
 800093e:	d007      	beq.n	8000950 <xQueueGenericSend+0x160>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes
                             * and the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000940:	4b39      	ldr	r3, [pc, #228]	@ (8000a28 <xQueueGenericSend+0x238>)
 8000942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000950:	f002 f8aa 	bl	8002aa8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000954:	2301      	movs	r3, #1
 8000956:	e063      	b.n	8000a20 <xQueueGenericSend+0x230>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800095e:	f002 f8a3 	bl	8002aa8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000962:	2300      	movs	r3, #0
 8000964:	e05c      	b.n	8000a20 <xQueueGenericSend+0x230>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000968:	2b00      	cmp	r3, #0
 800096a:	d106      	bne.n	800097a <xQueueGenericSend+0x18a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f001 f9d1 	bl	8001d18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000976:	2301      	movs	r3, #1
 8000978:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800097a:	f002 f895 	bl	8002aa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800097e:	f000 fddb 	bl	8001538 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000982:	f002 f85f 	bl	8002a44 <vPortEnterCritical>
 8000986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800098c:	b25b      	sxtb	r3, r3
 800098e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000992:	d103      	bne.n	800099c <xQueueGenericSend+0x1ac>
 8000994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000996:	2200      	movs	r2, #0
 8000998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800099c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d103      	bne.n	80009b2 <xQueueGenericSend+0x1c2>
 80009aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80009b2:	f002 f879 	bl	8002aa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80009b6:	1d3a      	adds	r2, r7, #4
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 f9c0 	bl	8001d44 <xTaskCheckForTimeOut>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d124      	bne.n	8000a14 <xQueueGenericSend+0x224>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80009ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009cc:	f000 fa15 	bl	8000dfa <prvIsQueueFull>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d018      	beq.n	8000a08 <xQueueGenericSend+0x218>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80009d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d8:	3310      	adds	r3, #16
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f854 	bl	8001a8c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80009e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009e6:	f000 f993 	bl	8000d10 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80009ea:	f000 fdb3 	bl	8001554 <xTaskResumeAll>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f47f af60 	bne.w	80008b6 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <xQueueGenericSend+0x238>)
 80009f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	f3bf 8f4f 	dsb	sy
 8000a02:	f3bf 8f6f 	isb	sy
 8000a06:	e756      	b.n	80008b6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a0a:	f000 f981 	bl	8000d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000a0e:	f000 fda1 	bl	8001554 <xTaskResumeAll>
 8000a12:	e750      	b.n	80008b6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a16:	f000 f97b 	bl	8000d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000a1a:	f000 fd9b 	bl	8001554 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000a1e:	2300      	movs	r3, #0
        }
    }
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3738      	adds	r7, #56	@ 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	e000ed04 	.word	0xe000ed04

08000a2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	@ 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10b      	bne.n	8000a5e <xQueueReceive+0x32>
    __asm volatile
 8000a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a4a:	f383 8811 	msr	BASEPRI, r3
 8000a4e:	f3bf 8f6f 	isb	sy
 8000a52:	f3bf 8f4f 	dsb	sy
 8000a56:	623b      	str	r3, [r7, #32]
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	e7fd      	b.n	8000a5a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d103      	bne.n	8000a6c <xQueueReceive+0x40>
 8000a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d101      	bne.n	8000a70 <xQueueReceive+0x44>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <xQueueReceive+0x46>
 8000a70:	2300      	movs	r3, #0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d10b      	bne.n	8000a8e <xQueueReceive+0x62>
    __asm volatile
 8000a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a7a:	f383 8811 	msr	BASEPRI, r3
 8000a7e:	f3bf 8f6f 	isb	sy
 8000a82:	f3bf 8f4f 	dsb	sy
 8000a86:	61fb      	str	r3, [r7, #28]
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	e7fd      	b.n	8000a8a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000a8e:	f001 fa7f 	bl	8001f90 <xTaskGetSchedulerState>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <xQueueReceive+0x72>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <xQueueReceive+0x76>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <xQueueReceive+0x78>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10b      	bne.n	8000ac0 <xQueueReceive+0x94>
    __asm volatile
 8000aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aac:	f383 8811 	msr	BASEPRI, r3
 8000ab0:	f3bf 8f6f 	isb	sy
 8000ab4:	f3bf 8f4f 	dsb	sy
 8000ab8:	61bb      	str	r3, [r7, #24]
}
 8000aba:	bf00      	nop
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000ac0:	f001 ffc0 	bl	8002a44 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d01f      	beq.n	8000b10 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000ad4:	f000 f8f6 	bl	8000cc4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ade:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ae2:	691b      	ldr	r3, [r3, #16]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00f      	beq.n	8000b08 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aea:	3310      	adds	r3, #16
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f839 	bl	8001b64 <xTaskRemoveFromEventList>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d007      	beq.n	8000b08 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000af8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <xQueueReceive+0x1c0>)
 8000afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000b08:	f001 ffce 	bl	8002aa8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e069      	b.n	8000be4 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d103      	bne.n	8000b1e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000b16:	f001 ffc7 	bl	8002aa8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e062      	b.n	8000be4 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d106      	bne.n	8000b32 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f8f5 	bl	8001d18 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000b32:	f001 ffb9 	bl	8002aa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000b36:	f000 fcff 	bl	8001538 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000b3a:	f001 ff83 	bl	8002a44 <vPortEnterCritical>
 8000b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4a:	d103      	bne.n	8000b54 <xQueueReceive+0x128>
 8000b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d103      	bne.n	8000b6a <xQueueReceive+0x13e>
 8000b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000b6a:	f001 ff9d 	bl	8002aa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f8e4 	bl	8001d44 <xTaskCheckForTimeOut>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d123      	bne.n	8000bca <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b84:	f000 f923 	bl	8000dce <prvIsQueueEmpty>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d017      	beq.n	8000bbe <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	3324      	adds	r3, #36	@ 0x24
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ff78 	bl	8001a8c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b9e:	f000 f8b7 	bl	8000d10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000ba2:	f000 fcd7 	bl	8001554 <xTaskResumeAll>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d189      	bne.n	8000ac0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <xQueueReceive+0x1c0>)
 8000bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	f3bf 8f4f 	dsb	sy
 8000bb8:	f3bf 8f6f 	isb	sy
 8000bbc:	e780      	b.n	8000ac0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bc0:	f000 f8a6 	bl	8000d10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000bc4:	f000 fcc6 	bl	8001554 <xTaskResumeAll>
 8000bc8:	e77a      	b.n	8000ac0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bcc:	f000 f8a0 	bl	8000d10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000bd0:	f000 fcc0 	bl	8001554 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000bd6:	f000 f8fa 	bl	8000dce <prvIsQueueEmpty>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f43f af6f 	beq.w	8000ac0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000be2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3730      	adds	r7, #48	@ 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	e000ed04 	.word	0xe000ed04

08000bf0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c04:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10d      	bne.n	8000c2a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f9d6 	bl	8001fcc <xTaskPriorityDisinherit>
 8000c20:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	e043      	b.n	8000cb2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d119      	bne.n	8000c64 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	f004 fc48 	bl	80054d0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	441a      	add	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d32b      	bcc.n	8000cb2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	e026      	b.n	8000cb2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68d8      	ldr	r0, [r3, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	f004 fc2e 	bl	80054d0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	68da      	ldr	r2, [r3, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	425b      	negs	r3, r3
 8000c7e:	441a      	add	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c98:	425b      	negs	r3, r3
 8000c9a:	441a      	add	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d105      	bne.n	8000cb2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1c5a      	adds	r2, r3, #1
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000cba:	697b      	ldr	r3, [r7, #20]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d018      	beq.n	8000d08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68da      	ldr	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	441a      	add	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d303      	bcc.n	8000cf8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68d9      	ldr	r1, [r3, #12]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	461a      	mov	r2, r3
 8000d02:	6838      	ldr	r0, [r7, #0]
 8000d04:	f004 fbe4 	bl	80054d0 <memcpy>
    }
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000d18:	f001 fe94 	bl	8002a44 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000d22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d24:	e01e      	b.n	8000d64 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
            {
                if( pxQueue->pxQueueSetContainer != NULL )
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d008      	beq.n	8000d40 <prvUnlockQueue+0x30>
                {
                    if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f943 	bl	8000fba <prvNotifyQueueSetContainer>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d010      	beq.n	8000d5c <prvUnlockQueue+0x4c>
                    {
                        /* The queue is a member of a queue set, and posting to
                         * the queue set caused a higher priority task to unblock.
                         * A context switch is required. */
                        vTaskMissedYield();
 8000d3a:	f001 f86b 	bl	8001e14 <vTaskMissedYield>
 8000d3e:	e00d      	b.n	8000d5c <prvUnlockQueue+0x4c>
                else
                {
                    /* Tasks that are removed from the event list will get
                     * added to the pending ready list as the scheduler is still
                     * suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d012      	beq.n	8000d6e <prvUnlockQueue+0x5e>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3324      	adds	r3, #36	@ 0x24
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ff09 	bl	8001b64 <xTaskRemoveFromEventList>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <prvUnlockQueue+0x4c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            vTaskMissedYield();
 8000d58:	f001 f85c 	bl	8001e14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dcdc      	bgt.n	8000d26 <prvUnlockQueue+0x16>
 8000d6c:	e000      	b.n	8000d70 <prvUnlockQueue+0x60>
                        break;
 8000d6e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	22ff      	movs	r2, #255	@ 0xff
 8000d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000d78:	f001 fe96 	bl	8002aa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000d7c:	f001 fe62 	bl	8002a44 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000d86:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000d88:	e011      	b.n	8000dae <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d012      	beq.n	8000db8 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3310      	adds	r3, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fee4 	bl	8001b64 <xTaskRemoveFromEventList>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8000da2:	f001 f837 	bl	8001e14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000da6:	7bbb      	ldrb	r3, [r7, #14]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	dce9      	bgt.n	8000d8a <prvUnlockQueue+0x7a>
 8000db6:	e000      	b.n	8000dba <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8000db8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	22ff      	movs	r2, #255	@ 0xff
 8000dbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000dc2:	f001 fe71 	bl	8002aa8 <vPortExitCritical>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000dd6:	f001 fe35 	bl	8002a44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e001      	b.n	8000dec <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000dec:	f001 fe5c 	bl	8002aa8 <vPortExitCritical>

    return xReturn;
 8000df0:	68fb      	ldr	r3, [r7, #12]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000e02:	f001 fe1f 	bl	8002a44 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d102      	bne.n	8000e18 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000e12:	2301      	movs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	e001      	b.n	8000e1c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000e1c:	f001 fe44 	bl	8002aa8 <vPortExitCritical>

    return xReturn;
 8000e20:	68fb      	ldr	r3, [r7, #12]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10b      	bne.n	8000e58 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	60fb      	str	r3, [r7, #12]
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d024      	beq.n	8000ea8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e01e      	b.n	8000ea2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000e64:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <vQueueAddToRegistry+0x9c>)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d105      	bne.n	8000e80 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <vQueueAddToRegistry+0x9c>)
 8000e7a:	4413      	add	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
                    break;
 8000e7e:	e013      	b.n	8000ea8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10a      	bne.n	8000e9c <vQueueAddToRegistry+0x70>
 8000e86:	4a10      	ldr	r2, [pc, #64]	@ (8000ec8 <vQueueAddToRegistry+0x9c>)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d104      	bne.n	8000e9c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec8 <vQueueAddToRegistry+0x9c>)
 8000e98:	4413      	add	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9dd      	bls.n	8000e64 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8000eba:	bf00      	nop
 8000ebc:	371c      	adds	r7, #28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000030 	.word	0x20000030

08000ecc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000edc:	f001 fdb2 	bl	8002a44 <vPortEnterCritical>
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d103      	bne.n	8000ef6 <vQueueWaitForMessageRestricted+0x2a>
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f02:	d103      	bne.n	8000f0c <vQueueWaitForMessageRestricted+0x40>
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000f0c:	f001 fdcc 	bl	8002aa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d106      	bne.n	8000f26 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3324      	adds	r3, #36	@ 0x24
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 fdd9 	bl	8001ad8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff fef2 	bl	8000d10 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <xQueueCreateSet>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_QUEUE_SETS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueSetHandle_t xQueueCreateSet( const UBaseType_t uxEventQueueLength )
    {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
        QueueSetHandle_t pxQueue;

        traceENTER_xQueueCreateSet( uxEventQueueLength );

        pxQueue = xQueueGenericCreate( uxEventQueueLength, ( UBaseType_t ) sizeof( Queue_t * ), queueQUEUE_TYPE_SET );
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fbdf 	bl	8000704 <xQueueGenericCreate>
 8000f46:	60f8      	str	r0, [r7, #12]

        traceRETURN_xQueueCreateSet( pxQueue );

        return pxQueue;
 8000f48:	68fb      	ldr	r3, [r7, #12]
    }
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <xQueueAddToSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    BaseType_t xQueueAddToSet( QueueSetMemberHandle_t xQueueOrSemaphore,
                               QueueSetHandle_t xQueueSet )
    {
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn;

        traceENTER_xQueueAddToSet( xQueueOrSemaphore, xQueueSet );

        taskENTER_CRITICAL();
 8000f5c:	f001 fd72 	bl	8002a44 <vPortEnterCritical>
        {
            if( ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer != NULL )
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <xQueueAddToSet+0x1c>
            {
                /* Cannot add a queue/semaphore to more than one queue set. */
                xReturn = pdFAIL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e00b      	b.n	8000f86 <xQueueAddToSet+0x34>
            }
            else if( ( ( Queue_t * ) xQueueOrSemaphore )->uxMessagesWaiting != ( UBaseType_t ) 0 )
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <xQueueAddToSet+0x2a>
            {
                /* Cannot add a queue/semaphore to a queue set if there are already
                 * items in the queue/semaphore. */
                xReturn = pdFAIL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	e004      	b.n	8000f86 <xQueueAddToSet+0x34>
            }
            else
            {
                ( ( Queue_t * ) xQueueOrSemaphore )->pxQueueSetContainer = xQueueSet;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	649a      	str	r2, [r3, #72]	@ 0x48
                xReturn = pdPASS;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 8000f86:	f001 fd8f 	bl	8002aa8 <vPortExitCritical>

        traceRETURN_xQueueAddToSet( xReturn );

        return xReturn;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    }
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <xQueueSelectFromSet>:

#if ( configUSE_QUEUE_SETS == 1 )

    QueueSetMemberHandle_t xQueueSelectFromSet( QueueSetHandle_t xQueueSet,
                                                TickType_t const xTicksToWait )
    {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
        QueueSetMemberHandle_t xReturn = NULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueSelectFromSet( xQueueSet, xTicksToWait );

        ( void ) xQueueReceive( ( QueueHandle_t ) xQueueSet, &xReturn, xTicksToWait );
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fd3e 	bl	8000a2c <xQueueReceive>

        traceRETURN_xQueueSelectFromSet( xReturn );

        return xReturn;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b08a      	sub	sp, #40	@ 0x28
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc6:	623b      	str	r3, [r7, #32]
        BaseType_t xReturn = pdFALSE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10b      	bne.n	8000fea <prvNotifyQueueSetContainer+0x30>
    __asm volatile
 8000fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fd6:	f383 8811 	msr	BASEPRI, r3
 8000fda:	f3bf 8f6f 	isb	sy
 8000fde:	f3bf 8f4f 	dsb	sy
 8000fe2:	617b      	str	r3, [r7, #20]
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	e7fd      	b.n	8000fe6 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fee:	6a3b      	ldr	r3, [r7, #32]
 8000ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d30b      	bcc.n	800100e <prvNotifyQueueSetContainer+0x54>
    __asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	613b      	str	r3, [r7, #16]
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <prvNotifyQueueSetContainer+0x50>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001016:	429a      	cmp	r2, r3
 8001018:	d23d      	bcs.n	8001096 <prvNotifyQueueSetContainer+0xdc>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001020:	77fb      	strb	r3, [r7, #31]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	6a38      	ldr	r0, [r7, #32]
 800102a:	f7ff fde1 	bl	8000bf0 <prvCopyDataToQueue>
 800102e:	6278      	str	r0, [r7, #36]	@ 0x24

            if( cTxLock == queueUNLOCKED )
 8001030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d10e      	bne.n	8001058 <prvNotifyQueueSetContainer+0x9e>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	2b00      	cmp	r3, #0
 8001040:	d029      	beq.n	8001096 <prvNotifyQueueSetContainer+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	3324      	adds	r3, #36	@ 0x24
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fd8c 	bl	8001b64 <xTaskRemoveFromEventList>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d021      	beq.n	8001096 <prvNotifyQueueSetContainer+0xdc>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
 8001056:	e01e      	b.n	8001096 <prvNotifyQueueSetContainer+0xdc>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                prvIncrementQueueTxLock( pxQueueSetContainer, cTxLock );
 8001058:	f000 fb94 	bl	8001784 <uxTaskGetNumberOfTasks>
 800105c:	61b8      	str	r0, [r7, #24]
 800105e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	429a      	cmp	r2, r3
 8001066:	d916      	bls.n	8001096 <prvNotifyQueueSetContainer+0xdc>
 8001068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800106c:	2b7f      	cmp	r3, #127	@ 0x7f
 800106e:	d10b      	bne.n	8001088 <prvNotifyQueueSetContainer+0xce>
    __asm volatile
 8001070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001074:	f383 8811 	msr	BASEPRI, r3
 8001078:	f3bf 8f6f 	isb	sy
 800107c:	f3bf 8f4f 	dsb	sy
 8001080:	60fb      	str	r3, [r7, #12]
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <prvNotifyQueueSetContainer+0xca>
 8001088:	7ffb      	ldrb	r3, [r7, #31]
 800108a:	3301      	adds	r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	b25a      	sxtb	r2, r3
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001098:	4618      	mov	r0, r3
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fdaa 	bl	8002c0c <pvPortMalloc>
 80010b8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80010c0:	2058      	movs	r0, #88	@ 0x58
 80010c2:	f001 fda3 	bl	8002c0c <pvPortMalloc>
 80010c6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d008      	beq.n	80010e0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80010ce:	2258      	movs	r2, #88	@ 0x58
 80010d0:	2100      	movs	r1, #0
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f004 f9d0 	bl	8005478 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80010de:	e005      	b.n	80010ec <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80010e0:	6938      	ldr	r0, [r7, #16]
 80010e2:	f001 fec5 	bl	8002e70 <vPortFree>
 80010e6:	e001      	b.n	80010ec <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00d      	beq.n	800110e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80010f2:	2300      	movs	r3, #0
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 f828 	bl	800115e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800110e:	697b      	ldr	r3, [r7, #20]
    }
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f7ff ffb3 	bl	80010a0 <prvCreateTask>
 800113a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8001142:	6938      	ldr	r0, [r7, #16]
 8001144:	f000 f89c 	bl	8001280 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001148:	2301      	movs	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	e002      	b.n	8001154 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8001154:	697b      	ldr	r3, [r7, #20]
    }
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b088      	sub	sp, #32
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800116c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800116e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	461a      	mov	r2, r3
 8001176:	21a5      	movs	r1, #165	@ 0xa5
 8001178:	f004 f97e 	bl	8005478 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800117c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800117e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001186:	3b01      	subs	r3, #1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	f023 0307 	bic.w	r3, r3, #7
 8001194:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00b      	beq.n	80011b8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80011a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a4:	f383 8811 	msr	BASEPRI, r3
 80011a8:	f3bf 8f6f 	isb	sy
 80011ac:	f3bf 8f4f 	dsb	sy
 80011b0:	617b      	str	r3, [r7, #20]
}
 80011b2:	bf00      	nop
 80011b4:	bf00      	nop
 80011b6:	e7fd      	b.n	80011b4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01e      	beq.n	80011fc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e012      	b.n	80011ea <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	4413      	add	r3, r2
 80011ca:	7819      	ldrb	r1, [r3, #0]
 80011cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	4413      	add	r3, r2
 80011d2:	3334      	adds	r3, #52	@ 0x34
 80011d4:	460a      	mov	r2, r1
 80011d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	3301      	adds	r3, #1
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d9e9      	bls.n	80011c4 <prvInitialiseNewTask+0x66>
 80011f0:	e000      	b.n	80011f4 <prvInitialiseNewTask+0x96>
            {
                break;
 80011f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80011f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80011fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d90b      	bls.n	800121a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8001202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	f3bf 8f6f 	isb	sy
 800120e:	f3bf 8f4f 	dsb	sy
 8001212:	613b      	str	r3, [r7, #16]
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	e7fd      	b.n	8001216 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800121a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800121c:	2b04      	cmp	r3, #4
 800121e:	d901      	bls.n	8001224 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001220:	2304      	movs	r3, #4
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800122a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800122e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001232:	3304      	adds	r3, #4
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f963 	bl	8000500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123c:	3318      	adds	r3, #24
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f95e 	bl	8000500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001248:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124c:	f1c3 0205 	rsb	r2, r3, #5
 8001250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001252:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	68f9      	ldr	r1, [r7, #12]
 800125e:	69b8      	ldr	r0, [r7, #24]
 8001260:	f001 fa70 	bl	8002744 <pxPortInitialiseStack>
 8001264:	4602      	mov	r2, r0
 8001266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001268:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800126a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001274:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001276:	bf00      	nop
 8001278:	3720      	adds	r7, #32
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8001288:	f001 fbdc 	bl	8002a44 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <prvAddNewTaskToReadyList+0x114>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a40      	ldr	r2, [pc, #256]	@ (8001394 <prvAddNewTaskToReadyList+0x114>)
 8001294:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001296:	4b40      	ldr	r3, [pc, #256]	@ (8001398 <prvAddNewTaskToReadyList+0x118>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800129e:	4a3e      	ldr	r2, [pc, #248]	@ (8001398 <prvAddNewTaskToReadyList+0x118>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80012a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001394 <prvAddNewTaskToReadyList+0x114>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d110      	bne.n	80012ce <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80012ac:	f000 fdd6 	bl	8001e5c <prvInitialiseTaskLists>
 80012b0:	e00d      	b.n	80012ce <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80012b2:	4b3a      	ldr	r3, [pc, #232]	@ (800139c <prvAddNewTaskToReadyList+0x11c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80012ba:	4b37      	ldr	r3, [pc, #220]	@ (8001398 <prvAddNewTaskToReadyList+0x118>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d802      	bhi.n	80012ce <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80012c8:	4a33      	ldr	r2, [pc, #204]	@ (8001398 <prvAddNewTaskToReadyList+0x118>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80012ce:	4b34      	ldr	r3, [pc, #208]	@ (80013a0 <prvAddNewTaskToReadyList+0x120>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a32      	ldr	r2, [pc, #200]	@ (80013a0 <prvAddNewTaskToReadyList+0x120>)
 80012d6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80012d8:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <prvAddNewTaskToReadyList+0x120>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e4:	2201      	movs	r2, #1
 80012e6:	409a      	lsls	r2, r3
 80012e8:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <prvAddNewTaskToReadyList+0x124>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	4a2d      	ldr	r2, [pc, #180]	@ (80013a4 <prvAddNewTaskToReadyList+0x124>)
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f6:	492c      	ldr	r1, [pc, #176]	@ (80013a8 <prvAddNewTaskToReadyList+0x128>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	3204      	adds	r2, #4
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	1d1a      	adds	r2, r3, #4
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4a1c      	ldr	r2, [pc, #112]	@ (80013a8 <prvAddNewTaskToReadyList+0x128>)
 8001336:	441a      	add	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001340:	4919      	ldr	r1, [pc, #100]	@ (80013a8 <prvAddNewTaskToReadyList+0x128>)
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001352:	1c59      	adds	r1, r3, #1
 8001354:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <prvAddNewTaskToReadyList+0x128>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4403      	add	r3, r0
 8001360:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8001362:	f001 fba1 	bl	8002aa8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <prvAddNewTaskToReadyList+0x11c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <prvAddNewTaskToReadyList+0x118>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <prvAddNewTaskToReadyList+0x10c>
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <prvAddNewTaskToReadyList+0x12c>)
 800137e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f3bf 8f4f 	dsb	sy
 8001388:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000148 	.word	0x20000148
 8001398:	20000070 	.word	0x20000070
 800139c:	20000154 	.word	0x20000154
 80013a0:	20000164 	.word	0x20000164
 80013a4:	20000150 	.word	0x20000150
 80013a8:	20000074 	.word	0x20000074
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d018      	beq.n	80013f4 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80013c2:	f000 f8b9 	bl	8001538 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <vTaskDelay+0x64>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d00b      	beq.n	80013e6 <vTaskDelay+0x36>
    __asm volatile
 80013ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013d2:	f383 8811 	msr	BASEPRI, r3
 80013d6:	f3bf 8f6f 	isb	sy
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	60bb      	str	r3, [r7, #8]
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	e7fd      	b.n	80013e2 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80013e6:	2100      	movs	r1, #0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fe97 	bl	800211c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80013ee:	f000 f8b1 	bl	8001554 <xTaskResumeAll>
 80013f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <vTaskDelay+0x68>)
 80013fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	f3bf 8f4f 	dsb	sy
 8001406:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000170 	.word	0x20000170
 8001418:	e000ed04 	.word	0xe000ed04

0800141c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e011      	b.n	8001454 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <prvCreateIdleTasks+0x88>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	4413      	add	r3, r2
 8001436:	7819      	ldrb	r1, [r3, #0]
 8001438:	1d3a      	adds	r2, r7, #4
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	460a      	mov	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8001442:	1d3a      	adds	r2, r7, #4
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d006      	beq.n	800145c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b09      	cmp	r3, #9
 8001458:	ddea      	ble.n	8001430 <prvCreateIdleTasks+0x14>
 800145a:	e000      	b.n	800145e <prvCreateIdleTasks+0x42>
        {
            break;
 800145c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	e015      	b.n	8001490 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <prvCreateIdleTasks+0x8c>)
 8001466:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <prvCreateIdleTasks+0x90>)
 800146e:	4413      	add	r3, r2
 8001470:	1d39      	adds	r1, r7, #4
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	2300      	movs	r3, #0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2282      	movs	r2, #130	@ 0x82
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7ff fe4b 	bl	8001118 <xTaskCreate>
 8001482:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	3301      	adds	r3, #1
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	dde6      	ble.n	8001464 <prvCreateIdleTasks+0x48>
 8001496:	e000      	b.n	800149a <prvCreateIdleTasks+0x7e>
        {
            break;
 8001498:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800149a:	69fb      	ldr	r3, [r7, #28]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	08005504 	.word	0x08005504
 80014a8:	08001e2d 	.word	0x08001e2d
 80014ac:	2000016c 	.word	0x2000016c

080014b0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80014b6:	f7ff ffb1 	bl	800141c <prvCreateIdleTasks>
 80014ba:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d102      	bne.n	80014c8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80014c2:	f000 fead 	bl	8002220 <xTimerCreateTimerTask>
 80014c6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d116      	bne.n	80014fc <vTaskStartScheduler+0x4c>
    __asm volatile
 80014ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014d2:	f383 8811 	msr	BASEPRI, r3
 80014d6:	f3bf 8f6f 	isb	sy
 80014da:	f3bf 8f4f 	dsb	sy
 80014de:	60bb      	str	r3, [r7, #8]
}
 80014e0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80014e2:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <vTaskStartScheduler+0x78>)
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <vTaskStartScheduler+0x7c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <vTaskStartScheduler+0x80>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80014f6:	f001 f9b5 	bl	8002864 <xPortStartScheduler>
 80014fa:	e00f      	b.n	800151c <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001502:	d10b      	bne.n	800151c <vTaskStartScheduler+0x6c>
    __asm volatile
 8001504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001508:	f383 8811 	msr	BASEPRI, r3
 800150c:	f3bf 8f6f 	isb	sy
 8001510:	f3bf 8f4f 	dsb	sy
 8001514:	607b      	str	r3, [r7, #4]
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <vTaskStartScheduler+0x84>)
 800151e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000168 	.word	0x20000168
 800152c:	20000154 	.word	0x20000154
 8001530:	2000014c 	.word	0x2000014c
 8001534:	20000000 	.word	0x20000000

08001538 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <vTaskSuspendAll+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <vTaskSuspendAll+0x18>)
 8001544:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	20000170 	.word	0x20000170

08001554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8001562:	f001 fa6f 	bl	8002a44 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800156a:	4b75      	ldr	r3, [pc, #468]	@ (8001740 <xTaskResumeAll+0x1ec>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10b      	bne.n	800158a <xTaskResumeAll+0x36>
    __asm volatile
 8001572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	603b      	str	r3, [r7, #0]
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	e7fd      	b.n	8001586 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <xTaskResumeAll+0x1ec>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a6b      	ldr	r2, [pc, #428]	@ (8001740 <xTaskResumeAll+0x1ec>)
 8001592:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001594:	4b6a      	ldr	r3, [pc, #424]	@ (8001740 <xTaskResumeAll+0x1ec>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f040 80ca 	bne.w	8001732 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800159e:	4b69      	ldr	r3, [pc, #420]	@ (8001744 <xTaskResumeAll+0x1f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80c5 	beq.w	8001732 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80015a8:	e08e      	b.n	80016c8 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80015aa:	4b67      	ldr	r3, [pc, #412]	@ (8001748 <xTaskResumeAll+0x1f4>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	6a12      	ldr	r2, [r2, #32]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	69fa      	ldr	r2, [r7, #28]
 80015c8:	69d2      	ldr	r2, [r2, #28]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3318      	adds	r3, #24
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d103      	bne.n	80015e0 <xTaskResumeAll+0x8c>
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	6a1a      	ldr	r2, [r3, #32]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	68d2      	ldr	r2, [r2, #12]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	69fa      	ldr	r2, [r7, #28]
 8001606:	6892      	ldr	r2, [r2, #8]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	429a      	cmp	r2, r3
 8001614:	d103      	bne.n	800161e <xTaskResumeAll+0xca>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1e5a      	subs	r2, r3, #1
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	2201      	movs	r2, #1
 8001634:	409a      	lsls	r2, r3
 8001636:	4b45      	ldr	r3, [pc, #276]	@ (800174c <xTaskResumeAll+0x1f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4313      	orrs	r3, r2
 800163c:	4a43      	ldr	r2, [pc, #268]	@ (800174c <xTaskResumeAll+0x1f8>)
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001644:	4942      	ldr	r1, [pc, #264]	@ (8001750 <xTaskResumeAll+0x1fc>)
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	3304      	adds	r3, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	3204      	adds	r2, #4
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	1d1a      	adds	r2, r3, #4
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <xTaskResumeAll+0x1fc>)
 8001684:	441a      	add	r2, r3
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800168e:	4930      	ldr	r1, [pc, #192]	@ (8001750 <xTaskResumeAll+0x1fc>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016a0:	1c59      	adds	r1, r3, #1
 80016a2:	482b      	ldr	r0, [pc, #172]	@ (8001750 <xTaskResumeAll+0x1fc>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4403      	add	r3, r0
 80016ae:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016b4:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <xTaskResumeAll+0x200>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d904      	bls.n	80016c8 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80016be:	4a26      	ldr	r2, [pc, #152]	@ (8001758 <xTaskResumeAll+0x204>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2101      	movs	r1, #1
 80016c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80016c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <xTaskResumeAll+0x1f4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f af6c 	bne.w	80015aa <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80016d8:	f000 fc3e 	bl	8001f58 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <xTaskResumeAll+0x208>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d012      	beq.n	800170e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80016e8:	f000 f858 	bl	800179c <xTaskIncrementTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80016f2:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <xTaskResumeAll+0x204>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	2101      	movs	r1, #1
 80016f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3b01      	subs	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ef      	bne.n	80016e8 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <xTaskResumeAll+0x208>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800170e:	4a12      	ldr	r2, [pc, #72]	@ (8001758 <xTaskResumeAll+0x204>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800171e:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <xTaskResumeAll+0x200>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <xTaskResumeAll+0x20c>)
 8001724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f3bf 8f4f 	dsb	sy
 800172e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001732:	f001 f9b9 	bl	8002aa8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8001736:	69bb      	ldr	r3, [r7, #24]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000170 	.word	0x20000170
 8001744:	20000148 	.word	0x20000148
 8001748:	20000108 	.word	0x20000108
 800174c:	20000150 	.word	0x20000150
 8001750:	20000074 	.word	0x20000074
 8001754:	20000070 	.word	0x20000070
 8001758:	2000015c 	.word	0x2000015c
 800175c:	20000158 	.word	0x20000158
 8001760:	e000ed04 	.word	0xe000ed04

08001764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800176a:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <xTaskGetTickCount+0x1c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2000014c 	.word	0x2000014c

08001784 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <uxTaskGetNumberOfTasks+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000148 	.word	0x20000148

0800179c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80017a6:	4b7f      	ldr	r3, [pc, #508]	@ (80019a4 <xTaskIncrementTick+0x208>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80ef 	bne.w	800198e <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80017b0:	4b7d      	ldr	r3, [pc, #500]	@ (80019a8 <xTaskIncrementTick+0x20c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80017b8:	4a7b      	ldr	r2, [pc, #492]	@ (80019a8 <xTaskIncrementTick+0x20c>)
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d121      	bne.n	8001808 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80017c4:	4b79      	ldr	r3, [pc, #484]	@ (80019ac <xTaskIncrementTick+0x210>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00b      	beq.n	80017e6 <xTaskIncrementTick+0x4a>
    __asm volatile
 80017ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017d2:	f383 8811 	msr	BASEPRI, r3
 80017d6:	f3bf 8f6f 	isb	sy
 80017da:	f3bf 8f4f 	dsb	sy
 80017de:	607b      	str	r3, [r7, #4]
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	e7fd      	b.n	80017e2 <xTaskIncrementTick+0x46>
 80017e6:	4b71      	ldr	r3, [pc, #452]	@ (80019ac <xTaskIncrementTick+0x210>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	4b70      	ldr	r3, [pc, #448]	@ (80019b0 <xTaskIncrementTick+0x214>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a6e      	ldr	r2, [pc, #440]	@ (80019ac <xTaskIncrementTick+0x210>)
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	4a6e      	ldr	r2, [pc, #440]	@ (80019b0 <xTaskIncrementTick+0x214>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b6e      	ldr	r3, [pc, #440]	@ (80019b4 <xTaskIncrementTick+0x218>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a6c      	ldr	r2, [pc, #432]	@ (80019b4 <xTaskIncrementTick+0x218>)
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	f000 fba8 	bl	8001f58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001808:	4b6b      	ldr	r3, [pc, #428]	@ (80019b8 <xTaskIncrementTick+0x21c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6a3a      	ldr	r2, [r7, #32]
 800180e:	429a      	cmp	r2, r3
 8001810:	f0c0 80a8 	bcc.w	8001964 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001814:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <xTaskIncrementTick+0x210>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d104      	bne.n	8001828 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800181e:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <xTaskIncrementTick+0x21c>)
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	601a      	str	r2, [r3, #0]
                    break;
 8001826:	e09d      	b.n	8001964 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001828:	4b60      	ldr	r3, [pc, #384]	@ (80019ac <xTaskIncrementTick+0x210>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d203      	bcs.n	8001848 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001840:	4a5d      	ldr	r2, [pc, #372]	@ (80019b8 <xTaskIncrementTick+0x21c>)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	6013      	str	r3, [r2, #0]
                        break;
 8001846:	e08d      	b.n	8001964 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	68d2      	ldr	r2, [r2, #12]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	6892      	ldr	r2, [r2, #8]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	3304      	adds	r3, #4
 800186a:	429a      	cmp	r2, r3
 800186c:	d103      	bne.n	8001876 <xTaskIncrementTick+0xda>
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	1e5a      	subs	r2, r3, #1
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d01e      	beq.n	80018cc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	6a12      	ldr	r2, [r2, #32]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	69d2      	ldr	r2, [r2, #28]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	3318      	adds	r3, #24
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d103      	bne.n	80018bc <xTaskIncrementTick+0x120>
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6a1a      	ldr	r2, [r3, #32]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2200      	movs	r2, #0
 80018c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	2201      	movs	r2, #1
 80018d2:	409a      	lsls	r2, r3
 80018d4:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <xTaskIncrementTick+0x220>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4313      	orrs	r3, r2
 80018da:	4a38      	ldr	r2, [pc, #224]	@ (80019bc <xTaskIncrementTick+0x220>)
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e2:	4937      	ldr	r1, [pc, #220]	@ (80019c0 <xTaskIncrementTick+0x224>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60bb      	str	r3, [r7, #8]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	3204      	adds	r2, #4
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4a27      	ldr	r2, [pc, #156]	@ (80019c0 <xTaskIncrementTick+0x224>)
 8001922:	441a      	add	r2, r3
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	615a      	str	r2, [r3, #20]
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800192c:	4924      	ldr	r1, [pc, #144]	@ (80019c0 <xTaskIncrementTick+0x224>)
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800193e:	1c59      	adds	r1, r3, #1
 8001940:	481f      	ldr	r0, [pc, #124]	@ (80019c0 <xTaskIncrementTick+0x224>)
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4403      	add	r3, r0
 800194c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001952:	4b1c      	ldr	r3, [pc, #112]	@ (80019c4 <xTaskIncrementTick+0x228>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001958:	429a      	cmp	r2, r3
 800195a:	f67f af5b 	bls.w	8001814 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800195e:	2301      	movs	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001962:	e757      	b.n	8001814 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <xTaskIncrementTick+0x228>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196a:	4915      	ldr	r1, [pc, #84]	@ (80019c0 <xTaskIncrementTick+0x224>)
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d901      	bls.n	8001980 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <xTaskIncrementTick+0x22c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001988:	2301      	movs	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e004      	b.n	8001998 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <xTaskIncrementTick+0x230>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	3301      	adds	r3, #1
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <xTaskIncrementTick+0x230>)
 8001996:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800199a:	4618      	mov	r0, r3
 800199c:	3728      	adds	r7, #40	@ 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000170 	.word	0x20000170
 80019a8:	2000014c 	.word	0x2000014c
 80019ac:	20000100 	.word	0x20000100
 80019b0:	20000104 	.word	0x20000104
 80019b4:	20000160 	.word	0x20000160
 80019b8:	20000168 	.word	0x20000168
 80019bc:	20000150 	.word	0x20000150
 80019c0:	20000074 	.word	0x20000074
 80019c4:	20000070 	.word	0x20000070
 80019c8:	2000015c 	.word	0x2000015c
 80019cc:	20000158 	.word	0x20000158

080019d0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <vTaskSwitchContext+0xa8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80019de:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <vTaskSwitchContext+0xac>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80019e4:	e041      	b.n	8001a6a <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 80019e6:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <vTaskSwitchContext+0xac>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <vTaskSwitchContext+0xb0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f1c3 031f 	rsb	r3, r3, #31
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4920      	ldr	r1, [pc, #128]	@ (8001a84 <vTaskSwitchContext+0xb4>)
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	440b      	add	r3, r1
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10b      	bne.n	8001a2e <vTaskSwitchContext+0x5e>
    __asm volatile
 8001a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	607b      	str	r3, [r7, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	e7fd      	b.n	8001a2a <vTaskSwitchContext+0x5a>
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <vTaskSwitchContext+0xb4>)
 8001a3a:	4413      	add	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d103      	bne.n	8001a5c <vTaskSwitchContext+0x8c>
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a09      	ldr	r2, [pc, #36]	@ (8001a88 <vTaskSwitchContext+0xb8>)
 8001a64:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <vTaskSwitchContext+0xb8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
    }
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000170 	.word	0x20000170
 8001a7c:	2000015c 	.word	0x2000015c
 8001a80:	20000150 	.word	0x20000150
 8001a84:	20000074 	.word	0x20000074
 8001a88:	20000070 	.word	0x20000070

08001a8c <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aa0:	f383 8811 	msr	BASEPRI, r3
 8001aa4:	f3bf 8f6f 	isb	sy
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	60fb      	str	r3, [r7, #12]
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <vTaskPlaceOnEventList+0x48>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3318      	adds	r3, #24
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe fd2c 	bl	800051a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	6838      	ldr	r0, [r7, #0]
 8001ac6:	f000 fb29 	bl	800211c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000070 	.word	0x20000070

08001ad8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10b      	bne.n	8001b02 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aee:	f383 8811 	msr	BASEPRI, r3
 8001af2:	f3bf 8f6f 	isb	sy
 8001af6:	f3bf 8f4f 	dsb	sy
 8001afa:	613b      	str	r3, [r7, #16]
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	e7fd      	b.n	8001afe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	61da      	str	r2, [r3, #28]
 8001b10:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	6892      	ldr	r2, [r2, #8]
 8001b18:	621a      	str	r2, [r3, #32]
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	3218      	adds	r2, #24
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f103 0218 	add.w	r2, r3, #24
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <vTaskPlaceOnEventListRestricted+0x88>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68b8      	ldr	r0, [r7, #8]
 8001b54:	f000 fae2 	bl	800211c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000070 	.word	0x20000070

08001b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b08b      	sub	sp, #44	@ 0x2c
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10b      	bne.n	8001b92 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	60fb      	str	r3, [r7, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	e7fd      	b.n	8001b8e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	6a12      	ldr	r2, [r2, #32]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	6a3a      	ldr	r2, [r7, #32]
 8001ba8:	69d2      	ldr	r2, [r2, #28]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	3318      	adds	r3, #24
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d103      	bne.n	8001bc0 <xTaskRemoveFromEventList+0x5c>
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1e5a      	subs	r2, r3, #1
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d00 <xTaskRemoveFromEventList+0x19c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d160      	bne.n	8001c9a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	68d2      	ldr	r2, [r2, #12]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	6a3b      	ldr	r3, [r7, #32]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	6a3a      	ldr	r2, [r7, #32]
 8001bee:	6892      	ldr	r2, [r2, #8]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d103      	bne.n	8001c06 <xTaskRemoveFromEventList+0xa2>
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	4b39      	ldr	r3, [pc, #228]	@ (8001d04 <xTaskRemoveFromEventList+0x1a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	4a37      	ldr	r2, [pc, #220]	@ (8001d04 <xTaskRemoveFromEventList+0x1a0>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c2c:	4936      	ldr	r1, [pc, #216]	@ (8001d08 <xTaskRemoveFromEventList+0x1a4>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	3304      	adds	r3, #4
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	6a3a      	ldr	r2, [r7, #32]
 8001c52:	3204      	adds	r2, #4
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	6a3b      	ldr	r3, [r7, #32]
 8001c58:	1d1a      	adds	r2, r3, #4
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <xTaskRemoveFromEventList+0x1a4>)
 8001c6c:	441a      	add	r2, r3
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	615a      	str	r2, [r3, #20]
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c76:	4924      	ldr	r1, [pc, #144]	@ (8001d08 <xTaskRemoveFromEventList+0x1a4>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a3a      	ldr	r2, [r7, #32]
 8001c86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c88:	1c59      	adds	r1, r3, #1
 8001c8a:	481f      	ldr	r0, [pc, #124]	@ (8001d08 <xTaskRemoveFromEventList+0x1a4>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4403      	add	r3, r0
 8001c96:	6019      	str	r1, [r3, #0]
 8001c98:	e01b      	b.n	8001cd2 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <xTaskRemoveFromEventList+0x1a8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	61da      	str	r2, [r3, #28]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	6a3a      	ldr	r2, [r7, #32]
 8001cb4:	3218      	adds	r2, #24
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f103 0218 	add.w	r2, r3, #24
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	@ (8001d0c <xTaskRemoveFromEventList+0x1a8>)
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cc8:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <xTaskRemoveFromEventList+0x1a8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <xTaskRemoveFromEventList+0x1a8>)
 8001cd0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <xTaskRemoveFromEventList+0x1ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d905      	bls.n	8001cec <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <xTaskRemoveFromEventList+0x1b0>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e001      	b.n	8001cf0 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	372c      	adds	r7, #44	@ 0x2c
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000170 	.word	0x20000170
 8001d04:	20000150 	.word	0x20000150
 8001d08:	20000074 	.word	0x20000074
 8001d0c:	20000108 	.word	0x20000108
 8001d10:	20000070 	.word	0x20000070
 8001d14:	2000015c 	.word	0x2000015c

08001d18 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <vTaskInternalSetTimeOutState+0x24>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <vTaskInternalSetTimeOutState+0x28>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	20000160 	.word	0x20000160
 8001d40:	2000014c 	.word	0x2000014c

08001d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	613b      	str	r3, [r7, #16]
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10b      	bne.n	8001d8a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	60fb      	str	r3, [r7, #12]
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	e7fd      	b.n	8001d86 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001d8a:	f000 fe5b 	bl	8002a44 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <xTaskCheckForTimeOut+0xc8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da6:	d102      	bne.n	8001dae <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e026      	b.n	8001dfc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <xTaskCheckForTimeOut+0xcc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d00a      	beq.n	8001dd0 <xTaskCheckForTimeOut+0x8c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d305      	bcc.n	8001dd0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e015      	b.n	8001dfc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d20b      	bcs.n	8001df2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	1ad2      	subs	r2, r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ff96 	bl	8001d18 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	e004      	b.n	8001dfc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001dfc:	f000 fe54 	bl	8002aa8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001e00:	69fb      	ldr	r3, [r7, #28]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000014c 	.word	0x2000014c
 8001e10:	20000160 	.word	0x20000160

08001e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <vTaskMissedYield+0x14>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	2000015c 	.word	0x2000015c

08001e2c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001e34:	f000 f852 	bl	8001edc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001e38:	4b06      	ldr	r3, [pc, #24]	@ (8001e54 <prvIdleTask+0x28>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d9f9      	bls.n	8001e34 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <prvIdleTask+0x2c>)
 8001e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f3bf 8f4f 	dsb	sy
 8001e4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001e50:	e7f0      	b.n	8001e34 <prvIdleTask+0x8>
 8001e52:	bf00      	nop
 8001e54:	20000074 	.word	0x20000074
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
 8001e66:	e00c      	b.n	8001e82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <prvInitialiseTaskLists+0x60>)
 8001e74:	4413      	add	r3, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb22 	bl	80004c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d9ef      	bls.n	8001e68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001e88:	480d      	ldr	r0, [pc, #52]	@ (8001ec0 <prvInitialiseTaskLists+0x64>)
 8001e8a:	f7fe fb19 	bl	80004c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001e8e:	480d      	ldr	r0, [pc, #52]	@ (8001ec4 <prvInitialiseTaskLists+0x68>)
 8001e90:	f7fe fb16 	bl	80004c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <prvInitialiseTaskLists+0x6c>)
 8001e96:	f7fe fb13 	bl	80004c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001e9a:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <prvInitialiseTaskLists+0x70>)
 8001e9c:	f7fe fb10 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ea0:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <prvInitialiseTaskLists+0x74>)
 8001ea2:	f7fe fb0d 	bl	80004c0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <prvInitialiseTaskLists+0x78>)
 8001ea8:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <prvInitialiseTaskLists+0x64>)
 8001eaa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <prvInitialiseTaskLists+0x7c>)
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <prvInitialiseTaskLists+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000074 	.word	0x20000074
 8001ec0:	200000d8 	.word	0x200000d8
 8001ec4:	200000ec 	.word	0x200000ec
 8001ec8:	20000108 	.word	0x20000108
 8001ecc:	2000011c 	.word	0x2000011c
 8001ed0:	20000134 	.word	0x20000134
 8001ed4:	20000100 	.word	0x20000100
 8001ed8:	20000104 	.word	0x20000104

08001edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ee2:	e019      	b.n	8001f18 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001ee4:	f000 fdae 	bl	8002a44 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001ee8:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <prvCheckTasksWaitingTermination+0x50>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb49 	bl	800058c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <prvCheckTasksWaitingTermination+0x54>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <prvCheckTasksWaitingTermination+0x54>)
 8001f02:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <prvCheckTasksWaitingTermination+0x58>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <prvCheckTasksWaitingTermination+0x58>)
 8001f0c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8001f0e:	f000 fdcb 	bl	8002aa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f810 	bl	8001f38 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <prvCheckTasksWaitingTermination+0x58>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e1      	bne.n	8001ee4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	2000011c 	.word	0x2000011c
 8001f30:	20000148 	.word	0x20000148
 8001f34:	20000130 	.word	0x20000130

08001f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 ff93 	bl	8002e70 <vPortFree>
            vPortFree( pxTCB );
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 ff90 	bl	8002e70 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <prvResetNextTaskUnblockTime+0x30>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d104      	bne.n	8001f70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001f66:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <prvResetNextTaskUnblockTime+0x34>)
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001f6e:	e005      	b.n	8001f7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <prvResetNextTaskUnblockTime+0x30>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <prvResetNextTaskUnblockTime+0x34>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000100 	.word	0x20000100
 8001f8c:	20000168 	.word	0x20000168

08001f90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8001f96:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <xTaskGetSchedulerState+0x34>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	e008      	b.n	8001fb6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <xTaskGetSchedulerState+0x38>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001fac:	2302      	movs	r3, #2
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	e001      	b.n	8001fb6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8001fb6:	687b      	ldr	r3, [r7, #4]
    }
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000154 	.word	0x20000154
 8001fc8:	20000170 	.word	0x20000170

08001fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8090 	beq.w	8002104 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8002110 <xTaskPriorityDisinherit+0x144>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d00b      	beq.n	8002006 <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	613b      	str	r3, [r7, #16]
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	e7fd      	b.n	8002002 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10b      	bne.n	8002026 <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 800200e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	60fb      	str	r3, [r7, #12]
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	1e5a      	subs	r2, r3, #1
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002038:	429a      	cmp	r2, r3
 800203a:	d063      	beq.n	8002104 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d15f      	bne.n	8002104 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	3304      	adds	r3, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa9f 	bl	800058c <uxListRemove>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10a      	bne.n	800206a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002058:	2201      	movs	r2, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	4b2c      	ldr	r3, [pc, #176]	@ (8002114 <xTaskPriorityDisinherit+0x148>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4013      	ands	r3, r2
 8002066:	4a2b      	ldr	r2, [pc, #172]	@ (8002114 <xTaskPriorityDisinherit+0x148>)
 8002068:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	f1c3 0205 	rsb	r2, r3, #5
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002082:	2201      	movs	r2, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <xTaskPriorityDisinherit+0x148>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <xTaskPriorityDisinherit+0x148>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002094:	4920      	ldr	r1, [pc, #128]	@ (8002118 <xTaskPriorityDisinherit+0x14c>)
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3304      	adds	r3, #4
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	3204      	adds	r2, #4
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1d1a      	adds	r2, r3, #4
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4a11      	ldr	r2, [pc, #68]	@ (8002118 <xTaskPriorityDisinherit+0x14c>)
 80020d4:	441a      	add	r2, r3
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	615a      	str	r2, [r3, #20]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020de:	490e      	ldr	r1, [pc, #56]	@ (8002118 <xTaskPriorityDisinherit+0x14c>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	4809      	ldr	r0, [pc, #36]	@ (8002118 <xTaskPriorityDisinherit+0x14c>)
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4403      	add	r3, r0
 80020fe:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002100:	2301      	movs	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002104:	69fb      	ldr	r3, [r7, #28]
    }
 8002106:	4618      	mov	r0, r3
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000070 	.word	0x20000070
 8002114:	20000150 	.word	0x20000150
 8002118:	20000074 	.word	0x20000074

0800211c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800212c:	4b36      	ldr	r3, [pc, #216]	@ (8002208 <prvAddCurrentTaskToDelayedList+0xec>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002132:	4b36      	ldr	r3, [pc, #216]	@ (800220c <prvAddCurrentTaskToDelayedList+0xf0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002138:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3304      	adds	r3, #4
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa24 	bl	800058c <uxListRemove>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800214a:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	2201      	movs	r2, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <prvAddCurrentTaskToDelayedList+0xf8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4013      	ands	r3, r2
 800215e:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002160:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002168:	d124      	bne.n	80021b4 <prvAddCurrentTaskToDelayedList+0x98>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d021      	beq.n	80021b4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <prvAddCurrentTaskToDelayedList+0xfc>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	6892      	ldr	r2, [r2, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	3204      	adds	r2, #4
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	1d1a      	adds	r2, r3, #4
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002218 <prvAddCurrentTaskToDelayedList+0xfc>)
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <prvAddCurrentTaskToDelayedList+0xfc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3301      	adds	r3, #1
 80021ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002218 <prvAddCurrentTaskToDelayedList+0xfc>)
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80021b2:	e022      	b.n	80021fa <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80021cc:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3304      	adds	r3, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	6978      	ldr	r0, [r7, #20]
 80021d6:	f7fe f9a0 	bl	800051a <vListInsert>
}
 80021da:	e00e      	b.n	80021fa <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <prvAddCurrentTaskToDelayedList+0xf4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3304      	adds	r3, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	69b8      	ldr	r0, [r7, #24]
 80021e6:	f7fe f998 	bl	800051a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <prvAddCurrentTaskToDelayedList+0x100>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d202      	bcs.n	80021fa <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80021f4:	4a09      	ldr	r2, [pc, #36]	@ (800221c <prvAddCurrentTaskToDelayedList+0x100>)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6013      	str	r3, [r2, #0]
}
 80021fa:	bf00      	nop
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000014c 	.word	0x2000014c
 8002208:	20000100 	.word	0x20000100
 800220c:	20000104 	.word	0x20000104
 8002210:	20000070 	.word	0x20000070
 8002214:	20000150 	.word	0x20000150
 8002218:	20000134 	.word	0x20000134
 800221c:	20000168 	.word	0x20000168

08002220 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800222a:	f000 fa55 	bl	80026d8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <xTimerCreateTimerTask+0x58>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00b      	beq.n	800224e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <xTimerCreateTimerTask+0x5c>)
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2302      	movs	r3, #2
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002244:	490e      	ldr	r1, [pc, #56]	@ (8002280 <xTimerCreateTimerTask+0x60>)
 8002246:	480f      	ldr	r0, [pc, #60]	@ (8002284 <xTimerCreateTimerTask+0x64>)
 8002248:	f7fe ff66 	bl	8001118 <xTaskCreate>
 800224c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10b      	bne.n	800226c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	603b      	str	r3, [r7, #0]
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	e7fd      	b.n	8002268 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 800226c:	687b      	ldr	r3, [r7, #4]
    }
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200001a4 	.word	0x200001a4
 800227c:	200001a8 	.word	0x200001a8
 8002280:	0800550c 	.word	0x0800550c
 8002284:	0800232d 	.word	0x0800232d

08002288 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002294:	e008      	b.n	80022a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	699a      	ldr	r2, [r3, #24]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	18d1      	adds	r1, r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f8df 	bl	8002478 <prvInsertTimerInActiveList>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1ea      	bne.n	8002296 <prvReloadTimer+0xe>
        }
    }
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80022d6:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <prvProcessExpiredTimer+0x5c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3304      	adds	r3, #4
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f951 	bl	800058c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff ffc3 	bl	8002288 <prvReloadTimer>
 8002302:	e008      	b.n	8002316 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	4798      	blx	r3
    }
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000019c 	.word	0x2000019c

0800232c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f859 	bl	80023f0 <prvGetNextExpireTime>
 800233e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4619      	mov	r1, r3
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f805 	bl	8002354 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800234a:	f000 f8d7 	bl	80024fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800234e:	bf00      	nop
 8002350:	e7f0      	b.n	8002334 <prvTimerTask+0x8>
	...

08002354 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800235e:	f7ff f8eb 	bl	8001538 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f866 	bl	8002438 <prvSampleTimeNow>
 800236c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d130      	bne.n	80023d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10a      	bne.n	8002390 <prvProcessTimerOrBlockTask+0x3c>
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	429a      	cmp	r2, r3
 8002380:	d806      	bhi.n	8002390 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002382:	f7ff f8e7 	bl	8001554 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff9f 	bl	80022cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800238e:	e024      	b.n	80023da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <prvProcessTimerOrBlockTask+0x90>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <prvProcessTimerOrBlockTask+0x50>
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <prvProcessTimerOrBlockTask+0x52>
 80023a4:	2300      	movs	r3, #0
 80023a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80023a8:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <prvProcessTimerOrBlockTask+0x94>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	f7fe fd89 	bl	8000ecc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80023ba:	f7ff f8cb 	bl	8001554 <xTaskResumeAll>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80023c4:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <prvProcessTimerOrBlockTask+0x98>)
 80023c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	f3bf 8f6f 	isb	sy
    }
 80023d4:	e001      	b.n	80023da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80023d6:	f7ff f8bd 	bl	8001554 <xTaskResumeAll>
    }
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200001a0 	.word	0x200001a0
 80023e8:	200001a4 	.word	0x200001a4
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <prvGetNextExpireTime+0x44>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <prvGetNextExpireTime+0x16>
 8002402:	2201      	movs	r2, #1
 8002404:	e000      	b.n	8002408 <prvGetNextExpireTime+0x18>
 8002406:	2200      	movs	r2, #0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002414:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <prvGetNextExpireTime+0x44>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	e001      	b.n	8002424 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002424:	68fb      	ldr	r3, [r7, #12]
    }
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	2000019c 	.word	0x2000019c

08002438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8002440:	f7ff f990 	bl	8001764 <xTaskGetTickCount>
 8002444:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <prvSampleTimeNow+0x3c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d205      	bcs.n	800245c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002450:	f000 f91c 	bl	800268c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e002      	b.n	8002462 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <prvSampleTimeNow+0x3c>)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002468:	68fb      	ldr	r3, [r7, #12]
    }
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200001ac 	.word	0x200001ac

08002478 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d812      	bhi.n	80024c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d302      	bcc.n	80024b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e01b      	b.n	80024ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <prvInsertTimerInActiveList+0x7c>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3304      	adds	r3, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f7fe f82c 	bl	800051a <vListInsert>
 80024c2:	e012      	b.n	80024ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d206      	bcs.n	80024da <prvInsertTimerInActiveList+0x62>
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e007      	b.n	80024ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <prvInsertTimerInActiveList+0x80>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3304      	adds	r3, #4
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f7fe f818 	bl	800051a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80024ea:	697b      	ldr	r3, [r7, #20]
    }
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200001a0 	.word	0x200001a0
 80024f8:	2000019c 	.word	0x2000019c

080024fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800250e:	e0a9      	b.n	8002664 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f2c0 80a6 	blt.w	8002664 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	3304      	adds	r3, #4
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f82f 	bl	800058c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff81 	bl	8002438 <prvSampleTimeNow>
 8002536:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3b01      	subs	r3, #1
 800253c:	2b08      	cmp	r3, #8
 800253e:	f200 808e 	bhi.w	800265e <prvProcessReceivedCommands+0x162>
 8002542:	a201      	add	r2, pc, #4	@ (adr r2, 8002548 <prvProcessReceivedCommands+0x4c>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	0800256d 	.word	0x0800256d
 800254c:	0800256d 	.word	0x0800256d
 8002550:	080025d5 	.word	0x080025d5
 8002554:	080025e9 	.word	0x080025e9
 8002558:	08002635 	.word	0x08002635
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800256d 	.word	0x0800256d
 8002564:	080025d5 	.word	0x080025d5
 8002568:	080025e9 	.word	0x080025e9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	18d1      	adds	r1, r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	69f8      	ldr	r0, [r7, #28]
 800258c:	f7ff ff74 	bl	8002478 <prvInsertTimerInActiveList>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d065      	beq.n	8002662 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	4413      	add	r3, r2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4619      	mov	r1, r3
 80025b0:	69f8      	ldr	r0, [r7, #28]
 80025b2:	f7ff fe69 	bl	8002288 <prvReloadTimer>
 80025b6:	e008      	b.n	80025ca <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	69f8      	ldr	r0, [r7, #28]
 80025d0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80025d2:	e046      	b.n	8002662 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80025e6:	e03d      	b.n	8002664 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	617b      	str	r3, [r7, #20]
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	18d1      	adds	r1, r2, r3
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	69f8      	ldr	r0, [r7, #28]
 800262e:	f7ff ff23 	bl	8002478 <prvInsertTimerInActiveList>
                        break;
 8002632:	e017      	b.n	8002664 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8002642:	69f8      	ldr	r0, [r7, #28]
 8002644:	f000 fc14 	bl	8002e70 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002648:	e00c      	b.n	8002664 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800265c:	e002      	b.n	8002664 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <prvProcessReceivedCommands+0x168>
                        break;
 8002662:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <prvProcessReceivedCommands+0x18c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f107 0108 	add.w	r1, r7, #8
 800266c:	2200      	movs	r2, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe f9dc 	bl	8000a2c <xQueueReceive>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f af4a 	bne.w	8002510 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3720      	adds	r7, #32
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200001a4 	.word	0x200001a4

0800268c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002692:	e009      	b.n	80026a8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002694:	4b0e      	ldr	r3, [pc, #56]	@ (80026d0 <prvSwitchTimerLists+0x44>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800269e:	f04f 31ff 	mov.w	r1, #4294967295
 80026a2:	6838      	ldr	r0, [r7, #0]
 80026a4:	f7ff fe12 	bl	80022cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <prvSwitchTimerLists+0x44>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <prvSwitchTimerLists+0x44>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <prvSwitchTimerLists+0x48>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a04      	ldr	r2, [pc, #16]	@ (80026d0 <prvSwitchTimerLists+0x44>)
 80026be:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <prvSwitchTimerLists+0x48>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
    }
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000019c 	.word	0x2000019c
 80026d4:	200001a0 	.word	0x200001a0

080026d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80026dc:	f000 f9b2 	bl	8002a44 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80026e0:	4b12      	ldr	r3, [pc, #72]	@ (800272c <prvCheckForValidListAndQueue+0x54>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11d      	bne.n	8002724 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80026e8:	4811      	ldr	r0, [pc, #68]	@ (8002730 <prvCheckForValidListAndQueue+0x58>)
 80026ea:	f7fd fee9 	bl	80004c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80026ee:	4811      	ldr	r0, [pc, #68]	@ (8002734 <prvCheckForValidListAndQueue+0x5c>)
 80026f0:	f7fd fee6 	bl	80004c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <prvCheckForValidListAndQueue+0x60>)
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <prvCheckForValidListAndQueue+0x58>)
 80026f8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80026fa:	4b10      	ldr	r3, [pc, #64]	@ (800273c <prvCheckForValidListAndQueue+0x64>)
 80026fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <prvCheckForValidListAndQueue+0x5c>)
 80026fe:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002700:	2200      	movs	r2, #0
 8002702:	210c      	movs	r1, #12
 8002704:	200a      	movs	r0, #10
 8002706:	f7fd fffd 	bl	8000704 <xQueueGenericCreate>
 800270a:	4603      	mov	r3, r0
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <prvCheckForValidListAndQueue+0x54>)
 800270e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <prvCheckForValidListAndQueue+0x54>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002718:	4b04      	ldr	r3, [pc, #16]	@ (800272c <prvCheckForValidListAndQueue+0x54>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4908      	ldr	r1, [pc, #32]	@ (8002740 <prvCheckForValidListAndQueue+0x68>)
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fb84 	bl	8000e2c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002724:	f000 f9c0 	bl	8002aa8 <vPortExitCritical>
    }
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200001a4 	.word	0x200001a4
 8002730:	20000174 	.word	0x20000174
 8002734:	20000188 	.word	0x20000188
 8002738:	2000019c 	.word	0x2000019c
 800273c:	200001a0 	.word	0x200001a0
 8002740:	08005514 	.word	0x08005514

08002744 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b04      	subs	r3, #4
 8002754:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800275c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b04      	subs	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3b04      	subs	r3, #4
 8002772:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002774:	4a0c      	ldr	r2, [pc, #48]	@ (80027a8 <pxPortInitialiseStack+0x64>)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3b14      	subs	r3, #20
 800277e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3b04      	subs	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f06f 0202 	mvn.w	r2, #2
 8002792:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3b20      	subs	r3, #32
 8002798:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	080027ad 	.word	0x080027ad

080027ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80027b6:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <prvTaskExitError+0x58>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d00b      	beq.n	80027d8 <prvTaskExitError+0x2c>
    __asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	60fb      	str	r3, [r7, #12]
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <prvTaskExitError+0x28>
    __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	60bb      	str	r3, [r7, #8]
}
 80027ea:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80027ec:	bf00      	nop
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0fc      	beq.n	80027ee <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000004 	.word	0x20000004
	...

08002810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002810:	4b07      	ldr	r3, [pc, #28]	@ (8002830 <pxCurrentTCBConst2>)
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	6808      	ldr	r0, [r1, #0]
 8002816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281a:	f380 8809 	msr	PSP, r0
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f04f 0000 	mov.w	r0, #0
 8002826:	f380 8811 	msr	BASEPRI, r0
 800282a:	4770      	bx	lr
 800282c:	f3af 8000 	nop.w

08002830 <pxCurrentTCBConst2>:
 8002830:	20000070 	.word	0x20000070
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop

08002838 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002838:	4808      	ldr	r0, [pc, #32]	@ (800285c <prvPortStartFirstTask+0x24>)
 800283a:	6800      	ldr	r0, [r0, #0]
 800283c:	6800      	ldr	r0, [r0, #0]
 800283e:	f380 8808 	msr	MSP, r0
 8002842:	f04f 0000 	mov.w	r0, #0
 8002846:	f380 8814 	msr	CONTROL, r0
 800284a:	b662      	cpsie	i
 800284c:	b661      	cpsie	f
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	df00      	svc	0
 8002858:	bf00      	nop
 800285a:	0000      	.short	0x0000
 800285c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop

08002864 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800286a:	4b69      	ldr	r3, [pc, #420]	@ (8002a10 <xPortStartScheduler+0x1ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a69      	ldr	r2, [pc, #420]	@ (8002a14 <xPortStartScheduler+0x1b0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d10b      	bne.n	800288c <xPortStartScheduler+0x28>
    __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800288c:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <xPortStartScheduler+0x1ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a61      	ldr	r2, [pc, #388]	@ (8002a18 <xPortStartScheduler+0x1b4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <xPortStartScheduler+0x4a>
    __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	623b      	str	r3, [r7, #32]
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80028ae:	4b5b      	ldr	r3, [pc, #364]	@ (8002a1c <xPortStartScheduler+0x1b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80028b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028b6:	332c      	adds	r3, #44	@ 0x2c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <xPortStartScheduler+0x1bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00b      	beq.n	80028d8 <xPortStartScheduler+0x74>
    __asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	3338      	adds	r3, #56	@ 0x38
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a51      	ldr	r2, [pc, #324]	@ (8002a24 <xPortStartScheduler+0x1c0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <xPortStartScheduler+0x98>
    __asm volatile
 80028e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	61bb      	str	r3, [r7, #24]
}
 80028f6:	bf00      	nop
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002900:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <xPortStartScheduler+0x1c4>)
 8002902:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800290c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290e:	22ff      	movs	r2, #255	@ 0xff
 8002910:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002922:	b2da      	uxtb	r2, r3
 8002924:	4b41      	ldr	r3, [pc, #260]	@ (8002a2c <xPortStartScheduler+0x1c8>)
 8002926:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002928:	4b40      	ldr	r3, [pc, #256]	@ (8002a2c <xPortStartScheduler+0x1c8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <xPortStartScheduler+0xe4>
    __asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	617b      	str	r3, [r7, #20]
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	e7fd      	b.n	8002944 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d013      	beq.n	800297e <xPortStartScheduler+0x11a>
    __asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	613b      	str	r3, [r7, #16]
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	e7fd      	b.n	800296a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	3301      	adds	r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002986:	2b80      	cmp	r3, #128	@ 0x80
 8002988:	d0f1      	beq.n	800296e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d103      	bne.n	8002998 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002990:	4b27      	ldr	r3, [pc, #156]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e004      	b.n	80029a2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	4a24      	ldr	r2, [pc, #144]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029a0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80029a2:	4b23      	ldr	r3, [pc, #140]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029aa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80029ac:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80029b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <xPortStartScheduler+0x1cc>)
 80029b6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029be:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a18      	ldr	r2, [pc, #96]	@ (8002a34 <xPortStartScheduler+0x1d0>)
 80029d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <xPortStartScheduler+0x1d4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80029de:	f000 f8e5 	bl	8002bac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80029e2:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <xPortStartScheduler+0x1d8>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80029e8:	f000 f904 	bl	8002bf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <xPortStartScheduler+0x1dc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <xPortStartScheduler+0x1dc>)
 80029f2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80029f8:	f7ff ff1e 	bl	8002838 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80029fc:	f7fe ffe8 	bl	80019d0 <vTaskSwitchContext>
    prvTaskExitError();
 8002a00:	f7ff fed4 	bl	80027ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3730      	adds	r7, #48	@ 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	410fc271 	.word	0x410fc271
 8002a18:	410fc270 	.word	0x410fc270
 8002a1c:	e000ed08 	.word	0xe000ed08
 8002a20:	08002811 	.word	0x08002811
 8002a24:	08002b01 	.word	0x08002b01
 8002a28:	e000e400 	.word	0xe000e400
 8002a2c:	200001b0 	.word	0x200001b0
 8002a30:	200001b4 	.word	0x200001b4
 8002a34:	e000ed20 	.word	0xe000ed20
 8002a38:	e000ed1c 	.word	0xe000ed1c
 8002a3c:	20000004 	.word	0x20000004
 8002a40:	e000ef34 	.word	0xe000ef34

08002a44 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
    __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	607b      	str	r3, [r7, #4]
}
 8002a5c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a0e      	ldr	r2, [pc, #56]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a66:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <vPortEnterCritical+0x5c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d110      	bne.n	8002a92 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <vPortEnterCritical+0x60>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <vPortEnterCritical+0x4e>
    __asm volatile
 8002a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	603b      	str	r3, [r7, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	e7fd      	b.n	8002a8e <vPortEnterCritical+0x4a>
    }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002aae:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10b      	bne.n	8002ace <vPortExitCritical+0x26>
    __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	e7fd      	b.n	8002aca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ad6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ad8:	4b07      	ldr	r3, [pc, #28]	@ (8002af8 <vPortExitCritical+0x50>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <vPortExitCritical+0x44>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002aea:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20000004 	.word	0x20000004
 8002afc:	00000000 	.word	0x00000000

08002b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b00:	f3ef 8009 	mrs	r0, PSP
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <pxCurrentTCBConst>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f01e 0f10 	tst.w	lr, #16
 8002b10:	bf08      	it	eq
 8002b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1a:	6010      	str	r0, [r2, #0]
 8002b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b24:	f380 8811 	msr	BASEPRI, r0
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f7fe ff4e 	bl	80019d0 <vTaskSwitchContext>
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f380 8811 	msr	BASEPRI, r0
 8002b3c:	bc09      	pop	{r0, r3}
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	6808      	ldr	r0, [r1, #0]
 8002b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b46:	f01e 0f10 	tst.w	lr, #16
 8002b4a:	bf08      	it	eq
 8002b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b50:	f380 8809 	msr	PSP, r0
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	f3af 8000 	nop.w

08002b60 <pxCurrentTCBConst>:
 8002b60:	20000070 	.word	0x20000070
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop

08002b68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
    __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	607b      	str	r3, [r7, #4]
}
 8002b80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002b82:	f7fe fe0b 	bl	800179c <xTaskIncrementTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <SysTick_Handler+0x40>)
 8002b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	603b      	str	r3, [r7, #0]
    __asm volatile
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	f383 8811 	msr	BASEPRI, r3
}
 8002b9e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	e000ed04 	.word	0xe000ed04

08002bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <vPortSetupTimerInterrupt+0x34>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <vPortSetupTimerInterrupt+0x38>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <vPortSetupTimerInterrupt+0x3c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bec <vPortSetupTimerInterrupt+0x40>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	4a09      	ldr	r2, [pc, #36]	@ (8002bf0 <vPortSetupTimerInterrupt+0x44>)
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <vPortSetupTimerInterrupt+0x34>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010
 8002be4:	e000e018 	.word	0xe000e018
 8002be8:	20000008 	.word	0x20000008
 8002bec:	10624dd3 	.word	0x10624dd3
 8002bf0:	e000e014 	.word	0xe000e014

08002bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002c04 <vPortEnableVFP+0x10>
 8002bf8:	6801      	ldr	r1, [r0, #0]
 8002bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002bfe:	6001      	str	r1, [r0, #0]
 8002c00:	4770      	bx	lr
 8002c02:	0000      	.short	0x0000
 8002c04:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop

08002c0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	@ 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d022      	beq.n	8002c64 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8002c1e:	2308      	movs	r3, #8
 8002c20:	43db      	mvns	r3, r3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d81b      	bhi.n	8002c60 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8002c28:	2208      	movs	r2, #8
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d014      	beq.n	8002c64 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	f1c3 0308 	rsb	r3, r3, #8
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d804      	bhi.n	8002c5a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c54:	4413      	add	r3, r2
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e004      	b.n	8002c64 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	e001      	b.n	8002c64 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8002c64:	f7fe fc68 	bl	8001538 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c68:	4b7a      	ldr	r3, [pc, #488]	@ (8002e54 <pvPortMalloc+0x248>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8002c70:	f000 f978 	bl	8002f64 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f2c0 80d3 	blt.w	8002e22 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80cf 	beq.w	8002e22 <pvPortMalloc+0x216>
 8002c84:	4b74      	ldr	r3, [pc, #464]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	f200 80c9 	bhi.w	8002e22 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c90:	4b72      	ldr	r3, [pc, #456]	@ (8002e5c <pvPortMalloc+0x250>)
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8002c94:	4b71      	ldr	r3, [pc, #452]	@ (8002e5c <pvPortMalloc+0x250>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	4a70      	ldr	r2, [pc, #448]	@ (8002e60 <pvPortMalloc+0x254>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d305      	bcc.n	8002cae <pvPortMalloc+0xa2>
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	4a6f      	ldr	r2, [pc, #444]	@ (8002e64 <pvPortMalloc+0x258>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d801      	bhi.n	8002cae <pvPortMalloc+0xa2>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <pvPortMalloc+0xa4>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d129      	bne.n	8002d08 <pvPortMalloc+0xfc>
    __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	623b      	str	r3, [r7, #32]
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	4a61      	ldr	r2, [pc, #388]	@ (8002e60 <pvPortMalloc+0x254>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d305      	bcc.n	8002cea <pvPortMalloc+0xde>
 8002cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce0:	4a60      	ldr	r2, [pc, #384]	@ (8002e64 <pvPortMalloc+0x258>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d801      	bhi.n	8002cea <pvPortMalloc+0xde>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <pvPortMalloc+0xe0>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <pvPortMalloc+0xfc>
    __asm volatile
 8002cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	61fb      	str	r3, [r7, #28]
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d903      	bls.n	8002d1a <pvPortMalloc+0x10e>
 8002d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1d8      	bne.n	8002ccc <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e54 <pvPortMalloc+0x248>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d07e      	beq.n	8002e22 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	4413      	add	r3, r2
 8002d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8002d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d30:	4a4b      	ldr	r2, [pc, #300]	@ (8002e60 <pvPortMalloc+0x254>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d305      	bcc.n	8002d42 <pvPortMalloc+0x136>
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d38:	4a4a      	ldr	r2, [pc, #296]	@ (8002e64 <pvPortMalloc+0x258>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d801      	bhi.n	8002d42 <pvPortMalloc+0x136>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <pvPortMalloc+0x138>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10b      	bne.n	8002d60 <pvPortMalloc+0x154>
    __asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	61bb      	str	r3, [r7, #24]
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d90b      	bls.n	8002d8a <pvPortMalloc+0x17e>
    __asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	e7fd      	b.n	8002d86 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	1ad2      	subs	r2, r2, r3
 8002d92:	2308      	movs	r3, #8
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d924      	bls.n	8002de4 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <pvPortMalloc+0x1b8>
    __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	613b      	str	r3, [r7, #16]
}
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	1ad2      	subs	r2, r2, r3
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de2:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002de4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a1a      	ldr	r2, [pc, #104]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002df2:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <pvPortMalloc+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002dfe:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <pvPortMalloc+0x24c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <pvPortMalloc+0x25c>)
 8002e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e10:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <pvPortMalloc+0x260>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <pvPortMalloc+0x260>)
 8002e20:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002e22:	f7fe fb97 	bl	8001554 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <pvPortMalloc+0x23c>
    __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <pvPortMalloc+0x238>
    return pvReturn;
 8002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3738      	adds	r7, #56	@ 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20012dc0 	.word	0x20012dc0
 8002e58:	20012dc4 	.word	0x20012dc4
 8002e5c:	20012db8 	.word	0x20012db8
 8002e60:	200001b8 	.word	0x200001b8
 8002e64:	20012db7 	.word	0x20012db7
 8002e68:	20012dc8 	.word	0x20012dc8
 8002e6c:	20012dcc 	.word	0x20012dcc

08002e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b088      	sub	sp, #32
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d064      	beq.n	8002f4c <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e82:	2308      	movs	r3, #8
 8002e84:	425b      	negs	r3, r3
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	4a30      	ldr	r2, [pc, #192]	@ (8002f54 <vPortFree+0xe4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d305      	bcc.n	8002ea4 <vPortFree+0x34>
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <vPortFree+0xe8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d801      	bhi.n	8002ea4 <vPortFree+0x34>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <vPortFree+0x36>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <vPortFree+0x52>
    __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	617b      	str	r3, [r7, #20]
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <vPortFree+0x72>
    __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	613b      	str	r3, [r7, #16]
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <vPortFree+0x92>
    __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60fb      	str	r3, [r7, #12]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	0fdb      	lsrs	r3, r3, #31
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d118      	bne.n	8002f4c <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8002f26:	f7fe fb07 	bl	8001538 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <vPortFree+0xec>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4413      	add	r3, r2
 8002f34:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <vPortFree+0xec>)
 8002f36:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002f38:	69b8      	ldr	r0, [r7, #24]
 8002f3a:	f000 f86d 	bl	8003018 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <vPortFree+0xf0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a06      	ldr	r2, [pc, #24]	@ (8002f60 <vPortFree+0xf0>)
 8002f46:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002f48:	f7fe fb04 	bl	8001554 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002f4c:	bf00      	nop
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	200001b8 	.word	0x200001b8
 8002f58:	20012db7 	.word	0x20012db7
 8002f5c:	20012dc4 	.word	0x20012dc4
 8002f60:	20012dd0 	.word	0x20012dd0

08002f64 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002f6a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002f70:	4b24      	ldr	r3, [pc, #144]	@ (8003004 <prvHeapInit+0xa0>)
 8002f72:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	3307      	adds	r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0307 	bic.w	r3, r3, #7
 8002f8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <prvHeapInit+0xa0>)
 8002f94:	4413      	add	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <prvHeapInit+0xa4>)
 8002f9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003008 <prvHeapInit+0xa4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4413      	add	r3, r2
 8002faa:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002fac:	2208      	movs	r2, #8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <prvHeapInit+0xa8>)
 8002fc0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <prvHeapInit+0xa8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <prvHeapInit+0xa8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <prvHeapInit+0xa8>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a08      	ldr	r2, [pc, #32]	@ (8003010 <prvHeapInit+0xac>)
 8002fee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <prvHeapInit+0xb0>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	200001b8 	.word	0x200001b8
 8003008:	20012db8 	.word	0x20012db8
 800300c:	20012dc0 	.word	0x20012dc0
 8003010:	20012dc8 	.word	0x20012dc8
 8003014:	20012dc4 	.word	0x20012dc4

08003018 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003020:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	e002      	b.n	800302c <prvInsertBlockIntoFreeList+0x14>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d8f7      	bhi.n	8003026 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <prvInsertBlockIntoFreeList+0xe4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d018      	beq.n	8003070 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <prvInsertBlockIntoFreeList+0xe8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d305      	bcc.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <prvInsertBlockIntoFreeList+0xec>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d801      	bhi.n	8003052 <prvInsertBlockIntoFreeList+0x3a>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <prvInsertBlockIntoFreeList+0x3c>
 8003052:	2300      	movs	r3, #0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	60fb      	str	r3, [r7, #12]
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	429a      	cmp	r2, r3
 8003080:	d108      	bne.n	8003094 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	441a      	add	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	441a      	add	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d118      	bne.n	80030da <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d00d      	beq.n	80030d0 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	441a      	add	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e008      	b.n	80030e2 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80030d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003108 <prvInsertBlockIntoFreeList+0xf0>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e003      	b.n	80030e2 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d002      	beq.n	80030f0 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20012db8 	.word	0x20012db8
 8003100:	200001b8 	.word	0x200001b8
 8003104:	20012db7 	.word	0x20012db7
 8003108:	20012dc0 	.word	0x20012dc0

0800310c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003112:	f000 fb5f 	bl	80037d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003116:	f000 f861 	bl	80031dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800311a:	f000 f8f3 	bl	8003304 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800311e:	f000 f8c7 	bl	80032b0 <MX_USART2_UART_Init>
  
  /* Create the two queues, both of which send character pointers.
     The priority of the receiving task is above the priority of the
     sending tasks, so the queues will never have more than one item
     in them at any one time */
  xQueue1 = xQueueCreate( 1, sizeof( char * ) );
 8003122:	2200      	movs	r2, #0
 8003124:	2104      	movs	r1, #4
 8003126:	2001      	movs	r0, #1
 8003128:	f7fd faec 	bl	8000704 <xQueueGenericCreate>
 800312c:	4603      	mov	r3, r0
 800312e:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <main+0xac>)
 8003130:	6013      	str	r3, [r2, #0]
  xQueue2 = xQueueCreate( 1, sizeof( char * ) );
 8003132:	2200      	movs	r2, #0
 8003134:	2104      	movs	r1, #4
 8003136:	2001      	movs	r0, #1
 8003138:	f7fd fae4 	bl	8000704 <xQueueGenericCreate>
 800313c:	4603      	mov	r3, r0
 800313e:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <main+0xb0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Create the queue set.
     Two queues will be added to the set, each of which can contain 1 item,
     so the maximum number of queue handles the queue set will ever
     have to hold at one item is 2 (2 queues multiplied by 1 item per queue) */
  xQueueSet = xQueueCreateSet( 1 * 2 );
 8003142:	2002      	movs	r0, #2
 8003144:	f7fd fef6 	bl	8000f34 <xQueueCreateSet>
 8003148:	4603      	mov	r3, r0
 800314a:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <main+0xb4>)
 800314c:	6013      	str	r3, [r2, #0]

  /* add the two queues to the set */
  xQueueAddToSet( xQueue1, xQueueSet );
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <main+0xac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	@ (80031c0 <main+0xb4>)
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd fefa 	bl	8000f52 <xQueueAddToSet>
  xQueueAddToSet( xQueue2, xQueueSet );
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <main+0xb0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <main+0xb4>)
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd fef2 	bl	8000f52 <xQueueAddToSet>

  /* create the tasks that send to the queues (their priority is lower than that of
     the receiving task) */
  xTaskCreate( vSenderTask1, "Sender1", 1000, NULL, 1, NULL );
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2301      	movs	r3, #1
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2300      	movs	r3, #0
 8003178:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800317c:	4911      	ldr	r1, [pc, #68]	@ (80031c4 <main+0xb8>)
 800317e:	4812      	ldr	r0, [pc, #72]	@ (80031c8 <main+0xbc>)
 8003180:	f7fd ffca 	bl	8001118 <xTaskCreate>
  xTaskCreate( vSenderTask2, "Sender2", 1000, NULL, 1, NULL );
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2301      	movs	r3, #1
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003192:	490e      	ldr	r1, [pc, #56]	@ (80031cc <main+0xc0>)
 8003194:	480e      	ldr	r0, [pc, #56]	@ (80031d0 <main+0xc4>)
 8003196:	f7fd ffbf 	bl	8001118 <xTaskCreate>

  /* create the task that reads from the queue set to determine which of the
     two queues contain data (higher priority than sending tasks) */
  xTaskCreate( vReceiverTask, "Receiver", 1000, NULL, 2, NULL );
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2300      	movs	r3, #0
 80031a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031a8:	490a      	ldr	r1, [pc, #40]	@ (80031d4 <main+0xc8>)
 80031aa:	480b      	ldr	r0, [pc, #44]	@ (80031d8 <main+0xcc>)
 80031ac:	f7fd ffb4 	bl	8001118 <xTaskCreate>

  /* start the scheduler so the tasks start executing */
  vTaskStartScheduler();
 80031b0:	f7fe f97e 	bl	80014b0 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <main+0xa8>
 80031b8:	20012e1c 	.word	0x20012e1c
 80031bc:	20012e20 	.word	0x20012e20
 80031c0:	20012e24 	.word	0x20012e24
 80031c4:	0800551c 	.word	0x0800551c
 80031c8:	08003465 	.word	0x08003465
 80031cc:	08005524 	.word	0x08005524
 80031d0:	08003499 	.word	0x08003499
 80031d4:	0800552c 	.word	0x0800552c
 80031d8:	080034cd 	.word	0x080034cd

080031dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b094      	sub	sp, #80	@ 0x50
 80031e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031e2:	f107 0320 	add.w	r3, r7, #32
 80031e6:	2230      	movs	r2, #48	@ 0x30
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 f944 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <SystemClock_Config+0xcc>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a27      	ldr	r2, [pc, #156]	@ (80032a8 <SystemClock_Config+0xcc>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <SystemClock_Config+0xcc>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800321c:	2300      	movs	r3, #0
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	4b22      	ldr	r3, [pc, #136]	@ (80032ac <SystemClock_Config+0xd0>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <SystemClock_Config+0xd0>)
 8003226:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <SystemClock_Config+0xd0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003238:	2302      	movs	r3, #2
 800323a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800323c:	2301      	movs	r3, #1
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003240:	2310      	movs	r3, #16
 8003242:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003244:	2302      	movs	r3, #2
 8003246:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800324c:	2308      	movs	r3, #8
 800324e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003250:	2332      	movs	r3, #50	@ 0x32
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003254:	2304      	movs	r3, #4
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003258:	2307      	movs	r3, #7
 800325a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800325c:	f107 0320 	add.w	r3, r7, #32
 8003260:	4618      	mov	r0, r3
 8003262:	f000 fd91 	bl	8003d88 <HAL_RCC_OscConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800326c:	f000 f95e 	bl	800352c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003270:	230f      	movs	r3, #15
 8003272:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003274:	2302      	movs	r3, #2
 8003276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800327c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003280:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003286:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003288:	f107 030c 	add.w	r3, r7, #12
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fff2 	bl	8004278 <HAL_RCC_ClockConfig>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800329a:	f000 f947 	bl	800352c <Error_Handler>
  }
}
 800329e:	bf00      	nop
 80032a0:	3750      	adds	r7, #80	@ 0x50
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000

080032b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032b4:	4b11      	ldr	r3, [pc, #68]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <MX_USART2_UART_Init+0x50>)
 80032b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c2:	4b0e      	ldr	r3, [pc, #56]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ce:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032d4:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032d6:	220c      	movs	r2, #12
 80032d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032e6:	4805      	ldr	r0, [pc, #20]	@ (80032fc <MX_USART2_UART_Init+0x4c>)
 80032e8:	f001 fcba 	bl	8004c60 <HAL_UART_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032f2:	f000 f91b 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20012dd4 	.word	0x20012dd4
 8003300:	40004400 	.word	0x40004400

08003304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330a:	f107 0314 	add.w	r3, r7, #20
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	609a      	str	r2, [r3, #8]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	4b3c      	ldr	r3, [pc, #240]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	@ 0x30
 800332a:	4b39      	ldr	r3, [pc, #228]	@ (8003410 <MX_GPIO_Init+0x10c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
 800333a:	4b35      	ldr	r3, [pc, #212]	@ (8003410 <MX_GPIO_Init+0x10c>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	4a34      	ldr	r2, [pc, #208]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	6313      	str	r3, [r2, #48]	@ 0x30
 8003346:	4b32      	ldr	r3, [pc, #200]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b2e      	ldr	r3, [pc, #184]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	4a2d      	ldr	r2, [pc, #180]	@ (8003410 <MX_GPIO_Init+0x10c>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6313      	str	r3, [r2, #48]	@ 0x30
 8003362:	4b2b      	ldr	r3, [pc, #172]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b27      	ldr	r3, [pc, #156]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b24      	ldr	r3, [pc, #144]	@ (8003410 <MX_GPIO_Init+0x10c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003390:	4820      	ldr	r0, [pc, #128]	@ (8003414 <MX_GPIO_Init+0x110>)
 8003392:	f000 fcdf 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003396:	2301      	movs	r3, #1
 8003398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800339a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800339e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4619      	mov	r1, r3
 80033aa:	481b      	ldr	r0, [pc, #108]	@ (8003418 <MX_GPIO_Init+0x114>)
 80033ac:	f000 fb36 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80033b0:	2304      	movs	r3, #4
 80033b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	4619      	mov	r1, r3
 80033c2:	4816      	ldr	r0, [pc, #88]	@ (800341c <MX_GPIO_Init+0x118>)
 80033c4:	f000 fb2a 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80033c8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80033cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ce:	2301      	movs	r3, #1
 80033d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	480c      	ldr	r0, [pc, #48]	@ (8003414 <MX_GPIO_Init+0x110>)
 80033e2:	f000 fb1b 	bl	8003a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80033f6:	2306      	movs	r3, #6
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	4807      	ldr	r0, [pc, #28]	@ (8003420 <MX_GPIO_Init+0x11c>)
 8003402:	f000 fb0b 	bl	8003a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003406:	bf00      	nop
 8003408:	3728      	adds	r7, #40	@ 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40020c00 	.word	0x40020c00
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800

08003424 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e00b      	b.n	800344c <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	18d1      	adds	r1, r2, r3
 800343a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800343e:	2201      	movs	r2, #1
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fc5d 	bl	8004d00 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	3301      	adds	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ed      	bne.n	8003434 <UART2_Print_Text+0x10>
  }
}
 8003458:	bf00      	nop
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <vSenderTask1>:

void vSenderTask1( void *pvParameters )
{ 
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* get 100 milliseconds equivalency in tick interrupts */
  const TickType_t xBlockTime = pdMS_TO_TICKS( 100 );
 800346c:	2364      	movs	r3, #100	@ 0x64
 800346e:	60fb      	str	r3, [r7, #12]

  /* string to be printed out by task 1 */
  const char * const pcMessage = "Message from vSenderTask1\n\r";
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <vSenderTask1+0x2c>)
 8003472:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* block for 100ms */
    vTaskDelay( xBlockTime );
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7fd ff9b 	bl	80013b0 <vTaskDelay>
       because the priority of the task that reads from the queue is
       higher than the priority of this task; as soon as this task writes
       to the queue it will be pre-empted by the task that reads from the
       queue, so the queue will already be empty again by the time the
       call to xQueueSend() returns. The block time is set to 0 */
    xQueueSend( xQueue1, &pcMessage, 0 );
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <vSenderTask1+0x30>)
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	f107 0108 	add.w	r1, r7, #8
 8003482:	2300      	movs	r3, #0
 8003484:	2200      	movs	r2, #0
 8003486:	f7fd f9b3 	bl	80007f0 <xQueueGenericSend>
    vTaskDelay( xBlockTime );
 800348a:	bf00      	nop
 800348c:	e7f2      	b.n	8003474 <vSenderTask1+0x10>
 800348e:	bf00      	nop
 8003490:	08005538 	.word	0x08005538
 8003494:	20012e1c 	.word	0x20012e1c

08003498 <vSenderTask2>:
  }
}

void vSenderTask2( void *pvParameters )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* get 200 milliseconds equivalency in tick interrupts */
  const TickType_t xBlockTime = pdMS_TO_TICKS( 200 );
 80034a0:	23c8      	movs	r3, #200	@ 0xc8
 80034a2:	60fb      	str	r3, [r7, #12]

  /* string to be printed out by task 2 */
  const char * const pcMessage = "Message from vSenderTask2\n\r";
 80034a4:	4b07      	ldr	r3, [pc, #28]	@ (80034c4 <vSenderTask2+0x2c>)
 80034a6:	60bb      	str	r3, [r7, #8]

  /* as per most tasks, this task is implemented in an infinite loop */
  for ( ;; )
  {
    /* block for 200ms */
    vTaskDelay( xBlockTime );
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f7fd ff81 	bl	80013b0 <vTaskDelay>
       because the priority of the task that reads from the queue is
       higher than the priority of this task; as soon as this task writes
       to the queue it will be pre-empted by the task that reads from the
       queue, so the queue will already be empty again by the time the
       call to xQueueSend() returns. The block time is set to 0 */
    xQueueSend( xQueue2, &pcMessage, 0 );
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <vSenderTask2+0x30>)
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	f107 0108 	add.w	r1, r7, #8
 80034b6:	2300      	movs	r3, #0
 80034b8:	2200      	movs	r2, #0
 80034ba:	f7fd f999 	bl	80007f0 <xQueueGenericSend>
    vTaskDelay( xBlockTime );
 80034be:	bf00      	nop
 80034c0:	e7f2      	b.n	80034a8 <vSenderTask2+0x10>
 80034c2:	bf00      	nop
 80034c4:	08005554 	.word	0x08005554
 80034c8:	20012e20 	.word	0x20012e20

080034cc <vReceiverTask>:
  }
}

void vReceiverTask( void *pvParameters )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
       contain data.
       Cast the QueueSetMemberHandle_t value returned from
       xQueueSelectFromSet() to a QueueHandle_t, as it is known all the
       members of the set are queues (the queue set does not contain any
       semaphores) */
    xQueueThatContainsData = ( QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY );
 80034d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003500 <vReceiverTask+0x34>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f04f 31ff 	mov.w	r1, #4294967295
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fd59 	bl	8000f94 <xQueueSelectFromSet>
 80034e2:	60f8      	str	r0, [r7, #12]
       queues in the set contained data, and xQueueThatContainsData cannot
       be NULL.
       Read from the queue. It is not necessary to specify a
       block time because it is known the queue contains data.
       The block time is set to 0 */
    xQueueReceive( xQueueThatContainsData, &pcReceivedString, 0 );
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	2200      	movs	r2, #0
 80034ea:	4619      	mov	r1, r3
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f7fd fa9d 	bl	8000a2c <xQueueReceive>

    /* print the string received from the queue */
    UART2_Print_Text( &huart2, pcReceivedString );
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4619      	mov	r1, r3
 80034f6:	4803      	ldr	r0, [pc, #12]	@ (8003504 <vReceiverTask+0x38>)
 80034f8:	f7ff ff94 	bl	8003424 <UART2_Print_Text>
    xQueueThatContainsData = ( QueueHandle_t ) xQueueSelectFromSet( xQueueSet, portMAX_DELAY );
 80034fc:	bf00      	nop
 80034fe:	e7e9      	b.n	80034d4 <vReceiverTask+0x8>
 8003500:	20012e24 	.word	0x20012e24
 8003504:	20012dd4 	.word	0x20012dd4

08003508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d101      	bne.n	800351e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800351a:	f000 f97d 	bl	8003818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40001000 	.word	0x40001000

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <Error_Handler+0x8>

08003538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <HAL_MspInit+0x4c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	4a0f      	ldr	r2, [pc, #60]	@ (8003584 <HAL_MspInit+0x4c>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800354c:	6453      	str	r3, [r2, #68]	@ 0x44
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_MspInit+0x4c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_MspInit+0x4c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <HAL_MspInit+0x4c>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_MspInit+0x4c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 0314 	add.w	r3, r7, #20
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	@ (800360c <HAL_UART_MspInit+0x84>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d12b      	bne.n	8003602 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	4b18      	ldr	r3, [pc, #96]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	4a10      	ldr	r2, [pc, #64]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <HAL_UART_MspInit+0x88>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035e2:	230c      	movs	r3, #12
 80035e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	2302      	movs	r3, #2
 80035e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ee:	2303      	movs	r3, #3
 80035f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035f2:	2307      	movs	r3, #7
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	4619      	mov	r1, r3
 80035fc:	4805      	ldr	r0, [pc, #20]	@ (8003614 <HAL_UART_MspInit+0x8c>)
 80035fe:	f000 fa0d 	bl	8003a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003602:	bf00      	nop
 8003604:	3728      	adds	r7, #40	@ 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40004400 	.word	0x40004400
 8003610:	40023800 	.word	0x40023800
 8003614:	40020000 	.word	0x40020000

08003618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08e      	sub	sp, #56	@ 0x38
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	4b33      	ldr	r3, [pc, #204]	@ (80036fc <HAL_InitTick+0xe4>)
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	4a32      	ldr	r2, [pc, #200]	@ (80036fc <HAL_InitTick+0xe4>)
 8003632:	f043 0310 	orr.w	r3, r3, #16
 8003636:	6413      	str	r3, [r2, #64]	@ 0x40
 8003638:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_InitTick+0xe4>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003644:	f107 0210 	add.w	r2, r7, #16
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f001 f832 	bl	80046b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800365e:	f001 f803 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8003662:	6378      	str	r0, [r7, #52]	@ 0x34
 8003664:	e004      	b.n	8003670 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003666:	f000 ffff 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 800366a:	4603      	mov	r3, r0
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003672:	4a23      	ldr	r2, [pc, #140]	@ (8003700 <HAL_InitTick+0xe8>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	0c9b      	lsrs	r3, r3, #18
 800367a:	3b01      	subs	r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800367e:	4b21      	ldr	r3, [pc, #132]	@ (8003704 <HAL_InitTick+0xec>)
 8003680:	4a21      	ldr	r2, [pc, #132]	@ (8003708 <HAL_InitTick+0xf0>)
 8003682:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003684:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <HAL_InitTick+0xec>)
 8003686:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800368a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800368c:	4a1d      	ldr	r2, [pc, #116]	@ (8003704 <HAL_InitTick+0xec>)
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_InitTick+0xec>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003698:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_InitTick+0xec>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b19      	ldr	r3, [pc, #100]	@ (8003704 <HAL_InitTick+0xec>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036a4:	4817      	ldr	r0, [pc, #92]	@ (8003704 <HAL_InitTick+0xec>)
 80036a6:	f001 f839 	bl	800471c <HAL_TIM_Base_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11b      	bne.n	80036f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036b8:	4812      	ldr	r0, [pc, #72]	@ (8003704 <HAL_InitTick+0xec>)
 80036ba:	f001 f889 	bl	80047d0 <HAL_TIM_Base_Start_IT>
 80036be:	4603      	mov	r3, r0
 80036c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036cc:	2036      	movs	r0, #54	@ 0x36
 80036ce:	f000 f997 	bl	8003a00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d808      	bhi.n	80036ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036d8:	2200      	movs	r2, #0
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	2036      	movs	r0, #54	@ 0x36
 80036de:	f000 f973 	bl	80039c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036e2:	4a0a      	ldr	r2, [pc, #40]	@ (800370c <HAL_InitTick+0xf4>)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e002      	b.n	80036f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3738      	adds	r7, #56	@ 0x38
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	431bde83 	.word	0x431bde83
 8003704:	20012e28 	.word	0x20012e28
 8003708:	40001000 	.word	0x40001000
 800370c:	2000000c 	.word	0x2000000c

08003710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003714:	bf00      	nop
 8003716:	e7fd      	b.n	8003714 <NMI_Handler+0x4>

08003718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800371c:	bf00      	nop
 800371e:	e7fd      	b.n	800371c <HardFault_Handler+0x4>

08003720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <MemManage_Handler+0x4>

08003728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <BusFault_Handler+0x4>

08003730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <UsageFault_Handler+0x4>

08003738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800374c:	4802      	ldr	r0, [pc, #8]	@ (8003758 <TIM6_DAC_IRQHandler+0x10>)
 800374e:	f001 f8af 	bl	80048b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20012e28 	.word	0x20012e28

0800375c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003760:	4b06      	ldr	r3, [pc, #24]	@ (800377c <SystemInit+0x20>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	4a05      	ldr	r2, [pc, #20]	@ (800377c <SystemInit+0x20>)
 8003768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800376c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003784:	f7ff ffea 	bl	800375c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003788:	480c      	ldr	r0, [pc, #48]	@ (80037bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800378a:	490d      	ldr	r1, [pc, #52]	@ (80037c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800378c:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003790:	e002      	b.n	8003798 <LoopCopyDataInit>

08003792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003796:	3304      	adds	r3, #4

08003798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800379c:	d3f9      	bcc.n	8003792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379e:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037a0:	4c0a      	ldr	r4, [pc, #40]	@ (80037cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a4:	e001      	b.n	80037aa <LoopFillZerobss>

080037a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a8:	3204      	adds	r2, #4

080037aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ac:	d3fb      	bcc.n	80037a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ae:	f001 fe6b 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037b2:	f7ff fcab 	bl	800310c <main>
  bx  lr    
 80037b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80037c4:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 80037c8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80037cc:	20012e74 	.word	0x20012e74

080037d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC_IRQHandler>
	...

080037d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003814 <HAL_Init+0x40>)
 80037de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003814 <HAL_Init+0x40>)
 80037ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <HAL_Init+0x40>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a07      	ldr	r2, [pc, #28]	@ (8003814 <HAL_Init+0x40>)
 80037f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fc:	2003      	movs	r0, #3
 80037fe:	f000 f8d8 	bl	80039b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003802:	2000      	movs	r0, #0
 8003804:	f7ff ff08 	bl	8003618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003808:	f7ff fe96 	bl	8003538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023c00 	.word	0x40023c00

08003818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_IncTick+0x20>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_IncTick+0x24>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4413      	add	r3, r2
 8003828:	4a04      	ldr	r2, [pc, #16]	@ (800383c <HAL_IncTick+0x24>)
 800382a:	6013      	str	r3, [r2, #0]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	20000010 	.word	0x20000010
 800383c:	20012e70 	.word	0x20012e70

08003840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return uwTick;
 8003844:	4b03      	ldr	r3, [pc, #12]	@ (8003854 <HAL_GetTick+0x14>)
 8003846:	681b      	ldr	r3, [r3, #0]
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20012e70 	.word	0x20012e70

08003858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003874:	4013      	ands	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800388a:	4a04      	ldr	r2, [pc, #16]	@ (800389c <__NVIC_SetPriorityGrouping+0x44>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	60d3      	str	r3, [r2, #12]
}
 8003890:	bf00      	nop
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000ed00 	.word	0xe000ed00

080038a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <__NVIC_GetPriorityGrouping+0x18>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	f003 0307 	and.w	r3, r3, #7
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4907      	ldr	r1, [pc, #28]	@ (80038f4 <__NVIC_EnableIRQ+0x38>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	@ (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	@ (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394c:	b480      	push	{r7}
 800394e:	b089      	sub	sp, #36	@ 0x24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf28      	it	cs
 800396a:	2304      	movcs	r3, #4
 800396c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3304      	adds	r3, #4
 8003972:	2b06      	cmp	r3, #6
 8003974:	d902      	bls.n	800397c <NVIC_EncodePriority+0x30>
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3b03      	subs	r3, #3
 800397a:	e000      	b.n	800397e <NVIC_EncodePriority+0x32>
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003980:	f04f 32ff 	mov.w	r2, #4294967295
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	401a      	ands	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	fa01 f303 	lsl.w	r3, r1, r3
 800399e:	43d9      	mvns	r1, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a4:	4313      	orrs	r3, r2
         );
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3724      	adds	r7, #36	@ 0x24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff4c 	bl	8003858 <__NVIC_SetPriorityGrouping>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039da:	f7ff ff61 	bl	80038a0 <__NVIC_GetPriorityGrouping>
 80039de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	6978      	ldr	r0, [r7, #20]
 80039e6:	f7ff ffb1 	bl	800394c <NVIC_EncodePriority>
 80039ea:	4602      	mov	r2, r0
 80039ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff80 	bl	80038f8 <__NVIC_SetPriority>
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff54 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	@ 0x24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e16b      	b.n	8003d10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	f040 815a 	bne.w	8003d0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d005      	beq.n	8003a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d130      	bne.n	8003ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 0201 	and.w	r2, r3, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d017      	beq.n	8003b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43db      	mvns	r3, r3
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4013      	ands	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d123      	bne.n	8003b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	08da      	lsrs	r2, r3, #3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3208      	adds	r2, #8
 8003b5a:	69b9      	ldr	r1, [r7, #24]
 8003b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80b4 	beq.w	8003d0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	4b60      	ldr	r3, [pc, #384]	@ (8003d28 <HAL_GPIO_Init+0x30c>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	4a5f      	ldr	r2, [pc, #380]	@ (8003d28 <HAL_GPIO_Init+0x30c>)
 8003bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d28 <HAL_GPIO_Init+0x30c>)
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8003d2c <HAL_GPIO_Init+0x310>)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a52      	ldr	r2, [pc, #328]	@ (8003d30 <HAL_GPIO_Init+0x314>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02b      	beq.n	8003c42 <HAL_GPIO_Init+0x226>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a51      	ldr	r2, [pc, #324]	@ (8003d34 <HAL_GPIO_Init+0x318>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d025      	beq.n	8003c3e <HAL_GPIO_Init+0x222>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a50      	ldr	r2, [pc, #320]	@ (8003d38 <HAL_GPIO_Init+0x31c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01f      	beq.n	8003c3a <HAL_GPIO_Init+0x21e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a4f      	ldr	r2, [pc, #316]	@ (8003d3c <HAL_GPIO_Init+0x320>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x21a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a4e      	ldr	r2, [pc, #312]	@ (8003d40 <HAL_GPIO_Init+0x324>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x216>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a4d      	ldr	r2, [pc, #308]	@ (8003d44 <HAL_GPIO_Init+0x328>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x212>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a4c      	ldr	r2, [pc, #304]	@ (8003d48 <HAL_GPIO_Init+0x32c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x20e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d4c <HAL_GPIO_Init+0x330>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x20a>
 8003c22:	2307      	movs	r3, #7
 8003c24:	e00e      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c26:	2308      	movs	r3, #8
 8003c28:	e00c      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c2a:	2306      	movs	r3, #6
 8003c2c:	e00a      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c2e:	2305      	movs	r3, #5
 8003c30:	e008      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c36:	2303      	movs	r3, #3
 8003c38:	e004      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_GPIO_Init+0x228>
 8003c42:	2300      	movs	r3, #0
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	f002 0203 	and.w	r2, r2, #3
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	4093      	lsls	r3, r2
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c54:	4935      	ldr	r1, [pc, #212]	@ (8003d2c <HAL_GPIO_Init+0x310>)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c86:	4a32      	ldr	r2, [pc, #200]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c8c:	4b30      	ldr	r3, [pc, #192]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb0:	4a27      	ldr	r2, [pc, #156]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cda:	4a1d      	ldr	r2, [pc, #116]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d04:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <HAL_GPIO_Init+0x334>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	f67f ae90 	bls.w	8003a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d18:	bf00      	nop
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020400 	.word	0x40020400
 8003d38:	40020800 	.word	0x40020800
 8003d3c:	40020c00 	.word	0x40020c00
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40021800 	.word	0x40021800
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40013c00 	.word	0x40013c00

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d70:	e003      	b.n	8003d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	041a      	lsls	r2, r3, #16
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e267      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d075      	beq.n	8003e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da6:	4b88      	ldr	r3, [pc, #544]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b85      	ldr	r3, [pc, #532]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dbe:	4b82      	ldr	r3, [pc, #520]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dca:	d10b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05b      	beq.n	8003e90 <HAL_RCC_OscConfig+0x108>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d157      	bne.n	8003e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e242      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x74>
 8003dee:	4b76      	ldr	r3, [pc, #472]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a75      	ldr	r2, [pc, #468]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	e01d      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e04:	d10c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x98>
 8003e06:	4b70      	ldr	r3, [pc, #448]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6f      	ldr	r2, [pc, #444]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b6d      	ldr	r3, [pc, #436]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6c      	ldr	r2, [pc, #432]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCC_OscConfig+0xb0>
 8003e20:	4b69      	ldr	r3, [pc, #420]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a68      	ldr	r2, [pc, #416]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	4b66      	ldr	r3, [pc, #408]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a65      	ldr	r2, [pc, #404]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d013      	beq.n	8003e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7ff fcfe 	bl	8003840 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e48:	f7ff fcfa 	bl	8003840 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e207      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0xc0>
 8003e66:	e014      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7ff fcea 	bl	8003840 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7ff fce6 	bl	8003840 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e1f3      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	4b51      	ldr	r3, [pc, #324]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f0      	bne.n	8003e70 <HAL_RCC_OscConfig+0xe8>
 8003e8e:	e000      	b.n	8003e92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d063      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b47      	ldr	r3, [pc, #284]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eb6:	4b44      	ldr	r3, [pc, #272]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d116      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	4b41      	ldr	r3, [pc, #260]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e1c7      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	4b3b      	ldr	r3, [pc, #236]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4937      	ldr	r1, [pc, #220]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	e03a      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d020      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ef8:	4b34      	ldr	r3, [pc, #208]	@ (8003fcc <HAL_RCC_OscConfig+0x244>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7ff fc9f 	bl	8003840 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f06:	f7ff fc9b 	bl	8003840 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1a8      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4925      	ldr	r1, [pc, #148]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <HAL_RCC_OscConfig+0x244>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f40:	f7ff fc7e 	bl	8003840 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f48:	f7ff fc7a 	bl	8003840 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e187      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f0      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d036      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d016      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7a:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <HAL_RCC_OscConfig+0x248>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f80:	f7ff fc5e 	bl	8003840 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7ff fc5a 	bl	8003840 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e167      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc8 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCC_OscConfig+0x200>
 8003fa6:	e01b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa8:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <HAL_RCC_OscConfig+0x248>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fae:	f7ff fc47 	bl	8003840 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb4:	e00e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb6:	f7ff fc43 	bl	8003840 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d907      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e150      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	42470000 	.word	0x42470000
 8003fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd4:	4b88      	ldr	r3, [pc, #544]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ea      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8097 	beq.w	800411c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ff2:	4b81      	ldr	r3, [pc, #516]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10f      	bne.n	800401e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	4b7d      	ldr	r3, [pc, #500]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	4a7c      	ldr	r2, [pc, #496]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	@ 0x40
 800400e:	4b7a      	ldr	r3, [pc, #488]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401e:	4b77      	ldr	r3, [pc, #476]	@ (80041fc <HAL_RCC_OscConfig+0x474>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d118      	bne.n	800405c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402a:	4b74      	ldr	r3, [pc, #464]	@ (80041fc <HAL_RCC_OscConfig+0x474>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a73      	ldr	r2, [pc, #460]	@ (80041fc <HAL_RCC_OscConfig+0x474>)
 8004030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004036:	f7ff fc03 	bl	8003840 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403e:	f7ff fbff 	bl	8003840 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e10c      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004050:	4b6a      	ldr	r3, [pc, #424]	@ (80041fc <HAL_RCC_OscConfig+0x474>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0f0      	beq.n	800403e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d106      	bne.n	8004072 <HAL_RCC_OscConfig+0x2ea>
 8004064:	4b64      	ldr	r3, [pc, #400]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004068:	4a63      	ldr	r2, [pc, #396]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004070:	e01c      	b.n	80040ac <HAL_RCC_OscConfig+0x324>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b05      	cmp	r3, #5
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x30c>
 800407a:	4b5f      	ldr	r3, [pc, #380]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	4a5e      	ldr	r2, [pc, #376]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	6713      	str	r3, [r2, #112]	@ 0x70
 8004086:	4b5c      	ldr	r3, [pc, #368]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408a:	4a5b      	ldr	r2, [pc, #364]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	@ 0x70
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0x324>
 8004094:	4b58      	ldr	r3, [pc, #352]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a57      	ldr	r2, [pc, #348]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
 80040a0:	4b55      	ldr	r3, [pc, #340]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	4a54      	ldr	r2, [pc, #336]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 0304 	bic.w	r3, r3, #4
 80040aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d015      	beq.n	80040e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7ff fbc4 	bl	8003840 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7ff fbc0 	bl	8003840 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e0cb      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d2:	4b49      	ldr	r3, [pc, #292]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0ee      	beq.n	80040bc <HAL_RCC_OscConfig+0x334>
 80040de:	e014      	b.n	800410a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e0:	f7ff fbae 	bl	8003840 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7ff fbaa 	bl	8003840 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0b5      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fe:	4b3e      	ldr	r3, [pc, #248]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1ee      	bne.n	80040e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d105      	bne.n	800411c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004110:	4b39      	ldr	r3, [pc, #228]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	4a38      	ldr	r2, [pc, #224]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800411a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80a1 	beq.w	8004268 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004126:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b08      	cmp	r3, #8
 8004130:	d05c      	beq.n	80041ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d141      	bne.n	80041be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413a:	4b31      	ldr	r3, [pc, #196]	@ (8004200 <HAL_RCC_OscConfig+0x478>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7ff fb7e 	bl	8003840 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7ff fb7a 	bl	8003840 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e087      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	4b27      	ldr	r3, [pc, #156]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	019b      	lsls	r3, r3, #6
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	3b01      	subs	r3, #1
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	491b      	ldr	r1, [pc, #108]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004190:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <HAL_RCC_OscConfig+0x478>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7ff fb53 	bl	8003840 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419e:	f7ff fb4f 	bl	8003840 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e05c      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x416>
 80041bc:	e054      	b.n	8004268 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <HAL_RCC_OscConfig+0x478>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7ff fb3c 	bl	8003840 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041cc:	f7ff fb38 	bl	8003840 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e045      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <HAL_RCC_OscConfig+0x470>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x444>
 80041ea:	e03d      	b.n	8004268 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e038      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40007000 	.word	0x40007000
 8004200:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004204:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <HAL_RCC_OscConfig+0x4ec>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d028      	beq.n	8004264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421c:	429a      	cmp	r2, r3
 800421e:	d121      	bne.n	8004264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	429a      	cmp	r2, r3
 800422c:	d11a      	bne.n	8004264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800423a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800423c:	4293      	cmp	r3, r2
 800423e:	d111      	bne.n	8004264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424a:	085b      	lsrs	r3, r3, #1
 800424c:	3b01      	subs	r3, #1
 800424e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0cc      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b68      	ldr	r3, [pc, #416]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d90c      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b65      	ldr	r3, [pc, #404]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b63      	ldr	r3, [pc, #396]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0b8      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042cc:	4b59      	ldr	r3, [pc, #356]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	4a58      	ldr	r2, [pc, #352]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042e4:	4b53      	ldr	r3, [pc, #332]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a52      	ldr	r2, [pc, #328]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b50      	ldr	r3, [pc, #320]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	494d      	ldr	r1, [pc, #308]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d044      	beq.n	8004398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d107      	bne.n	8004326 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b47      	ldr	r3, [pc, #284]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d119      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e07f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b02      	cmp	r3, #2
 800432c:	d003      	beq.n	8004336 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	2b03      	cmp	r3, #3
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b3f      	ldr	r3, [pc, #252]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e06f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e067      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b37      	ldr	r3, [pc, #220]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4934      	ldr	r1, [pc, #208]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004368:	f7ff fa6a 	bl	8003840 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7ff fa66 	bl	8003840 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e04f      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2b      	ldr	r3, [pc, #172]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d20c      	bcs.n	80043c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ae:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e032      	b.n	8004426 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b19      	ldr	r3, [pc, #100]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4916      	ldr	r1, [pc, #88]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ea:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	490e      	ldr	r1, [pc, #56]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043fe:	f000 f821 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004402:	4602      	mov	r2, r0
 8004404:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	490a      	ldr	r1, [pc, #40]	@ (8004438 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	4a09      	ldr	r2, [pc, #36]	@ (800443c <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800441a:	4b09      	ldr	r3, [pc, #36]	@ (8004440 <HAL_RCC_ClockConfig+0x1c8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff f8fa 	bl	8003618 <HAL_InitTick>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00
 8004434:	40023800 	.word	0x40023800
 8004438:	08005570 	.word	0x08005570
 800443c:	20000008 	.word	0x20000008
 8004440:	2000000c 	.word	0x2000000c

08004444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004448:	b094      	sub	sp, #80	@ 0x50
 800444a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004450:	2300      	movs	r3, #0
 8004452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004454:	2300      	movs	r3, #0
 8004456:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445c:	4b79      	ldr	r3, [pc, #484]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d00d      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x40>
 8004468:	2b08      	cmp	r3, #8
 800446a:	f200 80e1 	bhi.w	8004630 <HAL_RCC_GetSysClockFreq+0x1ec>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x34>
 8004472:	2b04      	cmp	r3, #4
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0x3a>
 8004476:	e0db      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004478:	4b73      	ldr	r3, [pc, #460]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x204>)
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800447c:	e0db      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800447e:	4b73      	ldr	r3, [pc, #460]	@ (800464c <HAL_RCC_GetSysClockFreq+0x208>)
 8004480:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004482:	e0d8      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004484:	4b6f      	ldr	r3, [pc, #444]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800448c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800448e:	4b6d      	ldr	r3, [pc, #436]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d063      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b6a      	ldr	r3, [pc, #424]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	2200      	movs	r2, #0
 80044a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044b6:	4622      	mov	r2, r4
 80044b8:	462b      	mov	r3, r5
 80044ba:	f04f 0000 	mov.w	r0, #0
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	0159      	lsls	r1, r3, #5
 80044c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c8:	0150      	lsls	r0, r2, #5
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4621      	mov	r1, r4
 80044d0:	1a51      	subs	r1, r2, r1
 80044d2:	6139      	str	r1, [r7, #16]
 80044d4:	4629      	mov	r1, r5
 80044d6:	eb63 0301 	sbc.w	r3, r3, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e8:	4659      	mov	r1, fp
 80044ea:	018b      	lsls	r3, r1, #6
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044f2:	4651      	mov	r1, sl
 80044f4:	018a      	lsls	r2, r1, #6
 80044f6:	4651      	mov	r1, sl
 80044f8:	ebb2 0801 	subs.w	r8, r2, r1
 80044fc:	4659      	mov	r1, fp
 80044fe:	eb63 0901 	sbc.w	r9, r3, r1
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004516:	4690      	mov	r8, r2
 8004518:	4699      	mov	r9, r3
 800451a:	4623      	mov	r3, r4
 800451c:	eb18 0303 	adds.w	r3, r8, r3
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	462b      	mov	r3, r5
 8004524:	eb49 0303 	adc.w	r3, r9, r3
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004536:	4629      	mov	r1, r5
 8004538:	024b      	lsls	r3, r1, #9
 800453a:	4621      	mov	r1, r4
 800453c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004540:	4621      	mov	r1, r4
 8004542:	024a      	lsls	r2, r1, #9
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454a:	2200      	movs	r2, #0
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004550:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004554:	f7fb fe3c 	bl	80001d0 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004560:	e058      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	4618      	mov	r0, r3
 800456c:	4611      	mov	r1, r2
 800456e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004572:	623b      	str	r3, [r7, #32]
 8004574:	2300      	movs	r3, #0
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
 8004578:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	f04f 0000 	mov.w	r0, #0
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	0159      	lsls	r1, r3, #5
 800458a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458e:	0150      	lsls	r0, r2, #5
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4641      	mov	r1, r8
 8004596:	ebb2 0a01 	subs.w	sl, r2, r1
 800459a:	4649      	mov	r1, r9
 800459c:	eb63 0b01 	sbc.w	fp, r3, r1
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045b4:	ebb2 040a 	subs.w	r4, r2, sl
 80045b8:	eb63 050b 	sbc.w	r5, r3, fp
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	00eb      	lsls	r3, r5, #3
 80045c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ca:	00e2      	lsls	r2, r4, #3
 80045cc:	4614      	mov	r4, r2
 80045ce:	461d      	mov	r5, r3
 80045d0:	4643      	mov	r3, r8
 80045d2:	18e3      	adds	r3, r4, r3
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	464b      	mov	r3, r9
 80045d8:	eb45 0303 	adc.w	r3, r5, r3
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045ea:	4629      	mov	r1, r5
 80045ec:	028b      	lsls	r3, r1, #10
 80045ee:	4621      	mov	r1, r4
 80045f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045f4:	4621      	mov	r1, r4
 80045f6:	028a      	lsls	r2, r1, #10
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045fe:	2200      	movs	r2, #0
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	61fa      	str	r2, [r7, #28]
 8004604:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004608:	f7fb fde2 	bl	80001d0 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4613      	mov	r3, r2
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004614:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <HAL_RCC_GetSysClockFreq+0x200>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	3301      	adds	r3, #1
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800462e:	e002      	b.n	8004636 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <HAL_RCC_GetSysClockFreq+0x204>)
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004638:	4618      	mov	r0, r3
 800463a:	3750      	adds	r7, #80	@ 0x50
 800463c:	46bd      	mov	sp, r7
 800463e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	00f42400 	.word	0x00f42400
 800464c:	007a1200 	.word	0x007a1200

08004650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <HAL_RCC_GetHCLKFreq+0x14>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000008 	.word	0x20000008

08004668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800466c:	f7ff fff0 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0a9b      	lsrs	r3, r3, #10
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	@ (800468c <HAL_RCC_GetPCLK1Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	08005580 	.word	0x08005580

08004690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004694:	f7ff ffdc 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0b5b      	lsrs	r3, r3, #13
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08005580 	.word	0x08005580

080046b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	220f      	movs	r2, #15
 80046c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046c8:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <HAL_RCC_GetClockConfig+0x5c>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0203 	and.w	r2, r3, #3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <HAL_RCC_GetClockConfig+0x5c>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_RCC_GetClockConfig+0x5c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046ec:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_RCC_GetClockConfig+0x5c>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	08db      	lsrs	r3, r3, #3
 80046f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046fa:	4b07      	ldr	r3, [pc, #28]	@ (8004718 <HAL_RCC_GetClockConfig+0x60>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0207 	and.w	r2, r3, #7
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40023800 	.word	0x40023800
 8004718:	40023c00 	.word	0x40023c00

0800471c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e041      	b.n	80047b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f839 	bl	80047ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f000 f9c0 	bl	8004ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d001      	beq.n	80047e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e04e      	b.n	8004886 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a23      	ldr	r2, [pc, #140]	@ (8004894 <HAL_TIM_Base_Start_IT+0xc4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d022      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004812:	d01d      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1f      	ldr	r2, [pc, #124]	@ (8004898 <HAL_TIM_Base_Start_IT+0xc8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d018      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1e      	ldr	r2, [pc, #120]	@ (800489c <HAL_TIM_Base_Start_IT+0xcc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d013      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00e      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1b      	ldr	r2, [pc, #108]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x80>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <HAL_TIM_Base_Start_IT+0xdc>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b06      	cmp	r3, #6
 8004860:	d010      	beq.n	8004884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	e007      	b.n	8004884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40010000 	.word	0x40010000
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800
 80048a0:	40000c00 	.word	0x40000c00
 80048a4:	40010400 	.word	0x40010400
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40001800 	.word	0x40001800

080048b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d020      	beq.n	8004914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01b      	beq.n	8004914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0202 	mvn.w	r2, #2
 80048e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f8d2 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8c4 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8d5 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d020      	beq.n	8004960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0204 	mvn.w	r2, #4
 8004930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2202      	movs	r2, #2
 8004936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8ac 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 800494c:	e005      	b.n	800495a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f89e 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8af 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d020      	beq.n	80049ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01b      	beq.n	80049ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0208 	mvn.w	r2, #8
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2204      	movs	r2, #4
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f886 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f878 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f889 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d020      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0210 	mvn.w	r2, #16
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2208      	movs	r2, #8
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f860 	bl	8004aa4 <HAL_TIM_IC_CaptureCallback>
 80049e4:	e005      	b.n	80049f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f852 	bl	8004a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f863 	bl	8004ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d007      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0201 	mvn.w	r2, #1
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fe fd76 	bl	8003508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d007      	beq.n	8004a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f906 	bl	8004c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00c      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f834 	bl	8004acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0220 	mvn.w	r2, #32
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8d8 	bl	8004c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a46      	ldr	r2, [pc, #280]	@ (8004c0c <TIM_Base_SetConfig+0x12c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d00f      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a43      	ldr	r2, [pc, #268]	@ (8004c10 <TIM_Base_SetConfig+0x130>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a42      	ldr	r2, [pc, #264]	@ (8004c14 <TIM_Base_SetConfig+0x134>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d007      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a41      	ldr	r2, [pc, #260]	@ (8004c18 <TIM_Base_SetConfig+0x138>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_Base_SetConfig+0x40>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a40      	ldr	r2, [pc, #256]	@ (8004c1c <TIM_Base_SetConfig+0x13c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d108      	bne.n	8004b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a35      	ldr	r2, [pc, #212]	@ (8004c0c <TIM_Base_SetConfig+0x12c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02b      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b40:	d027      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a32      	ldr	r2, [pc, #200]	@ (8004c10 <TIM_Base_SetConfig+0x130>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d023      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a31      	ldr	r2, [pc, #196]	@ (8004c14 <TIM_Base_SetConfig+0x134>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01f      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a30      	ldr	r2, [pc, #192]	@ (8004c18 <TIM_Base_SetConfig+0x138>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01b      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8004c1c <TIM_Base_SetConfig+0x13c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d017      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a2e      	ldr	r2, [pc, #184]	@ (8004c20 <TIM_Base_SetConfig+0x140>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c24 <TIM_Base_SetConfig+0x144>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2c      	ldr	r2, [pc, #176]	@ (8004c28 <TIM_Base_SetConfig+0x148>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004c2c <TIM_Base_SetConfig+0x14c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <TIM_Base_SetConfig+0x150>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	@ (8004c34 <TIM_Base_SetConfig+0x154>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d108      	bne.n	8004ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a10      	ldr	r2, [pc, #64]	@ (8004c0c <TIM_Base_SetConfig+0x12c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d003      	beq.n	8004bd8 <TIM_Base_SetConfig+0xf8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <TIM_Base_SetConfig+0x13c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d103      	bne.n	8004be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d105      	bne.n	8004bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	40010000 	.word	0x40010000
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40000c00 	.word	0x40000c00
 8004c1c:	40010400 	.word	0x40010400
 8004c20:	40014000 	.word	0x40014000
 8004c24:	40014400 	.word	0x40014400
 8004c28:	40014800 	.word	0x40014800
 8004c2c:	40001800 	.word	0x40001800
 8004c30:	40001c00 	.word	0x40001c00
 8004c34:	40002000 	.word	0x40002000

08004c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e042      	b.n	8004cf8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fe fc7e 	bl	8003588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2224      	movs	r2, #36	@ 0x24
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f973 	bl	8004f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695a      	ldr	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d175      	bne.n	8004e0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_UART_Transmit+0x2c>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e06e      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2221      	movs	r2, #33	@ 0x21
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d3e:	f7fe fd7f 	bl	8003840 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	88fa      	ldrh	r2, [r7, #6]
 8004d48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	88fa      	ldrh	r2, [r7, #6]
 8004d4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d58:	d108      	bne.n	8004d6c <HAL_UART_Transmit+0x6c>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e003      	b.n	8004d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d74:	e02e      	b.n	8004dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2180      	movs	r1, #128	@ 0x80
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 f848 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e03a      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10b      	bne.n	8004db6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	3302      	adds	r3, #2
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	e007      	b.n	8004dc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	781a      	ldrb	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1cb      	bne.n	8004d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2140      	movs	r1, #64	@ 0x40
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f814 	bl	8004e16 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e006      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b086      	sub	sp, #24
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4613      	mov	r3, r2
 8004e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e26:	e03b      	b.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d037      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e30:	f7fe fd06 	bl	8003840 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e03a      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d023      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b80      	cmp	r3, #128	@ 0x80
 8004e5c:	d020      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b40      	cmp	r3, #64	@ 0x40
 8004e62:	d01d      	beq.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d116      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f81d 	bl	8004ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2208      	movs	r2, #8
 8004e92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e00f      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d0b4      	beq.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b095      	sub	sp, #84	@ 0x54
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ef0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f82:	bf00      	nop
 8004f84:	3754      	adds	r7, #84	@ 0x54
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f94:	b0c0      	sub	sp, #256	@ 0x100
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	68d9      	ldr	r1, [r3, #12]
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	ea40 0301 	orr.w	r3, r0, r1
 8004fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fe8:	f021 010c 	bic.w	r1, r1, #12
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500a:	6999      	ldr	r1, [r3, #24]
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	ea40 0301 	orr.w	r3, r0, r1
 8005016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b8f      	ldr	r3, [pc, #572]	@ (800525c <UART_SetConfig+0x2cc>)
 8005020:	429a      	cmp	r2, r3
 8005022:	d005      	beq.n	8005030 <UART_SetConfig+0xa0>
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b8d      	ldr	r3, [pc, #564]	@ (8005260 <UART_SetConfig+0x2d0>)
 800502c:	429a      	cmp	r2, r3
 800502e:	d104      	bne.n	800503a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005030:	f7ff fb2e 	bl	8004690 <HAL_RCC_GetPCLK2Freq>
 8005034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005038:	e003      	b.n	8005042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800503a:	f7ff fb15 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 800503e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504c:	f040 810c 	bne.w	8005268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800505a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800505e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	1891      	adds	r1, r2, r2
 8005068:	65b9      	str	r1, [r7, #88]	@ 0x58
 800506a:	415b      	adcs	r3, r3
 800506c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005072:	4621      	mov	r1, r4
 8005074:	eb12 0801 	adds.w	r8, r2, r1
 8005078:	4629      	mov	r1, r5
 800507a:	eb43 0901 	adc.w	r9, r3, r1
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005092:	4690      	mov	r8, r2
 8005094:	4699      	mov	r9, r3
 8005096:	4623      	mov	r3, r4
 8005098:	eb18 0303 	adds.w	r3, r8, r3
 800509c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050a0:	462b      	mov	r3, r5
 80050a2:	eb49 0303 	adc.w	r3, r9, r3
 80050a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050be:	460b      	mov	r3, r1
 80050c0:	18db      	adds	r3, r3, r3
 80050c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c4:	4613      	mov	r3, r2
 80050c6:	eb42 0303 	adc.w	r3, r2, r3
 80050ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80050cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050d4:	f7fb f87c 	bl	80001d0 <__aeabi_uldivmod>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4b61      	ldr	r3, [pc, #388]	@ (8005264 <UART_SetConfig+0x2d4>)
 80050de:	fba3 2302 	umull	r2, r3, r3, r2
 80050e2:	095b      	lsrs	r3, r3, #5
 80050e4:	011c      	lsls	r4, r3, #4
 80050e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050f8:	4642      	mov	r2, r8
 80050fa:	464b      	mov	r3, r9
 80050fc:	1891      	adds	r1, r2, r2
 80050fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005100:	415b      	adcs	r3, r3
 8005102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005108:	4641      	mov	r1, r8
 800510a:	eb12 0a01 	adds.w	sl, r2, r1
 800510e:	4649      	mov	r1, r9
 8005110:	eb43 0b01 	adc.w	fp, r3, r1
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005128:	4692      	mov	sl, r2
 800512a:	469b      	mov	fp, r3
 800512c:	4643      	mov	r3, r8
 800512e:	eb1a 0303 	adds.w	r3, sl, r3
 8005132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005136:	464b      	mov	r3, r9
 8005138:	eb4b 0303 	adc.w	r3, fp, r3
 800513c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800514c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005154:	460b      	mov	r3, r1
 8005156:	18db      	adds	r3, r3, r3
 8005158:	643b      	str	r3, [r7, #64]	@ 0x40
 800515a:	4613      	mov	r3, r2
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	647b      	str	r3, [r7, #68]	@ 0x44
 8005162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800516a:	f7fb f831 	bl	80001d0 <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4611      	mov	r1, r2
 8005174:	4b3b      	ldr	r3, [pc, #236]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005176:	fba3 2301 	umull	r2, r3, r3, r1
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2264      	movs	r2, #100	@ 0x64
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	1acb      	subs	r3, r1, r3
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <UART_SetConfig+0x2d4>)
 800518c:	fba3 2302 	umull	r2, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005198:	441c      	add	r4, r3
 800519a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	1891      	adds	r1, r2, r2
 80051b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b4:	415b      	adcs	r3, r3
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051bc:	4641      	mov	r1, r8
 80051be:	1851      	adds	r1, r2, r1
 80051c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051c2:	4649      	mov	r1, r9
 80051c4:	414b      	adcs	r3, r1
 80051c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051d4:	4659      	mov	r1, fp
 80051d6:	00cb      	lsls	r3, r1, #3
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051de:	4651      	mov	r1, sl
 80051e0:	00ca      	lsls	r2, r1, #3
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	4642      	mov	r2, r8
 80051ea:	189b      	adds	r3, r3, r2
 80051ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f0:	464b      	mov	r3, r9
 80051f2:	460a      	mov	r2, r1
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005208:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800520c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005210:	460b      	mov	r3, r1
 8005212:	18db      	adds	r3, r3, r3
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005216:	4613      	mov	r3, r2
 8005218:	eb42 0303 	adc.w	r3, r2, r3
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005226:	f7fa ffd3 	bl	80001d0 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	@ 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3332      	adds	r3, #50	@ 0x32
 8005242:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <UART_SetConfig+0x2d4>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4422      	add	r2, r4
 8005256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005258:	e106      	b.n	8005468 <UART_SetConfig+0x4d8>
 800525a:	bf00      	nop
 800525c:	40011000 	.word	0x40011000
 8005260:	40011400 	.word	0x40011400
 8005264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005272:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800527a:	4642      	mov	r2, r8
 800527c:	464b      	mov	r3, r9
 800527e:	1891      	adds	r1, r2, r2
 8005280:	6239      	str	r1, [r7, #32]
 8005282:	415b      	adcs	r3, r3
 8005284:	627b      	str	r3, [r7, #36]	@ 0x24
 8005286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528a:	4641      	mov	r1, r8
 800528c:	1854      	adds	r4, r2, r1
 800528e:	4649      	mov	r1, r9
 8005290:	eb43 0501 	adc.w	r5, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	00eb      	lsls	r3, r5, #3
 800529e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a2:	00e2      	lsls	r2, r4, #3
 80052a4:	4614      	mov	r4, r2
 80052a6:	461d      	mov	r5, r3
 80052a8:	4643      	mov	r3, r8
 80052aa:	18e3      	adds	r3, r4, r3
 80052ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052b0:	464b      	mov	r3, r9
 80052b2:	eb45 0303 	adc.w	r3, r5, r3
 80052b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052d6:	4629      	mov	r1, r5
 80052d8:	008b      	lsls	r3, r1, #2
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e0:	4621      	mov	r1, r4
 80052e2:	008a      	lsls	r2, r1, #2
 80052e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052e8:	f7fa ff72 	bl	80001d0 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4b60      	ldr	r3, [pc, #384]	@ (8005474 <UART_SetConfig+0x4e4>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	011c      	lsls	r4, r3, #4
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005304:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800530c:	4642      	mov	r2, r8
 800530e:	464b      	mov	r3, r9
 8005310:	1891      	adds	r1, r2, r2
 8005312:	61b9      	str	r1, [r7, #24]
 8005314:	415b      	adcs	r3, r3
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800531c:	4641      	mov	r1, r8
 800531e:	1851      	adds	r1, r2, r1
 8005320:	6139      	str	r1, [r7, #16]
 8005322:	4649      	mov	r1, r9
 8005324:	414b      	adcs	r3, r1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005334:	4659      	mov	r1, fp
 8005336:	00cb      	lsls	r3, r1, #3
 8005338:	4651      	mov	r1, sl
 800533a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533e:	4651      	mov	r1, sl
 8005340:	00ca      	lsls	r2, r1, #3
 8005342:	4610      	mov	r0, r2
 8005344:	4619      	mov	r1, r3
 8005346:	4603      	mov	r3, r0
 8005348:	4642      	mov	r2, r8
 800534a:	189b      	adds	r3, r3, r2
 800534c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005350:	464b      	mov	r3, r9
 8005352:	460a      	mov	r2, r1
 8005354:	eb42 0303 	adc.w	r3, r2, r3
 8005358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005374:	4649      	mov	r1, r9
 8005376:	008b      	lsls	r3, r1, #2
 8005378:	4641      	mov	r1, r8
 800537a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800537e:	4641      	mov	r1, r8
 8005380:	008a      	lsls	r2, r1, #2
 8005382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005386:	f7fa ff23 	bl	80001d0 <__aeabi_uldivmod>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	4611      	mov	r1, r2
 8005390:	4b38      	ldr	r3, [pc, #224]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005392:	fba3 2301 	umull	r2, r3, r3, r1
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2264      	movs	r2, #100	@ 0x64
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	1acb      	subs	r3, r1, r3
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	3332      	adds	r3, #50	@ 0x32
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <UART_SetConfig+0x4e4>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b0:	441c      	add	r4, r3
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80053bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	1891      	adds	r1, r2, r2
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	415b      	adcs	r3, r3
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053d0:	4641      	mov	r1, r8
 80053d2:	1851      	adds	r1, r2, r1
 80053d4:	6039      	str	r1, [r7, #0]
 80053d6:	4649      	mov	r1, r9
 80053d8:	414b      	adcs	r3, r1
 80053da:	607b      	str	r3, [r7, #4]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053e8:	4659      	mov	r1, fp
 80053ea:	00cb      	lsls	r3, r1, #3
 80053ec:	4651      	mov	r1, sl
 80053ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f2:	4651      	mov	r1, sl
 80053f4:	00ca      	lsls	r2, r1, #3
 80053f6:	4610      	mov	r0, r2
 80053f8:	4619      	mov	r1, r3
 80053fa:	4603      	mov	r3, r0
 80053fc:	4642      	mov	r2, r8
 80053fe:	189b      	adds	r3, r3, r2
 8005400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005402:	464b      	mov	r3, r9
 8005404:	460a      	mov	r2, r1
 8005406:	eb42 0303 	adc.w	r3, r2, r3
 800540a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	663b      	str	r3, [r7, #96]	@ 0x60
 8005416:	667a      	str	r2, [r7, #100]	@ 0x64
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005424:	4649      	mov	r1, r9
 8005426:	008b      	lsls	r3, r1, #2
 8005428:	4641      	mov	r1, r8
 800542a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542e:	4641      	mov	r1, r8
 8005430:	008a      	lsls	r2, r1, #2
 8005432:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005436:	f7fa fecb 	bl	80001d0 <__aeabi_uldivmod>
 800543a:	4602      	mov	r2, r0
 800543c:	460b      	mov	r3, r1
 800543e:	4b0d      	ldr	r3, [pc, #52]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005440:	fba3 1302 	umull	r1, r3, r3, r2
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	2164      	movs	r1, #100	@ 0x64
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	3332      	adds	r3, #50	@ 0x32
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <UART_SetConfig+0x4e4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	095b      	lsrs	r3, r3, #5
 800545a:	f003 020f 	and.w	r2, r3, #15
 800545e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4422      	add	r2, r4
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800546e:	46bd      	mov	sp, r7
 8005470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005474:	51eb851f 	.word	0x51eb851f

08005478 <memset>:
 8005478:	4402      	add	r2, r0
 800547a:	4603      	mov	r3, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4d0d      	ldr	r5, [pc, #52]	@ (80054c0 <__libc_init_array+0x38>)
 800548c:	4c0d      	ldr	r4, [pc, #52]	@ (80054c4 <__libc_init_array+0x3c>)
 800548e:	1b64      	subs	r4, r4, r5
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	2600      	movs	r6, #0
 8005494:	42a6      	cmp	r6, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	4d0b      	ldr	r5, [pc, #44]	@ (80054c8 <__libc_init_array+0x40>)
 800549a:	4c0c      	ldr	r4, [pc, #48]	@ (80054cc <__libc_init_array+0x44>)
 800549c:	f000 f826 	bl	80054ec <_init>
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	2600      	movs	r6, #0
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b0:	4798      	blx	r3
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ba:	4798      	blx	r3
 80054bc:	3601      	adds	r6, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	08005590 	.word	0x08005590
 80054c4:	08005590 	.word	0x08005590
 80054c8:	08005590 	.word	0x08005590
 80054cc:	08005594 	.word	0x08005594

080054d0 <memcpy>:
 80054d0:	440a      	add	r2, r1
 80054d2:	4291      	cmp	r1, r2
 80054d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d8:	d100      	bne.n	80054dc <memcpy+0xc>
 80054da:	4770      	bx	lr
 80054dc:	b510      	push	{r4, lr}
 80054de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e6:	4291      	cmp	r1, r2
 80054e8:	d1f9      	bne.n	80054de <memcpy+0xe>
 80054ea:	bd10      	pop	{r4, pc}

080054ec <_init>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr

080054f8 <_fini>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr
