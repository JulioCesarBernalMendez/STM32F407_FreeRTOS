
App_030_Example_10.2_Task_Notification_in_place_of_Semphr_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007118  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080072a8  080072a8  000082a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007424  08007424  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007424  08007424  00008424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800742c  0800742c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800742c  0800742c  0000842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007430  08007430  00008430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007434  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          00019918  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001992c  2001992c  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184e0  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003237  00000000  00000000  00021524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00024760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001107  00000000  00000000  00025d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e6d  00000000  00000000  00026e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ad1  00000000  00000000  0004bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb376  00000000  00000000  0006578d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150b03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c34  00000000  00000000  00150b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d7  00000000  00000000  0015677c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007290 	.word	0x08007290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007290 	.word	0x08007290

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb4 	.word	0x20012eb4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbbb 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f82d 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f90d 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8e1 	bl	800072c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800056a:	f000 f891 	bl	8000690 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <main+0x54>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <main+0x54>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 800057a:	f005 f967 	bl	800584c <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057e:	f005 febd 	bl	80062fc <SEGGER_SYSVIEW_Start>
     immediately after the interrupt exits. But since this is the only task
     running for this example, then a priority of 1 is chosen).

     The pxCreatedTask (task handler) parameter is used to pass a task notification
     from within the TIM3 timeout interrupt via vTaskNotifyGiveFromISR() */
  xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 1, &xHandlerTask );
 8000582:	4b0a      	ldr	r3, [pc, #40]	@ (80005ac <main+0x58>)
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000590:	4907      	ldr	r1, [pc, #28]	@ (80005b0 <main+0x5c>)
 8000592:	4808      	ldr	r0, [pc, #32]	@ (80005b4 <main+0x60>)
 8000594:	f002 ffcb 	bl	800352e <xTaskCreate>

  /* start the TIM3 in interrupt mode */
  HAL_TIM_Base_Start_IT( &htim3 );
 8000598:	4807      	ldr	r0, [pc, #28]	@ (80005b8 <main+0x64>)
 800059a:	f001 fba9 	bl	8001cf0 <HAL_TIM_Base_Start_IT>

  /* start the scheduler */
  vTaskStartScheduler();
 800059e:	f003 f97f 	bl	80038a0 <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x4e>
 80005a6:	bf00      	nop
 80005a8:	e0001000 	.word	0xe0001000
 80005ac:	200000c0 	.word	0x200000c0
 80005b0:	080072a8 	.word	0x080072a8
 80005b4:	080008dd 	.word	0x080008dd
 80005b8:	20000030 	.word	0x20000030

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 fe25 	bl	800721a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	@ (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800062c:	2308      	movs	r3, #8
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000630:	2332      	movs	r3, #50	@ 0x32
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000634:	2304      	movs	r3, #4
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fe3b 	bl	80012bc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f9bc 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f89c 	bl	80017ac <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f9a5 	bl	80009c8 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0308 	add.w	r3, r7, #8
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000728 <MX_TIM3_Init+0x98>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006b4:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 80006b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006c2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80006c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006d4:	4813      	ldr	r0, [pc, #76]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006d6:	f001 fabb 	bl	8001c50 <HAL_TIM_Base_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006e0:	f000 f972 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	@ (8000724 <MX_TIM3_Init+0x94>)
 80006f2:	f001 fc5d 	bl	8001fb0 <HAL_TIM_ConfigClockSource>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80006fc:	f000 f964 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_TIM3_Init+0x94>)
 800070e:	f001 fe85 	bl	800241c <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000718:	f000 f956 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000030 	.word	0x20000030
 8000728:	40000400 	.word	0x40000400

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 feea 	bl	800253c <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f92b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000078 	.word	0x20000078
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b3b      	ldr	r3, [pc, #236]	@ (8000888 <MX_GPIO_Init+0x108>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a3a      	ldr	r2, [pc, #232]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b38      	ldr	r3, [pc, #224]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a33      	ldr	r2, [pc, #204]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b31      	ldr	r3, [pc, #196]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b26      	ldr	r3, [pc, #152]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <MX_GPIO_Init+0x108>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800080c:	481f      	ldr	r0, [pc, #124]	@ (800088c <MX_GPIO_Init+0x10c>)
 800080e:	f000 fd21 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0x110>)
 8000826:	f000 fb79 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800082a:	2304      	movs	r3, #4
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4815      	ldr	r0, [pc, #84]	@ (8000894 <MX_GPIO_Init+0x114>)
 800083e:	f000 fb6d 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000842:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <MX_GPIO_Init+0x10c>)
 800085c:	f000 fb5e 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000870:	2306      	movs	r3, #6
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	@ (8000898 <MX_GPIO_Init+0x118>)
 800087c:	f000 fb4e 	bl	8000f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	@ 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020000 	.word	0x40020000
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800

0800089c <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e00b      	b.n	80008c4 <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	18d1      	adds	r1, r2, r3
 80008b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008b6:	2201      	movs	r2, #1
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f001 fe8f 	bl	80025dc <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	3301      	adds	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1ed      	bne.n	80008ac <UART2_Print_Text+0x10>
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <vHandlerTask>:

static void vHandlerTask( void *pvParameters )
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* xMaxExpectedBlockTime is set to be a little longer than the maximum expected time 
     between TIM3 timeout events */
  const TickType_t xMaxExpectedBlockTime = xInterruptFrequency + pdMS_TO_TICKS( 10 );
 80008e4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80008e8:	330a      	adds	r3, #10
 80008ea:	60fb      	str	r3, [r7, #12]
  {
    /* Wait to receive a notification sent directly to this task from the 
       TIM3 timeout interrupt service routine.
       The xClearCountOnExit parameter is now pdFALSE, so the task's notifification value
       will be decremented by ulTaskNotifyTake() and not cleared to zero */
    if ( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	2100      	movs	r1, #0
 80008f0:	2000      	movs	r0, #0
 80008f2:	f003 fdbb 	bl	800446c <ulTaskGenericNotifyTake>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d004      	beq.n	8000906 <vHandlerTask+0x2a>
    {
      /* To get here an event must have occurred.
         Process the event (in this case just print out a message) */
      UART2_Print_Text( &huart2, "Handler task - Processing event.\r\n" );
 80008fc:	4904      	ldr	r1, [pc, #16]	@ (8000910 <vHandlerTask+0x34>)
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <vHandlerTask+0x38>)
 8000900:	f7ff ffcc 	bl	800089c <UART2_Print_Text>
 8000904:	e7f2      	b.n	80008ec <vHandlerTask+0x10>
    {
      /* If this part of the function is reached, then a TIM3 timeout interrupt did not arrive
         within the expected time.
         Indicate this by printing out an error message.
         (in a real application it may be necessary to perform some error recovery operations) */
      UART2_Print_Text( &huart2, "Handler task - Error.\r\n" );
 8000906:	4904      	ldr	r1, [pc, #16]	@ (8000918 <vHandlerTask+0x3c>)
 8000908:	4802      	ldr	r0, [pc, #8]	@ (8000914 <vHandlerTask+0x38>)
 800090a:	f7ff ffc7 	bl	800089c <UART2_Print_Text>
    if ( ulTaskNotifyTake( pdFALSE, xMaxExpectedBlockTime ) != 0 )
 800090e:	e7ed      	b.n	80008ec <vHandlerTask+0x10>
 8000910:	080072b0 	.word	0x080072b0
 8000914:	20000078 	.word	0x20000078
 8000918:	080072d4 	.word	0x080072d4

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1f      	ldr	r2, [pc, #124]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x90>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d130      	bne.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 8000932:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000938:	f000 fca5 	bl	8001286 <HAL_GPIO_TogglePin>

    /* print out a message */
    UART2_Print_Text( &huart2, "ISR Handler - About to give a notification.\r\n" );
 800093c:	491d      	ldr	r1, [pc, #116]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800093e:	481e      	ldr	r0, [pc, #120]	@ (80009b8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000940:	f7ff ffac 	bl	800089c <UART2_Print_Text>
    /* Send a notification directly to the task to which interrupt processing is being deferred.
       In this case the notification is sent multiple times.
       The first 'give' will unblock the task, the following 'gives' are to demonstrate
       that the receiving task's notification value is being used to count (latch events),
       allowing the task to process each event in turn */
    vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f107 020c 	add.w	r2, r7, #12
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fe0a 	bl	8004568 <vTaskGenericNotifyGiveFromISR>
    vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fe02 	bl	8004568 <vTaskGenericNotifyGiveFromISR>
    vTaskNotifyGiveFromISR( xHandlerTask, &xHigherPriorityTaskWoken );
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f107 020c 	add.w	r2, r7, #12
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fdfa 	bl	8004568 <vTaskGenericNotifyGiveFromISR>
    /* Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside vTaskNotifyGiveFromISR(),
         then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR()
         will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00a      	beq.n	8000990 <HAL_TIM_PeriodElapsedCallback+0x74>
 800097a:	f005 ffe5 	bl	8006948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	f3bf 8f4f 	dsb	sy
 800098a:	f3bf 8f6f 	isb	sy
 800098e:	e001      	b.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000990:	f005 ffbe 	bl	8006910 <SEGGER_SYSVIEW_RecordExitISR>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d101      	bne.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x86>
    HAL_IncTick();
 800099e:	f000 f9bb 	bl	8000d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40000400 	.word	0x40000400
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	080072ec 	.word	0x080072ec
 80009b8:	20000078 	.word	0x20000078
 80009bc:	200000c0 	.word	0x200000c0
 80009c0:	e000ed04 	.word	0xe000ed04
 80009c4:	40001000 	.word	0x40001000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 fa4d 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800

08000a24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_TIM_Base_MspInit+0x48>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d115      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_TIM_Base_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a70 <HAL_TIM_Base_MspInit+0x4c>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_TIM_Base_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2106      	movs	r1, #6
 8000a56:	201d      	movs	r0, #29
 8000a58:	f000 fa36 	bl	8000ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a5c:	201d      	movs	r0, #29
 8000a5e:	f000 fa4f 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40000400 	.word	0x40000400
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	@ (8000af8 <HAL_UART_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12b      	bne.n	8000aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <HAL_UART_MspInit+0x8c>)
 8000aea:	f000 fa17 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	@ 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	@ 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <HAL_InitTick+0xe4>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a32      	ldr	r2, [pc, #200]	@ (8000be8 <HAL_InitTick+0xe4>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <HAL_InitTick+0xe4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b30:	f107 0210 	add.w	r2, r7, #16
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f856 	bl	8001bec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d103      	bne.n	8000b52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4a:	f001 f827 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b50:	e004      	b.n	8000b5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b52:	f001 f823 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8000b56:	4603      	mov	r3, r0
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5e:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <HAL_InitTick+0xe8>)
 8000b60:	fba2 2303 	umull	r2, r3, r2, r3
 8000b64:	0c9b      	lsrs	r3, r3, #18
 8000b66:	3b01      	subs	r3, #1
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6a:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <HAL_InitTick+0xf0>)
 8000b6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b70:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b78:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b90:	4817      	ldr	r0, [pc, #92]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000b92:	f001 f85d 	bl	8001c50 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d11b      	bne.n	8000bdc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <HAL_InitTick+0xec>)
 8000ba6:	f001 f8a3 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d111      	bne.n	8000bdc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb8:	2036      	movs	r0, #54	@ 0x36
 8000bba:	f000 f9a1 	bl	8000f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d808      	bhi.n	8000bd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	2036      	movs	r0, #54	@ 0x36
 8000bca:	f000 f97d 	bl	8000ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_InitTick+0xf4>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e002      	b.n	8000bdc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3738      	adds	r7, #56	@ 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	200000c4 	.word	0x200000c4
 8000bf4:	40001000 	.word	0x40001000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <TIM3_IRQHandler+0x10>)
 8000c3a:	f001 f8c9 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000030 	.word	0x20000030

08000c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c4c:	4802      	ldr	r0, [pc, #8]	@ (8000c58 <TIM6_DAC_IRQHandler+0x10>)
 8000c4e:	f001 f8bf 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200000c4 	.word	0x200000c4

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c84:	f7ff ffea 	bl	8000c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cae:	f006 fabd 	bl	800722c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb2:	f7ff fc4f 	bl	8000554 <main>
  bx  lr    
 8000cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cc4:	08007434 	.word	0x08007434
  ldr r2, =_sbss
 8000cc8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ccc:	2001992c 	.word	0x2001992c

08000cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_Init+0x40>)
 8000cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d14 <HAL_Init+0x40>)
 8000cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a07      	ldr	r2, [pc, #28]	@ (8000d14 <HAL_Init+0x40>)
 8000cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8d8 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fefe 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d08:	f7ff fe64 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023c00 	.word	0x40023c00

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000010c 	.word	0x2000010c

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000010c 	.word	0x2000010c

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	@ (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e16b      	b.n	8001210 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 815a 	bne.w	800120a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80b4 	beq.w	800120a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b60      	ldr	r3, [pc, #384]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001228 <HAL_GPIO_Init+0x30c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a5b      	ldr	r2, [pc, #364]	@ (800122c <HAL_GPIO_Init+0x310>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d02b      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a51      	ldr	r2, [pc, #324]	@ (8001234 <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d025      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a50      	ldr	r2, [pc, #320]	@ (8001238 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d01f      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d019      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x212>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x20e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x20a>
 8001122:	2307      	movs	r3, #7
 8001124:	e00e      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001126:	2308      	movs	r3, #8
 8001128:	e00c      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112a:	2306      	movs	r3, #6
 800112c:	e00a      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800112e:	2305      	movs	r3, #5
 8001130:	e008      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001132:	2304      	movs	r3, #4
 8001134:	e006      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001136:	2303      	movs	r3, #3
 8001138:	e004      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113a:	2302      	movs	r3, #2
 800113c:	e002      	b.n	8001144 <HAL_GPIO_Init+0x228>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_GPIO_Init+0x228>
 8001142:	2300      	movs	r3, #0
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	f002 0203 	and.w	r2, r2, #3
 800114a:	0092      	lsls	r2, r2, #2
 800114c:	4093      	lsls	r3, r2
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001154:	4935      	ldr	r1, [pc, #212]	@ (800122c <HAL_GPIO_Init+0x310>)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001162:	4b3b      	ldr	r3, [pc, #236]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001186:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <HAL_GPIO_Init+0x334>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b6:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <HAL_GPIO_Init+0x334>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_GPIO_Init+0x334>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3301      	adds	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f67f ae90 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001218:	bf00      	nop
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40013c00 	.word	0x40013c00

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fce4 	bl	8000d40 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fce0 	bl	8000d40 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fcd0 	bl	8000d40 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fccc 	bl	8000d40 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc85 	bl	8000d40 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc81 	bl	8000d40 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc64 	bl	8000d40 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc60 	bl	8000d40 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fc44 	bl	8000d40 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc40 	bl	8000d40 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc2d 	bl	8000d40 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc29 	bl	8000d40 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fbe9 	bl	8000d40 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fbe5 	bl	8000d40 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fbaa 	bl	8000d40 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fba6 	bl	8000d40 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb94 	bl	8000d40 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb90 	bl	8000d40 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb64 	bl	8000d40 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb60 	bl	8000d40 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb39 	bl	8000d40 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fb35 	bl	8000d40 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb22 	bl	8000d40 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb1e 	bl	8000d40 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff fa50 	bl	8000d40 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff fa4c 	bl	8000d40 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f8d6 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	080073e4 	.word	0x080073e4
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b094      	sub	sp, #80	@ 0x50
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	@ 0x44
 8001984:	2300      	movs	r3, #0
 8001986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b79      	ldr	r3, [pc, #484]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80e1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e0db      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80019ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019b0:	e0db      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80019b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b6:	e0d8      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d063      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	2300      	movs	r3, #0
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ea:	4622      	mov	r2, r4
 80019ec:	462b      	mov	r3, r5
 80019ee:	f04f 0000 	mov.w	r0, #0
 80019f2:	f04f 0100 	mov.w	r1, #0
 80019f6:	0159      	lsls	r1, r3, #5
 80019f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019fc:	0150      	lsls	r0, r2, #5
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4621      	mov	r1, r4
 8001a04:	1a51      	subs	r1, r2, r1
 8001a06:	6139      	str	r1, [r7, #16]
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a1c:	4659      	mov	r1, fp
 8001a1e:	018b      	lsls	r3, r1, #6
 8001a20:	4651      	mov	r1, sl
 8001a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a26:	4651      	mov	r1, sl
 8001a28:	018a      	lsls	r2, r1, #6
 8001a2a:	4651      	mov	r1, sl
 8001a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a30:	4659      	mov	r1, fp
 8001a32:	eb63 0901 	sbc.w	r9, r3, r1
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	4623      	mov	r3, r4
 8001a50:	eb18 0303 	adds.w	r3, r8, r3
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	462b      	mov	r3, r5
 8001a58:	eb49 0303 	adc.w	r3, r9, r3
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	024b      	lsls	r3, r1, #9
 8001a6e:	4621      	mov	r1, r4
 8001a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a74:	4621      	mov	r1, r4
 8001a76:	024a      	lsls	r2, r1, #9
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7e:	2200      	movs	r2, #0
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a88:	f7fe fbec 	bl	8000264 <__aeabi_uldivmod>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4613      	mov	r3, r2
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	e058      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a96:	4b38      	ldr	r3, [pc, #224]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab0:	4642      	mov	r2, r8
 8001ab2:	464b      	mov	r3, r9
 8001ab4:	f04f 0000 	mov.w	r0, #0
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	0159      	lsls	r1, r3, #5
 8001abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac2:	0150      	lsls	r0, r2, #5
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4641      	mov	r1, r8
 8001aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ace:	4649      	mov	r1, r9
 8001ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8001aec:	eb63 050b 	sbc.w	r5, r3, fp
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	00eb      	lsls	r3, r5, #3
 8001afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afe:	00e2      	lsls	r2, r4, #3
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	4643      	mov	r3, r8
 8001b06:	18e3      	adds	r3, r4, r3
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	464b      	mov	r3, r9
 8001b0c:	eb45 0303 	adc.w	r3, r5, r3
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b32:	2200      	movs	r2, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	61fa      	str	r2, [r7, #28]
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	f7fe fb92 	bl	8000264 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3750      	adds	r7, #80	@ 0x50
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	080073f4 	.word	0x080073f4

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	080073f4 	.word	0x080073f4

08001bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <HAL_RCC_GetClockConfig+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0207 	and.w	r2, r3, #7
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e041      	b.n	8001ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fed4 	bl	8000a24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 fa7e 	bl	8002190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e04e      	b.n	8001da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a23      	ldr	r2, [pc, #140]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d32:	d01d      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1f      	ldr	r2, [pc, #124]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d111      	bne.n	8001d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d010      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	e007      	b.n	8001da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40000800 	.word	0x40000800
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	40010400 	.word	0x40010400
 8001dc8:	40014000 	.word	0x40014000
 8001dcc:	40001800 	.word	0x40001800

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f999 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f98b 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f99c 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f973 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f965 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f976 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f94d 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f93f 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f950 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f927 	bl	8002152 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f919 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f92a 	bl	8002166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fcf0 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fae4 	bl	8002528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8fb 	bl	800217a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fab6 	bl	8002514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x1c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0b4      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x186>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002004:	d03e      	beq.n	8002084 <HAL_TIM_ConfigClockSource+0xd4>
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800200a:	f200 8087 	bhi.w	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002012:	f000 8086 	beq.w	8002122 <HAL_TIM_ConfigClockSource+0x172>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800201a:	d87f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800201c:	2b70      	cmp	r3, #112	@ 0x70
 800201e:	d01a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xa6>
 8002020:	2b70      	cmp	r3, #112	@ 0x70
 8002022:	d87b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b60      	cmp	r3, #96	@ 0x60
 8002026:	d050      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x11a>
 8002028:	2b60      	cmp	r3, #96	@ 0x60
 800202a:	d877      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b50      	cmp	r3, #80	@ 0x50
 800202e:	d03c      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0xfa>
 8002030:	2b50      	cmp	r3, #80	@ 0x50
 8002032:	d873      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b40      	cmp	r3, #64	@ 0x40
 8002036:	d058      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x13a>
 8002038:	2b40      	cmp	r3, #64	@ 0x40
 800203a:	d86f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b30      	cmp	r3, #48	@ 0x30
 800203e:	d064      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002040:	2b30      	cmp	r3, #48	@ 0x30
 8002042:	d86b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b20      	cmp	r3, #32
 8002046:	d060      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d867      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05c      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d05a      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002054:	e062      	b.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002066:	f000 f9b9 	bl	80023dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
      break;
 8002082:	e04f      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002094:	f000 f9a2 	bl	80023dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020a6:	609a      	str	r2, [r3, #8]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 f916 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2150      	movs	r1, #80	@ 0x50
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f96f 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 80020c8:	e02c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 f935 	bl	8002346 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2160      	movs	r1, #96	@ 0x60
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f95f 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 80020e8:	e01c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f8f6 	bl	80022e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2140      	movs	r1, #64	@ 0x40
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f94f 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 8002108:	e00c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f000 f946 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 800211a:	e003      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e000      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a46      	ldr	r2, [pc, #280]	@ (80022bc <TIM_Base_SetConfig+0x12c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d013      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ae:	d00f      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <TIM_Base_SetConfig+0x130>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a42      	ldr	r2, [pc, #264]	@ (80022c4 <TIM_Base_SetConfig+0x134>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d007      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a41      	ldr	r2, [pc, #260]	@ (80022c8 <TIM_Base_SetConfig+0x138>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d003      	beq.n	80021d0 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a40      	ldr	r2, [pc, #256]	@ (80022cc <TIM_Base_SetConfig+0x13c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d108      	bne.n	80021e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a35      	ldr	r2, [pc, #212]	@ (80022bc <TIM_Base_SetConfig+0x12c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f0:	d027      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a32      	ldr	r2, [pc, #200]	@ (80022c0 <TIM_Base_SetConfig+0x130>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d023      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a31      	ldr	r2, [pc, #196]	@ (80022c4 <TIM_Base_SetConfig+0x134>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a30      	ldr	r2, [pc, #192]	@ (80022c8 <TIM_Base_SetConfig+0x138>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2f      	ldr	r2, [pc, #188]	@ (80022cc <TIM_Base_SetConfig+0x13c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d017      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2e      	ldr	r2, [pc, #184]	@ (80022d0 <TIM_Base_SetConfig+0x140>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2d      	ldr	r2, [pc, #180]	@ (80022d4 <TIM_Base_SetConfig+0x144>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00f      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2c      	ldr	r2, [pc, #176]	@ (80022d8 <TIM_Base_SetConfig+0x148>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00b      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2b      	ldr	r2, [pc, #172]	@ (80022dc <TIM_Base_SetConfig+0x14c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2a      	ldr	r2, [pc, #168]	@ (80022e0 <TIM_Base_SetConfig+0x150>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d003      	beq.n	8002242 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a29      	ldr	r2, [pc, #164]	@ (80022e4 <TIM_Base_SetConfig+0x154>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <TIM_Base_SetConfig+0x12c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0xf8>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <TIM_Base_SetConfig+0x13c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f023 0201 	bic.w	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]
  }
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	40010400 	.word	0x40010400
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800
 80022dc:	40001800 	.word	0x40001800
 80022e0:	40001c00 	.word	0x40001c00
 80022e4:	40002000 	.word	0x40002000

080022e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 030a 	bic.w	r3, r3, #10
 8002324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 0210 	bic.w	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	031b      	lsls	r3, r3, #12
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002382:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f043 0307 	orr.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021a      	lsls	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	431a      	orrs	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002430:	2302      	movs	r3, #2
 8002432:	e05a      	b.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	@ (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002480:	d01d      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1d      	ldr	r2, [pc, #116]	@ (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d018      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1a      	ldr	r2, [pc, #104]	@ (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00e      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	@ (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a17      	ldr	r2, [pc, #92]	@ (800250c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10c      	bne.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40010400 	.word	0x40010400
 800250c:	40014000 	.word	0x40014000
 8002510:	40001800 	.word	0x40001800

08002514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e042      	b.n	80025d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fa86 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	@ 0x24
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800257e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f973 	bl	800286c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d175      	bne.n	80026e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_UART_Transmit+0x2c>
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e06e      	b.n	80026ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2221      	movs	r2, #33	@ 0x21
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800261a:	f7fe fb91 	bl	8000d40 <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002634:	d108      	bne.n	8002648 <HAL_UART_Transmit+0x6c>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e003      	b.n	8002650 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002650:	e02e      	b.n	80026b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2200      	movs	r2, #0
 800265a:	2180      	movs	r1, #128	@ 0x80
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f848 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03a      	b.n	80026ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e007      	b.n	80026a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1cb      	bne.n	8002652 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2200      	movs	r2, #0
 80026c2:	2140      	movs	r1, #64	@ 0x40
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f814 	bl	80026f2 <UART_WaitOnFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e006      	b.n	80026ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002702:	e03b      	b.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d037      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fb18 	bl	8000d40 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	6a3a      	ldr	r2, [r7, #32]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <UART_WaitOnFlagUntilTimeout+0x30>
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e03a      	b.n	800279c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b80      	cmp	r3, #128	@ 0x80
 8002738:	d020      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d01d      	beq.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b08      	cmp	r3, #8
 800274c:	d116      	bne.n	800277c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 f81d 	bl	80027a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2208      	movs	r2, #8
 800276e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e00f      	b.n	800279c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4013      	ands	r3, r2
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	bf0c      	ite	eq
 800278c:	2301      	moveq	r3, #1
 800278e:	2300      	movne	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	429a      	cmp	r2, r3
 8002798:	d0b4      	beq.n	8002704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b095      	sub	sp, #84	@ 0x54
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	330c      	adds	r3, #12
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3314      	adds	r3, #20
 80027e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	e853 3f00 	ldrex	r3, [r3]
 80027ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3314      	adds	r3, #20
 80027fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002808:	e841 2300 	strex	r3, r2, [r1]
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e5      	bne.n	80027e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	2b01      	cmp	r3, #1
 800281a:	d119      	bne.n	8002850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	e853 3f00 	ldrex	r3, [r3]
 800282a:	60bb      	str	r3, [r7, #8]
   return(result);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0310 	bic.w	r3, r3, #16
 8002832:	647b      	str	r3, [r7, #68]	@ 0x44
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800283c:	61ba      	str	r2, [r7, #24]
 800283e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6979      	ldr	r1, [r7, #20]
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	613b      	str	r3, [r7, #16]
   return(result);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e5      	bne.n	800281c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800285e:	bf00      	nop
 8002860:	3754      	adds	r7, #84	@ 0x54
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800286c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002870:	b0c0      	sub	sp, #256	@ 0x100
 8002872:	af00      	add	r7, sp, #0
 8002874:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	ea40 0301 	orr.w	r3, r0, r1
 8002894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028c4:	f021 010c 	bic.w	r1, r1, #12
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028d2:	430b      	orrs	r3, r1
 80028d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e6:	6999      	ldr	r1, [r3, #24]
 80028e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	ea40 0301 	orr.w	r3, r0, r1
 80028f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002b38 <UART_SetConfig+0x2cc>)
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d005      	beq.n	800290c <UART_SetConfig+0xa0>
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b8d      	ldr	r3, [pc, #564]	@ (8002b3c <UART_SetConfig+0x2d0>)
 8002908:	429a      	cmp	r2, r3
 800290a:	d104      	bne.n	8002916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff f95a 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002910:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002914:	e003      	b.n	800291e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002916:	f7ff f941 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 800291a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002928:	f040 810c 	bne.w	8002b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800292c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002930:	2200      	movs	r2, #0
 8002932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002936:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800293a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800293e:	4622      	mov	r2, r4
 8002940:	462b      	mov	r3, r5
 8002942:	1891      	adds	r1, r2, r2
 8002944:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002946:	415b      	adcs	r3, r3
 8002948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800294a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800294e:	4621      	mov	r1, r4
 8002950:	eb12 0801 	adds.w	r8, r2, r1
 8002954:	4629      	mov	r1, r5
 8002956:	eb43 0901 	adc.w	r9, r3, r1
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800296a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296e:	4690      	mov	r8, r2
 8002970:	4699      	mov	r9, r3
 8002972:	4623      	mov	r3, r4
 8002974:	eb18 0303 	adds.w	r3, r8, r3
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800297c:	462b      	mov	r3, r5
 800297e:	eb49 0303 	adc.w	r3, r9, r3
 8002982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002992:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800299a:	460b      	mov	r3, r1
 800299c:	18db      	adds	r3, r3, r3
 800299e:	653b      	str	r3, [r7, #80]	@ 0x50
 80029a0:	4613      	mov	r3, r2
 80029a2:	eb42 0303 	adc.w	r3, r2, r3
 80029a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029b0:	f7fd fc58 	bl	8000264 <__aeabi_uldivmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4b61      	ldr	r3, [pc, #388]	@ (8002b40 <UART_SetConfig+0x2d4>)
 80029ba:	fba3 2302 	umull	r2, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	011c      	lsls	r4, r3, #4
 80029c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029c6:	2200      	movs	r2, #0
 80029c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029d4:	4642      	mov	r2, r8
 80029d6:	464b      	mov	r3, r9
 80029d8:	1891      	adds	r1, r2, r2
 80029da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029dc:	415b      	adcs	r3, r3
 80029de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e4:	4641      	mov	r1, r8
 80029e6:	eb12 0a01 	adds.w	sl, r2, r1
 80029ea:	4649      	mov	r1, r9
 80029ec:	eb43 0b01 	adc.w	fp, r3, r1
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a04:	4692      	mov	sl, r2
 8002a06:	469b      	mov	fp, r3
 8002a08:	4643      	mov	r3, r8
 8002a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a12:	464b      	mov	r3, r9
 8002a14:	eb4b 0303 	adc.w	r3, fp, r3
 8002a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a30:	460b      	mov	r3, r1
 8002a32:	18db      	adds	r3, r3, r3
 8002a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a36:	4613      	mov	r3, r2
 8002a38:	eb42 0303 	adc.w	r3, r2, r3
 8002a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a46:	f7fd fc0d 	bl	8000264 <__aeabi_uldivmod>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <UART_SetConfig+0x2d4>)
 8002a52:	fba3 2301 	umull	r2, r3, r3, r1
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2264      	movs	r2, #100	@ 0x64
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	1acb      	subs	r3, r1, r3
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a66:	4b36      	ldr	r3, [pc, #216]	@ (8002b40 <UART_SetConfig+0x2d4>)
 8002a68:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a74:	441c      	add	r4, r3
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a90:	415b      	adcs	r3, r3
 8002a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a98:	4641      	mov	r1, r8
 8002a9a:	1851      	adds	r1, r2, r1
 8002a9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	414b      	adcs	r3, r1
 8002aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ab0:	4659      	mov	r1, fp
 8002ab2:	00cb      	lsls	r3, r1, #3
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aba:	4651      	mov	r1, sl
 8002abc:	00ca      	lsls	r2, r1, #3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002acc:	464b      	mov	r3, r9
 8002ace:	460a      	mov	r2, r1
 8002ad0:	eb42 0303 	adc.w	r3, r2, r3
 8002ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002aec:	460b      	mov	r3, r1
 8002aee:	18db      	adds	r3, r3, r3
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002af2:	4613      	mov	r3, r2
 8002af4:	eb42 0303 	adc.w	r3, r2, r3
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b02:	f7fd fbaf 	bl	8000264 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <UART_SetConfig+0x2d4>)
 8002b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2164      	movs	r1, #100	@ 0x64
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	3332      	adds	r3, #50	@ 0x32
 8002b1e:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <UART_SetConfig+0x2d4>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	f003 0207 	and.w	r2, r3, #7
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4422      	add	r2, r4
 8002b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b34:	e106      	b.n	8002d44 <UART_SetConfig+0x4d8>
 8002b36:	bf00      	nop
 8002b38:	40011000 	.word	0x40011000
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	1891      	adds	r1, r2, r2
 8002b5c:	6239      	str	r1, [r7, #32]
 8002b5e:	415b      	adcs	r3, r3
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b66:	4641      	mov	r1, r8
 8002b68:	1854      	adds	r4, r2, r1
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	eb43 0501 	adc.w	r5, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	00eb      	lsls	r3, r5, #3
 8002b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7e:	00e2      	lsls	r2, r4, #3
 8002b80:	4614      	mov	r4, r2
 8002b82:	461d      	mov	r5, r3
 8002b84:	4643      	mov	r3, r8
 8002b86:	18e3      	adds	r3, r4, r3
 8002b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b8c:	464b      	mov	r3, r9
 8002b8e:	eb45 0303 	adc.w	r3, r5, r3
 8002b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	008b      	lsls	r3, r1, #2
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	008a      	lsls	r2, r1, #2
 8002bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bc4:	f7fd fb4e 	bl	8000264 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4b60      	ldr	r3, [pc, #384]	@ (8002d50 <UART_SetConfig+0x4e4>)
 8002bce:	fba3 2302 	umull	r2, r3, r3, r2
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	011c      	lsls	r4, r3, #4
 8002bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	1891      	adds	r1, r2, r2
 8002bee:	61b9      	str	r1, [r7, #24]
 8002bf0:	415b      	adcs	r3, r3
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	1851      	adds	r1, r2, r1
 8002bfc:	6139      	str	r1, [r7, #16]
 8002bfe:	4649      	mov	r1, r9
 8002c00:	414b      	adcs	r3, r1
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c10:	4659      	mov	r1, fp
 8002c12:	00cb      	lsls	r3, r1, #3
 8002c14:	4651      	mov	r1, sl
 8002c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1a:	4651      	mov	r1, sl
 8002c1c:	00ca      	lsls	r2, r1, #3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	4603      	mov	r3, r0
 8002c24:	4642      	mov	r2, r8
 8002c26:	189b      	adds	r3, r3, r2
 8002c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	460a      	mov	r2, r1
 8002c30:	eb42 0303 	adc.w	r3, r2, r3
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c50:	4649      	mov	r1, r9
 8002c52:	008b      	lsls	r3, r1, #2
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	008a      	lsls	r2, r1, #2
 8002c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c62:	f7fd faff 	bl	8000264 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <UART_SetConfig+0x4e4>)
 8002c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2264      	movs	r2, #100	@ 0x64
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	1acb      	subs	r3, r1, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	@ 0x32
 8002c80:	4a33      	ldr	r2, [pc, #204]	@ (8002d50 <UART_SetConfig+0x4e4>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c8c:	441c      	add	r4, r3
 8002c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c92:	2200      	movs	r2, #0
 8002c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cde:	464b      	mov	r3, r9
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	eb42 0303 	adc.w	r3, r2, r3
 8002ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d00:	4649      	mov	r1, r9
 8002d02:	008b      	lsls	r3, r1, #2
 8002d04:	4641      	mov	r1, r8
 8002d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0a:	4641      	mov	r1, r8
 8002d0c:	008a      	lsls	r2, r1, #2
 8002d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d12:	f7fd faa7 	bl	8000264 <__aeabi_uldivmod>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <UART_SetConfig+0x4e4>)
 8002d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2164      	movs	r1, #100	@ 0x64
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	3332      	adds	r3, #50	@ 0x32
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <UART_SetConfig+0x4e4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4422      	add	r2, r4
 8002d42:	609a      	str	r2, [r3, #8]
}
 8002d44:	bf00      	nop
 8002d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d50:	51eb851f 	.word	0x51eb851f

08002d54 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 0208 	add.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f04f 32ff 	mov.w	r2, #4294967295
 8002d6c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f103 0208 	add.w	r2, r3, #8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f103 0208 	add.w	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002d88:	f240 1019 	movw	r0, #281	@ 0x119
 8002d8c:	f003 fdf8 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002da6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002daa:	f003 fde9 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d103      	bne.n	8002dd6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	e00c      	b.n	8002df0 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3308      	adds	r3, #8
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	e002      	b.n	8002de4 <vListInsert+0x2e>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d2f6      	bcs.n	8002dde <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002e1c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002e20:	f003 fdae 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6892      	ldr	r2, [r2, #8]
 8002e42:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6852      	ldr	r2, [r2, #4]
 8002e4c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d103      	bne.n	8002e60 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4619      	mov	r1, r3
 8002e76:	f240 101d 	movw	r0, #285	@ 0x11d
 8002e7a:	f003 fdbd 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e96:	2301      	movs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10b      	bne.n	8002ebc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002eb6:	bf00      	nop
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d05d      	beq.n	8002f7e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d059      	beq.n	8002f7e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d000      	beq.n	8002ede <xQueueGenericReset+0x52>
 8002edc:	2101      	movs	r1, #1
 8002ede:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d14c      	bne.n	8002f7e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002ee4:	f002 f8f6 	bl	80050d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	6939      	ldr	r1, [r7, #16]
 8002ef2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ef4:	fb01 f303 	mul.w	r3, r1, r3
 8002ef8:	441a      	add	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2200      	movs	r2, #0
 8002f02:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f14:	3b01      	subs	r3, #1
 8002f16:	6939      	ldr	r1, [r7, #16]
 8002f18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	441a      	add	r2, r3
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	22ff      	movs	r2, #255	@ 0xff
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	22ff      	movs	r2, #255	@ 0xff
 8002f30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d114      	bne.n	8002f64 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	3310      	adds	r3, #16
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f84c 	bl	8003fe4 <xTaskRemoveFromEventList>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d012      	beq.n	8002f78 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <xQueueGenericReset+0x128>)
 8002f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	e009      	b.n	8002f78 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3310      	adds	r3, #16
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fef3 	bl	8002d54 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3324      	adds	r3, #36	@ 0x24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff feee 	bl	8002d54 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f78:	f002 f8de 	bl	8005138 <vPortExitCritical>
 8002f7c:	e001      	b.n	8002f82 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <xQueueGenericReset+0x114>
    __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	60bb      	str	r3, [r7, #8]
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	2096      	movs	r0, #150	@ 0x96
 8002fa6:	f003 fd27 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002faa:	697b      	ldr	r3, [r7, #20]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	e000ed04 	.word	0xe000ed04

08002fb8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	@ 0x28
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02e      	beq.n	800302e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d000      	beq.n	8002fe0 <xQueueGenericCreate+0x28>
 8002fde:	2101      	movs	r1, #1
 8002fe0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d123      	bne.n	800302e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fee:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002ff2:	d81c      	bhi.n	800302e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	3350      	adds	r3, #80	@ 0x50
 8003002:	4618      	mov	r0, r3
 8003004:	f002 f994 	bl	8005330 <pvPortMalloc>
 8003008:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01d      	beq.n	800304c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3350      	adds	r3, #80	@ 0x50
 8003018:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800301a:	79fa      	ldrb	r2, [r7, #7]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4613      	mov	r3, r2
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f81e 	bl	8003068 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800302c:	e00e      	b.n	800304c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <xQueueGenericCreate+0x94>
    __asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	613b      	str	r3, [r7, #16]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 fe6c 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8003054:	4603      	mov	r3, r0
 8003056:	4619      	mov	r1, r3
 8003058:	2098      	movs	r0, #152	@ 0x98
 800305a:	f003 fccd 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800305e:	69fb      	ldr	r3, [r7, #28]
    }
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e002      	b.n	800308a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003096:	2101      	movs	r1, #1
 8003098:	69b8      	ldr	r0, [r7, #24]
 800309a:	f7ff fef7 	bl	8002e8c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	@ 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80030bc:	2300      	movs	r3, #0
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10b      	bne.n	80030e2 <xQueueReceive+0x32>
    __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	623b      	str	r3, [r7, #32]
}
 80030dc:	bf00      	nop
 80030de:	bf00      	nop
 80030e0:	e7fd      	b.n	80030de <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <xQueueReceive+0x40>
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <xQueueReceive+0x44>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <xQueueReceive+0x46>
 80030f4:	2300      	movs	r3, #0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <xQueueReceive+0x62>
    __asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	61fb      	str	r3, [r7, #28]
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	e7fd      	b.n	800310e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003112:	f001 f989 	bl	8004428 <xTaskGetSchedulerState>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <xQueueReceive+0x72>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xQueueReceive+0x76>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueReceive+0x78>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <xQueueReceive+0x94>
    __asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	61bb      	str	r3, [r7, #24]
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003144:	f001 ffc6 	bl	80050d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	2b00      	cmp	r3, #0
 8003152:	d023      	beq.n	800319c <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003158:	f000 f898 	bl	800328c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003162:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	3310      	adds	r3, #16
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ff37 	bl	8003fe4 <xTaskRemoveFromEventList>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800317c:	4b42      	ldr	r3, [pc, #264]	@ (8003288 <xQueueReceive+0x1d8>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800318c:	f001 ffd4 	bl	8005138 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8003190:	2101      	movs	r1, #1
 8003192:	20a4      	movs	r0, #164	@ 0xa4
 8003194:	f003 fc30 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8003198:	2301      	movs	r3, #1
 800319a:	e071      	b.n	8003280 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80031a2:	f001 ffc9 	bl	8005138 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80031a6:	2100      	movs	r1, #0
 80031a8:	20a4      	movs	r0, #164	@ 0xa4
 80031aa:	f003 fc25 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e066      	b.n	8003280 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80031b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80031b8:	f107 0310 	add.w	r3, r7, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fff1 	bl	80041a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80031c2:	2301      	movs	r3, #1
 80031c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80031c6:	f001 ffb7 	bl	8005138 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80031ca:	f000 fbc3 	bl	8003954 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80031ce:	f001 ff81 	bl	80050d4 <vPortEnterCritical>
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d8:	b25b      	sxtb	r3, r3
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d103      	bne.n	80031e8 <xQueueReceive+0x138>
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d103      	bne.n	80031fe <xQueueReceive+0x14e>
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031fe:	f001 ff9b 	bl	8005138 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003202:	1d3a      	adds	r2, r7, #4
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f000 ffe2 	bl	80041d4 <xTaskCheckForTimeOut>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d123      	bne.n	800325e <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003218:	f000 f8b0 	bl	800337c <prvIsQueueEmpty>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	3324      	adds	r3, #36	@ 0x24
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fe68 	bl	8003f00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003232:	f000 f851 	bl	80032d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003236:	f000 fb9b 	bl	8003970 <xTaskResumeAll>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d181      	bne.n	8003144 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <xQueueReceive+0x1d8>)
 8003242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	f3bf 8f4f 	dsb	sy
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	e778      	b.n	8003144 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003254:	f000 f840 	bl	80032d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003258:	f000 fb8a 	bl	8003970 <xTaskResumeAll>
 800325c:	e772      	b.n	8003144 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800325e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003260:	f000 f83a 	bl	80032d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003264:	f000 fb84 	bl	8003970 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800326a:	f000 f887 	bl	800337c <prvIsQueueEmpty>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	f43f af67 	beq.w	8003144 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8003276:	2100      	movs	r1, #0
 8003278:	20a4      	movs	r0, #164	@ 0xa4
 800327a:	f003 fbbd 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 800327e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3730      	adds	r7, #48	@ 0x30
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d018      	beq.n	80032d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d303      	bcc.n	80032c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68d9      	ldr	r1, [r3, #12]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	461a      	mov	r2, r3
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f003 ffd2 	bl	8007274 <memcpy>
    }
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80032e0:	f001 fef8 	bl	80050d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ec:	e011      	b.n	8003312 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3324      	adds	r3, #36	@ 0x24
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe72 	bl	8003fe4 <xTaskRemoveFromEventList>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003306:	f000 ffd1 	bl	80042ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	3b01      	subs	r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	dce9      	bgt.n	80032ee <prvUnlockQueue+0x16>
 800331a:	e000      	b.n	800331e <prvUnlockQueue+0x46>
                    break;
 800331c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	22ff      	movs	r2, #255	@ 0xff
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003326:	f001 ff07 	bl	8005138 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800332a:	f001 fed3 	bl	80050d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003334:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003336:	e011      	b.n	800335c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d012      	beq.n	8003366 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3310      	adds	r3, #16
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fe4d 	bl	8003fe4 <xTaskRemoveFromEventList>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003350:	f000 ffac 	bl	80042ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800335c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dce9      	bgt.n	8003338 <prvUnlockQueue+0x60>
 8003364:	e000      	b.n	8003368 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003366:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	22ff      	movs	r2, #255	@ 0xff
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003370:	f001 fee2 	bl	8005138 <vPortExitCritical>
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003384:	f001 fea6 	bl	80050d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003390:	2301      	movs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e001      	b.n	800339a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800339a:	f001 fecd 	bl	8005138 <vPortExitCritical>

    return xReturn;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d024      	beq.n	8003424 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e01e      	b.n	800341e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80033e0:	4a18      	ldr	r2, [pc, #96]	@ (8003444 <vQueueAddToRegistry+0x9c>)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d105      	bne.n	80033fc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4a13      	ldr	r2, [pc, #76]	@ (8003444 <vQueueAddToRegistry+0x9c>)
 80033f6:	4413      	add	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
                    break;
 80033fa:	e013      	b.n	8003424 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <vQueueAddToRegistry+0x70>
 8003402:	4a10      	ldr	r2, [pc, #64]	@ (8003444 <vQueueAddToRegistry+0x9c>)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d104      	bne.n	8003418 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4a0c      	ldr	r2, [pc, #48]	@ (8003444 <vQueueAddToRegistry+0x9c>)
 8003414:	4413      	add	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	3301      	adds	r3, #1
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b07      	cmp	r3, #7
 8003422:	d9dd      	bls.n	80033e0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d005      	beq.n	8003436 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003436:	20b6      	movs	r0, #182	@ 0xb6
 8003438:	f003 faa2 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000110 	.word	0x20000110

08003448 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003458:	f001 fe3c 	bl	80050d4 <vPortEnterCritical>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003462:	b25b      	sxtb	r3, r3
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d103      	bne.n	8003472 <vQueueWaitForMessageRestricted+0x2a>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <vQueueWaitForMessageRestricted+0x40>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003488:	f001 fe56 	bl	8005138 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	2b00      	cmp	r3, #0
 8003492:	d106      	bne.n	80034a2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	3324      	adds	r3, #36	@ 0x24
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd57 	bl	8003f50 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff18 	bl	80032d8 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80034a8:	20b9      	movs	r0, #185	@ 0xb9
 80034aa:	f003 fa69 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08a      	sub	sp, #40	@ 0x28
 80034ba:	af04      	add	r7, sp, #16
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 ff31 	bl	8005330 <pvPortMalloc>
 80034ce:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d013      	beq.n	80034fe <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80034d6:	2058      	movs	r0, #88	@ 0x58
 80034d8:	f001 ff2a 	bl	8005330 <pvPortMalloc>
 80034dc:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80034e4:	2258      	movs	r2, #88	@ 0x58
 80034e6:	2100      	movs	r1, #0
 80034e8:	6978      	ldr	r0, [r7, #20]
 80034ea:	f003 fe96 	bl	800721a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034f4:	e005      	b.n	8003502 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80034f6:	6938      	ldr	r0, [r7, #16]
 80034f8:	f002 f84c 	bl	8005594 <vPortFree>
 80034fc:	e001      	b.n	8003502 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003508:	2300      	movs	r3, #0
 800350a:	9303      	str	r3, [sp, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f82d 	bl	800357e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003524:	697b      	ldr	r3, [r7, #20]
    }
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800352e:	b580      	push	{r7, lr}
 8003530:	b088      	sub	sp, #32
 8003532:	af02      	add	r7, sp, #8
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ffb3 	bl	80034b6 <prvCreateTask>
 8003550:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8003558:	6938      	ldr	r0, [r7, #16]
 800355a:	f000 f8a1 	bl	80036a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800355e:	2301      	movs	r3, #1
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e002      	b.n	800356a <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	4619      	mov	r1, r3
 800356e:	20c2      	movs	r0, #194	@ 0xc2
 8003570:	f003 fa42 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003574:	697b      	ldr	r3, [r7, #20]
    }
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b088      	sub	sp, #32
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
 800358a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	461a      	mov	r2, r3
 8003596:	21a5      	movs	r1, #165	@ 0xa5
 8003598:	f003 fe3f 	bl	800721a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035a6:	3b01      	subs	r3, #1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f023 0307 	bic.w	r3, r3, #7
 80035b4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00b      	beq.n	80035d8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	617b      	str	r3, [r7, #20]
}
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
 80035d6:	e7fd      	b.n	80035d4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d01e      	beq.n	800361c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e012      	b.n	800360a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	7819      	ldrb	r1, [r3, #0]
 80035ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	3334      	adds	r3, #52	@ 0x34
 80035f4:	460a      	mov	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b09      	cmp	r3, #9
 800360e:	d9e9      	bls.n	80035e4 <prvInitialiseNewTask+0x66>
 8003610:	e000      	b.n	8003614 <prvInitialiseNewTask+0x96>
            {
                break;
 8003612:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	2b04      	cmp	r3, #4
 8003620:	d90b      	bls.n	800363a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	613b      	str	r3, [r7, #16]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	e7fd      	b.n	8003636 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	2b04      	cmp	r3, #4
 800363e:	d901      	bls.n	8003644 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003640:	2304      	movs	r3, #4
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003648:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800364e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	3304      	adds	r3, #4
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fb9f 	bl	8002d98 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	3318      	adds	r3, #24
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fb9a 	bl	8002d98 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003668:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	f1c3 0205 	rsb	r2, r3, #5
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	69b8      	ldr	r0, [r7, #24]
 8003680:	f001 fbaa 	bl	8004dd8 <pxPortInitialiseStack>
 8003684:	4602      	mov	r2, r0
 8003686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003688:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800368a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003694:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003696:	bf00      	nop
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80036a8:	f001 fd14 	bl	80050d4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80036ac:	4b50      	ldr	r3, [pc, #320]	@ (80037f0 <prvAddNewTaskToReadyList+0x150>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	4a4f      	ldr	r2, [pc, #316]	@ (80037f0 <prvAddNewTaskToReadyList+0x150>)
 80036b4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80036b6:	4b4f      	ldr	r3, [pc, #316]	@ (80037f4 <prvAddNewTaskToReadyList+0x154>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80036be:	4a4d      	ldr	r2, [pc, #308]	@ (80037f4 <prvAddNewTaskToReadyList+0x154>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c4:	4b4a      	ldr	r3, [pc, #296]	@ (80037f0 <prvAddNewTaskToReadyList+0x150>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d110      	bne.n	80036ee <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80036cc:	f000 fe12 	bl	80042f4 <prvInitialiseTaskLists>
 80036d0:	e00d      	b.n	80036ee <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80036d2:	4b49      	ldr	r3, [pc, #292]	@ (80037f8 <prvAddNewTaskToReadyList+0x158>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036da:	4b46      	ldr	r3, [pc, #280]	@ (80037f4 <prvAddNewTaskToReadyList+0x154>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d802      	bhi.n	80036ee <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80036e8:	4a42      	ldr	r2, [pc, #264]	@ (80037f4 <prvAddNewTaskToReadyList+0x154>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80036ee:	4b43      	ldr	r3, [pc, #268]	@ (80037fc <prvAddNewTaskToReadyList+0x15c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	4a41      	ldr	r2, [pc, #260]	@ (80037fc <prvAddNewTaskToReadyList+0x15c>)
 80036f6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80036f8:	4b40      	ldr	r3, [pc, #256]	@ (80037fc <prvAddNewTaskToReadyList+0x15c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d016      	beq.n	8003734 <prvAddNewTaskToReadyList+0x94>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	f003 f9e9 	bl	8006ae0 <SEGGER_SYSVIEW_OnTaskCreate>
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	461d      	mov	r5, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461c      	mov	r4, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	1ae3      	subs	r3, r4, r3
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	462b      	mov	r3, r5
 8003730:	f003 fcda 	bl	80070e8 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fa56 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	4b2e      	ldr	r3, [pc, #184]	@ (8003800 <prvAddNewTaskToReadyList+0x160>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	4a2d      	ldr	r2, [pc, #180]	@ (8003800 <prvAddNewTaskToReadyList+0x160>)
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	492c      	ldr	r1, [pc, #176]	@ (8003804 <prvAddNewTaskToReadyList+0x164>)
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	3204      	adds	r2, #4
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4a1c      	ldr	r2, [pc, #112]	@ (8003804 <prvAddNewTaskToReadyList+0x164>)
 8003792:	441a      	add	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	4919      	ldr	r1, [pc, #100]	@ (8003804 <prvAddNewTaskToReadyList+0x164>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	4814      	ldr	r0, [pc, #80]	@ (8003804 <prvAddNewTaskToReadyList+0x164>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4403      	add	r3, r0
 80037bc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80037be:	f001 fcbb 	bl	8005138 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <prvAddNewTaskToReadyList+0x158>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00e      	beq.n	80037e8 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <prvAddNewTaskToReadyList+0x154>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d207      	bcs.n	80037e8 <prvAddNewTaskToReadyList+0x148>
 80037d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003808 <prvAddNewTaskToReadyList+0x168>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bdb0      	pop	{r4, r5, r7, pc}
 80037f0:	20000228 	.word	0x20000228
 80037f4:	20000150 	.word	0x20000150
 80037f8:	20000234 	.word	0x20000234
 80037fc:	20000244 	.word	0x20000244
 8003800:	20000230 	.word	0x20000230
 8003804:	20000154 	.word	0x20000154
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003812:	2301      	movs	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	e011      	b.n	8003844 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003820:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <prvCreateIdleTasks+0x88>)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	4413      	add	r3, r2
 8003826:	7819      	ldrb	r1, [r3, #0]
 8003828:	1d3a      	adds	r2, r7, #4
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4413      	add	r3, r2
 800382e:	460a      	mov	r2, r1
 8003830:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003832:	1d3a      	adds	r2, r7, #4
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	4413      	add	r3, r2
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	3301      	adds	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b09      	cmp	r3, #9
 8003848:	ddea      	ble.n	8003820 <prvCreateIdleTasks+0x14>
 800384a:	e000      	b.n	800384e <prvCreateIdleTasks+0x42>
        {
            break;
 800384c:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800384e:	2300      	movs	r3, #0
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	e015      	b.n	8003880 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <prvCreateIdleTasks+0x8c>)
 8003856:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <prvCreateIdleTasks+0x90>)
 800385e:	4413      	add	r3, r2
 8003860:	1d39      	adds	r1, r7, #4
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2300      	movs	r3, #0
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2300      	movs	r3, #0
 800386a:	2282      	movs	r2, #130	@ 0x82
 800386c:	6938      	ldr	r0, [r7, #16]
 800386e:	f7ff fe5e 	bl	800352e <xTaskCreate>
 8003872:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d006      	beq.n	8003888 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3301      	adds	r3, #1
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b00      	cmp	r3, #0
 8003884:	dde6      	ble.n	8003854 <prvCreateIdleTasks+0x48>
 8003886:	e000      	b.n	800388a <prvCreateIdleTasks+0x7e>
        {
            break;
 8003888:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800388a:	69fb      	ldr	r3, [r7, #28]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	0800731c 	.word	0x0800731c
 8003898:	080042c5 	.word	0x080042c5
 800389c:	2000024c 	.word	0x2000024c

080038a0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80038a6:	f7ff ffb1 	bl	800380c <prvCreateIdleTasks>
 80038aa:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d102      	bne.n	80038b8 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80038b2:	f000 fff9 	bl	80048a8 <xTimerCreateTimerTask>
 80038b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d124      	bne.n	8003908 <vTaskStartScheduler+0x68>
    __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
}
 80038d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <vTaskStartScheduler+0x9c>)
 80038d4:	f04f 32ff 	mov.w	r2, #4294967295
 80038d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80038da:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <vTaskStartScheduler+0xa0>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038e0:	4b18      	ldr	r3, [pc, #96]	@ (8003944 <vTaskStartScheduler+0xa4>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <vTaskStartScheduler+0xa8>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b18      	ldr	r3, [pc, #96]	@ (800394c <vTaskStartScheduler+0xac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d102      	bne.n	80038f8 <vTaskStartScheduler+0x58>
 80038f2:	f003 f8d9 	bl	8006aa8 <SEGGER_SYSVIEW_OnIdle>
 80038f6:	e004      	b.n	8003902 <vTaskStartScheduler+0x62>
 80038f8:	4b14      	ldr	r3, [pc, #80]	@ (800394c <vTaskStartScheduler+0xac>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 f931 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003902:	f001 faf7 	bl	8004ef4 <xPortStartScheduler>
 8003906:	e00f      	b.n	8003928 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d10b      	bne.n	8003928 <vTaskStartScheduler+0x88>
    __asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	607b      	str	r3, [r7, #4]
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003928:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <vTaskStartScheduler+0xb0>)
 800392a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800392c:	20cd      	movs	r0, #205	@ 0xcd
 800392e:	f003 f827 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000248 	.word	0x20000248
 8003940:	20000234 	.word	0x20000234
 8003944:	2000022c 	.word	0x2000022c
 8003948:	2000024c 	.word	0x2000024c
 800394c:	20000150 	.word	0x20000150
 8003950:	2000000c 	.word	0x2000000c

08003954 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003958:	4b04      	ldr	r3, [pc, #16]	@ (800396c <vTaskSuspendAll+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a03      	ldr	r2, [pc, #12]	@ (800396c <vTaskSuspendAll+0x18>)
 8003960:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003962:	20cf      	movs	r0, #207	@ 0xcf
 8003964:	f003 f80c 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000250 	.word	0x20000250

08003970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800397e:	f001 fba9 	bl	80050d4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003986:	4b7a      	ldr	r3, [pc, #488]	@ (8003b70 <xTaskResumeAll+0x200>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <xTaskResumeAll+0x36>
    __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	603b      	str	r3, [r7, #0]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80039a6:	4b72      	ldr	r3, [pc, #456]	@ (8003b70 <xTaskResumeAll+0x200>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a70      	ldr	r2, [pc, #448]	@ (8003b70 <xTaskResumeAll+0x200>)
 80039ae:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80039b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b70 <xTaskResumeAll+0x200>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f040 80ce 	bne.w	8003b56 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003b74 <xTaskResumeAll+0x204>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80c9 	beq.w	8003b56 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039c4:	e092      	b.n	8003aec <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003b78 <xTaskResumeAll+0x208>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	6a12      	ldr	r2, [r2, #32]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	69d2      	ldr	r2, [r2, #28]
 80039e6:	605a      	str	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3318      	adds	r3, #24
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d103      	bne.n	80039fc <xTaskResumeAll+0x8c>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2200      	movs	r2, #0
 8003a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	68d2      	ldr	r2, [r2, #12]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	6892      	ldr	r2, [r2, #8]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d103      	bne.n	8003a3a <xTaskResumeAll+0xca>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f003 f8cb 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	4b48      	ldr	r3, [pc, #288]	@ (8003b7c <xTaskResumeAll+0x20c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	4a46      	ldr	r2, [pc, #280]	@ (8003b7c <xTaskResumeAll+0x20c>)
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a68:	4945      	ldr	r1, [pc, #276]	@ (8003b80 <xTaskResumeAll+0x210>)
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	3304      	adds	r3, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	3204      	adds	r2, #4
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	1d1a      	adds	r2, r3, #4
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4a36      	ldr	r2, [pc, #216]	@ (8003b80 <xTaskResumeAll+0x210>)
 8003aa8:	441a      	add	r2, r3
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	615a      	str	r2, [r3, #20]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab2:	4933      	ldr	r1, [pc, #204]	@ (8003b80 <xTaskResumeAll+0x210>)
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ac4:	1c59      	adds	r1, r3, #1
 8003ac6:	482e      	ldr	r0, [pc, #184]	@ (8003b80 <xTaskResumeAll+0x210>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4403      	add	r3, r0
 8003ad2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <xTaskResumeAll+0x214>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d904      	bls.n	8003aec <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003ae2:	4a29      	ldr	r2, [pc, #164]	@ (8003b88 <xTaskResumeAll+0x218>)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aec:	4b22      	ldr	r3, [pc, #136]	@ (8003b78 <xTaskResumeAll+0x208>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f af68 	bne.w	80039c6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003afc:	f000 fc78 	bl	80043f0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b00:	4b22      	ldr	r3, [pc, #136]	@ (8003b8c <xTaskResumeAll+0x21c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d012      	beq.n	8003b32 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003b0c:	f000 f86a 	bl	8003be4 <xTaskIncrementTick>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003b16:	4a1c      	ldr	r2, [pc, #112]	@ (8003b88 <xTaskResumeAll+0x218>)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ef      	bne.n	8003b0c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003b2c:	4b17      	ldr	r3, [pc, #92]	@ (8003b8c <xTaskResumeAll+0x21c>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003b32:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <xTaskResumeAll+0x218>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <xTaskResumeAll+0x214>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <xTaskResumeAll+0x220>)
 8003b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b56:	f001 faef 	bl	8005138 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	20d0      	movs	r0, #208	@ 0xd0
 8003b60:	f002 ff4a 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003b64:	69bb      	ldr	r3, [r7, #24]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000250 	.word	0x20000250
 8003b74:	20000228 	.word	0x20000228
 8003b78:	200001e8 	.word	0x200001e8
 8003b7c:	20000230 	.word	0x20000230
 8003b80:	20000154 	.word	0x20000154
 8003b84:	20000150 	.word	0x20000150
 8003b88:	2000023c 	.word	0x2000023c
 8003b8c:	20000238 	.word	0x20000238
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003b9a:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <xTaskGetTickCount+0x20>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	20d1      	movs	r0, #209	@ 0xd1
 8003ba4:	f002 ff28 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000022c 	.word	0x2000022c

08003bb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bbe:	f001 fb75 	bl	80052ac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <xTaskGetTickCountFromISR+0x28>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	20d2      	movs	r0, #210	@ 0xd2
 8003bd0:	f002 ff12 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003bd4:	683b      	ldr	r3, [r7, #0]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000022c 	.word	0x2000022c

08003be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	@ 0x28
 8003be8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003bee:	4b83      	ldr	r3, [pc, #524]	@ (8003dfc <xTaskIncrementTick+0x218>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 80f3 	bne.w	8003dde <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bf8:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <xTaskIncrementTick+0x21c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c00:	4a7f      	ldr	r2, [pc, #508]	@ (8003e00 <xTaskIncrementTick+0x21c>)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d121      	bne.n	8003c50 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c0c:	4b7d      	ldr	r3, [pc, #500]	@ (8003e04 <xTaskIncrementTick+0x220>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <xTaskIncrementTick+0x4a>
    __asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	607b      	str	r3, [r7, #4]
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	e7fd      	b.n	8003c2a <xTaskIncrementTick+0x46>
 8003c2e:	4b75      	ldr	r3, [pc, #468]	@ (8003e04 <xTaskIncrementTick+0x220>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	4b74      	ldr	r3, [pc, #464]	@ (8003e08 <xTaskIncrementTick+0x224>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a72      	ldr	r2, [pc, #456]	@ (8003e04 <xTaskIncrementTick+0x220>)
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4a72      	ldr	r2, [pc, #456]	@ (8003e08 <xTaskIncrementTick+0x224>)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b72      	ldr	r3, [pc, #456]	@ (8003e0c <xTaskIncrementTick+0x228>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3301      	adds	r3, #1
 8003c48:	4a70      	ldr	r2, [pc, #448]	@ (8003e0c <xTaskIncrementTick+0x228>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	f000 fbd0 	bl	80043f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003c50:	4b6f      	ldr	r3, [pc, #444]	@ (8003e10 <xTaskIncrementTick+0x22c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	f0c0 80ac 	bcc.w	8003db4 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c5c:	4b69      	ldr	r3, [pc, #420]	@ (8003e04 <xTaskIncrementTick+0x220>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003c66:	4b6a      	ldr	r3, [pc, #424]	@ (8003e10 <xTaskIncrementTick+0x22c>)
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	601a      	str	r2, [r3, #0]
                    break;
 8003c6e:	e0a1      	b.n	8003db4 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c70:	4b64      	ldr	r3, [pc, #400]	@ (8003e04 <xTaskIncrementTick+0x220>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d203      	bcs.n	8003c90 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003c88:	4a61      	ldr	r2, [pc, #388]	@ (8003e10 <xTaskIncrementTick+0x22c>)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	6013      	str	r3, [r2, #0]
                        break;
 8003c8e:	e091      	b.n	8003db4 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	68d2      	ldr	r2, [r2, #12]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	6892      	ldr	r2, [r2, #8]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d103      	bne.n	8003cbe <xTaskIncrementTick+0xda>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	1e5a      	subs	r2, r3, #1
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d01e      	beq.n	8003d14 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	6a12      	ldr	r2, [r2, #32]
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	69d2      	ldr	r2, [r2, #28]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3318      	adds	r3, #24
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d103      	bne.n	8003d04 <xTaskIncrementTick+0x120>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1e5a      	subs	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f002 ff66 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	2201      	movs	r2, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	4b3b      	ldr	r3, [pc, #236]	@ (8003e14 <xTaskIncrementTick+0x230>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e14 <xTaskIncrementTick+0x230>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	4939      	ldr	r1, [pc, #228]	@ (8003e18 <xTaskIncrementTick+0x234>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3304      	adds	r3, #4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	3204      	adds	r2, #4
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <xTaskIncrementTick+0x234>)
 8003d72:	441a      	add	r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	615a      	str	r2, [r3, #20]
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7c:	4926      	ldr	r1, [pc, #152]	@ (8003e18 <xTaskIncrementTick+0x234>)
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	4821      	ldr	r0, [pc, #132]	@ (8003e18 <xTaskIncrementTick+0x234>)
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4403      	add	r3, r0
 8003d9c:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <xTaskIncrementTick+0x238>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	429a      	cmp	r2, r3
 8003daa:	f67f af57 	bls.w	8003c5c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003dae:	2301      	movs	r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db2:	e753      	b.n	8003c5c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003db4:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <xTaskIncrementTick+0x238>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dba:	4917      	ldr	r1, [pc, #92]	@ (8003e18 <xTaskIncrementTick+0x234>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d901      	bls.n	8003dd0 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003dd0:	4b13      	ldr	r3, [pc, #76]	@ (8003e20 <xTaskIncrementTick+0x23c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d007      	beq.n	8003de8 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ddc:	e004      	b.n	8003de8 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <xTaskIncrementTick+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e24 <xTaskIncrementTick+0x240>)
 8003de6:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	4619      	mov	r1, r3
 8003dec:	20db      	movs	r0, #219	@ 0xdb
 8003dee:	f002 fe03 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3728      	adds	r7, #40	@ 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000250 	.word	0x20000250
 8003e00:	2000022c 	.word	0x2000022c
 8003e04:	200001e0 	.word	0x200001e0
 8003e08:	200001e4 	.word	0x200001e4
 8003e0c:	20000240 	.word	0x20000240
 8003e10:	20000248 	.word	0x20000248
 8003e14:	20000230 	.word	0x20000230
 8003e18:	20000154 	.word	0x20000154
 8003e1c:	20000150 	.word	0x20000150
 8003e20:	2000023c 	.word	0x2000023c
 8003e24:	20000238 	.word	0x20000238

08003e28 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <vTaskSwitchContext+0xc0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003e36:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <vTaskSwitchContext+0xc4>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003e3c:	e04f      	b.n	8003ede <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8003e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003eec <vTaskSwitchContext+0xc4>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e44:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef0 <vTaskSwitchContext+0xc8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	fab3 f383 	clz	r3, r3
 8003e50:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8003e52:	7afb      	ldrb	r3, [r7, #11]
 8003e54:	f1c3 031f 	rsb	r3, r3, #31
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	4926      	ldr	r1, [pc, #152]	@ (8003ef4 <vTaskSwitchContext+0xcc>)
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <vTaskSwitchContext+0x5e>
    __asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	607b      	str	r3, [r7, #4]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <vTaskSwitchContext+0x5a>
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <vTaskSwitchContext+0xcc>)
 8003e92:	4413      	add	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d103      	bne.n	8003eb4 <vTaskSwitchContext+0x8c>
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a0f      	ldr	r2, [pc, #60]	@ (8003ef8 <vTaskSwitchContext+0xd0>)
 8003ebc:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8003efc <vTaskSwitchContext+0xd4>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <vTaskSwitchContext+0xd0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d102      	bne.n	8003ed0 <vTaskSwitchContext+0xa8>
 8003eca:	f002 fded 	bl	8006aa8 <SEGGER_SYSVIEW_OnIdle>
 8003ece:	e004      	b.n	8003eda <vTaskSwitchContext+0xb2>
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <vTaskSwitchContext+0xd0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f002 fe45 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003eda:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <vTaskSwitchContext+0xd0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
    }
 8003ede:	bf00      	nop
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000250 	.word	0x20000250
 8003eec:	2000023c 	.word	0x2000023c
 8003ef0:	20000230 	.word	0x20000230
 8003ef4:	20000154 	.word	0x20000154
 8003ef8:	20000150 	.word	0x20000150
 8003efc:	2000024c 	.word	0x2000024c

08003f00 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f28:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <vTaskPlaceOnEventList+0x4c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3318      	adds	r3, #24
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fe ff40 	bl	8002db6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f36:	2101      	movs	r1, #1
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f000 fc27 	bl	800478c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8003f3e:	20e1      	movs	r0, #225	@ 0xe1
 8003f40:	f002 fd1e 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000150 	.word	0x20000150

08003f50 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	613b      	str	r3, [r7, #16]
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	e7fd      	b.n	8003f76 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	61da      	str	r2, [r3, #28]
 8003f88:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	6892      	ldr	r2, [r2, #8]
 8003f90:	621a      	str	r2, [r3, #32]
 8003f92:	4b13      	ldr	r3, [pc, #76]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	3218      	adds	r2, #24
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	4b10      	ldr	r3, [pc, #64]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f103 0218 	add.w	r2, r3, #24
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68b8      	ldr	r0, [r7, #8]
 8003fcc:	f000 fbde 	bl	800478c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003fd0:	20e3      	movs	r0, #227	@ 0xe3
 8003fd2:	f002 fcd5 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003fd6:	bf00      	nop
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000150 	.word	0x20000150

08003fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	@ 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	6a12      	ldr	r2, [r2, #32]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	69d2      	ldr	r2, [r2, #28]
 800402a:	605a      	str	r2, [r3, #4]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	3318      	adds	r3, #24
 8004034:	429a      	cmp	r2, r3
 8004036:	d103      	bne.n	8004040 <xTaskRemoveFromEventList+0x5c>
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	@ 0x28
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	1e5a      	subs	r2, r3, #1
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004050:	4b4e      	ldr	r3, [pc, #312]	@ (800418c <xTaskRemoveFromEventList+0x1a8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d164      	bne.n	8004122 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	6a3a      	ldr	r2, [r7, #32]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	6a3a      	ldr	r2, [r7, #32]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	3304      	adds	r3, #4
 800407a:	429a      	cmp	r2, r3
 800407c:	d103      	bne.n	8004086 <xTaskRemoveFromEventList+0xa2>
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fda5 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	2201      	movs	r2, #1
 80040a4:	409a      	lsls	r2, r3
 80040a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004190 <xTaskRemoveFromEventList+0x1ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	4a38      	ldr	r2, [pc, #224]	@ (8004190 <xTaskRemoveFromEventList+0x1ac>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b4:	4937      	ldr	r1, [pc, #220]	@ (8004194 <xTaskRemoveFromEventList+0x1b0>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3304      	adds	r3, #4
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	609a      	str	r2, [r3, #8]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	3204      	adds	r2, #4
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4a28      	ldr	r2, [pc, #160]	@ (8004194 <xTaskRemoveFromEventList+0x1b0>)
 80040f4:	441a      	add	r2, r3
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	615a      	str	r2, [r3, #20]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fe:	4925      	ldr	r1, [pc, #148]	@ (8004194 <xTaskRemoveFromEventList+0x1b0>)
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004110:	1c59      	adds	r1, r3, #1
 8004112:	4820      	ldr	r0, [pc, #128]	@ (8004194 <xTaskRemoveFromEventList+0x1b0>)
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4403      	add	r3, r0
 800411e:	6019      	str	r1, [r3, #0]
 8004120:	e01b      	b.n	800415a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004122:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <xTaskRemoveFromEventList+0x1b4>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	61da      	str	r2, [r3, #28]
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	621a      	str	r2, [r3, #32]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	3218      	adds	r2, #24
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	f103 0218 	add.w	r2, r3, #24
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <xTaskRemoveFromEventList+0x1b4>)
 800414e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004150:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <xTaskRemoveFromEventList+0x1b4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	4a10      	ldr	r2, [pc, #64]	@ (8004198 <xTaskRemoveFromEventList+0x1b4>)
 8004158:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415e:	4b0f      	ldr	r3, [pc, #60]	@ (800419c <xTaskRemoveFromEventList+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	429a      	cmp	r2, r3
 8004166:	d905      	bls.n	8004174 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004168:	2301      	movs	r3, #1
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <xTaskRemoveFromEventList+0x1bc>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e001      	b.n	8004178 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004174:	2300      	movs	r3, #0
 8004176:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	4619      	mov	r1, r3
 800417c:	20e4      	movs	r0, #228	@ 0xe4
 800417e:	f002 fc3b 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004184:	4618      	mov	r0, r3
 8004186:	3728      	adds	r7, #40	@ 0x28
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000250 	.word	0x20000250
 8004190:	20000230 	.word	0x20000230
 8004194:	20000154 	.word	0x20000154
 8004198:	200001e8 	.word	0x200001e8
 800419c:	20000150 	.word	0x20000150
 80041a0:	2000023c 	.word	0x2000023c

080041a4 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041ac:	4b07      	ldr	r3, [pc, #28]	@ (80041cc <vTaskInternalSetTimeOutState+0x28>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <vTaskInternalSetTimeOutState+0x2c>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80041bc:	20e7      	movs	r0, #231	@ 0xe7
 80041be:	f002 fbdf 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000240 	.word	0x20000240
 80041d0:	2000022c 	.word	0x2000022c

080041d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
}
 80041f6:	bf00      	nop
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60fb      	str	r3, [r7, #12]
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800421a:	f000 ff5b 	bl	80050d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800421e:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <xTaskCheckForTimeOut+0xd0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d102      	bne.n	800423e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e026      	b.n	800428c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <xTaskCheckForTimeOut+0xd4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d00a      	beq.n	8004260 <xTaskCheckForTimeOut+0x8c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	429a      	cmp	r2, r3
 8004252:	d305      	bcc.n	8004260 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e015      	b.n	800428c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	429a      	cmp	r2, r3
 8004268:	d20b      	bcs.n	8004282 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	1ad2      	subs	r2, r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff94 	bl	80041a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e004      	b.n	800428c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800428c:	f000 ff54 	bl	8005138 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4619      	mov	r1, r3
 8004294:	20e8      	movs	r0, #232	@ 0xe8
 8004296:	f002 fbaf 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800429a:	69fb      	ldr	r3, [r7, #28]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	2000022c 	.word	0x2000022c
 80042a8:	20000240 	.word	0x20000240

080042ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80042b0:	4b03      	ldr	r3, [pc, #12]	@ (80042c0 <vTaskMissedYield+0x14>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80042b6:	20e9      	movs	r0, #233	@ 0xe9
 80042b8:	f002 fb62 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	2000023c 	.word	0x2000023c

080042c4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80042cc:	f000 f852 	bl	8004374 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80042d0:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <prvIdleTask+0x28>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d9f9      	bls.n	80042cc <prvIdleTask+0x8>
            {
                taskYIELD();
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <prvIdleTask+0x2c>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80042e8:	e7f0      	b.n	80042cc <prvIdleTask+0x8>
 80042ea:	bf00      	nop
 80042ec:	20000154 	.word	0x20000154
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	e00c      	b.n	800431a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a12      	ldr	r2, [pc, #72]	@ (8004354 <prvInitialiseTaskLists+0x60>)
 800430c:	4413      	add	r3, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fd20 	bl	8002d54 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b04      	cmp	r3, #4
 800431e:	d9ef      	bls.n	8004300 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004320:	480d      	ldr	r0, [pc, #52]	@ (8004358 <prvInitialiseTaskLists+0x64>)
 8004322:	f7fe fd17 	bl	8002d54 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004326:	480d      	ldr	r0, [pc, #52]	@ (800435c <prvInitialiseTaskLists+0x68>)
 8004328:	f7fe fd14 	bl	8002d54 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800432c:	480c      	ldr	r0, [pc, #48]	@ (8004360 <prvInitialiseTaskLists+0x6c>)
 800432e:	f7fe fd11 	bl	8002d54 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004332:	480c      	ldr	r0, [pc, #48]	@ (8004364 <prvInitialiseTaskLists+0x70>)
 8004334:	f7fe fd0e 	bl	8002d54 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004338:	480b      	ldr	r0, [pc, #44]	@ (8004368 <prvInitialiseTaskLists+0x74>)
 800433a:	f7fe fd0b 	bl	8002d54 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800433e:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <prvInitialiseTaskLists+0x78>)
 8004340:	4a05      	ldr	r2, [pc, #20]	@ (8004358 <prvInitialiseTaskLists+0x64>)
 8004342:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <prvInitialiseTaskLists+0x7c>)
 8004346:	4a05      	ldr	r2, [pc, #20]	@ (800435c <prvInitialiseTaskLists+0x68>)
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000154 	.word	0x20000154
 8004358:	200001b8 	.word	0x200001b8
 800435c:	200001cc 	.word	0x200001cc
 8004360:	200001e8 	.word	0x200001e8
 8004364:	200001fc 	.word	0x200001fc
 8004368:	20000214 	.word	0x20000214
 800436c:	200001e0 	.word	0x200001e0
 8004370:	200001e4 	.word	0x200001e4

08004374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800437a:	e019      	b.n	80043b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800437c:	f000 feaa 	bl	80050d4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <prvCheckTasksWaitingTermination+0x50>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fd4d 	bl	8002e2c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004392:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a0b      	ldr	r2, [pc, #44]	@ (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 800439a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043a4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80043a6:	f000 fec7 	bl	8005138 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f810 	bl	80043d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e1      	bne.n	800437c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200001fc 	.word	0x200001fc
 80043c8:	20000228 	.word	0x20000228
 80043cc:	20000210 	.word	0x20000210

080043d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 f8d9 	bl	8005594 <vPortFree>
            vPortFree( pxTCB );
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 f8d6 	bl	8005594 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <prvResetNextTaskUnblockTime+0x30>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043fe:	4b09      	ldr	r3, [pc, #36]	@ (8004424 <prvResetNextTaskUnblockTime+0x34>)
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004406:	e005      	b.n	8004414 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <prvResetNextTaskUnblockTime+0x30>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a04      	ldr	r2, [pc, #16]	@ (8004424 <prvResetNextTaskUnblockTime+0x34>)
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200001e0 	.word	0x200001e0
 8004424:	20000248 	.word	0x20000248

08004428 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800442e:	4b0d      	ldr	r3, [pc, #52]	@ (8004464 <xTaskGetSchedulerState+0x3c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004436:	2301      	movs	r3, #1
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	e008      	b.n	800444e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800443c:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <xTaskGetSchedulerState+0x40>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004444:	2302      	movs	r3, #2
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e001      	b.n	800444e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4619      	mov	r1, r3
 8004452:	20f5      	movs	r0, #245	@ 0xf5
 8004454:	f002 fad0 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004458:	687b      	ldr	r3, [r7, #4]
    }
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000234 	.word	0x20000234
 8004468:	20000250 	.word	0x20000250

0800446c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8004478:	2300      	movs	r3, #0
 800447a:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <ulTaskGenericNotifyTake+0x2e>
    __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	613b      	str	r3, [r7, #16]
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	e7fd      	b.n	8004496 <ulTaskGenericNotifyTake+0x2a>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 800449a:	f7ff fa5b 	bl	8003954 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 800449e:	f000 fe19 	bl	80050d4 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 80044a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	3214      	adds	r2, #20
 80044aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <ulTaskGenericNotifyTake+0x5e>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80044b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	3354      	adds	r3, #84	@ 0x54
 80044bc:	2201      	movs	r2, #1
 80044be:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <ulTaskGenericNotifyTake+0x5e>
                    {
                        xShouldBlock = pdTRUE;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80044ca:	f000 fe35 	bl	8005138 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d103      	bne.n	80044dc <ulTaskGenericNotifyTake+0x70>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044d4:	2101      	movs	r1, #1
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f958 	bl	800478c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80044dc:	f7ff fa48 	bl	8003970 <xTaskResumeAll>
 80044e0:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d10a      	bne.n	80044fe <ulTaskGenericNotifyTake+0x92>
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <ulTaskGenericNotifyTake+0x92>
        {
            taskYIELD_WITHIN_API();
 80044ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <ulTaskGenericNotifyTake+0xf8>)
 80044f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80044fe:	f000 fde9 	bl	80050d4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004502:	4b17      	ldr	r3, [pc, #92]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	3214      	adds	r2, #20
 800450a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800450e:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d012      	beq.n	800453c <ulTaskGenericNotifyTake+0xd0>
            {
                if( xClearCountOnExit != pdFALSE )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <ulTaskGenericNotifyTake+0xc0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 800451c:	4b10      	ldr	r3, [pc, #64]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	3214      	adds	r2, #20
 8004524:	2100      	movs	r1, #0
 8004526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800452a:	e007      	b.n	800453c <ulTaskGenericNotifyTake+0xd0>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	1e51      	subs	r1, r2, #1
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	3214      	adds	r2, #20
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 800453c:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <ulTaskGenericNotifyTake+0xf4>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	3354      	adds	r3, #84	@ 0x54
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800454a:	f000 fdf5 	bl	8005138 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	20ff      	movs	r0, #255	@ 0xff
 8004552:	f002 fa51 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return ulReturn;
 8004556:	697b      	ldr	r3, [r7, #20]
    }
 8004558:	4618      	mov	r0, r3
 800455a:	3720      	adds	r7, #32
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000150 	.word	0x20000150
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004568:	b580      	push	{r7, lr}
 800456a:	b090      	sub	sp, #64	@ 0x40
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10b      	bne.n	8004592 <vTaskGenericNotifyGiveFromISR+0x2a>
    __asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	e7fd      	b.n	800458e <vTaskGenericNotifyGiveFromISR+0x26>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <vTaskGenericNotifyGiveFromISR+0x48>
    __asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	623b      	str	r3, [r7, #32]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <vTaskGenericNotifyGiveFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045b0:	f000 fe7c 	bl	80052ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80045b8:	f3ef 8211 	mrs	r2, BASEPRI
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fa      	str	r2, [r7, #28]
 80045ce:	61bb      	str	r3, [r7, #24]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80045d0:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80045d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80045d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	3354      	adds	r3, #84	@ 0x54
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80045e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4413      	add	r3, r2
 80045e8:	3354      	adds	r3, #84	@ 0x54
 80045ea:	2202      	movs	r2, #2
 80045ec:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80045ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	3214      	adds	r2, #20
 80045f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	3214      	adds	r2, #20
 8004600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004604:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004608:	2b01      	cmp	r3, #1
 800460a:	f040 80a5 	bne.w	8004758 <vTaskGenericNotifyGiveFromISR+0x1f0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800460e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <vTaskGenericNotifyGiveFromISR+0xc6>
    __asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	617b      	str	r3, [r7, #20]
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	e7fd      	b.n	800462a <vTaskGenericNotifyGiveFromISR+0xc2>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800462e:	4b51      	ldr	r3, [pc, #324]	@ (8004774 <vTaskGenericNotifyGiveFromISR+0x20c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d164      	bne.n	8004700 <vTaskGenericNotifyGiveFromISR+0x198>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800463c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004642:	68d2      	ldr	r2, [r2, #12]
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800464c:	6892      	ldr	r2, [r2, #8]
 800464e:	605a      	str	r2, [r3, #4]
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	3304      	adds	r3, #4
 8004658:	429a      	cmp	r2, r3
 800465a:	d103      	bne.n	8004664 <vTaskGenericNotifyGiveFromISR+0xfc>
 800465c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004666:	2200      	movs	r2, #0
 8004668:	615a      	str	r2, [r3, #20]
 800466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1e5a      	subs	r2, r3, #1
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004676:	4618      	mov	r0, r3
 8004678:	f002 fab6 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartReady>
 800467c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	2201      	movs	r2, #1
 8004682:	409a      	lsls	r2, r3
 8004684:	4b3c      	ldr	r3, [pc, #240]	@ (8004778 <vTaskGenericNotifyGiveFromISR+0x210>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	4a3b      	ldr	r2, [pc, #236]	@ (8004778 <vTaskGenericNotifyGiveFromISR+0x210>)
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004692:	493a      	ldr	r1, [pc, #232]	@ (800477c <vTaskGenericNotifyGiveFromISR+0x214>)
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3304      	adds	r3, #4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046b0:	60da      	str	r2, [r3, #12]
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046b8:	3204      	adds	r2, #4
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4a2a      	ldr	r2, [pc, #168]	@ (800477c <vTaskGenericNotifyGiveFromISR+0x214>)
 80046d2:	441a      	add	r2, r3
 80046d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d6:	615a      	str	r2, [r3, #20]
 80046d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046dc:	4927      	ldr	r1, [pc, #156]	@ (800477c <vTaskGenericNotifyGiveFromISR+0x214>)
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046ee:	1c59      	adds	r1, r3, #1
 80046f0:	4822      	ldr	r0, [pc, #136]	@ (800477c <vTaskGenericNotifyGiveFromISR+0x214>)
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4403      	add	r3, r0
 80046fc:	6019      	str	r1, [r3, #0]
 80046fe:	e01b      	b.n	8004738 <vTaskGenericNotifyGiveFromISR+0x1d0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <vTaskGenericNotifyGiveFromISR+0x218>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
 8004706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800470a:	61da      	str	r2, [r3, #28]
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004712:	621a      	str	r2, [r3, #32]
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800471a:	3218      	adds	r2, #24
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004720:	f103 0218 	add.w	r2, r3, #24
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800472a:	4a15      	ldr	r2, [pc, #84]	@ (8004780 <vTaskGenericNotifyGiveFromISR+0x218>)
 800472c:	629a      	str	r2, [r3, #40]	@ 0x28
 800472e:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <vTaskGenericNotifyGiveFromISR+0x218>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3301      	adds	r3, #1
 8004734:	4a12      	ldr	r2, [pc, #72]	@ (8004780 <vTaskGenericNotifyGiveFromISR+0x218>)
 8004736:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	4b11      	ldr	r3, [pc, #68]	@ (8004784 <vTaskGenericNotifyGiveFromISR+0x21c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	429a      	cmp	r2, r3
 8004744:	d908      	bls.n	8004758 <vTaskGenericNotifyGiveFromISR+0x1f0>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <vTaskGenericNotifyGiveFromISR+0x1ea>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <vTaskGenericNotifyGiveFromISR+0x220>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004762:	bf00      	nop
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
 8004764:	f240 1003 	movw	r0, #259	@ 0x103
 8004768:	f002 f90a 	bl	8006980 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800476c:	bf00      	nop
 800476e:	3740      	adds	r7, #64	@ 0x40
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	20000250 	.word	0x20000250
 8004778:	20000230 	.word	0x20000230
 800477c:	20000154 	.word	0x20000154
 8004780:	200001e8 	.word	0x200001e8
 8004784:	20000150 	.word	0x20000150
 8004788:	2000023c 	.word	0x2000023c

0800478c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004796:	4b3d      	ldr	r3, [pc, #244]	@ (800488c <prvAddCurrentTaskToDelayedList+0x100>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800479c:	4b3c      	ldr	r3, [pc, #240]	@ (8004890 <prvAddCurrentTaskToDelayedList+0x104>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80047a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004894 <prvAddCurrentTaskToDelayedList+0x108>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fb3c 	bl	8002e2c <uxListRemove>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047ba:	4b37      	ldr	r3, [pc, #220]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	2201      	movs	r2, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	4b34      	ldr	r3, [pc, #208]	@ (800489c <prvAddCurrentTaskToDelayedList+0x110>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4013      	ands	r3, r2
 80047ce:	4a33      	ldr	r2, [pc, #204]	@ (800489c <prvAddCurrentTaskToDelayedList+0x110>)
 80047d0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d124      	bne.n	8004824 <prvAddCurrentTaskToDelayedList+0x98>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d021      	beq.n	8004824 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b2f      	ldr	r3, [pc, #188]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x114>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	3204      	adds	r2, #4
 8004802:	605a      	str	r2, [r3, #4]
 8004804:	4b24      	ldr	r3, [pc, #144]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	4b22      	ldr	r3, [pc, #136]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a23      	ldr	r2, [pc, #140]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004814:	615a      	str	r2, [r3, #20]
 8004816:	4b22      	ldr	r3, [pc, #136]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a20      	ldr	r2, [pc, #128]	@ (80048a0 <prvAddCurrentTaskToDelayedList+0x114>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004822:	e02e      	b.n	8004882 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004824:	69fa      	ldr	r2, [r7, #28]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	429a      	cmp	r2, r3
 800483a:	d20d      	bcs.n	8004858 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800483c:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2104      	movs	r1, #4
 8004842:	4618      	mov	r0, r3
 8004844:	f002 fa12 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004848:	4b13      	ldr	r3, [pc, #76]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	6978      	ldr	r0, [r7, #20]
 8004852:	f7fe fab0 	bl	8002db6 <vListInsert>
}
 8004856:	e014      	b.n	8004882 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2104      	movs	r1, #4
 800485e:	4618      	mov	r0, r3
 8004860:	f002 fa04 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004864:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3304      	adds	r3, #4
 800486a:	4619      	mov	r1, r3
 800486c:	69b8      	ldr	r0, [r7, #24]
 800486e:	f7fe faa2 	bl	8002db6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004872:	4b0c      	ldr	r3, [pc, #48]	@ (80048a4 <prvAddCurrentTaskToDelayedList+0x118>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	429a      	cmp	r2, r3
 800487a:	d202      	bcs.n	8004882 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800487c:	4a09      	ldr	r2, [pc, #36]	@ (80048a4 <prvAddCurrentTaskToDelayedList+0x118>)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6013      	str	r3, [r2, #0]
}
 8004882:	bf00      	nop
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	2000022c 	.word	0x2000022c
 8004890:	200001e0 	.word	0x200001e0
 8004894:	200001e4 	.word	0x200001e4
 8004898:	20000150 	.word	0x20000150
 800489c:	20000230 	.word	0x20000230
 80048a0:	20000214 	.word	0x20000214
 80048a4:	20000248 	.word	0x20000248

080048a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80048b2:	f000 fa5b 	bl	8004d6c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80048b6:	4b15      	ldr	r3, [pc, #84]	@ (800490c <xTimerCreateTimerTask+0x64>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80048be:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <xTimerCreateTimerTask+0x68>)
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	2302      	movs	r3, #2
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80048cc:	4911      	ldr	r1, [pc, #68]	@ (8004914 <xTimerCreateTimerTask+0x6c>)
 80048ce:	4812      	ldr	r0, [pc, #72]	@ (8004918 <xTimerCreateTimerTask+0x70>)
 80048d0:	f7fe fe2d 	bl	800352e <xTaskCreate>
 80048d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10b      	bne.n	80048f4 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80048dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	603b      	str	r3, [r7, #0]
}
 80048ee:	bf00      	nop
 80048f0:	bf00      	nop
 80048f2:	e7fd      	b.n	80048f0 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4619      	mov	r1, r3
 80048f8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80048fc:	f002 f87c 	bl	80069f8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004900:	687b      	ldr	r3, [r7, #4]
    }
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000284 	.word	0x20000284
 8004910:	20000288 	.word	0x20000288
 8004914:	08007324 	.word	0x08007324
 8004918:	080049c1 	.word	0x080049c1

0800491c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004928:	e008      	b.n	800493c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	699a      	ldr	r2, [r3, #24]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	18d1      	adds	r1, r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f8df 	bl	8004b0c <prvInsertTimerInActiveList>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ea      	bne.n	800492a <prvReloadTimer+0xe>
        }
    }
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <prvProcessExpiredTimer+0x5c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3304      	adds	r3, #4
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fa57 	bl	8002e2c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f7ff ffc3 	bl	800491c <prvReloadTimer>
 8004996:	e008      	b.n	80049aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	4798      	blx	r3
    }
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2000027c 	.word	0x2000027c

080049c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049c8:	f107 0308 	add.w	r3, r7, #8
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f859 	bl	8004a84 <prvGetNextExpireTime>
 80049d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4619      	mov	r1, r3
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f805 	bl	80049e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80049de:	f000 f8d7 	bl	8004b90 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049e2:	bf00      	nop
 80049e4:	e7f0      	b.n	80049c8 <prvTimerTask+0x8>
	...

080049e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80049f2:	f7fe ffaf 	bl	8003954 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 f866 	bl	8004acc <prvSampleTimeNow>
 8004a00:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d130      	bne.n	8004a6a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <prvProcessTimerOrBlockTask+0x3c>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d806      	bhi.n	8004a24 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004a16:	f7fe ffab 	bl	8003970 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff9f 	bl	8004960 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004a22:	e024      	b.n	8004a6e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a2a:	4b13      	ldr	r3, [pc, #76]	@ (8004a78 <prvProcessTimerOrBlockTask+0x90>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <prvProcessTimerOrBlockTask+0x50>
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <prvProcessTimerOrBlockTask+0x52>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a7c <prvProcessTimerOrBlockTask+0x94>)
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f7fe fcfd 	bl	8003448 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004a4e:	f7fe ff8f 	bl	8003970 <xTaskResumeAll>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <prvProcessTimerOrBlockTask+0x98>)
 8004a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	f3bf 8f6f 	isb	sy
    }
 8004a68:	e001      	b.n	8004a6e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004a6a:	f7fe ff81 	bl	8003970 <xTaskResumeAll>
    }
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000280 	.word	0x20000280
 8004a7c:	20000284 	.word	0x20000284
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <prvGetNextExpireTime+0x44>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <prvGetNextExpireTime+0x16>
 8004a96:	2201      	movs	r2, #1
 8004a98:	e000      	b.n	8004a9c <prvGetNextExpireTime+0x18>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa8:	4b07      	ldr	r3, [pc, #28]	@ (8004ac8 <prvGetNextExpireTime+0x44>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e001      	b.n	8004ab8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
    }
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	2000027c 	.word	0x2000027c

08004acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004ad4:	f7ff f85e 	bl	8003b94 <xTaskGetTickCount>
 8004ad8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <prvSampleTimeNow+0x3c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d205      	bcs.n	8004af0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004ae4:	f000 f91c 	bl	8004d20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	e002      	b.n	8004af6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004af6:	4a04      	ldr	r2, [pc, #16]	@ (8004b08 <prvSampleTimeNow+0x3c>)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004afc:	68fb      	ldr	r3, [r7, #12]
    }
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	2000028c 	.word	0x2000028c

08004b0c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d812      	bhi.n	8004b58 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e01b      	b.n	8004b7e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b46:	4b10      	ldr	r3, [pc, #64]	@ (8004b88 <prvInsertTimerInActiveList+0x7c>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f7fe f930 	bl	8002db6 <vListInsert>
 8004b56:	e012      	b.n	8004b7e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d206      	bcs.n	8004b6e <prvInsertTimerInActiveList+0x62>
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e007      	b.n	8004b7e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b6e:	4b07      	ldr	r3, [pc, #28]	@ (8004b8c <prvInsertTimerInActiveList+0x80>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe f91c 	bl	8002db6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004b7e:	697b      	ldr	r3, [r7, #20]
    }
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000280 	.word	0x20000280
 8004b8c:	2000027c 	.word	0x2000027c

08004b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004ba2:	e0a9      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f2c0 80a6 	blt.w	8004cf8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe f935 	bl	8002e2c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bc2:	1d3b      	adds	r3, r7, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff81 	bl	8004acc <prvSampleTimeNow>
 8004bca:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	f200 808e 	bhi.w	8004cf2 <prvProcessReceivedCommands+0x162>
 8004bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bdc <prvProcessReceivedCommands+0x4c>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c01 	.word	0x08004c01
 8004be4:	08004c69 	.word	0x08004c69
 8004be8:	08004c7d 	.word	0x08004c7d
 8004bec:	08004cc9 	.word	0x08004cc9
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c01 	.word	0x08004c01
 8004bf8:	08004c69 	.word	0x08004c69
 8004bfc:	08004c7d 	.word	0x08004c7d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	18d1      	adds	r1, r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	69f8      	ldr	r0, [r7, #28]
 8004c20:	f7ff ff74 	bl	8004b0c <prvInsertTimerInActiveList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d065      	beq.n	8004cf6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	4413      	add	r3, r2
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4619      	mov	r1, r3
 8004c44:	69f8      	ldr	r0, [r7, #28]
 8004c46:	f7ff fe69 	bl	800491c <prvReloadTimer>
 8004c4a:	e008      	b.n	8004c5e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	69f8      	ldr	r0, [r7, #28]
 8004c64:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004c66:	e046      	b.n	8004cf6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004c7a:	e03d      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	617b      	str	r3, [r7, #20]
}
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
 8004cb2:	e7fd      	b.n	8004cb0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	18d1      	adds	r1, r2, r3
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	69f8      	ldr	r0, [r7, #28]
 8004cc2:	f7ff ff23 	bl	8004b0c <prvInsertTimerInActiveList>
                        break;
 8004cc6:	e017      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8004cd6:	69f8      	ldr	r0, [r7, #28]
 8004cd8:	f000 fc5c 	bl	8005594 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004cdc:	e00c      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004cf0:	e002      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004cf2:	bf00      	nop
 8004cf4:	e000      	b.n	8004cf8 <prvProcessReceivedCommands+0x168>
                        break;
 8004cf6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004cf8:	4b08      	ldr	r3, [pc, #32]	@ (8004d1c <prvProcessReceivedCommands+0x18c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f107 0108 	add.w	r1, r7, #8
 8004d00:	2200      	movs	r2, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f9d4 	bl	80030b0 <xQueueReceive>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f47f af4a 	bne.w	8004ba4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000284 	.word	0x20000284

08004d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d26:	e009      	b.n	8004d3c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d28:	4b0e      	ldr	r3, [pc, #56]	@ (8004d64 <prvSwitchTimerLists+0x44>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004d32:	f04f 31ff 	mov.w	r1, #4294967295
 8004d36:	6838      	ldr	r0, [r7, #0]
 8004d38:	f7ff fe12 	bl	8004960 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <prvSwitchTimerLists+0x44>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004d46:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <prvSwitchTimerLists+0x44>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <prvSwitchTimerLists+0x48>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <prvSwitchTimerLists+0x44>)
 8004d52:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004d54:	4a04      	ldr	r2, [pc, #16]	@ (8004d68 <prvSwitchTimerLists+0x48>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6013      	str	r3, [r2, #0]
    }
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	2000027c 	.word	0x2000027c
 8004d68:	20000280 	.word	0x20000280

08004d6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004d70:	f000 f9b0 	bl	80050d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <prvCheckForValidListAndQueue+0x54>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d11d      	bne.n	8004db8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d7c:	4811      	ldr	r0, [pc, #68]	@ (8004dc4 <prvCheckForValidListAndQueue+0x58>)
 8004d7e:	f7fd ffe9 	bl	8002d54 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d82:	4811      	ldr	r0, [pc, #68]	@ (8004dc8 <prvCheckForValidListAndQueue+0x5c>)
 8004d84:	f7fd ffe6 	bl	8002d54 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d88:	4b10      	ldr	r3, [pc, #64]	@ (8004dcc <prvCheckForValidListAndQueue+0x60>)
 8004d8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc4 <prvCheckForValidListAndQueue+0x58>)
 8004d8c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d8e:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <prvCheckForValidListAndQueue+0x64>)
 8004d90:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc8 <prvCheckForValidListAndQueue+0x5c>)
 8004d92:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004d94:	2200      	movs	r2, #0
 8004d96:	210c      	movs	r1, #12
 8004d98:	200a      	movs	r0, #10
 8004d9a:	f7fe f90d 	bl	8002fb8 <xQueueGenericCreate>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4a07      	ldr	r2, [pc, #28]	@ (8004dc0 <prvCheckForValidListAndQueue+0x54>)
 8004da2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <prvCheckForValidListAndQueue+0x54>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dac:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <prvCheckForValidListAndQueue+0x54>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4908      	ldr	r1, [pc, #32]	@ (8004dd4 <prvCheckForValidListAndQueue+0x68>)
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe faf8 	bl	80033a8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004db8:	f000 f9be 	bl	8005138 <vPortExitCritical>
    }
 8004dbc:	bf00      	nop
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000284 	.word	0x20000284
 8004dc4:	20000254 	.word	0x20000254
 8004dc8:	20000268 	.word	0x20000268
 8004dcc:	2000027c 	.word	0x2000027c
 8004dd0:	20000280 	.word	0x20000280
 8004dd4:	0800732c 	.word	0x0800732c

08004dd8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b04      	subs	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004df0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004e08:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <pxPortInitialiseStack+0x64>)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b14      	subs	r3, #20
 8004e12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f06f 0202 	mvn.w	r2, #2
 8004e26:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b20      	subs	r3, #32
 8004e2c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	08004e41 	.word	0x08004e41

08004e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <prvTaskExitError+0x58>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d00b      	beq.n	8004e6c <prvTaskExitError+0x2c>
    __asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <prvTaskExitError+0x28>
    __asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60bb      	str	r3, [r7, #8]
}
 8004e7e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004e80:	bf00      	nop
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0fc      	beq.n	8004e82 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000150 	.word	0x20000150
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
 8004eea:	0000      	.short	0x0000
 8004eec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop

08004ef4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08c      	sub	sp, #48	@ 0x30
 8004ef8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004efa:	4b69      	ldr	r3, [pc, #420]	@ (80050a0 <xPortStartScheduler+0x1ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a69      	ldr	r2, [pc, #420]	@ (80050a4 <xPortStartScheduler+0x1b0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d10b      	bne.n	8004f1c <xPortStartScheduler+0x28>
    __asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f1c:	4b60      	ldr	r3, [pc, #384]	@ (80050a0 <xPortStartScheduler+0x1ac>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a61      	ldr	r2, [pc, #388]	@ (80050a8 <xPortStartScheduler+0x1b4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10b      	bne.n	8004f3e <xPortStartScheduler+0x4a>
    __asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	623b      	str	r3, [r7, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80050ac <xPortStartScheduler+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f46:	332c      	adds	r3, #44	@ 0x2c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a59      	ldr	r2, [pc, #356]	@ (80050b0 <xPortStartScheduler+0x1bc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <xPortStartScheduler+0x74>
    __asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61fb      	str	r3, [r7, #28]
}
 8004f62:	bf00      	nop
 8004f64:	bf00      	nop
 8004f66:	e7fd      	b.n	8004f64 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	3338      	adds	r3, #56	@ 0x38
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a51      	ldr	r2, [pc, #324]	@ (80050b4 <xPortStartScheduler+0x1c0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <xPortStartScheduler+0x98>
    __asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	61bb      	str	r3, [r7, #24]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f90:	4b49      	ldr	r3, [pc, #292]	@ (80050b8 <xPortStartScheduler+0x1c4>)
 8004f92:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9e:	22ff      	movs	r2, #255	@ 0xff
 8004fa0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b41      	ldr	r3, [pc, #260]	@ (80050bc <xPortStartScheduler+0x1c8>)
 8004fb6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004fb8:	4b40      	ldr	r3, [pc, #256]	@ (80050bc <xPortStartScheduler+0x1c8>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10b      	bne.n	8004fd8 <xPortStartScheduler+0xe4>
    __asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	617b      	str	r3, [r7, #20]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004fd8:	79fb      	ldrb	r3, [r7, #7]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d013      	beq.n	800500e <xPortStartScheduler+0x11a>
    __asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	613b      	str	r3, [r7, #16]
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	e7fd      	b.n	8004ffa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3301      	adds	r3, #1
 8005002:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d0f1      	beq.n	8004ffe <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d103      	bne.n	8005028 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005020:	4b27      	ldr	r3, [pc, #156]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e004      	b.n	8005032 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f1c3 0307 	rsb	r3, r3, #7
 800502e:	4a24      	ldr	r2, [pc, #144]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 8005030:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005032:	4b23      	ldr	r3, [pc, #140]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	4a21      	ldr	r2, [pc, #132]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 800503a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800503c:	4b20      	ldr	r3, [pc, #128]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005044:	4a1e      	ldr	r2, [pc, #120]	@ (80050c0 <xPortStartScheduler+0x1cc>)
 8005046:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005050:	4b1c      	ldr	r3, [pc, #112]	@ (80050c4 <xPortStartScheduler+0x1d0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <xPortStartScheduler+0x1d0>)
 8005056:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800505a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800505c:	4b19      	ldr	r3, [pc, #100]	@ (80050c4 <xPortStartScheduler+0x1d0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a18      	ldr	r2, [pc, #96]	@ (80050c4 <xPortStartScheduler+0x1d0>)
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005066:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005068:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <xPortStartScheduler+0x1d4>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800506e:	f000 f8ed 	bl	800524c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005072:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <xPortStartScheduler+0x1d8>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005078:	f000 f90c 	bl	8005294 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <xPortStartScheduler+0x1dc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a13      	ldr	r2, [pc, #76]	@ (80050d0 <xPortStartScheduler+0x1dc>)
 8005082:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005086:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005088:	f7ff ff1e 	bl	8004ec8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800508c:	f7fe fecc 	bl	8003e28 <vTaskSwitchContext>
    prvTaskExitError();
 8005090:	f7ff fed6 	bl	8004e40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3730      	adds	r7, #48	@ 0x30
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	e000ed00 	.word	0xe000ed00
 80050a4:	410fc271 	.word	0x410fc271
 80050a8:	410fc270 	.word	0x410fc270
 80050ac:	e000ed08 	.word	0xe000ed08
 80050b0:	08004ea1 	.word	0x08004ea1
 80050b4:	08005191 	.word	0x08005191
 80050b8:	e000e400 	.word	0xe000e400
 80050bc:	20000290 	.word	0x20000290
 80050c0:	20000294 	.word	0x20000294
 80050c4:	e000ed20 	.word	0xe000ed20
 80050c8:	e000ed1c 	.word	0xe000ed1c
 80050cc:	20000010 	.word	0x20000010
 80050d0:	e000ef34 	.word	0xe000ef34

080050d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
    __asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	607b      	str	r3, [r7, #4]
}
 80050ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <vPortEnterCritical+0x5c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <vPortEnterCritical+0x5c>)
 80050f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80050f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005130 <vPortEnterCritical+0x5c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d110      	bne.n	8005122 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005100:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <vPortEnterCritical+0x60>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <vPortEnterCritical+0x4e>
    __asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	603b      	str	r3, [r7, #0]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <vPortEnterCritical+0x4a>
    }
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000010 	.word	0x20000010
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800513e:	4b12      	ldr	r3, [pc, #72]	@ (8005188 <vPortExitCritical+0x50>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10b      	bne.n	800515e <vPortExitCritical+0x26>
    __asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	607b      	str	r3, [r7, #4]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800515e:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <vPortExitCritical+0x50>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3b01      	subs	r3, #1
 8005164:	4a08      	ldr	r2, [pc, #32]	@ (8005188 <vPortExitCritical+0x50>)
 8005166:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005168:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <vPortExitCritical+0x50>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <vPortExitCritical+0x44>
 8005170:	2300      	movs	r3, #0
 8005172:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f383 8811 	msr	BASEPRI, r3
}
 800517a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000010 	.word	0x20000010
 800518c:	00000000 	.word	0x00000000

08005190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005190:	f3ef 8009 	mrs	r0, PSP
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <pxCurrentTCBConst>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f01e 0f10 	tst.w	lr, #16
 80051a0:	bf08      	it	eq
 80051a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	6010      	str	r0, [r2, #0]
 80051ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051b4:	f380 8811 	msr	BASEPRI, r0
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f7fe fe32 	bl	8003e28 <vTaskSwitchContext>
 80051c4:	f04f 0000 	mov.w	r0, #0
 80051c8:	f380 8811 	msr	BASEPRI, r0
 80051cc:	bc09      	pop	{r0, r3}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d6:	f01e 0f10 	tst.w	lr, #16
 80051da:	bf08      	it	eq
 80051dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051e0:	f380 8809 	msr	PSP, r0
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w

080051f0 <pxCurrentTCBConst>:
 80051f0:	20000150 	.word	0x20000150
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
    __asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8005212:	f001 fb3b 	bl	800688c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005216:	f7fe fce5 	bl	8003be4 <xTaskIncrementTick>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d006      	beq.n	800522e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8005220:	f001 fb92 	bl	8006948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005224:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <SysTick_Handler+0x50>)
 8005226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e001      	b.n	8005232 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800522e:	f001 fb6f 	bl	8006910 <SEGGER_SYSVIEW_RecordExitISR>
 8005232:	2300      	movs	r3, #0
 8005234:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f383 8811 	msr	BASEPRI, r3
}
 800523c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005250:	4b0b      	ldr	r3, [pc, #44]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <vPortSetupTimerInterrupt+0x38>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800525c:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <vPortSetupTimerInterrupt+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0a      	ldr	r2, [pc, #40]	@ (800528c <vPortSetupTimerInterrupt+0x40>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	4a09      	ldr	r2, [pc, #36]	@ (8005290 <vPortSetupTimerInterrupt+0x44>)
 800526a:	3b01      	subs	r3, #1
 800526c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800526e:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <vPortSetupTimerInterrupt+0x34>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e010 	.word	0xe000e010
 8005284:	e000e018 	.word	0xe000e018
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3
 8005290:	e000e014 	.word	0xe000e014

08005294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052a4 <vPortEnableVFP+0x10>
 8005298:	6801      	ldr	r1, [r0, #0]
 800529a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800529e:	6001      	str	r1, [r0, #0]
 80052a0:	4770      	bx	lr
 80052a2:	0000      	.short	0x0000
 80052a4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop

080052ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80052b2:	f3ef 8305 	mrs	r3, IPSR
 80052b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d915      	bls.n	80052ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052be:	4a18      	ldr	r2, [pc, #96]	@ (8005320 <vPortValidateInterruptPriority+0x74>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052c8:	4b16      	ldr	r3, [pc, #88]	@ (8005324 <vPortValidateInterruptPriority+0x78>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	7afa      	ldrb	r2, [r7, #11]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d20b      	bcs.n	80052ea <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	607b      	str	r3, [r7, #4]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005328 <vPortValidateInterruptPriority+0x7c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f2:	4b0e      	ldr	r3, [pc, #56]	@ (800532c <vPortValidateInterruptPriority+0x80>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90b      	bls.n	8005312 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	603b      	str	r3, [r7, #0]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <vPortValidateInterruptPriority+0x62>
    }
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e3f0 	.word	0xe000e3f0
 8005324:	20000290 	.word	0x20000290
 8005328:	e000ed0c 	.word	0xe000ed0c
 800532c:	20000294 	.word	0x20000294

08005330 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08e      	sub	sp, #56	@ 0x38
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d022      	beq.n	8005388 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005342:	2308      	movs	r3, #8
 8005344:	43db      	mvns	r3, r3
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	429a      	cmp	r2, r3
 800534a:	d81b      	bhi.n	8005384 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800534c:	2208      	movs	r2, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4413      	add	r3, r2
 8005352:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	f1c3 0308 	rsb	r3, r3, #8
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800536a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536c:	43db      	mvns	r3, r3
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d804      	bhi.n	800537e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	4413      	add	r3, r2
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e004      	b.n	8005388 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	607b      	str	r3, [r7, #4]
 8005382:	e001      	b.n	8005388 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005388:	f7fe fae4 	bl	8003954 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800538c:	4b7a      	ldr	r3, [pc, #488]	@ (8005578 <pvPortMalloc+0x248>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005394:	f000 f978 	bl	8005688 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	f2c0 80d3 	blt.w	8005546 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80cf 	beq.w	8005546 <pvPortMalloc+0x216>
 80053a8:	4b74      	ldr	r3, [pc, #464]	@ (800557c <pvPortMalloc+0x24c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	f200 80c9 	bhi.w	8005546 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80053b4:	4b72      	ldr	r3, [pc, #456]	@ (8005580 <pvPortMalloc+0x250>)
 80053b6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80053b8:	4b71      	ldr	r3, [pc, #452]	@ (8005580 <pvPortMalloc+0x250>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80053be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c0:	4a70      	ldr	r2, [pc, #448]	@ (8005584 <pvPortMalloc+0x254>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d305      	bcc.n	80053d2 <pvPortMalloc+0xa2>
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	4a6f      	ldr	r2, [pc, #444]	@ (8005588 <pvPortMalloc+0x258>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d801      	bhi.n	80053d2 <pvPortMalloc+0xa2>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <pvPortMalloc+0xa4>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d129      	bne.n	800542c <pvPortMalloc+0xfc>
    __asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	623b      	str	r3, [r7, #32]
}
 80053ea:	bf00      	nop
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80053f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80053f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80053fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fc:	4a61      	ldr	r2, [pc, #388]	@ (8005584 <pvPortMalloc+0x254>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d305      	bcc.n	800540e <pvPortMalloc+0xde>
 8005402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005404:	4a60      	ldr	r2, [pc, #384]	@ (8005588 <pvPortMalloc+0x258>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d801      	bhi.n	800540e <pvPortMalloc+0xde>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <pvPortMalloc+0xe0>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <pvPortMalloc+0xfc>
    __asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	61fb      	str	r3, [r7, #28]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d903      	bls.n	800543e <pvPortMalloc+0x10e>
 8005436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1d8      	bne.n	80053f0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800543e:	4b4e      	ldr	r3, [pc, #312]	@ (8005578 <pvPortMalloc+0x248>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005444:	429a      	cmp	r2, r3
 8005446:	d07e      	beq.n	8005546 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2208      	movs	r2, #8
 800544e:	4413      	add	r3, r2
 8005450:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005454:	4a4b      	ldr	r2, [pc, #300]	@ (8005584 <pvPortMalloc+0x254>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d305      	bcc.n	8005466 <pvPortMalloc+0x136>
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545c:	4a4a      	ldr	r2, [pc, #296]	@ (8005588 <pvPortMalloc+0x258>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d801      	bhi.n	8005466 <pvPortMalloc+0x136>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <pvPortMalloc+0x138>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <pvPortMalloc+0x154>
    __asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	61bb      	str	r3, [r7, #24]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90b      	bls.n	80054ae <pvPortMalloc+0x17e>
    __asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	617b      	str	r3, [r7, #20]
}
 80054a8:	bf00      	nop
 80054aa:	bf00      	nop
 80054ac:	e7fd      	b.n	80054aa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	2308      	movs	r3, #8
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d924      	bls.n	8005508 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <pvPortMalloc+0x1b8>
    __asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	613b      	str	r3, [r7, #16]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad2      	subs	r2, r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80054f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005506:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005508:	4b1c      	ldr	r3, [pc, #112]	@ (800557c <pvPortMalloc+0x24c>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1a      	ldr	r2, [pc, #104]	@ (800557c <pvPortMalloc+0x24c>)
 8005514:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005516:	4b19      	ldr	r3, [pc, #100]	@ (800557c <pvPortMalloc+0x24c>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b1c      	ldr	r3, [pc, #112]	@ (800558c <pvPortMalloc+0x25c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d203      	bcs.n	800552a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005522:	4b16      	ldr	r3, [pc, #88]	@ (800557c <pvPortMalloc+0x24c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a19      	ldr	r2, [pc, #100]	@ (800558c <pvPortMalloc+0x25c>)
 8005528:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800552a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800553c:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <pvPortMalloc+0x260>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a13      	ldr	r2, [pc, #76]	@ (8005590 <pvPortMalloc+0x260>)
 8005544:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005546:	f7fe fa13 	bl	8003970 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <pvPortMalloc+0x23c>
    __asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <pvPortMalloc+0x238>
    return pvReturn;
 800556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800556e:	4618      	mov	r0, r3
 8005570:	3738      	adds	r7, #56	@ 0x38
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20012ea0 	.word	0x20012ea0
 800557c:	20012ea4 	.word	0x20012ea4
 8005580:	20012e98 	.word	0x20012e98
 8005584:	20000298 	.word	0x20000298
 8005588:	20012e97 	.word	0x20012e97
 800558c:	20012ea8 	.word	0x20012ea8
 8005590:	20012eac 	.word	0x20012eac

08005594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d064      	beq.n	8005670 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055a6:	2308      	movs	r3, #8
 80055a8:	425b      	negs	r3, r3
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4a30      	ldr	r2, [pc, #192]	@ (8005678 <vPortFree+0xe4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d305      	bcc.n	80055c8 <vPortFree+0x34>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <vPortFree+0xe8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d801      	bhi.n	80055c8 <vPortFree+0x34>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <vPortFree+0x36>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <vPortFree+0x52>
    __asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	617b      	str	r3, [r7, #20]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	db0b      	blt.n	8005606 <vPortFree+0x72>
    __asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	613b      	str	r3, [r7, #16]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <vPortFree+0x92>
    __asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60fb      	str	r3, [r7, #12]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	0fdb      	lsrs	r3, r3, #31
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d01c      	beq.n	8005670 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d118      	bne.n	8005670 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800564a:	f7fe f983 	bl	8003954 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b0b      	ldr	r3, [pc, #44]	@ (8005680 <vPortFree+0xec>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4413      	add	r3, r2
 8005658:	4a09      	ldr	r2, [pc, #36]	@ (8005680 <vPortFree+0xec>)
 800565a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	f000 f86d 	bl	800573c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005662:	4b08      	ldr	r3, [pc, #32]	@ (8005684 <vPortFree+0xf0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <vPortFree+0xf0>)
 800566a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800566c:	f7fe f980 	bl	8003970 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005670:	bf00      	nop
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000298 	.word	0x20000298
 800567c:	20012e97 	.word	0x20012e97
 8005680:	20012ea4 	.word	0x20012ea4
 8005684:	20012eb0 	.word	0x20012eb0

08005688 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800568e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005692:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005694:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <prvHeapInit+0xa0>)
 8005696:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3307      	adds	r3, #7
 80056a6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0307 	bic.w	r3, r3, #7
 80056ae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <prvHeapInit+0xa0>)
 80056b8:	4413      	add	r3, r2
 80056ba:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a1b      	ldr	r2, [pc, #108]	@ (800572c <prvHeapInit+0xa4>)
 80056c0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <prvHeapInit+0xa4>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4413      	add	r3, r2
 80056ce:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80056d0:	2208      	movs	r2, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a13      	ldr	r2, [pc, #76]	@ (8005730 <prvHeapInit+0xa8>)
 80056e4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80056e6:	4b12      	ldr	r3, [pc, #72]	@ (8005730 <prvHeapInit+0xa8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2200      	movs	r2, #0
 80056ec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80056ee:	4b10      	ldr	r3, [pc, #64]	@ (8005730 <prvHeapInit+0xa8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005704:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <prvHeapInit+0xa8>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <prvHeapInit+0xac>)
 8005712:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4a07      	ldr	r2, [pc, #28]	@ (8005738 <prvHeapInit+0xb0>)
 800571a:	6013      	str	r3, [r2, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000298 	.word	0x20000298
 800572c:	20012e98 	.word	0x20012e98
 8005730:	20012ea0 	.word	0x20012ea0
 8005734:	20012ea8 	.word	0x20012ea8
 8005738:	20012ea4 	.word	0x20012ea4

0800573c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005744:	4b36      	ldr	r3, [pc, #216]	@ (8005820 <prvInsertBlockIntoFreeList+0xe4>)
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e002      	b.n	8005750 <prvInsertBlockIntoFreeList+0x14>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d8f7      	bhi.n	800574a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4a30      	ldr	r2, [pc, #192]	@ (8005820 <prvInsertBlockIntoFreeList+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4a2f      	ldr	r2, [pc, #188]	@ (8005824 <prvInsertBlockIntoFreeList+0xe8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d305      	bcc.n	8005776 <prvInsertBlockIntoFreeList+0x3a>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	4a2e      	ldr	r2, [pc, #184]	@ (8005828 <prvInsertBlockIntoFreeList+0xec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d801      	bhi.n	8005776 <prvInsertBlockIntoFreeList+0x3a>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <prvInsertBlockIntoFreeList+0x3c>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	60fb      	str	r3, [r7, #12]
}
 800578e:	bf00      	nop
 8005790:	bf00      	nop
 8005792:	e7fd      	b.n	8005790 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d108      	bne.n	80057b8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	441a      	add	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	441a      	add	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d118      	bne.n	80057fe <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b16      	ldr	r3, [pc, #88]	@ (800582c <prvInsertBlockIntoFreeList+0xf0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d00d      	beq.n	80057f4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	441a      	add	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e008      	b.n	8005806 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80057f4:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <prvInsertBlockIntoFreeList+0xf0>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e003      	b.n	8005806 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d002      	beq.n	8005814 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20012e98 	.word	0x20012e98
 8005824:	20000298 	.word	0x20000298
 8005828:	20012e97 	.word	0x20012e97
 800582c:	20012ea0 	.word	0x20012ea0

08005830 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005834:	4803      	ldr	r0, [pc, #12]	@ (8005844 <_cbSendSystemDesc+0x14>)
 8005836:	f000 ffd3 	bl	80067e0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800583a:	4803      	ldr	r0, [pc, #12]	@ (8005848 <_cbSendSystemDesc+0x18>)
 800583c:	f000 ffd0 	bl	80067e0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005840:	bf00      	nop
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08007334 	.word	0x08007334
 8005848:	08007360 	.word	0x08007360

0800584c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005850:	4b06      	ldr	r3, [pc, #24]	@ (800586c <SEGGER_SYSVIEW_Conf+0x20>)
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <SEGGER_SYSVIEW_Conf+0x20>)
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <SEGGER_SYSVIEW_Conf+0x24>)
 800585a:	4a06      	ldr	r2, [pc, #24]	@ (8005874 <SEGGER_SYSVIEW_Conf+0x28>)
 800585c:	f000 fc46 	bl	80060ec <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005860:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005864:	f000 fc86 	bl	8006174 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005868:	bf00      	nop
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000000 	.word	0x20000000
 8005870:	08005831 	.word	0x08005831
 8005874:	0800741c 	.word	0x0800741c

08005878 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800587e:	4b26      	ldr	r3, [pc, #152]	@ (8005918 <_DoInit+0xa0>)
 8005880:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005882:	22a8      	movs	r2, #168	@ 0xa8
 8005884:	2100      	movs	r1, #0
 8005886:	6838      	ldr	r0, [r7, #0]
 8005888:	f001 fcc7 	bl	800721a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2203      	movs	r2, #3
 8005890:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2203      	movs	r2, #3
 8005896:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4a20      	ldr	r2, [pc, #128]	@ (800591c <_DoInit+0xa4>)
 800589c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <_DoInit+0xa8>)
 80058a2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058aa:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2200      	movs	r2, #0
 80058b0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2200      	movs	r2, #0
 80058b6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	4a16      	ldr	r2, [pc, #88]	@ (800591c <_DoInit+0xa4>)
 80058c2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	4a17      	ldr	r2, [pc, #92]	@ (8005924 <_DoInit+0xac>)
 80058c8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2210      	movs	r2, #16
 80058ce:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2200      	movs	r2, #0
 80058da:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80058e2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	e00c      	b.n	8005906 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f1c3 030f 	rsb	r3, r3, #15
 80058f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005928 <_DoInit+0xb0>)
 80058f4:	5cd1      	ldrb	r1, [r2, r3]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	460a      	mov	r2, r1
 80058fe:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3301      	adds	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b0f      	cmp	r3, #15
 800590a:	d9ef      	bls.n	80058ec <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800590c:	f3bf 8f5f 	dmb	sy
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20012eb4 	.word	0x20012eb4
 800591c:	08007370 	.word	0x08007370
 8005920:	20012f5c 	.word	0x20012f5c
 8005924:	2001335c 	.word	0x2001335c
 8005928:	080073fc 	.word	0x080073fc

0800592c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005938:	4b3e      	ldr	r3, [pc, #248]	@ (8005a34 <SEGGER_RTT_ReadNoLock+0x108>)
 800593a:	623b      	str	r3, [r7, #32]
 800593c:	6a3b      	ldr	r3, [r7, #32]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b53      	cmp	r3, #83	@ 0x53
 8005944:	d001      	beq.n	800594a <SEGGER_RTT_ReadNoLock+0x1e>
 8005946:	f7ff ff97 	bl	8005878 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	3360      	adds	r3, #96	@ 0x60
 8005956:	4a37      	ldr	r2, [pc, #220]	@ (8005a34 <SEGGER_RTT_ReadNoLock+0x108>)
 8005958:	4413      	add	r3, r2
 800595a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800596c:	2300      	movs	r3, #0
 800596e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	429a      	cmp	r2, r3
 8005976:	d92b      	bls.n	80059d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4293      	cmp	r3, r2
 8005988:	bf28      	it	cs
 800598a:	4613      	movcs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	4413      	add	r3, r2
 8005996:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	6939      	ldr	r1, [r7, #16]
 800599c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800599e:	f001 fc69 	bl	8007274 <memcpy>
    NumBytesRead += NumBytesRem;
 80059a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	4413      	add	r3, r2
 80059a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80059aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d101      	bne.n	80059d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4293      	cmp	r3, r2
 80059de:	bf28      	it	cs
 80059e0:	4613      	movcs	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d019      	beq.n	8005a1e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	4413      	add	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	6939      	ldr	r1, [r7, #16]
 80059f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059fa:	f001 fc3b 	bl	8007274 <memcpy>
    NumBytesRead += NumBytesRem;
 80059fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a28:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3730      	adds	r7, #48	@ 0x30
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20012eb4 	.word	0x20012eb4

08005a38 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a46:	4b3d      	ldr	r3, [pc, #244]	@ (8005b3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b53      	cmp	r3, #83	@ 0x53
 8005a52:	d001      	beq.n	8005a58 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a54:	f7ff ff10 	bl	8005878 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a58:	f3ef 8311 	mrs	r3, BASEPRI
 8005a5c:	f04f 0120 	mov.w	r1, #32
 8005a60:	f381 8811 	msr	BASEPRI, r1
 8005a64:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a66:	4b35      	ldr	r3, [pc, #212]	@ (8005b3c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a68:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a6e:	6939      	ldr	r1, [r7, #16]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	440b      	add	r3, r1
 8005a7e:	3304      	adds	r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	69fa      	ldr	r2, [r7, #28]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	dbeb      	blt.n	8005a6e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a96:	e000      	b.n	8005a9a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a98:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	da3f      	bge.n	8005b24 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005aa4:	6939      	ldr	r1, [r7, #16]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005ab8:	6939      	ldr	r1, [r7, #16]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3304      	adds	r3, #4
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ace:	6939      	ldr	r1, [r7, #16]
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	3320      	adds	r3, #32
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ae2:	6939      	ldr	r1, [r7, #16]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	3328      	adds	r3, #40	@ 0x28
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005af6:	6939      	ldr	r1, [r7, #16]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	440b      	add	r3, r1
 8005b04:	3324      	adds	r3, #36	@ 0x24
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	440b      	add	r3, r1
 8005b18:	332c      	adds	r3, #44	@ 0x2c
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b1e:	f3bf 8f5f 	dmb	sy
 8005b22:	e002      	b.n	8005b2a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b30:	69fb      	ldr	r3, [r7, #28]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20012eb4 	.word	0x20012eb4

08005b40 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	@ 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005b4e:	4b21      	ldr	r3, [pc, #132]	@ (8005bd4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b53      	cmp	r3, #83	@ 0x53
 8005b5a:	d001      	beq.n	8005b60 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b5c:	f7ff fe8c 	bl	8005878 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b60:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005b62:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d82c      	bhi.n	8005bc4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005b6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6e:	f04f 0120 	mov.w	r1, #32
 8005b72:	f381 8811 	msr	BASEPRI, r1
 8005b76:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	3360      	adds	r3, #96	@ 0x60
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	4413      	add	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2200      	movs	r2, #0
 8005bac:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bb2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bb4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e002      	b.n	8005bca <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3728      	adds	r7, #40	@ 0x28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20012eb4 	.word	0x20012eb4

08005bd8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	60fa      	str	r2, [r7, #12]
 8005bee:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b80      	cmp	r3, #128	@ 0x80
 8005bf4:	d90a      	bls.n	8005c0c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005bf6:	2380      	movs	r3, #128	@ 0x80
 8005bf8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005bfa:	e007      	b.n	8005c0c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005bfc:	68ba      	ldr	r2, [r7, #8]
 8005bfe:	1c53      	adds	r3, r2, #1
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1c59      	adds	r1, r3, #1
 8005c06:	60f9      	str	r1, [r7, #12]
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	1e5a      	subs	r2, r3, #1
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <_EncodeStr+0x46>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1ee      	bne.n	8005bfc <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3307      	adds	r3, #7
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c56:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <_HandleIncomingPacket+0xd8>)
 8005c58:	7e1b      	ldrb	r3, [r3, #24]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	1cfb      	adds	r3, r7, #3
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4619      	mov	r1, r3
 8005c62:	f7ff fe63 	bl	800592c <SEGGER_RTT_ReadNoLock>
 8005c66:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d057      	beq.n	8005d1e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	2b80      	cmp	r3, #128	@ 0x80
 8005c72:	d031      	beq.n	8005cd8 <_HandleIncomingPacket+0x88>
 8005c74:	2b80      	cmp	r3, #128	@ 0x80
 8005c76:	dc40      	bgt.n	8005cfa <_HandleIncomingPacket+0xaa>
 8005c78:	2b07      	cmp	r3, #7
 8005c7a:	dc15      	bgt.n	8005ca8 <_HandleIncomingPacket+0x58>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dd3c      	ble.n	8005cfa <_HandleIncomingPacket+0xaa>
 8005c80:	3b01      	subs	r3, #1
 8005c82:	2b06      	cmp	r3, #6
 8005c84:	d839      	bhi.n	8005cfa <_HandleIncomingPacket+0xaa>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <_HandleIncomingPacket+0x3c>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005caf 	.word	0x08005caf
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cbb 	.word	0x08005cbb
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cc7 	.word	0x08005cc7
 8005ca0:	08005ccd 	.word	0x08005ccd
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005caa:	d033      	beq.n	8005d14 <_HandleIncomingPacket+0xc4>
 8005cac:	e025      	b.n	8005cfa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cae:	f000 fb25 	bl	80062fc <SEGGER_SYSVIEW_Start>
      break;
 8005cb2:	e034      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005cb4:	f000 fbdc 	bl	8006470 <SEGGER_SYSVIEW_Stop>
      break;
 8005cb8:	e031      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cba:	f000 fdb5 	bl	8006828 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cbe:	e02e      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cc0:	f000 fd7a 	bl	80067b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005cc4:	e02b      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005cc6:	f000 fbf9 	bl	80064bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005cca:	e028      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005ccc:	f001 f8e6 	bl	8006e9c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cd0:	e025      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cd2:	f001 f8c5 	bl	8006e60 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cd6:	e022      	b.n	8005d1e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cd8:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <_HandleIncomingPacket+0xd8>)
 8005cda:	7e1b      	ldrb	r3, [r3, #24]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	1cfb      	adds	r3, r7, #3
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f7ff fe22 	bl	800592c <SEGGER_RTT_ReadNoLock>
 8005ce8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d013      	beq.n	8005d18 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 f82a 	bl	8006d4c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cf8:	e00e      	b.n	8005d18 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da0c      	bge.n	8005d1c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d02:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <_HandleIncomingPacket+0xd8>)
 8005d04:	7e1b      	ldrb	r3, [r3, #24]
 8005d06:	4618      	mov	r0, r3
 8005d08:	1cfb      	adds	r3, r7, #3
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f7ff fe0d 	bl	800592c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d12:	e003      	b.n	8005d1c <_HandleIncomingPacket+0xcc>
      break;
 8005d14:	bf00      	nop
 8005d16:	e002      	b.n	8005d1e <_HandleIncomingPacket+0xce>
      break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <_HandleIncomingPacket+0xce>
      break;
 8005d1c:	bf00      	nop
    }
  }
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20019774 	.word	0x20019774

08005d2c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08c      	sub	sp, #48	@ 0x30
 8005d30:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d32:	2301      	movs	r3, #1
 8005d34:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d40:	4b31      	ldr	r3, [pc, #196]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d46:	e00b      	b.n	8005d60 <_TrySendOverflowPacket+0x34>
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	09db      	lsrs	r3, r3, #7
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d64:	d8f0      	bhi.n	8005d48 <_TrySendOverflowPacket+0x1c>
 8005d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d74:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d76:	4b25      	ldr	r3, [pc, #148]	@ (8005e0c <_TrySendOverflowPacket+0xe0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d7c:	4b22      	ldr	r3, [pc, #136]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	e00b      	b.n	8005da8 <_TrySendOverflowPacket+0x7c>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	09db      	lsrs	r3, r3, #7
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dac:	d8f0      	bhi.n	8005d90 <_TrySendOverflowPacket+0x64>
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005dbe:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	69fa      	ldr	r2, [r7, #28]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	461a      	mov	r2, r3
 8005dcc:	1d3b      	adds	r3, r7, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	f7fa f9fe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d009      	beq.n	8005df2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dde:	4a0a      	ldr	r2, [pc, #40]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005de4:	4b08      	ldr	r3, [pc, #32]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005dee:	701a      	strb	r2, [r3, #0]
 8005df0:	e004      	b.n	8005dfc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005df2:	4b05      	ldr	r3, [pc, #20]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	3301      	adds	r3, #1
 8005df8:	4a03      	ldr	r2, [pc, #12]	@ (8005e08 <_TrySendOverflowPacket+0xdc>)
 8005dfa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005dfc:	693b      	ldr	r3, [r7, #16]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3730      	adds	r7, #48	@ 0x30
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20019774 	.word	0x20019774
 8005e0c:	e0001004 	.word	0xe0001004

08005e10 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08a      	sub	sp, #40	@ 0x28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e1c:	4b98      	ldr	r3, [pc, #608]	@ (8006080 <_SendPacket+0x270>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d010      	beq.n	8005e46 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e24:	4b96      	ldr	r3, [pc, #600]	@ (8006080 <_SendPacket+0x270>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 812d 	beq.w	8006088 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e2e:	4b94      	ldr	r3, [pc, #592]	@ (8006080 <_SendPacket+0x270>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d109      	bne.n	8005e4a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e36:	f7ff ff79 	bl	8005d2c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e3a:	4b91      	ldr	r3, [pc, #580]	@ (8006080 <_SendPacket+0x270>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f040 8124 	bne.w	800608c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005e44:	e001      	b.n	8005e4a <_SendPacket+0x3a>
    goto Send;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <_SendPacket+0x3c>
Send:
 8005e4a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b1f      	cmp	r3, #31
 8005e50:	d809      	bhi.n	8005e66 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e52:	4b8b      	ldr	r3, [pc, #556]	@ (8006080 <_SendPacket+0x270>)
 8005e54:	69da      	ldr	r2, [r3, #28]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f040 8115 	bne.w	8006090 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b17      	cmp	r3, #23
 8005e6a:	d807      	bhi.n	8005e7c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e0c4      	b.n	8006006 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e88:	d912      	bls.n	8005eb0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	09da      	lsrs	r2, r3, #7
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e006      	b.n	8005ebe <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b7e      	cmp	r3, #126	@ 0x7e
 8005ec2:	d807      	bhi.n	8005ed4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	e098      	b.n	8006006 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005eda:	d212      	bcs.n	8005f02 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	09da      	lsrs	r2, r3, #7
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	3a01      	subs	r2, #1
 8005ef4:	60fa      	str	r2, [r7, #12]
 8005ef6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	e081      	b.n	8006006 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f08:	d21d      	bcs.n	8005f46 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0b9a      	lsrs	r2, r3, #14
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	09db      	lsrs	r3, r3, #7
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	3a01      	subs	r2, #1
 8005f24:	60fa      	str	r2, [r7, #12]
 8005f26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	3a01      	subs	r2, #1
 8005f38:	60fa      	str	r2, [r7, #12]
 8005f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e05f      	b.n	8006006 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4c:	d228      	bcs.n	8005fa0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	0d5a      	lsrs	r2, r3, #21
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	0b9b      	lsrs	r3, r3, #14
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	3a01      	subs	r2, #1
 8005f68:	60fa      	str	r2, [r7, #12]
 8005f6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	09db      	lsrs	r3, r3, #7
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	60fa      	str	r2, [r7, #12]
 8005f80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	3a01      	subs	r2, #1
 8005f92:	60fa      	str	r2, [r7, #12]
 8005f94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e032      	b.n	8006006 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	0f1a      	lsrs	r2, r3, #28
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	0d5b      	lsrs	r3, r3, #21
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	3a01      	subs	r2, #1
 8005fba:	60fa      	str	r2, [r7, #12]
 8005fbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0b9b      	lsrs	r3, r3, #14
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	3a01      	subs	r2, #1
 8005fd0:	60fa      	str	r2, [r7, #12]
 8005fd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	3a01      	subs	r2, #1
 8005fe6:	60fa      	str	r2, [r7, #12]
 8005fe8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	60fa      	str	r2, [r7, #12]
 8005ffc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006000:	b2da      	uxtb	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006006:	4b1f      	ldr	r3, [pc, #124]	@ (8006084 <_SendPacket+0x274>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <_SendPacket+0x270>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	623b      	str	r3, [r7, #32]
 800601e:	e00b      	b.n	8006038 <_SendPacket+0x228>
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	6279      	str	r1, [r7, #36]	@ 0x24
 800602a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	09db      	lsrs	r3, r3, #7
 8006036:	623b      	str	r3, [r7, #32]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b7f      	cmp	r3, #127	@ 0x7f
 800603c:	d8f0      	bhi.n	8006020 <_SendPacket+0x210>
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	627a      	str	r2, [r7, #36]	@ 0x24
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <_SendPacket+0x270>)
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	4618      	mov	r0, r3
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	461a      	mov	r2, r3
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	f7fa f8b7 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006062:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800606a:	4a05      	ldr	r2, [pc, #20]	@ (8006080 <_SendPacket+0x270>)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	60d3      	str	r3, [r2, #12]
 8006070:	e00f      	b.n	8006092 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006072:	4b03      	ldr	r3, [pc, #12]	@ (8006080 <_SendPacket+0x270>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	3301      	adds	r3, #1
 8006078:	b2da      	uxtb	r2, r3
 800607a:	4b01      	ldr	r3, [pc, #4]	@ (8006080 <_SendPacket+0x270>)
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e008      	b.n	8006092 <_SendPacket+0x282>
 8006080:	20019774 	.word	0x20019774
 8006084:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <_SendPacket+0x282>
      goto SendDone;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <_SendPacket+0x282>
      goto SendDone;
 8006090:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006092:	4b14      	ldr	r3, [pc, #80]	@ (80060e4 <_SendPacket+0x2d4>)
 8006094:	7e1b      	ldrb	r3, [r3, #24]
 8006096:	4619      	mov	r1, r3
 8006098:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <_SendPacket+0x2d8>)
 800609a:	460b      	mov	r3, r1
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	440b      	add	r3, r1
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	336c      	adds	r3, #108	@ 0x6c
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	4b0e      	ldr	r3, [pc, #56]	@ (80060e4 <_SendPacket+0x2d4>)
 80060aa:	7e1b      	ldrb	r3, [r3, #24]
 80060ac:	4618      	mov	r0, r3
 80060ae:	490e      	ldr	r1, [pc, #56]	@ (80060e8 <_SendPacket+0x2d8>)
 80060b0:	4603      	mov	r3, r0
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	4403      	add	r3, r0
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	440b      	add	r3, r1
 80060ba:	3370      	adds	r3, #112	@ 0x70
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d00b      	beq.n	80060da <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80060c2:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <_SendPacket+0x2d4>)
 80060c4:	789b      	ldrb	r3, [r3, #2]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d107      	bne.n	80060da <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <_SendPacket+0x2d4>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80060d0:	f7ff fdbe 	bl	8005c50 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80060d4:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <_SendPacket+0x2d4>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80060da:	bf00      	nop
 80060dc:	3728      	adds	r7, #40	@ 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20019774 	.word	0x20019774
 80060e8:	20012eb4 	.word	0x20012eb4

080060ec <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060fa:	2300      	movs	r3, #0
 80060fc:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8006100:	4917      	ldr	r1, [pc, #92]	@ (8006160 <SEGGER_SYSVIEW_Init+0x74>)
 8006102:	4818      	ldr	r0, [pc, #96]	@ (8006164 <SEGGER_SYSVIEW_Init+0x78>)
 8006104:	f7ff fc98 	bl	8005a38 <SEGGER_RTT_AllocUpBuffer>
 8006108:	4603      	mov	r3, r0
 800610a:	b2da      	uxtb	r2, r3
 800610c:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 800610e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006110:	4b15      	ldr	r3, [pc, #84]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006112:	785a      	ldrb	r2, [r3, #1]
 8006114:	4b14      	ldr	r3, [pc, #80]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006118:	4b13      	ldr	r3, [pc, #76]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 800611a:	7e1b      	ldrb	r3, [r3, #24]
 800611c:	4618      	mov	r0, r3
 800611e:	2300      	movs	r3, #0
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	2308      	movs	r3, #8
 8006124:	4a11      	ldr	r2, [pc, #68]	@ (800616c <SEGGER_SYSVIEW_Init+0x80>)
 8006126:	490f      	ldr	r1, [pc, #60]	@ (8006164 <SEGGER_SYSVIEW_Init+0x78>)
 8006128:	f7ff fd0a 	bl	8005b40 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800612c:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 800612e:	2200      	movs	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006132:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <SEGGER_SYSVIEW_Init+0x84>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a0c      	ldr	r2, [pc, #48]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006138:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800613a:	4a0b      	ldr	r2, [pc, #44]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006140:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006146:	4a08      	ldr	r2, [pc, #32]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800614c:	4a06      	ldr	r2, [pc, #24]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006152:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <SEGGER_SYSVIEW_Init+0x7c>)
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	2001336c 	.word	0x2001336c
 8006164:	08007384 	.word	0x08007384
 8006168:	20019774 	.word	0x20019774
 800616c:	2001976c 	.word	0x2001976c
 8006170:	e0001004 	.word	0xe0001004

08006174 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800617c:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6113      	str	r3, [r2, #16]
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20019774 	.word	0x20019774

08006194 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800619c:	f3ef 8311 	mrs	r3, BASEPRI
 80061a0:	f04f 0120 	mov.w	r1, #32
 80061a4:	f381 8811 	msr	BASEPRI, r1
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	4808      	ldr	r0, [pc, #32]	@ (80061cc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061ac:	f7ff fd44 	bl	8005c38 <_PreparePacket>
 80061b0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	68b8      	ldr	r0, [r7, #8]
 80061b8:	f7ff fe2a 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f383 8811 	msr	BASEPRI, r3
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200197a4 	.word	0x200197a4

080061d0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b088      	sub	sp, #32
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061da:	f3ef 8311 	mrs	r3, BASEPRI
 80061de:	f04f 0120 	mov.w	r1, #32
 80061e2:	f381 8811 	msr	BASEPRI, r1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	4816      	ldr	r0, [pc, #88]	@ (8006244 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061ea:	f7ff fd25 	bl	8005c38 <_PreparePacket>
 80061ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e00b      	b.n	8006216 <SEGGER_SYSVIEW_RecordU32+0x46>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1c59      	adds	r1, r3, #1
 8006206:	61f9      	str	r1, [r7, #28]
 8006208:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	09db      	lsrs	r3, r3, #7
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b7f      	cmp	r3, #127	@ 0x7f
 800621a:	d8f0      	bhi.n	80061fe <SEGGER_SYSVIEW_RecordU32+0x2e>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	61fa      	str	r2, [r7, #28]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	6938      	ldr	r0, [r7, #16]
 8006232:	f7ff fded 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f383 8811 	msr	BASEPRI, r3
}
 800623c:	bf00      	nop
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200197a4 	.word	0x200197a4

08006248 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006248:	b580      	push	{r7, lr}
 800624a:	b08c      	sub	sp, #48	@ 0x30
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006254:	f3ef 8311 	mrs	r3, BASEPRI
 8006258:	f04f 0120 	mov.w	r1, #32
 800625c:	f381 8811 	msr	BASEPRI, r1
 8006260:	61fb      	str	r3, [r7, #28]
 8006262:	4825      	ldr	r0, [pc, #148]	@ (80062f8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006264:	f7ff fce8 	bl	8005c38 <_PreparePacket>
 8006268:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	2b7f      	cmp	r3, #127	@ 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80062ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	623b      	str	r3, [r7, #32]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80062d4:	6a3a      	ldr	r2, [r7, #32]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	6979      	ldr	r1, [r7, #20]
 80062e2:	69b8      	ldr	r0, [r7, #24]
 80062e4:	f7ff fd94 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
 80062f0:	3730      	adds	r7, #48	@ 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200197a4 	.word	0x200197a4

080062fc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08c      	sub	sp, #48	@ 0x30
 8006300:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006302:	4b58      	ldr	r3, [pc, #352]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006308:	f3ef 8311 	mrs	r3, BASEPRI
 800630c:	f04f 0120 	mov.w	r1, #32
 8006310:	f381 8811 	msr	BASEPRI, r1
 8006314:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006316:	4b53      	ldr	r3, [pc, #332]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	220a      	movs	r2, #10
 800631c:	4952      	ldr	r1, [pc, #328]	@ (8006468 <SEGGER_SYSVIEW_Start+0x16c>)
 800631e:	4618      	mov	r0, r3
 8006320:	f7f9 ff56 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800632a:	200a      	movs	r0, #10
 800632c:	f7ff ff32 	bl	8006194 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006330:	f3ef 8311 	mrs	r3, BASEPRI
 8006334:	f04f 0120 	mov.w	r1, #32
 8006338:	f381 8811 	msr	BASEPRI, r1
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	484b      	ldr	r0, [pc, #300]	@ (800646c <SEGGER_SYSVIEW_Start+0x170>)
 8006340:	f7ff fc7a 	bl	8005c38 <_PreparePacket>
 8006344:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800634e:	4b45      	ldr	r3, [pc, #276]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006354:	e00b      	b.n	800636e <SEGGER_SYSVIEW_Start+0x72>
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	1c59      	adds	r1, r3, #1
 800635e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006360:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	09db      	lsrs	r3, r3, #7
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800636e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006370:	2b7f      	cmp	r3, #127	@ 0x7f
 8006372:	d8f0      	bhi.n	8006356 <SEGGER_SYSVIEW_Start+0x5a>
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800637a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637c:	b2d2      	uxtb	r2, r2
 800637e:	701a      	strb	r2, [r3, #0]
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
 8006388:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	e00b      	b.n	80063a8 <SEGGER_SYSVIEW_Start+0xac>
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	6279      	str	r1, [r7, #36]	@ 0x24
 800639a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	09db      	lsrs	r3, r3, #7
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ac:	d8f0      	bhi.n	8006390 <SEGGER_SYSVIEW_Start+0x94>
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	4b28      	ldr	r3, [pc, #160]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	e00b      	b.n	80063e2 <SEGGER_SYSVIEW_Start+0xe6>
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	1c59      	adds	r1, r3, #1
 80063d2:	61f9      	str	r1, [r7, #28]
 80063d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	61bb      	str	r3, [r7, #24]
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e6:	d8f0      	bhi.n	80063ca <SEGGER_SYSVIEW_Start+0xce>
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	61fa      	str	r2, [r7, #28]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	e00b      	b.n	800641a <SEGGER_SYSVIEW_Start+0x11e>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	b2da      	uxtb	r2, r3
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	1c59      	adds	r1, r3, #1
 800640a:	6179      	str	r1, [r7, #20]
 800640c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	09db      	lsrs	r3, r3, #7
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b7f      	cmp	r3, #127	@ 0x7f
 800641e:	d8f0      	bhi.n	8006402 <SEGGER_SYSVIEW_Start+0x106>
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	617a      	str	r2, [r7, #20]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006430:	2218      	movs	r2, #24
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff fceb 	bl	8005e10 <_SendPacket>
      RECORD_END();
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006440:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006448:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <SEGGER_SYSVIEW_Start+0x168>)
 800644a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800644e:	f000 f9eb 	bl	8006828 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006452:	f000 f9b1 	bl	80067b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006456:	f000 fd21 	bl	8006e9c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800645a:	bf00      	nop
 800645c:	3730      	adds	r7, #48	@ 0x30
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20019774 	.word	0x20019774
 8006468:	08007410 	.word	0x08007410
 800646c:	200197a4 	.word	0x200197a4

08006470 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006476:	f3ef 8311 	mrs	r3, BASEPRI
 800647a:	f04f 0120 	mov.w	r1, #32
 800647e:	f381 8811 	msr	BASEPRI, r1
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	480b      	ldr	r0, [pc, #44]	@ (80064b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006486:	f7ff fbd7 	bl	8005c38 <_PreparePacket>
 800648a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800648c:	4b0a      	ldr	r3, [pc, #40]	@ (80064b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006494:	220b      	movs	r2, #11
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f7ff fcb9 	bl	8005e10 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800649e:	4b06      	ldr	r3, [pc, #24]	@ (80064b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f383 8811 	msr	BASEPRI, r3
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200197a4 	.word	0x200197a4
 80064b8:	20019774 	.word	0x20019774

080064bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	@ 0x30
 80064c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064c2:	f3ef 8311 	mrs	r3, BASEPRI
 80064c6:	f04f 0120 	mov.w	r1, #32
 80064ca:	f381 8811 	msr	BASEPRI, r1
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	4845      	ldr	r0, [pc, #276]	@ (80065e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064d2:	f7ff fbb1 	bl	8005c38 <_PreparePacket>
 80064d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e0:	4b42      	ldr	r3, [pc, #264]	@ (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e6:	e00b      	b.n	8006500 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80064f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	2b7f      	cmp	r3, #127	@ 0x7f
 8006504:	d8f0      	bhi.n	80064e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800650c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	627b      	str	r3, [r7, #36]	@ 0x24
 800651a:	4b34      	ldr	r3, [pc, #208]	@ (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	623b      	str	r3, [r7, #32]
 8006520:	e00b      	b.n	800653a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	1c59      	adds	r1, r3, #1
 800652a:	6279      	str	r1, [r7, #36]	@ 0x24
 800652c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	09db      	lsrs	r3, r3, #7
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	2b7f      	cmp	r3, #127	@ 0x7f
 800653e:	d8f0      	bhi.n	8006522 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	627a      	str	r2, [r7, #36]	@ 0x24
 8006546:	6a3a      	ldr	r2, [r7, #32]
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	4b25      	ldr	r3, [pc, #148]	@ (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	b2da      	uxtb	r2, r3
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	61f9      	str	r1, [r7, #28]
 8006566:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	2b7f      	cmp	r3, #127	@ 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	61fa      	str	r2, [r7, #28]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	617b      	str	r3, [r7, #20]
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e00b      	b.n	80065ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	1c59      	adds	r1, r3, #1
 800659c:	6179      	str	r1, [r7, #20]
 800659e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	09db      	lsrs	r3, r3, #7
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b0:	d8f0      	bhi.n	8006594 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1c5a      	adds	r2, r3, #1
 80065b6:	617a      	str	r2, [r7, #20]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065c2:	2218      	movs	r2, #24
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff fc22 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065d2:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065da:	4b04      	ldr	r3, [pc, #16]	@ (80065ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065de:	4798      	blx	r3
  }
}
 80065e0:	bf00      	nop
 80065e2:	3730      	adds	r7, #48	@ 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	200197a4 	.word	0x200197a4
 80065ec:	20019774 	.word	0x20019774

080065f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b092      	sub	sp, #72	@ 0x48
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065f8:	f3ef 8311 	mrs	r3, BASEPRI
 80065fc:	f04f 0120 	mov.w	r1, #32
 8006600:	f381 8811 	msr	BASEPRI, r1
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	486a      	ldr	r0, [pc, #424]	@ (80067b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006608:	f7ff fb16 	bl	8005c38 <_PreparePacket>
 800660c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	647b      	str	r3, [r7, #68]	@ 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b66      	ldr	r3, [pc, #408]	@ (80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	643b      	str	r3, [r7, #64]	@ 0x40
 8006622:	e00b      	b.n	800663c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006626:	b2da      	uxtb	r2, r3
 8006628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	6479      	str	r1, [r7, #68]	@ 0x44
 800662e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006638:	09db      	lsrs	r3, r3, #7
 800663a:	643b      	str	r3, [r7, #64]	@ 0x40
 800663c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006640:	d8f0      	bhi.n	8006624 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	647a      	str	r2, [r7, #68]	@ 0x44
 8006648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006650:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800665c:	e00b      	b.n	8006676 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006660:	b2da      	uxtb	r2, r3
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	1c59      	adds	r1, r3, #1
 8006666:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006668:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006672:	09db      	lsrs	r3, r3, #7
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	2b7f      	cmp	r3, #127	@ 0x7f
 800667a:	d8f0      	bhi.n	800665e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800667c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006682:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff fa9f 	bl	8005bd8 <_EncodeStr>
 800669a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800669c:	2209      	movs	r2, #9
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	6938      	ldr	r0, [r7, #16]
 80066a2:	f7ff fbb5 	bl	8005e10 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b40      	ldr	r3, [pc, #256]	@ (80067b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ba:	e00b      	b.n	80066d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c2:	1c59      	adds	r1, r3, #1
 80066c4:	6379      	str	r1, [r7, #52]	@ 0x34
 80066c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	09db      	lsrs	r3, r3, #7
 80066d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80066d8:	d8f0      	bhi.n	80066bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	637a      	str	r2, [r7, #52]	@ 0x34
 80066e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066f4:	e00b      	b.n	800670e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006700:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	09db      	lsrs	r3, r3, #7
 800670c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	2b7f      	cmp	r3, #127	@ 0x7f
 8006712:	d8f0      	bhi.n	80066f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800671a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	627b      	str	r3, [r7, #36]	@ 0x24
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	623b      	str	r3, [r7, #32]
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	6279      	str	r1, [r7, #36]	@ 0x24
 800673a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b7f      	cmp	r3, #127	@ 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	627a      	str	r2, [r7, #36]	@ 0x24
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	2300      	movs	r3, #0
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e00b      	b.n	8006780 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	b2da      	uxtb	r2, r3
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	61f9      	str	r1, [r7, #28]
 8006772:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	09db      	lsrs	r3, r3, #7
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b7f      	cmp	r3, #127	@ 0x7f
 8006784:	d8f0      	bhi.n	8006768 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	61fa      	str	r2, [r7, #28]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006796:	2215      	movs	r2, #21
 8006798:	68f9      	ldr	r1, [r7, #12]
 800679a:	6938      	ldr	r0, [r7, #16]
 800679c:	f7ff fb38 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f383 8811 	msr	BASEPRI, r3
}
 80067a6:	bf00      	nop
 80067a8:	3748      	adds	r7, #72	@ 0x48
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200197a4 	.word	0x200197a4
 80067b4:	20019774 	.word	0x20019774

080067b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067bc:	4b07      	ldr	r3, [pc, #28]	@ (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067c4:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ce:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4798      	blx	r3
  }
}
 80067d6:	bf00      	nop
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20019774 	.word	0x20019774

080067e0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067e8:	f3ef 8311 	mrs	r3, BASEPRI
 80067ec:	f04f 0120 	mov.w	r1, #32
 80067f0:	f381 8811 	msr	BASEPRI, r1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	480b      	ldr	r0, [pc, #44]	@ (8006824 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067f8:	f7ff fa1e 	bl	8005c38 <_PreparePacket>
 80067fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067fe:	2280      	movs	r2, #128	@ 0x80
 8006800:	6879      	ldr	r1, [r7, #4]
 8006802:	6938      	ldr	r0, [r7, #16]
 8006804:	f7ff f9e8 	bl	8005bd8 <_EncodeStr>
 8006808:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800680a:	220e      	movs	r2, #14
 800680c:	68f9      	ldr	r1, [r7, #12]
 800680e:	6938      	ldr	r0, [r7, #16]
 8006810:	f7ff fafe 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f383 8811 	msr	BASEPRI, r3
}
 800681a:	bf00      	nop
 800681c:	3718      	adds	r7, #24
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200197a4 	.word	0x200197a4

08006828 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800682e:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01a      	beq.n	800686c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006836:	4b13      	ldr	r3, [pc, #76]	@ (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006840:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4798      	blx	r3
 8006848:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800684c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800684e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006852:	f04f 0200 	mov.w	r2, #0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	000a      	movs	r2, r1
 800685c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800685e:	4613      	mov	r3, r2
 8006860:	461a      	mov	r2, r3
 8006862:	4621      	mov	r1, r4
 8006864:	200d      	movs	r0, #13
 8006866:	f7ff fcef 	bl	8006248 <SEGGER_SYSVIEW_RecordU32x2>
 800686a:	e006      	b.n	800687a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800686c:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4619      	mov	r1, r3
 8006872:	200c      	movs	r0, #12
 8006874:	f7ff fcac 	bl	80061d0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	bd90      	pop	{r4, r7, pc}
 8006882:	bf00      	nop
 8006884:	20019774 	.word	0x20019774
 8006888:	e0001004 	.word	0xe0001004

0800688c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006892:	f3ef 8311 	mrs	r3, BASEPRI
 8006896:	f04f 0120 	mov.w	r1, #32
 800689a:	f381 8811 	msr	BASEPRI, r1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	4819      	ldr	r0, [pc, #100]	@ (8006908 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80068a2:	f7ff f9c9 	bl	8005c38 <_PreparePacket>
 80068a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80068ac:	4b17      	ldr	r3, [pc, #92]	@ (800690c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	613b      	str	r3, [r7, #16]
 80068be:	e00b      	b.n	80068d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	6179      	str	r1, [r7, #20]
 80068ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	09db      	lsrs	r3, r3, #7
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	2b7f      	cmp	r3, #127	@ 0x7f
 80068dc:	d8f0      	bhi.n	80068c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	617a      	str	r2, [r7, #20]
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80068ee:	2202      	movs	r2, #2
 80068f0:	6879      	ldr	r1, [r7, #4]
 80068f2:	68b8      	ldr	r0, [r7, #8]
 80068f4:	f7ff fa8c 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f383 8811 	msr	BASEPRI, r3
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	200197a4 	.word	0x200197a4
 800690c:	e000ed04 	.word	0xe000ed04

08006910 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	f04f 0120 	mov.w	r1, #32
 800691e:	f381 8811 	msr	BASEPRI, r1
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	4807      	ldr	r0, [pc, #28]	@ (8006944 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006926:	f7ff f987 	bl	8005c38 <_PreparePacket>
 800692a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800692c:	2203      	movs	r2, #3
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6838      	ldr	r0, [r7, #0]
 8006932:	f7ff fa6d 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f383 8811 	msr	BASEPRI, r3
}
 800693c:	bf00      	nop
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	200197a4 	.word	0x200197a4

08006948 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800694e:	f3ef 8311 	mrs	r3, BASEPRI
 8006952:	f04f 0120 	mov.w	r1, #32
 8006956:	f381 8811 	msr	BASEPRI, r1
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	4807      	ldr	r0, [pc, #28]	@ (800697c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800695e:	f7ff f96b 	bl	8005c38 <_PreparePacket>
 8006962:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006964:	2212      	movs	r2, #18
 8006966:	6839      	ldr	r1, [r7, #0]
 8006968:	6838      	ldr	r0, [r7, #0]
 800696a:	f7ff fa51 	bl	8005e10 <_SendPacket>
  RECORD_END();
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f383 8811 	msr	BASEPRI, r3
}
 8006974:	bf00      	nop
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	200197a4 	.word	0x200197a4

08006980 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006988:	f3ef 8311 	mrs	r3, BASEPRI
 800698c:	f04f 0120 	mov.w	r1, #32
 8006990:	f381 8811 	msr	BASEPRI, r1
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	4817      	ldr	r0, [pc, #92]	@ (80069f4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006998:	f7ff f94e 	bl	8005c38 <_PreparePacket>
 800699c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	e00b      	b.n	80069c4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	1c59      	adds	r1, r3, #1
 80069b4:	61f9      	str	r1, [r7, #28]
 80069b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	09db      	lsrs	r3, r3, #7
 80069c2:	61bb      	str	r3, [r7, #24]
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c8:	d8f0      	bhi.n	80069ac <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	61fa      	str	r2, [r7, #28]
 80069d0:	69ba      	ldr	r2, [r7, #24]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80069da:	221c      	movs	r2, #28
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	6938      	ldr	r0, [r7, #16]
 80069e0:	f7ff fa16 	bl	8005e10 <_SendPacket>
  RECORD_END();
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f383 8811 	msr	BASEPRI, r3
}
 80069ea:	bf00      	nop
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200197a4 	.word	0x200197a4

080069f8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08a      	sub	sp, #40	@ 0x28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a02:	f3ef 8311 	mrs	r3, BASEPRI
 8006a06:	f04f 0120 	mov.w	r1, #32
 8006a0a:	f381 8811 	msr	BASEPRI, r1
 8006a0e:	617b      	str	r3, [r7, #20]
 8006a10:	4824      	ldr	r0, [pc, #144]	@ (8006aa4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006a12:	f7ff f911 	bl	8005c38 <_PreparePacket>
 8006a16:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	623b      	str	r3, [r7, #32]
 8006a24:	e00b      	b.n	8006a3e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2c:	1c59      	adds	r1, r3, #1
 8006a2e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	09db      	lsrs	r3, r3, #7
 8006a3c:	623b      	str	r3, [r7, #32]
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a42:	d8f0      	bhi.n	8006a26 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a4a:	6a3a      	ldr	r2, [r7, #32]
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	61fb      	str	r3, [r7, #28]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e00b      	b.n	8006a76 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	1c59      	adds	r1, r3, #1
 8006a66:	61f9      	str	r1, [r7, #28]
 8006a68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a6c:	b2d2      	uxtb	r2, r2
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	09db      	lsrs	r3, r3, #7
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a7a:	d8f0      	bhi.n	8006a5e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006a8c:	221c      	movs	r2, #28
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6938      	ldr	r0, [r7, #16]
 8006a92:	f7ff f9bd 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f383 8811 	msr	BASEPRI, r3
}
 8006a9c:	bf00      	nop
 8006a9e:	3728      	adds	r7, #40	@ 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	200197a4 	.word	0x200197a4

08006aa8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aae:	f3ef 8311 	mrs	r3, BASEPRI
 8006ab2:	f04f 0120 	mov.w	r1, #32
 8006ab6:	f381 8811 	msr	BASEPRI, r1
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	4807      	ldr	r0, [pc, #28]	@ (8006adc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006abe:	f7ff f8bb 	bl	8005c38 <_PreparePacket>
 8006ac2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ac4:	2211      	movs	r2, #17
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6838      	ldr	r0, [r7, #0]
 8006aca:	f7ff f9a1 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f383 8811 	msr	BASEPRI, r3
}
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	200197a4 	.word	0x200197a4

08006ae0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aec:	f04f 0120 	mov.w	r1, #32
 8006af0:	f381 8811 	msr	BASEPRI, r1
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	4819      	ldr	r0, [pc, #100]	@ (8006b5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006af8:	f7ff f89e 	bl	8005c38 <_PreparePacket>
 8006afc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b02:	4b17      	ldr	r3, [pc, #92]	@ (8006b60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	e00b      	b.n	8006b2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	1c59      	adds	r1, r3, #1
 8006b1e:	61f9      	str	r1, [r7, #28]
 8006b20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	09db      	lsrs	r3, r3, #7
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b32:	d8f0      	bhi.n	8006b16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	1c5a      	adds	r2, r3, #1
 8006b38:	61fa      	str	r2, [r7, #28]
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b44:	2208      	movs	r2, #8
 8006b46:	68f9      	ldr	r1, [r7, #12]
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f7ff f961 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f383 8811 	msr	BASEPRI, r3
}
 8006b54:	bf00      	nop
 8006b56:	3720      	adds	r7, #32
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	200197a4 	.word	0x200197a4
 8006b60:	20019774 	.word	0x20019774

08006b64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b70:	f04f 0120 	mov.w	r1, #32
 8006b74:	f381 8811 	msr	BASEPRI, r1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	4819      	ldr	r0, [pc, #100]	@ (8006be0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b7c:	f7ff f85c 	bl	8005c38 <_PreparePacket>
 8006b80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b86:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	61f9      	str	r1, [r7, #28]
 8006ba4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006bc8:	2204      	movs	r2, #4
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	6938      	ldr	r0, [r7, #16]
 8006bce:	f7ff f91f 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f383 8811 	msr	BASEPRI, r3
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200197a4 	.word	0x200197a4
 8006be4:	20019774 	.word	0x20019774

08006be8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf4:	f04f 0120 	mov.w	r1, #32
 8006bf8:	f381 8811 	msr	BASEPRI, r1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	4819      	ldr	r0, [pc, #100]	@ (8006c64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006c00:	f7ff f81a 	bl	8005c38 <_PreparePacket>
 8006c04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0a:	4b17      	ldr	r3, [pc, #92]	@ (8006c68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c4c:	2206      	movs	r2, #6
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7ff f8dd 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	200197a4 	.word	0x200197a4
 8006c68:	20019774 	.word	0x20019774

08006c6c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b08a      	sub	sp, #40	@ 0x28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c76:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7a:	f04f 0120 	mov.w	r1, #32
 8006c7e:	f381 8811 	msr	BASEPRI, r1
 8006c82:	617b      	str	r3, [r7, #20]
 8006c84:	4827      	ldr	r0, [pc, #156]	@ (8006d24 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006c86:	f7fe ffd7 	bl	8005c38 <_PreparePacket>
 8006c8a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c90:	4b25      	ldr	r3, [pc, #148]	@ (8006d28 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	623b      	str	r3, [r7, #32]
 8006ca2:	e00b      	b.n	8006cbc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	09db      	lsrs	r3, r3, #7
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cc0:	d8f0      	bhi.n	8006ca4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	61f9      	str	r1, [r7, #28]
 8006ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	61fa      	str	r2, [r7, #28]
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7ff f87e 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f383 8811 	msr	BASEPRI, r3
}
 8006d1a:	bf00      	nop
 8006d1c:	3728      	adds	r7, #40	@ 0x28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200197a4 	.word	0x200197a4
 8006d28:	20019774 	.word	0x20019774

08006d2c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d34:	4b04      	ldr	r3, [pc, #16]	@ (8006d48 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	20019774 	.word	0x20019774

08006d4c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	@ 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d56:	4b40      	ldr	r3, [pc, #256]	@ (8006e58 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d077      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8006e58 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d64:	2300      	movs	r3, #0
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d68:	e008      	b.n	8006d7c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	3301      	adds	r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3f2      	bcc.n	8006d6a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d84:	e000      	b.n	8006d88 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d86:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d055      	beq.n	8006e3a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	f04f 0120 	mov.w	r1, #32
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	482f      	ldr	r0, [pc, #188]	@ (8006e5c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006d9e:	f7fe ff4b 	bl	8005c38 <_PreparePacket>
 8006da2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_SendModule+0x7e>
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e00b      	b.n	8006e04 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	61f9      	str	r1, [r7, #28]
 8006df6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	09db      	lsrs	r3, r3, #7
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e08:	d8f0      	bhi.n	8006dec <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2280      	movs	r2, #128	@ 0x80
 8006e20:	4619      	mov	r1, r3
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7fe fed8 	bl	8005bd8 <_EncodeStr>
 8006e28:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e2a:	2216      	movs	r2, #22
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7fe ffee 	bl	8005e10 <_SendPacket>
      RECORD_END();
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d006      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
 8006e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4798      	blx	r3
    }
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3730      	adds	r7, #48	@ 0x30
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	2001979c 	.word	0x2001979c
 8006e5c:	200197a4 	.word	0x200197a4

08006e60 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e66:	4b0c      	ldr	r3, [pc, #48]	@ (8006e98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00f      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f2      	bne.n	8006e74 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	2001979c 	.word	0x2001979c

08006e9c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea6:	f04f 0120 	mov.w	r1, #32
 8006eaa:	f381 8811 	msr	BASEPRI, r1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4817      	ldr	r0, [pc, #92]	@ (8006f10 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006eb2:	f7fe fec1 	bl	8005c38 <_PreparePacket>
 8006eb6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	4b14      	ldr	r3, [pc, #80]	@ (8006f14 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e00b      	b.n	8006ee0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	6179      	str	r1, [r7, #20]
 8006ed2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	09db      	lsrs	r3, r3, #7
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee4:	d8f0      	bhi.n	8006ec8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	617a      	str	r2, [r7, #20]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ef6:	221b      	movs	r2, #27
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68b8      	ldr	r0, [r7, #8]
 8006efc:	f7fe ff88 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f383 8811 	msr	BASEPRI, r3
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	200197a4 	.word	0x200197a4
 8006f14:	200197a0 	.word	0x200197a0

08006f18 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	@ 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f20:	f3ef 8311 	mrs	r3, BASEPRI
 8006f24:	f04f 0120 	mov.w	r1, #32
 8006f28:	f381 8811 	msr	BASEPRI, r1
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	4827      	ldr	r0, [pc, #156]	@ (8006fcc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f30:	f7fe fe82 	bl	8005c38 <_PreparePacket>
 8006f34:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f36:	2280      	movs	r2, #128	@ 0x80
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	6938      	ldr	r0, [r7, #16]
 8006f3c:	f7fe fe4c 	bl	8005bd8 <_EncodeStr>
 8006f40:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f46:	2301      	movs	r3, #1
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	e00b      	b.n	8006f64 <SEGGER_SYSVIEW_Warn+0x4c>
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	1c59      	adds	r1, r3, #1
 8006f54:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	09db      	lsrs	r3, r3, #7
 8006f62:	623b      	str	r3, [r7, #32]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f68:	d8f0      	bhi.n	8006f4c <SEGGER_SYSVIEW_Warn+0x34>
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f70:	6a3a      	ldr	r2, [r7, #32]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	e00b      	b.n	8006f9c <SEGGER_SYSVIEW_Warn+0x84>
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	61f9      	str	r1, [r7, #28]
 8006f8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	09db      	lsrs	r3, r3, #7
 8006f9a:	61bb      	str	r3, [r7, #24]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fa0:	d8f0      	bhi.n	8006f84 <SEGGER_SYSVIEW_Warn+0x6c>
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	61fa      	str	r2, [r7, #28]
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	b2d2      	uxtb	r2, r2
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fb2:	221a      	movs	r2, #26
 8006fb4:	68f9      	ldr	r1, [r7, #12]
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f7fe ff2a 	bl	8005e10 <_SendPacket>
  RECORD_END();
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f383 8811 	msr	BASEPRI, r3
}
 8006fc2:	bf00      	nop
 8006fc4:	3728      	adds	r7, #40	@ 0x28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200197a4 	.word	0x200197a4

08006fd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	e033      	b.n	8007044 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006fdc:	491e      	ldr	r1, [pc, #120]	@ (8007058 <_cbSendTaskList+0x88>)
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	491a      	ldr	r1, [pc, #104]	@ (8007058 <_cbSendTaskList+0x88>)
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	6819      	ldr	r1, [r3, #0]
 8006ffe:	4c16      	ldr	r4, [pc, #88]	@ (8007058 <_cbSendTaskList+0x88>)
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4423      	add	r3, r4
 800700c:	3308      	adds	r3, #8
 800700e:	681c      	ldr	r4, [r3, #0]
 8007010:	4d11      	ldr	r5, [pc, #68]	@ (8007058 <_cbSendTaskList+0x88>)
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	442b      	add	r3, r5
 800701e:	330c      	adds	r3, #12
 8007020:	681d      	ldr	r5, [r3, #0]
 8007022:	4e0d      	ldr	r6, [pc, #52]	@ (8007058 <_cbSendTaskList+0x88>)
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4613      	mov	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4433      	add	r3, r6
 8007030:	3310      	adds	r3, #16
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	462b      	mov	r3, r5
 8007038:	4622      	mov	r2, r4
 800703a:	f000 f8bd 	bl	80071b8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3301      	adds	r3, #1
 8007042:	607b      	str	r3, [r7, #4]
 8007044:	4b05      	ldr	r3, [pc, #20]	@ (800705c <_cbSendTaskList+0x8c>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	429a      	cmp	r2, r3
 800704c:	d3c6      	bcc.n	8006fdc <_cbSendTaskList+0xc>
  }
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007058:	20019888 	.word	0x20019888
 800705c:	20019928 	.word	0x20019928

08007060 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007068:	f7fc fda6 	bl	8003bb8 <xTaskGetTickCountFromISR>
 800706c:	4603      	mov	r3, r0
 800706e:	2200      	movs	r2, #0
 8007070:	469a      	mov	sl, r3
 8007072:	4693      	mov	fp, r2
 8007074:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	f04f 0a00 	mov.w	sl, #0
 8007084:	f04f 0b00 	mov.w	fp, #0
 8007088:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800708c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007090:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007094:	4652      	mov	r2, sl
 8007096:	465b      	mov	r3, fp
 8007098:	1a14      	subs	r4, r2, r0
 800709a:	eb63 0501 	sbc.w	r5, r3, r1
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	00ab      	lsls	r3, r5, #2
 80070a8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80070ac:	00a2      	lsls	r2, r4, #2
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	eb14 0800 	adds.w	r8, r4, r0
 80070b6:	eb45 0901 	adc.w	r9, r5, r1
 80070ba:	f04f 0200 	mov.w	r2, #0
 80070be:	f04f 0300 	mov.w	r3, #0
 80070c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070ce:	4690      	mov	r8, r2
 80070d0:	4699      	mov	r9, r3
 80070d2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80070d6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80070da:	4610      	mov	r0, r2
 80070dc:	4619      	mov	r1, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080070e8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80070f6:	2205      	movs	r2, #5
 80070f8:	492b      	ldr	r1, [pc, #172]	@ (80071a8 <SYSVIEW_AddTask+0xc0>)
 80070fa:	68b8      	ldr	r0, [r7, #8]
 80070fc:	f000 f87d 	bl	80071fa <memcmp>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d04b      	beq.n	800719e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007106:	4b29      	ldr	r3, [pc, #164]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b07      	cmp	r3, #7
 800710c:	d903      	bls.n	8007116 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800710e:	4828      	ldr	r0, [pc, #160]	@ (80071b0 <SYSVIEW_AddTask+0xc8>)
 8007110:	f7ff ff02 	bl	8006f18 <SEGGER_SYSVIEW_Warn>
    return;
 8007114:	e044      	b.n	80071a0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007116:	4b25      	ldr	r3, [pc, #148]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4926      	ldr	r1, [pc, #152]	@ (80071b4 <SYSVIEW_AddTask+0xcc>)
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800712a:	4b20      	ldr	r3, [pc, #128]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4921      	ldr	r1, [pc, #132]	@ (80071b4 <SYSVIEW_AddTask+0xcc>)
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	3304      	adds	r3, #4
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007140:	4b1a      	ldr	r3, [pc, #104]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	491b      	ldr	r1, [pc, #108]	@ (80071b4 <SYSVIEW_AddTask+0xcc>)
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	3308      	adds	r3, #8
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007156:	4b15      	ldr	r3, [pc, #84]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	4916      	ldr	r1, [pc, #88]	@ (80071b4 <SYSVIEW_AddTask+0xcc>)
 800715c:	4613      	mov	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	330c      	adds	r3, #12
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800716c:	4b0f      	ldr	r3, [pc, #60]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4910      	ldr	r1, [pc, #64]	@ (80071b4 <SYSVIEW_AddTask+0xcc>)
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	3310      	adds	r3, #16
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007182:	4b0a      	ldr	r3, [pc, #40]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	4a08      	ldr	r2, [pc, #32]	@ (80071ac <SYSVIEW_AddTask+0xc4>)
 800718a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f80e 	bl	80071b8 <SYSVIEW_SendTaskInfo>
 800719c:	e000      	b.n	80071a0 <SYSVIEW_AddTask+0xb8>
    return;
 800719e:	bf00      	nop

}
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	0800738c 	.word	0x0800738c
 80071ac:	20019928 	.word	0x20019928
 80071b0:	08007394 	.word	0x08007394
 80071b4:	20019888 	.word	0x20019888

080071b8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08a      	sub	sp, #40	@ 0x28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	2214      	movs	r2, #20
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f823 	bl	800721a <memset>
  TaskInfo.TaskID     = TaskID;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80071e8:	f107 0314 	add.w	r3, r7, #20
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff f9ff 	bl	80065f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80071f2:	bf00      	nop
 80071f4:	3728      	adds	r7, #40	@ 0x28
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <memcmp>:
 80071fa:	b510      	push	{r4, lr}
 80071fc:	3901      	subs	r1, #1
 80071fe:	4402      	add	r2, r0
 8007200:	4290      	cmp	r0, r2
 8007202:	d101      	bne.n	8007208 <memcmp+0xe>
 8007204:	2000      	movs	r0, #0
 8007206:	e005      	b.n	8007214 <memcmp+0x1a>
 8007208:	7803      	ldrb	r3, [r0, #0]
 800720a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800720e:	42a3      	cmp	r3, r4
 8007210:	d001      	beq.n	8007216 <memcmp+0x1c>
 8007212:	1b18      	subs	r0, r3, r4
 8007214:	bd10      	pop	{r4, pc}
 8007216:	3001      	adds	r0, #1
 8007218:	e7f2      	b.n	8007200 <memcmp+0x6>

0800721a <memset>:
 800721a:	4402      	add	r2, r0
 800721c:	4603      	mov	r3, r0
 800721e:	4293      	cmp	r3, r2
 8007220:	d100      	bne.n	8007224 <memset+0xa>
 8007222:	4770      	bx	lr
 8007224:	f803 1b01 	strb.w	r1, [r3], #1
 8007228:	e7f9      	b.n	800721e <memset+0x4>
	...

0800722c <__libc_init_array>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	4d0d      	ldr	r5, [pc, #52]	@ (8007264 <__libc_init_array+0x38>)
 8007230:	4c0d      	ldr	r4, [pc, #52]	@ (8007268 <__libc_init_array+0x3c>)
 8007232:	1b64      	subs	r4, r4, r5
 8007234:	10a4      	asrs	r4, r4, #2
 8007236:	2600      	movs	r6, #0
 8007238:	42a6      	cmp	r6, r4
 800723a:	d109      	bne.n	8007250 <__libc_init_array+0x24>
 800723c:	4d0b      	ldr	r5, [pc, #44]	@ (800726c <__libc_init_array+0x40>)
 800723e:	4c0c      	ldr	r4, [pc, #48]	@ (8007270 <__libc_init_array+0x44>)
 8007240:	f000 f826 	bl	8007290 <_init>
 8007244:	1b64      	subs	r4, r4, r5
 8007246:	10a4      	asrs	r4, r4, #2
 8007248:	2600      	movs	r6, #0
 800724a:	42a6      	cmp	r6, r4
 800724c:	d105      	bne.n	800725a <__libc_init_array+0x2e>
 800724e:	bd70      	pop	{r4, r5, r6, pc}
 8007250:	f855 3b04 	ldr.w	r3, [r5], #4
 8007254:	4798      	blx	r3
 8007256:	3601      	adds	r6, #1
 8007258:	e7ee      	b.n	8007238 <__libc_init_array+0xc>
 800725a:	f855 3b04 	ldr.w	r3, [r5], #4
 800725e:	4798      	blx	r3
 8007260:	3601      	adds	r6, #1
 8007262:	e7f2      	b.n	800724a <__libc_init_array+0x1e>
 8007264:	0800742c 	.word	0x0800742c
 8007268:	0800742c 	.word	0x0800742c
 800726c:	0800742c 	.word	0x0800742c
 8007270:	08007430 	.word	0x08007430

08007274 <memcpy>:
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	f100 33ff 	add.w	r3, r0, #4294967295
 800727c:	d100      	bne.n	8007280 <memcpy+0xc>
 800727e:	4770      	bx	lr
 8007280:	b510      	push	{r4, lr}
 8007282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728a:	4291      	cmp	r1, r2
 800728c:	d1f9      	bne.n	8007282 <memcpy+0xe>
 800728e:	bd10      	pop	{r4, pc}

08007290 <_init>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	bf00      	nop
 8007294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007296:	bc08      	pop	{r3}
 8007298:	469e      	mov	lr, r3
 800729a:	4770      	bx	lr

0800729c <_fini>:
 800729c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729e:	bf00      	nop
 80072a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a2:	bc08      	pop	{r3}
 80072a4:	469e      	mov	lr, r3
 80072a6:	4770      	bx	lr
