
App_025_Example_8.1_Rewrite_UART2_Print_Text_Use_Semaphore_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000689c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b94  08006b94  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b94  08006b94  00007b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b9c  08006b9c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b9c  08006b9c  00007b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ba0  08006ba0  00007ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006ba4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          00012fa8  20000070  20000070  00008070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013018  20013018  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f63  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d02  00000000  00000000  0001b003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0001dd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfb  00000000  00000000  0001eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021378  00000000  00000000  0001fcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014ec3  00000000  00000000  0004106b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc98a  00000000  00000000  00055f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001328b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005464  00000000  00000000  001328fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009b  00000000  00000000  00137d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a14 	.word	0x08006a14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006a14 	.word	0x08006a14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f103 0208 	add.w	r2, r3, #8
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f04f 32ff 	mov.w	r2, #4294967295
 8000578:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f103 0208 	add.w	r2, r3, #8
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f103 0208 	add.w	r2, r3, #8
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80005ba:	b480      	push	{r7}
 80005bc:	b085      	sub	sp, #20
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d103      	bne.n	80005da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00c      	b.n	80005f4 <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3308      	adds	r3, #8
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e002      	b.n	80005e8 <vListInsert+0x2e>
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685b      	ldr	r3, [r3, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d2f6      	bcs.n	80005e2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6892      	ldr	r2, [r2, #8]
 8000642:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d103      	bne.n	8000660 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d05d      	beq.n	8000772 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d059      	beq.n	8000772 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c6:	2100      	movs	r1, #0
 80006c8:	fba3 2302 	umull	r2, r3, r3, r2
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d000      	beq.n	80006d2 <xQueueGenericReset+0x52>
 80006d0:	2101      	movs	r1, #1
 80006d2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d14c      	bne.n	8000772 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80006d8:	f002 fbec 	bl	8002eb4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006e4:	6939      	ldr	r1, [r7, #16]
 80006e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80006e8:	fb01 f303 	mul.w	r3, r1, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	2200      	movs	r2, #0
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000708:	3b01      	subs	r3, #1
 800070a:	6939      	ldr	r1, [r7, #16]
 800070c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800070e:	fb01 f303 	mul.w	r3, r1, r3
 8000712:	441a      	add	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	22ff      	movs	r2, #255	@ 0xff
 800071c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	22ff      	movs	r2, #255	@ 0xff
 8000724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d114      	bne.n	8000758 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d01a      	beq.n	800076c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	3310      	adds	r3, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fabc 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d012      	beq.n	800076c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <xQueueGenericReset+0x120>)
 8000748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	f3bf 8f6f 	isb	sy
 8000756:	e009      	b.n	800076c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3310      	adds	r3, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff feff 	bl	8000560 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	3324      	adds	r3, #36	@ 0x24
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fefa 	bl	8000560 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800076c:	f002 fbd4 	bl	8002f18 <vPortExitCritical>
 8000770:	e001      	b.n	8000776 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <xQueueGenericReset+0x114>
    __asm volatile
 800077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000780:	f383 8811 	msr	BASEPRI, r3
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	f3bf 8f4f 	dsb	sy
 800078c:	60bb      	str	r3, [r7, #8]
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d02e      	beq.n	800081a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007bc:	2100      	movs	r1, #0
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	fba3 2302 	umull	r2, r3, r3, r2
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <xQueueGenericCreate+0x28>
 80007ca:	2101      	movs	r1, #1
 80007cc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d123      	bne.n	800081a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80007da:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80007de:	d81c      	bhi.n	800081a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3350      	adds	r3, #80	@ 0x50
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fc44 	bl	800307c <pvPortMalloc>
 80007f4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d01d      	beq.n	8000838 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	3350      	adds	r3, #80	@ 0x50
 8000804:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f815 	bl	8000842 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000818:	e00e      	b.n	8000838 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <xQueueGenericCreate+0x94>
    __asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	613b      	str	r3, [r7, #16]
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8000838:	69fb      	ldr	r3, [r7, #28]
    }
 800083a:	4618      	mov	r0, r3
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000856:	69bb      	ldr	r3, [r7, #24]
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	e002      	b.n	8000864 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	68ba      	ldr	r2, [r7, #8]
 800086e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000870:	2101      	movs	r1, #1
 8000872:	69b8      	ldr	r0, [r7, #24]
 8000874:	f7ff ff04 	bl	8000680 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	78fa      	ldrb	r2, [r7, #3]
 800087c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d00e      	beq.n	80008b4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f81c 	bl	80008ec <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80008c6:	2301      	movs	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	461a      	mov	r2, r3
 80008d2:	6939      	ldr	r1, [r7, #16]
 80008d4:	6978      	ldr	r0, [r7, #20]
 80008d6:	f7ff ff65 	bl	80007a4 <xQueueGenericCreate>
 80008da:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff ffd3 	bl	8000888 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 80008e2:	68fb      	ldr	r3, [r7, #12]
    }
 80008e4:	4618      	mov	r0, r3
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	@ 0x38
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80008fa:	2300      	movs	r3, #0
 80008fc:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8000902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10b      	bne.n	8000920 <xQueueGenericSend+0x34>
    __asm volatile
 8000908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800090c:	f383 8811 	msr	BASEPRI, r3
 8000910:	f3bf 8f6f 	isb	sy
 8000914:	f3bf 8f4f 	dsb	sy
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <xQueueGenericSend+0x42>
 8000926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	2b00      	cmp	r3, #0
 800092c:	d101      	bne.n	8000932 <xQueueGenericSend+0x46>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <xQueueGenericSend+0x48>
 8000932:	2300      	movs	r3, #0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10b      	bne.n	8000950 <xQueueGenericSend+0x64>
    __asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800094a:	bf00      	nop
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b02      	cmp	r3, #2
 8000954:	d103      	bne.n	800095e <xQueueGenericSend+0x72>
 8000956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800095a:	2b01      	cmp	r3, #1
 800095c:	d101      	bne.n	8000962 <xQueueGenericSend+0x76>
 800095e:	2301      	movs	r3, #1
 8000960:	e000      	b.n	8000964 <xQueueGenericSend+0x78>
 8000962:	2300      	movs	r3, #0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10b      	bne.n	8000980 <xQueueGenericSend+0x94>
    __asm volatile
 8000968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800096c:	f383 8811 	msr	BASEPRI, r3
 8000970:	f3bf 8f6f 	isb	sy
 8000974:	f3bf 8f4f 	dsb	sy
 8000978:	623b      	str	r3, [r7, #32]
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000980:	f001 fbb0 	bl	80020e4 <xTaskGetSchedulerState>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <xQueueGenericSend+0xa4>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d101      	bne.n	8000994 <xQueueGenericSend+0xa8>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <xQueueGenericSend+0xaa>
 8000994:	2300      	movs	r3, #0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10b      	bne.n	80009b2 <xQueueGenericSend+0xc6>
    __asm volatile
 800099a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800099e:	f383 8811 	msr	BASEPRI, r3
 80009a2:	f3bf 8f6f 	isb	sy
 80009a6:	f3bf 8f4f 	dsb	sy
 80009aa:	61fb      	str	r3, [r7, #28]
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	e7fd      	b.n	80009ae <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80009b2:	f002 fa7f 	bl	8002eb4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009be:	429a      	cmp	r2, r3
 80009c0:	d302      	bcc.n	80009c8 <xQueueGenericSend+0xdc>
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d129      	bne.n	8000a1c <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	68b9      	ldr	r1, [r7, #8]
 80009cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ce:	f000 fa89 	bl	8000ee4 <prvCopyDataToQueue>
 80009d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d010      	beq.n	80009fe <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009de:	3324      	adds	r3, #36	@ 0x24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 f969 	bl	8001cb8 <xTaskRemoveFromEventList>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d013      	beq.n	8000a14 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80009ec:	4b3f      	ldr	r3, [pc, #252]	@ (8000aec <xQueueGenericSend+0x200>)
 80009ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	f3bf 8f4f 	dsb	sy
 80009f8:	f3bf 8f6f 	isb	sy
 80009fc:	e00a      	b.n	8000a14 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80009fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d007      	beq.n	8000a14 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000a04:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <xQueueGenericSend+0x200>)
 8000a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	f3bf 8f4f 	dsb	sy
 8000a10:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000a14:	f002 fa80 	bl	8002f18 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e063      	b.n	8000ae4 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d103      	bne.n	8000a2a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000a22:	f002 fa79 	bl	8002f18 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e05c      	b.n	8000ae4 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d106      	bne.n	8000a3e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fa19 	bl	8001e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000a3e:	f002 fa6b 	bl	8002f18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000a42:	f000 fe2f 	bl	80016a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000a46:	f002 fa35 	bl	8002eb4 <vPortEnterCritical>
 8000a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a56:	d103      	bne.n	8000a60 <xQueueGenericSend+0x174>
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d103      	bne.n	8000a76 <xQueueGenericSend+0x18a>
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a76:	f002 fa4f 	bl	8002f18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000a7a:	1d3a      	adds	r2, r7, #4
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fa08 	bl	8001e98 <xTaskCheckForTimeOut>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d124      	bne.n	8000ad8 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000a8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a90:	f000 fb20 	bl	80010d4 <prvIsQueueFull>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d018      	beq.n	8000acc <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a9c:	3310      	adds	r3, #16
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f89c 	bl	8001be0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aaa:	f000 faab 	bl	8001004 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000aae:	f000 fe07 	bl	80016c0 <xTaskResumeAll>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f47f af7c 	bne.w	80009b2 <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <xQueueGenericSend+0x200>)
 8000abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	e772      	b.n	80009b2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000acc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ace:	f000 fa99 	bl	8001004 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000ad2:	f000 fdf5 	bl	80016c0 <xTaskResumeAll>
 8000ad6:	e76c      	b.n	80009b2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000ad8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ada:	f000 fa93 	bl	8001004 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000ade:	f000 fdef 	bl	80016c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8000ae2:	2300      	movs	r3, #0
        }
    }
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3738      	adds	r7, #56	@ 0x38
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	e000ed04 	.word	0xe000ed04

08000af0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10b      	bne.n	8000b22 <xQueueReceive+0x32>
    __asm volatile
 8000b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b0e:	f383 8811 	msr	BASEPRI, r3
 8000b12:	f3bf 8f6f 	isb	sy
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	623b      	str	r3, [r7, #32]
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	e7fd      	b.n	8000b1e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d103      	bne.n	8000b30 <xQueueReceive+0x40>
 8000b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d101      	bne.n	8000b34 <xQueueReceive+0x44>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <xQueueReceive+0x46>
 8000b34:	2300      	movs	r3, #0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10b      	bne.n	8000b52 <xQueueReceive+0x62>
    __asm volatile
 8000b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b3e:	f383 8811 	msr	BASEPRI, r3
 8000b42:	f3bf 8f6f 	isb	sy
 8000b46:	f3bf 8f4f 	dsb	sy
 8000b4a:	61fb      	str	r3, [r7, #28]
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	e7fd      	b.n	8000b4e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000b52:	f001 fac7 	bl	80020e4 <xTaskGetSchedulerState>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d102      	bne.n	8000b62 <xQueueReceive+0x72>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <xQueueReceive+0x76>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <xQueueReceive+0x78>
 8000b66:	2300      	movs	r3, #0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d10b      	bne.n	8000b84 <xQueueReceive+0x94>
    __asm volatile
 8000b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b70:	f383 8811 	msr	BASEPRI, r3
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	61bb      	str	r3, [r7, #24]
}
 8000b7e:	bf00      	nop
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000b84:	f002 f996 	bl	8002eb4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d01f      	beq.n	8000bd4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b98:	f000 fa0e 	bl	8000fb8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	1e5a      	subs	r2, r3, #1
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00f      	beq.n	8000bcc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	3310      	adds	r3, #16
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f881 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d007      	beq.n	8000bcc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb0 <xQueueReceive+0x1c0>)
 8000bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	f3bf 8f4f 	dsb	sy
 8000bc8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000bcc:	f002 f9a4 	bl	8002f18 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e069      	b.n	8000ca8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d103      	bne.n	8000be2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000bda:	f002 f99d 	bl	8002f18 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e062      	b.n	8000ca8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d106      	bne.n	8000bf6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4618      	mov	r0, r3
 8000bee:	f001 f93d 	bl	8001e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000bf6:	f002 f98f 	bl	8002f18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000bfa:	f000 fd53 	bl	80016a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000bfe:	f002 f959 	bl	8002eb4 <vPortEnterCritical>
 8000c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0e:	d103      	bne.n	8000c18 <xQueueReceive+0x128>
 8000c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d103      	bne.n	8000c2e <xQueueReceive+0x13e>
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000c2e:	f002 f973 	bl	8002f18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000c32:	1d3a      	adds	r2, r7, #4
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 f92c 	bl	8001e98 <xTaskCheckForTimeOut>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d123      	bne.n	8000c8e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c48:	f000 fa2e 	bl	80010a8 <prvIsQueueEmpty>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d017      	beq.n	8000c82 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c54:	3324      	adds	r3, #36	@ 0x24
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 ffc0 	bl	8001be0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c62:	f000 f9cf 	bl	8001004 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000c66:	f000 fd2b 	bl	80016c0 <xTaskResumeAll>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d189      	bne.n	8000b84 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <xQueueReceive+0x1c0>)
 8000c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	f3bf 8f4f 	dsb	sy
 8000c7c:	f3bf 8f6f 	isb	sy
 8000c80:	e780      	b.n	8000b84 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000c82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c84:	f000 f9be 	bl	8001004 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000c88:	f000 fd1a 	bl	80016c0 <xTaskResumeAll>
 8000c8c:	e77a      	b.n	8000b84 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c90:	f000 f9b8 	bl	8001004 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000c94:	f000 fd14 	bl	80016c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c9a:	f000 fa05 	bl	80010a8 <prvIsQueueEmpty>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f43f af6f 	beq.w	8000b84 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000ca6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	@ 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	e000ed04 	.word	0xe000ed04

08000cb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	@ 0x30
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <xQueueSemaphoreTake+0x34>
    __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	61bb      	str	r3, [r7, #24]
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00b      	beq.n	8000d08 <xQueueSemaphoreTake+0x54>
    __asm volatile
 8000cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cf4:	f383 8811 	msr	BASEPRI, r3
 8000cf8:	f3bf 8f6f 	isb	sy
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	617b      	str	r3, [r7, #20]
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d08:	f001 f9ec 	bl	80020e4 <xTaskGetSchedulerState>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <xQueueSemaphoreTake+0x64>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <xQueueSemaphoreTake+0x68>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e000      	b.n	8000d1e <xQueueSemaphoreTake+0x6a>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10b      	bne.n	8000d3a <xQueueSemaphoreTake+0x86>
    __asm volatile
 8000d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d26:	f383 8811 	msr	BASEPRI, r3
 8000d2a:	f3bf 8f6f 	isb	sy
 8000d2e:	f3bf 8f4f 	dsb	sy
 8000d32:	613b      	str	r3, [r7, #16]
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	e7fd      	b.n	8000d36 <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000d3a:	f002 f8bb 	bl	8002eb4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d42:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d024      	beq.n	8000d94 <xQueueSemaphoreTake+0xe0>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d50:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d104      	bne.n	8000d64 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d5a:	f001 fbe5 	bl	8002528 <pvTaskIncrementMutexHeldCount>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d62:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00f      	beq.n	8000d8c <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	3310      	adds	r3, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 ffa1 	bl	8001cb8 <xTaskRemoveFromEventList>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d007      	beq.n	8000d8c <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb0 <xQueueSemaphoreTake+0x1fc>)
 8000d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	f3bf 8f4f 	dsb	sy
 8000d88:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000d8c:	f002 f8c4 	bl	8002f18 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e089      	b.n	8000ea8 <xQueueSemaphoreTake+0x1f4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <xQueueSemaphoreTake+0xee>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8000d9a:	f002 f8bd 	bl	8002f18 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e082      	b.n	8000ea8 <xQueueSemaphoreTake+0x1f4>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d106      	bne.n	8000db6 <xQueueSemaphoreTake+0x102>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 f85d 	bl	8001e6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000db6:	f002 f8af 	bl	8002f18 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000dba:	f000 fc73 	bl	80016a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dbe:	f002 f879 	bl	8002eb4 <vPortEnterCritical>
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dce:	d103      	bne.n	8000dd8 <xQueueSemaphoreTake+0x124>
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d103      	bne.n	8000dee <xQueueSemaphoreTake+0x13a>
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000dee:	f002 f893 	bl	8002f18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000df2:	463a      	mov	r2, r7
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 f84c 	bl	8001e98 <xTaskCheckForTimeOut>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d132      	bne.n	8000e6c <xQueueSemaphoreTake+0x1b8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e08:	f000 f94e 	bl	80010a8 <prvIsQueueEmpty>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d026      	beq.n	8000e60 <xQueueSemaphoreTake+0x1ac>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <xQueueSemaphoreTake+0x17a>
                    {
                        taskENTER_CRITICAL();
 8000e1a:	f002 f84b 	bl	8002eb4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 f97c 	bl	8002120 <xTaskPriorityInherit>
 8000e28:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8000e2a:	f002 f875 	bl	8002f18 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	3324      	adds	r3, #36	@ 0x24
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fed2 	bl	8001be0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e3e:	f000 f8e1 	bl	8001004 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000e42:	f000 fc3d 	bl	80016c0 <xTaskResumeAll>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f47f af76 	bne.w	8000d3a <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <xQueueSemaphoreTake+0x1fc>)
 8000e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	f3bf 8f4f 	dsb	sy
 8000e5a:	f3bf 8f6f 	isb	sy
 8000e5e:	e76c      	b.n	8000d3a <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8000e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e62:	f000 f8cf 	bl	8001004 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e66:	f000 fc2b 	bl	80016c0 <xTaskResumeAll>
 8000e6a:	e766      	b.n	8000d3a <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8000e6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e6e:	f000 f8c9 	bl	8001004 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e72:	f000 fc25 	bl	80016c0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e78:	f000 f916 	bl	80010a8 <prvIsQueueEmpty>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f43f af5b 	beq.w	8000d3a <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8000e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00d      	beq.n	8000ea6 <xQueueSemaphoreTake+0x1f2>
                    {
                        taskENTER_CRITICAL();
 8000e8a:	f002 f813 	bl	8002eb4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000e8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e90:	f000 f810 	bl	8000eb4 <prvGetDisinheritPriorityAfterTimeout>
 8000e94:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	69f9      	ldr	r1, [r7, #28]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fa87 	bl	80023b0 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8000ea2:	f002 f839 	bl	8002f18 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000ea6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3730      	adds	r7, #48	@ 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	e000ed04 	.word	0xe000ed04

08000eb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1c3 0305 	rsb	r3, r3, #5
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e001      	b.n	8000ed6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10d      	bne.n	8000f1e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d14d      	bne.n	8000fa6 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 f9a6 	bl	8002260 <xTaskPriorityDisinherit>
 8000f14:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	e043      	b.n	8000fa6 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d119      	bne.n	8000f58 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6858      	ldr	r0, [r3, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	f004 ff43 	bl	8005dba <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	441a      	add	r2, r3
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d32b      	bcc.n	8000fa6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	e026      	b.n	8000fa6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	68d8      	ldr	r0, [r3, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f60:	461a      	mov	r2, r3
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	f004 ff29 	bl	8005dba <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	425b      	negs	r3, r3
 8000f72:	441a      	add	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	425b      	negs	r3, r3
 8000f8e:	441a      	add	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d105      	bne.n	8000fa6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8000fae:	697b      	ldr	r3, [r7, #20]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d018      	beq.n	8000ffc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	441a      	add	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d303      	bcc.n	8000fec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68d9      	ldr	r1, [r3, #12]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	6838      	ldr	r0, [r7, #0]
 8000ff8:	f004 fedf 	bl	8005dba <memcpy>
    }
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800100c:	f001 ff52 	bl	8002eb4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001016:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001018:	e011      	b.n	800103e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800101e:	2b00      	cmp	r3, #0
 8001020:	d012      	beq.n	8001048 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3324      	adds	r3, #36	@ 0x24
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fe46 	bl	8001cb8 <xTaskRemoveFromEventList>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001032:	f000 ff99 	bl	8001f68 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3b01      	subs	r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dce9      	bgt.n	800101a <prvUnlockQueue+0x16>
 8001046:	e000      	b.n	800104a <prvUnlockQueue+0x46>
                    break;
 8001048:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	22ff      	movs	r2, #255	@ 0xff
 800104e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8001052:	f001 ff61 	bl	8002f18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001056:	f001 ff2d 	bl	8002eb4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001060:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001062:	e011      	b.n	8001088 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3310      	adds	r3, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fe21 	bl	8001cb8 <xTaskRemoveFromEventList>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800107c:	f000 ff74 	bl	8001f68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	3b01      	subs	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dce9      	bgt.n	8001064 <prvUnlockQueue+0x60>
 8001090:	e000      	b.n	8001094 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001092:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	22ff      	movs	r2, #255	@ 0xff
 8001098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800109c:	f001 ff3c 	bl	8002f18 <vPortExitCritical>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010b0:	f001 ff00 	bl	8002eb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80010bc:	2301      	movs	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e001      	b.n	80010c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010c6:	f001 ff27 	bl	8002f18 <vPortExitCritical>

    return xReturn;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80010dc:	f001 feea 	bl	8002eb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d102      	bne.n	80010f2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	e001      	b.n	80010f6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80010f6:	f001 ff0f 	bl	8002f18 <vPortExitCritical>

    return xReturn;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10b      	bne.n	8001130 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	60fb      	str	r3, [r7, #12]
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d024      	beq.n	8001180 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e01e      	b.n	800117a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800113c:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <vQueueAddToRegistry+0x9c>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d105      	bne.n	8001158 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <vQueueAddToRegistry+0x9c>)
 8001152:	4413      	add	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
                    break;
 8001156:	e013      	b.n	8001180 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10a      	bne.n	8001174 <vQueueAddToRegistry+0x70>
 800115e:	4a10      	ldr	r2, [pc, #64]	@ (80011a0 <vQueueAddToRegistry+0x9c>)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d104      	bne.n	8001174 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <vQueueAddToRegistry+0x9c>)
 8001170:	4413      	add	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d9dd      	bls.n	800113c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d005      	beq.n	8001192 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8001192:	bf00      	nop
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000008c 	.word	0x2000008c

080011a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011b4:	f001 fe7e 	bl	8002eb4 <vPortEnterCritical>
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d103      	bne.n	80011ce <vQueueWaitForMessageRestricted+0x2a>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011da:	d103      	bne.n	80011e4 <vQueueWaitForMessageRestricted+0x40>
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80011e4:	f001 fe98 	bl	8002f18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3324      	adds	r3, #36	@ 0x24
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fd17 	bl	8001c2c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff00 	bl	8001004 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8001204:	bf00      	nop
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff2c 	bl	800307c <pvPortMalloc>
 8001224:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800122c:	205c      	movs	r0, #92	@ 0x5c
 800122e:	f001 ff25 	bl	800307c <pvPortMalloc>
 8001232:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d008      	beq.n	800124c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800123a:	225c      	movs	r2, #92	@ 0x5c
 800123c:	2100      	movs	r1, #0
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f004 fd3f 	bl	8005cc2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	631a      	str	r2, [r3, #48]	@ 0x30
 800124a:	e005      	b.n	8001258 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f002 f847 	bl	80032e0 <vPortFree>
 8001252:	e001      	b.n	8001258 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00d      	beq.n	800127a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800125e:	2300      	movs	r3, #0
 8001260:	9303      	str	r3, [sp, #12]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	9302      	str	r3, [sp, #8]
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 f828 	bl	80012ca <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800127a:	697b      	ldr	r3, [r7, #20]
    }
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff ffb3 	bl	800120c <prvCreateTask>
 80012a6:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80012ae:	6938      	ldr	r0, [r7, #16]
 80012b0:	f000 f89c 	bl	80013ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80012b4:	2301      	movs	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e002      	b.n	80012c0 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80012c0:	697b      	ldr	r3, [r7, #20]
    }
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b088      	sub	sp, #32
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80012d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	21a5      	movs	r1, #165	@ 0xa5
 80012e4:	f004 fced 	bl	8005cc2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80012e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80012f2:	3b01      	subs	r3, #1
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	f023 0307 	bic.w	r3, r3, #7
 8001300:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00b      	beq.n	8001324 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800130c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001310:	f383 8811 	msr	BASEPRI, r3
 8001314:	f3bf 8f6f 	isb	sy
 8001318:	f3bf 8f4f 	dsb	sy
 800131c:	617b      	str	r3, [r7, #20]
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01e      	beq.n	8001368 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e012      	b.n	8001356 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4413      	add	r3, r2
 8001336:	7819      	ldrb	r1, [r3, #0]
 8001338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	4413      	add	r3, r2
 800133e:	3334      	adds	r3, #52	@ 0x34
 8001340:	460a      	mov	r2, r1
 8001342:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3301      	adds	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	2b0e      	cmp	r3, #14
 800135a:	d9e9      	bls.n	8001330 <prvInitialiseNewTask+0x66>
 800135c:	e000      	b.n	8001360 <prvInitialiseNewTask+0x96>
            {
                break;
 800135e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8001360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136a:	2b04      	cmp	r3, #4
 800136c:	d90b      	bls.n	8001386 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800136e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	613b      	str	r3, [r7, #16]
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	e7fd      	b.n	8001382 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001388:	2b04      	cmp	r3, #4
 800138a:	d901      	bls.n	8001390 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800138c:	2304      	movs	r3, #4
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001392:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800139c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800139e:	3304      	adds	r3, #4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8fd 	bl	80005a0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80013a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a8:	3318      	adds	r3, #24
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8f8 	bl	80005a0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80013b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013b4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	f1c3 0205 	rsb	r2, r3, #5
 80013bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013be:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80013c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	69b8      	ldr	r0, [r7, #24]
 80013cc:	f001 fbf4 	bl	8002bb8 <pxPortInitialiseStack>
 80013d0:	4602      	mov	r2, r0
 80013d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80013d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80013dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80013f4:	f001 fd5e 	bl	8002eb4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80013f8:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <prvAddNewTaskToReadyList+0x114>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a40      	ldr	r2, [pc, #256]	@ (8001500 <prvAddNewTaskToReadyList+0x114>)
 8001400:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <prvAddNewTaskToReadyList+0x118>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800140a:	4a3e      	ldr	r2, [pc, #248]	@ (8001504 <prvAddNewTaskToReadyList+0x118>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001410:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <prvAddNewTaskToReadyList+0x114>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d110      	bne.n	800143a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8001418:	f000 fdca 	bl	8001fb0 <prvInitialiseTaskLists>
 800141c:	e00d      	b.n	800143a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800141e:	4b3a      	ldr	r3, [pc, #232]	@ (8001508 <prvAddNewTaskToReadyList+0x11c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001426:	4b37      	ldr	r3, [pc, #220]	@ (8001504 <prvAddNewTaskToReadyList+0x118>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	429a      	cmp	r2, r3
 8001432:	d802      	bhi.n	800143a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8001434:	4a33      	ldr	r2, [pc, #204]	@ (8001504 <prvAddNewTaskToReadyList+0x118>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800143a:	4b34      	ldr	r3, [pc, #208]	@ (800150c <prvAddNewTaskToReadyList+0x120>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3301      	adds	r3, #1
 8001440:	4a32      	ldr	r2, [pc, #200]	@ (800150c <prvAddNewTaskToReadyList+0x120>)
 8001442:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001444:	4b31      	ldr	r3, [pc, #196]	@ (800150c <prvAddNewTaskToReadyList+0x120>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	2201      	movs	r2, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <prvAddNewTaskToReadyList+0x124>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4313      	orrs	r3, r2
 800145a:	4a2d      	ldr	r2, [pc, #180]	@ (8001510 <prvAddNewTaskToReadyList+0x124>)
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001462:	492c      	ldr	r1, [pc, #176]	@ (8001514 <prvAddNewTaskToReadyList+0x128>)
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	3204      	adds	r2, #4
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	1d1a      	adds	r2, r3, #4
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <prvAddNewTaskToReadyList+0x128>)
 80014a2:	441a      	add	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ac:	4919      	ldr	r1, [pc, #100]	@ (8001514 <prvAddNewTaskToReadyList+0x128>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80014be:	1c59      	adds	r1, r3, #1
 80014c0:	4814      	ldr	r0, [pc, #80]	@ (8001514 <prvAddNewTaskToReadyList+0x128>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4403      	add	r3, r0
 80014cc:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80014ce:	f001 fd23 	bl	8002f18 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80014d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001508 <prvAddNewTaskToReadyList+0x11c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00e      	beq.n	80014f8 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <prvAddNewTaskToReadyList+0x118>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d207      	bcs.n	80014f8 <prvAddNewTaskToReadyList+0x10c>
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <prvAddNewTaskToReadyList+0x12c>)
 80014ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	f3bf 8f4f 	dsb	sy
 80014f4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001a4 	.word	0x200001a4
 8001504:	200000cc 	.word	0x200000cc
 8001508:	200001b0 	.word	0x200001b0
 800150c:	200001c0 	.word	0x200001c0
 8001510:	200001ac 	.word	0x200001ac
 8001514:	200000d0 	.word	0x200000d0
 8001518:	e000ed04 	.word	0xe000ed04

0800151c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d018      	beq.n	8001560 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800152e:	f000 f8b9 	bl	80016a4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8001532:	4b13      	ldr	r3, [pc, #76]	@ (8001580 <vTaskDelay+0x64>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d00b      	beq.n	8001552 <vTaskDelay+0x36>
    __asm volatile
 800153a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	60bb      	str	r3, [r7, #8]
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	e7fd      	b.n	800154e <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001552:	2100      	movs	r1, #0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 ffff 	bl	8002558 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800155a:	f000 f8b1 	bl	80016c0 <xTaskResumeAll>
 800155e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d107      	bne.n	8001576 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <vTaskDelay+0x68>)
 8001568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200001cc 	.word	0x200001cc
 8001584:	e000ed04 	.word	0xe000ed04

08001588 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800158e:	2301      	movs	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e011      	b.n	80015c0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800159c:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <prvCreateIdleTasks+0x88>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	4413      	add	r3, r2
 80015a2:	7819      	ldrb	r1, [r3, #0]
 80015a4:	463a      	mov	r2, r7
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	4413      	add	r3, r2
 80015aa:	460a      	mov	r2, r1
 80015ac:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80015ae:	463a      	mov	r2, r7
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2b0e      	cmp	r3, #14
 80015c4:	ddea      	ble.n	800159c <prvCreateIdleTasks+0x14>
 80015c6:	e000      	b.n	80015ca <prvCreateIdleTasks+0x42>
        {
            break;
 80015c8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	e015      	b.n	80015fc <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <prvCreateIdleTasks+0x8c>)
 80015d2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001618 <prvCreateIdleTasks+0x90>)
 80015da:	4413      	add	r3, r2
 80015dc:	4639      	mov	r1, r7
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2300      	movs	r3, #0
 80015e6:	2282      	movs	r2, #130	@ 0x82
 80015e8:	6938      	ldr	r0, [r7, #16]
 80015ea:	f7ff fe4b 	bl	8001284 <xTaskCreate>
 80015ee:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	dde6      	ble.n	80015d0 <prvCreateIdleTasks+0x48>
 8001602:	e000      	b.n	8001606 <prvCreateIdleTasks+0x7e>
        {
            break;
 8001604:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8001606:	69fb      	ldr	r3, [r7, #28]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08006a2c 	.word	0x08006a2c
 8001614:	08001f81 	.word	0x08001f81
 8001618:	200001c8 	.word	0x200001c8

0800161c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8001622:	f7ff ffb1 	bl	8001588 <prvCreateIdleTasks>
 8001626:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d102      	bne.n	8001634 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800162e:	f001 f815 	bl	800265c <xTimerCreateTimerTask>
 8001632:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d116      	bne.n	8001668 <vTaskStartScheduler+0x4c>
    __asm volatile
 800163a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800163e:	f383 8811 	msr	BASEPRI, r3
 8001642:	f3bf 8f6f 	isb	sy
 8001646:	f3bf 8f4f 	dsb	sy
 800164a:	60bb      	str	r3, [r7, #8]
}
 800164c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <vTaskStartScheduler+0x78>)
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <vTaskStartScheduler+0x7c>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800165c:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <vTaskStartScheduler+0x80>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8001662:	f001 fb37 	bl	8002cd4 <xPortStartScheduler>
 8001666:	e00f      	b.n	8001688 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166e:	d10b      	bne.n	8001688 <vTaskStartScheduler+0x6c>
    __asm volatile
 8001670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001674:	f383 8811 	msr	BASEPRI, r3
 8001678:	f3bf 8f6f 	isb	sy
 800167c:	f3bf 8f4f 	dsb	sy
 8001680:	607b      	str	r3, [r7, #4]
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <vTaskStartScheduler+0x84>)
 800168a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200001c4 	.word	0x200001c4
 8001698:	200001b0 	.word	0x200001b0
 800169c:	200001a8 	.word	0x200001a8
 80016a0:	20000000 	.word	0x20000000

080016a4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <vTaskSuspendAll+0x18>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3301      	adds	r3, #1
 80016ae:	4a03      	ldr	r2, [pc, #12]	@ (80016bc <vTaskSuspendAll+0x18>)
 80016b0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	200001cc 	.word	0x200001cc

080016c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80016ce:	f001 fbf1 	bl	8002eb4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80016d6:	4b75      	ldr	r3, [pc, #468]	@ (80018ac <xTaskResumeAll+0x1ec>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10b      	bne.n	80016f6 <xTaskResumeAll+0x36>
    __asm volatile
 80016de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e2:	f383 8811 	msr	BASEPRI, r3
 80016e6:	f3bf 8f6f 	isb	sy
 80016ea:	f3bf 8f4f 	dsb	sy
 80016ee:	603b      	str	r3, [r7, #0]
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	e7fd      	b.n	80016f2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80016f6:	4b6d      	ldr	r3, [pc, #436]	@ (80018ac <xTaskResumeAll+0x1ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	4a6b      	ldr	r2, [pc, #428]	@ (80018ac <xTaskResumeAll+0x1ec>)
 80016fe:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001700:	4b6a      	ldr	r3, [pc, #424]	@ (80018ac <xTaskResumeAll+0x1ec>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 80ca 	bne.w	800189e <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800170a:	4b69      	ldr	r3, [pc, #420]	@ (80018b0 <xTaskResumeAll+0x1f0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80c5 	beq.w	800189e <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001714:	e08e      	b.n	8001834 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001716:	4b67      	ldr	r3, [pc, #412]	@ (80018b4 <xTaskResumeAll+0x1f4>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	6a12      	ldr	r2, [r2, #32]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	69d2      	ldr	r2, [r2, #28]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	3318      	adds	r3, #24
 8001740:	429a      	cmp	r2, r3
 8001742:	d103      	bne.n	800174c <xTaskResumeAll+0x8c>
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	68d2      	ldr	r2, [r2, #12]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	6892      	ldr	r2, [r2, #8]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3304      	adds	r3, #4
 800177e:	429a      	cmp	r2, r3
 8001780:	d103      	bne.n	800178a <xTaskResumeAll+0xca>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179e:	2201      	movs	r2, #1
 80017a0:	409a      	lsls	r2, r3
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <xTaskResumeAll+0x1f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	4a43      	ldr	r2, [pc, #268]	@ (80018b8 <xTaskResumeAll+0x1f8>)
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b0:	4942      	ldr	r1, [pc, #264]	@ (80018bc <xTaskResumeAll+0x1fc>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	440b      	add	r3, r1
 80017bc:	3304      	adds	r3, #4
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	3204      	adds	r2, #4
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	1d1a      	adds	r2, r3, #4
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4a33      	ldr	r2, [pc, #204]	@ (80018bc <xTaskResumeAll+0x1fc>)
 80017f0:	441a      	add	r2, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fa:	4930      	ldr	r1, [pc, #192]	@ (80018bc <xTaskResumeAll+0x1fc>)
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69fa      	ldr	r2, [r7, #28]
 800180a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800180c:	1c59      	adds	r1, r3, #1
 800180e:	482b      	ldr	r0, [pc, #172]	@ (80018bc <xTaskResumeAll+0x1fc>)
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4403      	add	r3, r0
 800181a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <xTaskResumeAll+0x200>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	429a      	cmp	r2, r3
 8001828:	d904      	bls.n	8001834 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800182a:	4a26      	ldr	r2, [pc, #152]	@ (80018c4 <xTaskResumeAll+0x204>)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2101      	movs	r1, #1
 8001830:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <xTaskResumeAll+0x1f4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f af6c 	bne.w	8001716 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001844:	f000 fc32 	bl	80020ac <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001848:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <xTaskResumeAll+0x208>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8001854:	f000 f84c 	bl	80018f0 <xTaskIncrementTick>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d004      	beq.n	8001868 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800185e:	4a19      	ldr	r2, [pc, #100]	@ (80018c4 <xTaskResumeAll+0x204>)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	2101      	movs	r1, #1
 8001864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3b01      	subs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ef      	bne.n	8001854 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <xTaskResumeAll+0x208>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <xTaskResumeAll+0x204>)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001886:	2301      	movs	r3, #1
 8001888:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <xTaskResumeAll+0x200>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <xTaskResumeAll+0x20c>)
 8001890:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	f3bf 8f4f 	dsb	sy
 800189a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800189e:	f001 fb3b 	bl	8002f18 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80018a2:	69bb      	ldr	r3, [r7, #24]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	200001cc 	.word	0x200001cc
 80018b0:	200001a4 	.word	0x200001a4
 80018b4:	20000164 	.word	0x20000164
 80018b8:	200001ac 	.word	0x200001ac
 80018bc:	200000d0 	.word	0x200000d0
 80018c0:	200000cc 	.word	0x200000cc
 80018c4:	200001b8 	.word	0x200001b8
 80018c8:	200001b4 	.word	0x200001b4
 80018cc:	e000ed04 	.word	0xe000ed04

080018d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <xTaskGetTickCount+0x1c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	200001a8 	.word	0x200001a8

080018f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	@ 0x28
 80018f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80018fa:	4b7f      	ldr	r3, [pc, #508]	@ (8001af8 <xTaskIncrementTick+0x208>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80ef 	bne.w	8001ae2 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001904:	4b7d      	ldr	r3, [pc, #500]	@ (8001afc <xTaskIncrementTick+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3301      	adds	r3, #1
 800190a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800190c:	4a7b      	ldr	r2, [pc, #492]	@ (8001afc <xTaskIncrementTick+0x20c>)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d121      	bne.n	800195c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001918:	4b79      	ldr	r3, [pc, #484]	@ (8001b00 <xTaskIncrementTick+0x210>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00b      	beq.n	800193a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	f3bf 8f6f 	isb	sy
 800192e:	f3bf 8f4f 	dsb	sy
 8001932:	607b      	str	r3, [r7, #4]
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	e7fd      	b.n	8001936 <xTaskIncrementTick+0x46>
 800193a:	4b71      	ldr	r3, [pc, #452]	@ (8001b00 <xTaskIncrementTick+0x210>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <xTaskIncrementTick+0x214>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6e      	ldr	r2, [pc, #440]	@ (8001b00 <xTaskIncrementTick+0x210>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4a6e      	ldr	r2, [pc, #440]	@ (8001b04 <xTaskIncrementTick+0x214>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b08 <xTaskIncrementTick+0x218>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a6c      	ldr	r2, [pc, #432]	@ (8001b08 <xTaskIncrementTick+0x218>)
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	f000 fba8 	bl	80020ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800195c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b0c <xTaskIncrementTick+0x21c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	429a      	cmp	r2, r3
 8001964:	f0c0 80a8 	bcc.w	8001ab8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001968:	4b65      	ldr	r3, [pc, #404]	@ (8001b00 <xTaskIncrementTick+0x210>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d104      	bne.n	800197c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8001972:	4b66      	ldr	r3, [pc, #408]	@ (8001b0c <xTaskIncrementTick+0x21c>)
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	601a      	str	r2, [r3, #0]
                    break;
 800197a:	e09d      	b.n	8001ab8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800197c:	4b60      	ldr	r3, [pc, #384]	@ (8001b00 <xTaskIncrementTick+0x210>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800198c:	6a3a      	ldr	r2, [r7, #32]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	429a      	cmp	r2, r3
 8001992:	d203      	bcs.n	800199c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001994:	4a5d      	ldr	r2, [pc, #372]	@ (8001b0c <xTaskIncrementTick+0x21c>)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	6013      	str	r3, [r2, #0]
                        break;
 800199a:	e08d      	b.n	8001ab8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	68d2      	ldr	r2, [r2, #12]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	6892      	ldr	r2, [r2, #8]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3304      	adds	r3, #4
 80019be:	429a      	cmp	r2, r3
 80019c0:	d103      	bne.n	80019ca <xTaskIncrementTick+0xda>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1e5a      	subs	r2, r3, #1
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01e      	beq.n	8001a20 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	6a12      	ldr	r2, [r2, #32]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	69d2      	ldr	r2, [r2, #28]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	3318      	adds	r3, #24
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d103      	bne.n	8001a10 <xTaskIncrementTick+0x120>
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6a1a      	ldr	r2, [r3, #32]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2200      	movs	r2, #0
 8001a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1e5a      	subs	r2, r3, #1
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a24:	2201      	movs	r2, #1
 8001a26:	409a      	lsls	r2, r3
 8001a28:	4b39      	ldr	r3, [pc, #228]	@ (8001b10 <xTaskIncrementTick+0x220>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	4a38      	ldr	r2, [pc, #224]	@ (8001b10 <xTaskIncrementTick+0x220>)
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a36:	4937      	ldr	r1, [pc, #220]	@ (8001b14 <xTaskIncrementTick+0x224>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	3204      	adds	r2, #4
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1d1a      	adds	r2, r3, #4
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4a27      	ldr	r2, [pc, #156]	@ (8001b14 <xTaskIncrementTick+0x224>)
 8001a76:	441a      	add	r2, r3
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	615a      	str	r2, [r3, #20]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a80:	4924      	ldr	r1, [pc, #144]	@ (8001b14 <xTaskIncrementTick+0x224>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <xTaskIncrementTick+0x224>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4403      	add	r3, r0
 8001aa0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <xTaskIncrementTick+0x228>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f67f af5b 	bls.w	8001968 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ab6:	e757      	b.n	8001968 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <xTaskIncrementTick+0x228>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001abe:	4915      	ldr	r1, [pc, #84]	@ (8001b14 <xTaskIncrementTick+0x224>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d901      	bls.n	8001ad4 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <xTaskIncrementTick+0x22c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae0:	e004      	b.n	8001aec <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <xTaskIncrementTick+0x230>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b20 <xTaskIncrementTick+0x230>)
 8001aea:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001cc 	.word	0x200001cc
 8001afc:	200001a8 	.word	0x200001a8
 8001b00:	2000015c 	.word	0x2000015c
 8001b04:	20000160 	.word	0x20000160
 8001b08:	200001bc 	.word	0x200001bc
 8001b0c:	200001c4 	.word	0x200001c4
 8001b10:	200001ac 	.word	0x200001ac
 8001b14:	200000d0 	.word	0x200000d0
 8001b18:	200000cc 	.word	0x200000cc
 8001b1c:	200001b8 	.word	0x200001b8
 8001b20:	200001b4 	.word	0x200001b4

08001b24 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8001b2a:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <vTaskSwitchContext+0xa8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001b32:	4b27      	ldr	r3, [pc, #156]	@ (8001bd0 <vTaskSwitchContext+0xac>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001b38:	e041      	b.n	8001bbe <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <vTaskSwitchContext+0xac>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <vTaskSwitchContext+0xb0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f1c3 031f 	rsb	r3, r3, #31
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4920      	ldr	r1, [pc, #128]	@ (8001bd8 <vTaskSwitchContext+0xb4>)
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10b      	bne.n	8001b82 <vTaskSwitchContext+0x5e>
    __asm volatile
 8001b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6e:	f383 8811 	msr	BASEPRI, r3
 8001b72:	f3bf 8f6f 	isb	sy
 8001b76:	f3bf 8f4f 	dsb	sy
 8001b7a:	607b      	str	r3, [r7, #4]
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	e7fd      	b.n	8001b7e <vTaskSwitchContext+0x5a>
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <vTaskSwitchContext+0xb4>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d103      	bne.n	8001bb0 <vTaskSwitchContext+0x8c>
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <vTaskSwitchContext+0xb8>)
 8001bb8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <vTaskSwitchContext+0xb8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
    }
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200001cc 	.word	0x200001cc
 8001bd0:	200001b8 	.word	0x200001b8
 8001bd4:	200001ac 	.word	0x200001ac
 8001bd8:	200000d0 	.word	0x200000d0
 8001bdc:	200000cc 	.word	0x200000cc

08001be0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	60fb      	str	r3, [r7, #12]
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <vTaskPlaceOnEventList+0x48>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3318      	adds	r3, #24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fcd2 	bl	80005ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001c16:	2101      	movs	r1, #1
 8001c18:	6838      	ldr	r0, [r7, #0]
 8001c1a:	f000 fc9d 	bl	8002558 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200000cc 	.word	0x200000cc

08001c2c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10b      	bne.n	8001c56 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8001c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c42:	f383 8811 	msr	BASEPRI, r3
 8001c46:	f3bf 8f6f 	isb	sy
 8001c4a:	f3bf 8f4f 	dsb	sy
 8001c4e:	613b      	str	r3, [r7, #16]
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	e7fd      	b.n	8001c52 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	61da      	str	r2, [r3, #28]
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	6892      	ldr	r2, [r2, #8]
 8001c6c:	621a      	str	r2, [r3, #32]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	3218      	adds	r2, #24
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f103 0218 	add.w	r2, r3, #24
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <vTaskPlaceOnEventListRestricted+0x88>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	68b8      	ldr	r0, [r7, #8]
 8001ca8:	f000 fc56 	bl	8002558 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200000cc 	.word	0x200000cc

08001cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b08b      	sub	sp, #44	@ 0x2c
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10b      	bne.n	8001ce6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8001cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cd2:	f383 8811 	msr	BASEPRI, r3
 8001cd6:	f3bf 8f6f 	isb	sy
 8001cda:	f3bf 8f4f 	dsb	sy
 8001cde:	60fb      	str	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	e7fd      	b.n	8001ce2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	6a12      	ldr	r2, [r2, #32]
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	6a3a      	ldr	r2, [r7, #32]
 8001cfc:	69d2      	ldr	r2, [r2, #28]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	3318      	adds	r3, #24
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d103      	bne.n	8001d14 <xTaskRemoveFromEventList+0x5c>
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2200      	movs	r2, #0
 8001d18:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1e5a      	subs	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001d24:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <xTaskRemoveFromEventList+0x19c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d160      	bne.n	8001dee <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	6a3a      	ldr	r2, [r7, #32]
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	6a3a      	ldr	r2, [r7, #32]
 8001d42:	6892      	ldr	r2, [r2, #8]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d103      	bne.n	8001d5a <xTaskRemoveFromEventList+0xa2>
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	2201      	movs	r2, #1
 8001d70:	409a      	lsls	r2, r3
 8001d72:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <xTaskRemoveFromEventList+0x1a0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	4a37      	ldr	r2, [pc, #220]	@ (8001e58 <xTaskRemoveFromEventList+0x1a0>)
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d80:	4936      	ldr	r1, [pc, #216]	@ (8001e5c <xTaskRemoveFromEventList+0x1a4>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	3204      	adds	r2, #4
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	1d1a      	adds	r2, r3, #4
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <xTaskRemoveFromEventList+0x1a4>)
 8001dc0:	441a      	add	r2, r3
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	615a      	str	r2, [r3, #20]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dca:	4924      	ldr	r1, [pc, #144]	@ (8001e5c <xTaskRemoveFromEventList+0x1a4>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ddc:	1c59      	adds	r1, r3, #1
 8001dde:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <xTaskRemoveFromEventList+0x1a4>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4403      	add	r3, r0
 8001dea:	6019      	str	r1, [r3, #0]
 8001dec:	e01b      	b.n	8001e26 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001dee:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <xTaskRemoveFromEventList+0x1a8>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	61da      	str	r2, [r3, #28]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	621a      	str	r2, [r3, #32]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	6a3a      	ldr	r2, [r7, #32]
 8001e08:	3218      	adds	r2, #24
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	f103 0218 	add.w	r2, r3, #24
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <xTaskRemoveFromEventList+0x1a8>)
 8001e1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <xTaskRemoveFromEventList+0x1a8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a0f      	ldr	r2, [pc, #60]	@ (8001e60 <xTaskRemoveFromEventList+0x1a8>)
 8001e24:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <xTaskRemoveFromEventList+0x1ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d905      	bls.n	8001e40 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <xTaskRemoveFromEventList+0x1b0>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e001      	b.n	8001e44 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	372c      	adds	r7, #44	@ 0x2c
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	200001cc 	.word	0x200001cc
 8001e58:	200001ac 	.word	0x200001ac
 8001e5c:	200000d0 	.word	0x200000d0
 8001e60:	20000164 	.word	0x20000164
 8001e64:	200000cc 	.word	0x200000cc
 8001e68:	200001b8 	.word	0x200001b8

08001e6c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e74:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <vTaskInternalSetTimeOutState+0x24>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <vTaskInternalSetTimeOutState+0x28>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	200001bc 	.word	0x200001bc
 8001e94:	200001a8 	.word	0x200001a8

08001e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	613b      	str	r3, [r7, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	f3bf 8f4f 	dsb	sy
 8001ed6:	60fb      	str	r3, [r7, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001ede:	f000 ffe9 	bl	8002eb4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <xTaskCheckForTimeOut+0xc8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efa:	d102      	bne.n	8001f02 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	e026      	b.n	8001f50 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <xTaskCheckForTimeOut+0xcc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d00a      	beq.n	8001f24 <xTaskCheckForTimeOut+0x8c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d305      	bcc.n	8001f24 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e015      	b.n	8001f50 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d20b      	bcs.n	8001f46 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad2      	subs	r2, r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ff96 	bl	8001e6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e004      	b.n	8001f50 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001f50:	f000 ffe2 	bl	8002f18 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8001f54:	69fb      	ldr	r3, [r7, #28]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001a8 	.word	0x200001a8
 8001f64:	200001bc 	.word	0x200001bc

08001f68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8001f6c:	4b03      	ldr	r3, [pc, #12]	@ (8001f7c <vTaskMissedYield+0x14>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	200001b8 	.word	0x200001b8

08001f80 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001f88:	f000 f852 	bl	8002030 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <prvIdleTask+0x28>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d9f9      	bls.n	8001f88 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001f94:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <prvIdleTask+0x2c>)
 8001f96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	f3bf 8f4f 	dsb	sy
 8001fa0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001fa4:	e7f0      	b.n	8001f88 <prvIdleTask+0x8>
 8001fa6:	bf00      	nop
 8001fa8:	200000d0 	.word	0x200000d0
 8001fac:	e000ed04 	.word	0xe000ed04

08001fb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	e00c      	b.n	8001fd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <prvInitialiseTaskLists+0x60>)
 8001fc8:	4413      	add	r3, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fac8 	bl	8000560 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d9ef      	bls.n	8001fbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001fdc:	480d      	ldr	r0, [pc, #52]	@ (8002014 <prvInitialiseTaskLists+0x64>)
 8001fde:	f7fe fabf 	bl	8000560 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <prvInitialiseTaskLists+0x68>)
 8001fe4:	f7fe fabc 	bl	8000560 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <prvInitialiseTaskLists+0x6c>)
 8001fea:	f7fe fab9 	bl	8000560 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001fee:	480c      	ldr	r0, [pc, #48]	@ (8002020 <prvInitialiseTaskLists+0x70>)
 8001ff0:	f7fe fab6 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001ff4:	480b      	ldr	r0, [pc, #44]	@ (8002024 <prvInitialiseTaskLists+0x74>)
 8001ff6:	f7fe fab3 	bl	8000560 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <prvInitialiseTaskLists+0x78>)
 8001ffc:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <prvInitialiseTaskLists+0x64>)
 8001ffe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002000:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <prvInitialiseTaskLists+0x7c>)
 8002002:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <prvInitialiseTaskLists+0x68>)
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200000d0 	.word	0x200000d0
 8002014:	20000134 	.word	0x20000134
 8002018:	20000148 	.word	0x20000148
 800201c:	20000164 	.word	0x20000164
 8002020:	20000178 	.word	0x20000178
 8002024:	20000190 	.word	0x20000190
 8002028:	2000015c 	.word	0x2000015c
 800202c:	20000160 	.word	0x20000160

08002030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002036:	e019      	b.n	800206c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002038:	f000 ff3c 	bl	8002eb4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800203c:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <prvCheckTasksWaitingTermination+0x50>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe faef 	bl	800062c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800204e:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <prvCheckTasksWaitingTermination+0x54>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	4a0b      	ldr	r2, [pc, #44]	@ (8002084 <prvCheckTasksWaitingTermination+0x54>)
 8002056:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <prvCheckTasksWaitingTermination+0x58>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <prvCheckTasksWaitingTermination+0x58>)
 8002060:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002062:	f000 ff59 	bl	8002f18 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f810 	bl	800208c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <prvCheckTasksWaitingTermination+0x58>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e1      	bne.n	8002038 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000178 	.word	0x20000178
 8002084:	200001a4 	.word	0x200001a4
 8002088:	2000018c 	.word	0x2000018c

0800208c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002098:	4618      	mov	r0, r3
 800209a:	f001 f921 	bl	80032e0 <vPortFree>
            vPortFree( pxTCB );
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f001 f91e 	bl	80032e0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <prvResetNextTaskUnblockTime+0x30>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <prvResetNextTaskUnblockTime+0x34>)
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020c2:	e005      	b.n	80020d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020c4:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <prvResetNextTaskUnblockTime+0x30>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <prvResetNextTaskUnblockTime+0x34>)
 80020ce:	6013      	str	r3, [r2, #0]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000015c 	.word	0x2000015c
 80020e0:	200001c4 	.word	0x200001c4

080020e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <xTaskGetSchedulerState+0x34>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d102      	bne.n	80020f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80020f2:	2301      	movs	r3, #1
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	e008      	b.n	800210a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <xTaskGetSchedulerState+0x38>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8002100:	2302      	movs	r3, #2
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	e001      	b.n	800210a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800210a:	687b      	ldr	r3, [r7, #4]
    }
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	200001b0 	.word	0x200001b0
 800211c:	200001cc 	.word	0x200001cc

08002120 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8089 	beq.w	800224a <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800213c:	4b45      	ldr	r3, [pc, #276]	@ (8002254 <xTaskPriorityInherit+0x134>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	429a      	cmp	r2, r3
 8002144:	d278      	bcs.n	8002238 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db06      	blt.n	800215c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <xTaskPriorityInherit+0x134>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	f1c3 0205 	rsb	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	6959      	ldr	r1, [r3, #20]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4a3a      	ldr	r2, [pc, #232]	@ (8002258 <xTaskPriorityInherit+0x138>)
 800216e:	4413      	add	r3, r2
 8002170:	4299      	cmp	r1, r3
 8002172:	d159      	bne.n	8002228 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	3304      	adds	r3, #4
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fa57 	bl	800062c <uxListRemove>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	2201      	movs	r2, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	4b32      	ldr	r3, [pc, #200]	@ (800225c <xTaskPriorityInherit+0x13c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4013      	ands	r3, r2
 8002196:	4a31      	ldr	r2, [pc, #196]	@ (800225c <xTaskPriorityInherit+0x13c>)
 8002198:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800219a:	4b2e      	ldr	r3, [pc, #184]	@ (8002254 <xTaskPriorityInherit+0x134>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <xTaskPriorityInherit+0x13c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	4a2a      	ldr	r2, [pc, #168]	@ (800225c <xTaskPriorityInherit+0x13c>)
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ba:	4927      	ldr	r1, [pc, #156]	@ (8002258 <xTaskPriorityInherit+0x138>)
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	3204      	adds	r2, #4
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1d1a      	adds	r2, r3, #4
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <xTaskPriorityInherit+0x138>)
 80021fa:	441a      	add	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	615a      	str	r2, [r3, #20]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002204:	4914      	ldr	r1, [pc, #80]	@ (8002258 <xTaskPriorityInherit+0x138>)
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002216:	1c59      	adds	r1, r3, #1
 8002218:	480f      	ldr	r0, [pc, #60]	@ (8002258 <xTaskPriorityInherit+0x138>)
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4403      	add	r3, r0
 8002224:	6019      	str	r1, [r3, #0]
 8002226:	e004      	b.n	8002232 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002228:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <xTaskPriorityInherit+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8002232:	2301      	movs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e008      	b.n	800224a <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <xTaskPriorityInherit+0x134>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	429a      	cmp	r2, r3
 8002244:	d201      	bcs.n	800224a <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 800224a:	697b      	ldr	r3, [r7, #20]
    }
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200000cc 	.word	0x200000cc
 8002258:	200000d0 	.word	0x200000d0
 800225c:	200001ac 	.word	0x200001ac

08002260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 8090 	beq.w	8002398 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002278:	4b4a      	ldr	r3, [pc, #296]	@ (80023a4 <xTaskPriorityDisinherit+0x144>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	429a      	cmp	r2, r3
 8002280:	d00b      	beq.n	800229a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	613b      	str	r3, [r7, #16]
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	e7fd      	b.n	8002296 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10b      	bne.n	80022ba <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 80022a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	60fb      	str	r3, [r7, #12]
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	e7fd      	b.n	80022b6 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d063      	beq.n	8002398 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d15f      	bne.n	8002398 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3304      	adds	r3, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f9a5 	bl	800062c <uxListRemove>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10a      	bne.n	80022fe <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	2201      	movs	r2, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	4b2c      	ldr	r3, [pc, #176]	@ (80023a8 <xTaskPriorityDisinherit+0x148>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4013      	ands	r3, r2
 80022fa:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <xTaskPriorityDisinherit+0x148>)
 80022fc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f1c3 0205 	rsb	r2, r3, #5
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002316:	2201      	movs	r2, #1
 8002318:	409a      	lsls	r2, r3
 800231a:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <xTaskPriorityDisinherit+0x148>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4313      	orrs	r3, r2
 8002320:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <xTaskPriorityDisinherit+0x148>)
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002328:	4920      	ldr	r1, [pc, #128]	@ (80023ac <xTaskPriorityDisinherit+0x14c>)
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3304      	adds	r3, #4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	3204      	adds	r2, #4
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	1d1a      	adds	r2, r3, #4
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <xTaskPriorityDisinherit+0x14c>)
 8002368:	441a      	add	r2, r3
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	615a      	str	r2, [r3, #20]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002372:	490e      	ldr	r1, [pc, #56]	@ (80023ac <xTaskPriorityDisinherit+0x14c>)
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002384:	1c59      	adds	r1, r3, #1
 8002386:	4809      	ldr	r0, [pc, #36]	@ (80023ac <xTaskPriorityDisinherit+0x14c>)
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4403      	add	r3, r0
 8002392:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002394:	2301      	movs	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8002398:	69fb      	ldr	r3, [r7, #28]
    }
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200000cc 	.word	0x200000cc
 80023a8:	200001ac 	.word	0x200001ac
 80023ac:	200000d0 	.word	0x200000d0

080023b0 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	@ 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a5 	beq.w	8002514 <vTaskPriorityDisinheritAfterTimeout+0x164>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10b      	bne.n	80023ea <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 80023d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	613b      	str	r3, [r7, #16]
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	e7fd      	b.n	80023e6 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d902      	bls.n	80023fa <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f8:	e002      	b.n	8002400 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002406:	429a      	cmp	r2, r3
 8002408:	f000 8084 	beq.w	8002514 <vTaskPriorityDisinheritAfterTimeout+0x164>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	429a      	cmp	r2, r3
 8002414:	d17e      	bne.n	8002514 <vTaskPriorityDisinheritAfterTimeout+0x164>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8002416:	4b41      	ldr	r3, [pc, #260]	@ (800251c <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	429a      	cmp	r2, r3
 800241e:	d10b      	bne.n	8002438 <vTaskPriorityDisinheritAfterTimeout+0x88>
    __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60fb      	str	r3, [r7, #12]
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	e7fd      	b.n	8002434 <vTaskPriorityDisinheritAfterTimeout+0x84>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db04      	blt.n	8002456 <vTaskPriorityDisinheritAfterTimeout+0xa6>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	f1c3 0205 	rsb	r2, r3, #5
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	6959      	ldr	r1, [r3, #20]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4a2e      	ldr	r2, [pc, #184]	@ (8002520 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002466:	4413      	add	r3, r2
 8002468:	4299      	cmp	r1, r3
 800246a:	d153      	bne.n	8002514 <vTaskPriorityDisinheritAfterTimeout+0x164>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	3304      	adds	r3, #4
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f8db 	bl	800062c <uxListRemove>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10a      	bne.n	8002492 <vTaskPriorityDisinheritAfterTimeout+0xe2>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	2201      	movs	r2, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4013      	ands	r3, r2
 800248e:	4a25      	ldr	r2, [pc, #148]	@ (8002524 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8002490:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	4b22      	ldr	r3, [pc, #136]	@ (8002524 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	4a20      	ldr	r2, [pc, #128]	@ (8002524 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a8:	491d      	ldr	r1, [pc, #116]	@ (8002520 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3304      	adds	r3, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	6a3a      	ldr	r2, [r7, #32]
 80024ce:	3204      	adds	r2, #4
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024e8:	441a      	add	r2, r3
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024f2:	490b      	ldr	r1, [pc, #44]	@ (8002520 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	4806      	ldr	r0, [pc, #24]	@ (8002520 <vTaskPriorityDisinheritAfterTimeout+0x170>)
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4403      	add	r3, r0
 8002512:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8002514:	bf00      	nop
 8002516:	3728      	adds	r7, #40	@ 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200000cc 	.word	0x200000cc
 8002520:	200000d0 	.word	0x200000d0
 8002524:	200001ac 	.word	0x200001ac

08002528 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <pvTaskIncrementMutexHeldCount+0x2c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8002544:	687b      	ldr	r3, [r7, #4]
    }
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	200000cc 	.word	0x200000cc

08002558 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <prvAddCurrentTaskToDelayedList+0xec>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800256e:	4b36      	ldr	r3, [pc, #216]	@ (8002648 <prvAddCurrentTaskToDelayedList+0xf0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002574:	4b35      	ldr	r3, [pc, #212]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3304      	adds	r3, #4
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe f856 	bl	800062c <uxListRemove>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10b      	bne.n	800259e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002586:	4b31      	ldr	r3, [pc, #196]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	2201      	movs	r2, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4013      	ands	r3, r2
 800259a:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <prvAddCurrentTaskToDelayedList+0xf8>)
 800259c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d124      	bne.n	80025f0 <prvAddCurrentTaskToDelayedList+0x98>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d021      	beq.n	80025f0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b26      	ldr	r3, [pc, #152]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	4b24      	ldr	r3, [pc, #144]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	6892      	ldr	r2, [r2, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	4b21      	ldr	r3, [pc, #132]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	3204      	adds	r2, #4
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1d1a      	adds	r2, r3, #4
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	@ (8002654 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025e0:	615a      	str	r2, [r3, #20]
 80025e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002654 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <prvAddCurrentTaskToDelayedList+0xfc>)
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80025ee:	e022      	b.n	8002636 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025f8:	4b14      	ldr	r3, [pc, #80]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	429a      	cmp	r2, r3
 8002606:	d207      	bcs.n	8002618 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3304      	adds	r3, #4
 800260e:	4619      	mov	r1, r3
 8002610:	6978      	ldr	r0, [r7, #20]
 8002612:	f7fd ffd2 	bl	80005ba <vListInsert>
}
 8002616:	e00e      	b.n	8002636 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <prvAddCurrentTaskToDelayedList+0xf4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	69b8      	ldr	r0, [r7, #24]
 8002622:	f7fd ffca 	bl	80005ba <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8002626:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <prvAddCurrentTaskToDelayedList+0x100>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d202      	bcs.n	8002636 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8002630:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <prvAddCurrentTaskToDelayedList+0x100>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6013      	str	r3, [r2, #0]
}
 8002636:	bf00      	nop
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200001a8 	.word	0x200001a8
 8002644:	2000015c 	.word	0x2000015c
 8002648:	20000160 	.word	0x20000160
 800264c:	200000cc 	.word	0x200000cc
 8002650:	200001ac 	.word	0x200001ac
 8002654:	20000190 	.word	0x20000190
 8002658:	200001c4 	.word	0x200001c4

0800265c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002666:	f000 fa71 	bl	8002b4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800266a:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <xTimerCreateTimerTask+0x58>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00b      	beq.n	800268a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <xTimerCreateTimerTask+0x5c>)
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002680:	490e      	ldr	r1, [pc, #56]	@ (80026bc <xTimerCreateTimerTask+0x60>)
 8002682:	480f      	ldr	r0, [pc, #60]	@ (80026c0 <xTimerCreateTimerTask+0x64>)
 8002684:	f7fe fdfe 	bl	8001284 <xTaskCreate>
 8002688:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	603b      	str	r3, [r7, #0]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 80026a8:	687b      	ldr	r3, [r7, #4]
    }
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000200 	.word	0x20000200
 80026b8:	20000204 	.word	0x20000204
 80026bc:	08006a34 	.word	0x08006a34
 80026c0:	08002769 	.word	0x08002769

080026c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026d0:	e008      	b.n	80026e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	18d1      	adds	r1, r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f8df 	bl	80028b4 <prvInsertTimerInActiveList>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ea      	bne.n	80026d2 <prvReloadTimer+0xe>
        }
    }
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002712:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <prvProcessExpiredTimer+0x5c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd ff83 	bl	800062c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff ffc3 	bl	80026c4 <prvReloadTimer>
 800273e:	e008      	b.n	8002752 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	4798      	blx	r3
    }
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200001f8 	.word	0x200001f8

08002768 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f859 	bl	800282c <prvGetNextExpireTime>
 800277a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4619      	mov	r1, r3
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f805 	bl	8002790 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002786:	f000 f8d7 	bl	8002938 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800278a:	bf00      	nop
 800278c:	e7f0      	b.n	8002770 <prvTimerTask+0x8>
	...

08002790 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800279a:	f7fe ff83 	bl	80016a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f866 	bl	8002874 <prvSampleTimeNow>
 80027a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d130      	bne.n	8002812 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <prvProcessTimerOrBlockTask+0x3c>
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d806      	bhi.n	80027cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80027be:	f7fe ff7f 	bl	80016c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff9f 	bl	8002708 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80027ca:	e024      	b.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <prvProcessTimerOrBlockTask+0x90>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <prvProcessTimerOrBlockTask+0x50>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <prvProcessTimerOrBlockTask+0x52>
 80027e0:	2300      	movs	r3, #0
 80027e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <prvProcessTimerOrBlockTask+0x94>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fcd7 	bl	80011a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80027f6:	f7fe ff63 	bl	80016c0 <xTaskResumeAll>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <prvProcessTimerOrBlockTask+0x98>)
 8002802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	f3bf 8f6f 	isb	sy
    }
 8002810:	e001      	b.n	8002816 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002812:	f7fe ff55 	bl	80016c0 <xTaskResumeAll>
    }
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200001fc 	.word	0x200001fc
 8002824:	20000200 	.word	0x20000200
 8002828:	e000ed04 	.word	0xe000ed04

0800282c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002834:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <prvGetNextExpireTime+0x44>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <prvGetNextExpireTime+0x16>
 800283e:	2201      	movs	r2, #1
 8002840:	e000      	b.n	8002844 <prvGetNextExpireTime+0x18>
 8002842:	2200      	movs	r2, #0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <prvGetNextExpireTime+0x44>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	e001      	b.n	8002860 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002860:	68fb      	ldr	r3, [r7, #12]
    }
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	200001f8 	.word	0x200001f8

08002874 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800287c:	f7ff f828 	bl	80018d0 <xTaskGetTickCount>
 8002880:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002882:	4b0b      	ldr	r3, [pc, #44]	@ (80028b0 <prvSampleTimeNow+0x3c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d205      	bcs.n	8002898 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800288c:	f000 f938 	bl	8002b00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e002      	b.n	800289e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800289e:	4a04      	ldr	r2, [pc, #16]	@ (80028b0 <prvSampleTimeNow+0x3c>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80028a4:	68fb      	ldr	r3, [r7, #12]
    }
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000208 	.word	0x20000208

080028b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d812      	bhi.n	8002900 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e01b      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <prvInsertTimerInActiveList+0x7c>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3304      	adds	r3, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f7fd fe5e 	bl	80005ba <vListInsert>
 80028fe:	e012      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d206      	bcs.n	8002916 <prvInsertTimerInActiveList+0x62>
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002910:	2301      	movs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	e007      	b.n	8002926 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <prvInsertTimerInActiveList+0x80>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	3304      	adds	r3, #4
 800291e:	4619      	mov	r1, r3
 8002920:	4610      	mov	r0, r2
 8002922:	f7fd fe4a 	bl	80005ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002926:	697b      	ldr	r3, [r7, #20]
    }
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200001fc 	.word	0x200001fc
 8002934:	200001f8 	.word	0x200001f8

08002938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	@ 0x28
 800293c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800294a:	e0c7      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	da19      	bge.n	8002986 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	3304      	adds	r3, #4
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	61bb      	str	r3, [r7, #24]
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	e7fd      	b.n	8002972 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	6850      	ldr	r0, [r2, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	6892      	ldr	r2, [r2, #8]
 8002982:	4611      	mov	r1, r2
 8002984:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f2c0 80a7 	blt.w	8002adc <prvProcessReceivedCommands+0x1a4>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <prvProcessReceivedCommands+0x6c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	3304      	adds	r3, #4
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fe44 	bl	800062c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029a4:	463b      	mov	r3, r7
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ff64 	bl	8002874 <prvSampleTimeNow>
 80029ac:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	f200 808f 	bhi.w	8002ad6 <prvProcessReceivedCommands+0x19e>
 80029b8:	a201      	add	r2, pc, #4	@ (adr r2, 80029c0 <prvProcessReceivedCommands+0x88>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029e5 	.word	0x080029e5
 80029c4:	080029e5 	.word	0x080029e5
 80029c8:	08002a4d 	.word	0x08002a4d
 80029cc:	08002a61 	.word	0x08002a61
 80029d0:	08002aad 	.word	0x08002aad
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029e5 	.word	0x080029e5
 80029dc:	08002a4d 	.word	0x08002a4d
 80029e0:	08002a61 	.word	0x08002a61
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	18d1      	adds	r1, r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	6a38      	ldr	r0, [r7, #32]
 8002a04:	f7ff ff56 	bl	80028b4 <prvInsertTimerInActiveList>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d065      	beq.n	8002ada <prvProcessReceivedCommands+0x1a2>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <prvProcessReceivedCommands+0xf8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	4619      	mov	r1, r3
 8002a28:	6a38      	ldr	r0, [r7, #32]
 8002a2a:	f7ff fe4b 	bl	80026c4 <prvReloadTimer>
 8002a2e:	e008      	b.n	8002a42 <prvProcessReceivedCommands+0x10a>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	6a38      	ldr	r0, [r7, #32]
 8002a48:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002a4a:	e046      	b.n	8002ada <prvProcessReceivedCommands+0x1a2>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002a5e:	e03d      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10b      	bne.n	8002a98 <prvProcessReceivedCommands+0x160>
    __asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	617b      	str	r3, [r7, #20]
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <prvProcessReceivedCommands+0x15c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	18d1      	adds	r1, r2, r3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	6a38      	ldr	r0, [r7, #32]
 8002aa6:	f7ff ff05 	bl	80028b4 <prvInsertTimerInActiveList>
                        break;
 8002aaa:	e017      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <prvProcessReceivedCommands+0x18a>
                            {
                                vPortFree( pxTimer );
 8002aba:	6a38      	ldr	r0, [r7, #32]
 8002abc:	f000 fc10 	bl	80032e0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002ac0:	e00c      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8002ad4:	e002      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <prvProcessReceivedCommands+0x1a4>
                        break;
 8002ada:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8002adc:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <prvProcessReceivedCommands+0x1c4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	1d39      	adds	r1, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe f803 	bl	8000af0 <xQueueReceive>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f47f af2d 	bne.w	800294c <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8002af2:	bf00      	nop
 8002af4:	bf00      	nop
 8002af6:	3728      	adds	r7, #40	@ 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000200 	.word	0x20000200

08002b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b06:	e009      	b.n	8002b1c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <prvSwitchTimerLists+0x44>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002b12:	f04f 31ff 	mov.w	r1, #4294967295
 8002b16:	6838      	ldr	r0, [r7, #0]
 8002b18:	f7ff fdf6 	bl	8002708 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b1c:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <prvSwitchTimerLists+0x44>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002b26:	4b07      	ldr	r3, [pc, #28]	@ (8002b44 <prvSwitchTimerLists+0x44>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <prvSwitchTimerLists+0x48>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <prvSwitchTimerLists+0x44>)
 8002b32:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <prvSwitchTimerLists+0x48>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6013      	str	r3, [r2, #0]
    }
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	200001f8 	.word	0x200001f8
 8002b48:	200001fc 	.word	0x200001fc

08002b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002b50:	f000 f9b0 	bl	8002eb4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <prvCheckForValidListAndQueue+0x54>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d11d      	bne.n	8002b98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002b5c:	4811      	ldr	r0, [pc, #68]	@ (8002ba4 <prvCheckForValidListAndQueue+0x58>)
 8002b5e:	f7fd fcff 	bl	8000560 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002b62:	4811      	ldr	r0, [pc, #68]	@ (8002ba8 <prvCheckForValidListAndQueue+0x5c>)
 8002b64:	f7fd fcfc 	bl	8000560 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002b68:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <prvCheckForValidListAndQueue+0x60>)
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba4 <prvCheckForValidListAndQueue+0x58>)
 8002b6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002b6e:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <prvCheckForValidListAndQueue+0x64>)
 8002b70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <prvCheckForValidListAndQueue+0x5c>)
 8002b72:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8002b74:	2200      	movs	r2, #0
 8002b76:	2110      	movs	r1, #16
 8002b78:	200a      	movs	r0, #10
 8002b7a:	f7fd fe13 	bl	80007a4 <xQueueGenericCreate>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4a07      	ldr	r2, [pc, #28]	@ (8002ba0 <prvCheckForValidListAndQueue+0x54>)
 8002b82:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <prvCheckForValidListAndQueue+0x54>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002b8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <prvCheckForValidListAndQueue+0x54>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4908      	ldr	r1, [pc, #32]	@ (8002bb4 <prvCheckForValidListAndQueue+0x68>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fab6 	bl	8001104 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002b98:	f000 f9be 	bl	8002f18 <vPortExitCritical>
    }
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000200 	.word	0x20000200
 8002ba4:	200001d0 	.word	0x200001d0
 8002ba8:	200001e4 	.word	0x200001e4
 8002bac:	200001f8 	.word	0x200001f8
 8002bb0:	200001fc 	.word	0x200001fc
 8002bb4:	08006a3c 	.word	0x08006a3c

08002bb8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002bd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3b04      	subs	r3, #4
 8002bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b04      	subs	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002be8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c1c <pxPortInitialiseStack+0x64>)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b14      	subs	r3, #20
 8002bf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3b04      	subs	r3, #4
 8002bfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f06f 0202 	mvn.w	r2, #2
 8002c06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3b20      	subs	r3, #32
 8002c0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	08002c21 	.word	0x08002c21

08002c20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002c2a:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <prvTaskExitError+0x58>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d00b      	beq.n	8002c4c <prvTaskExitError+0x2c>
    __asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	60fb      	str	r3, [r7, #12]
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <prvTaskExitError+0x28>
    __asm volatile
 8002c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	60bb      	str	r3, [r7, #8]
}
 8002c5e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c60:	bf00      	nop
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0fc      	beq.n	8002c62 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	00000000 	.word	0x00000000

08002c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c80:	4b07      	ldr	r3, [pc, #28]	@ (8002ca0 <pxCurrentTCBConst2>)
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	6808      	ldr	r0, [r1, #0]
 8002c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c8a:	f380 8809 	msr	PSP, r0
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f04f 0000 	mov.w	r0, #0
 8002c96:	f380 8811 	msr	BASEPRI, r0
 8002c9a:	4770      	bx	lr
 8002c9c:	f3af 8000 	nop.w

08002ca0 <pxCurrentTCBConst2>:
 8002ca0:	200000cc 	.word	0x200000cc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop

08002ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ca8:	4808      	ldr	r0, [pc, #32]	@ (8002ccc <prvPortStartFirstTask+0x24>)
 8002caa:	6800      	ldr	r0, [r0, #0]
 8002cac:	6800      	ldr	r0, [r0, #0]
 8002cae:	f380 8808 	msr	MSP, r0
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f380 8814 	msr	CONTROL, r0
 8002cba:	b662      	cpsie	i
 8002cbc:	b661      	cpsie	f
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	df00      	svc	0
 8002cc8:	bf00      	nop
 8002cca:	0000      	.short	0x0000
 8002ccc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002cd0:	bf00      	nop
 8002cd2:	bf00      	nop

08002cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	@ 0x30
 8002cd8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002cda:	4b69      	ldr	r3, [pc, #420]	@ (8002e80 <xPortStartScheduler+0x1ac>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a69      	ldr	r2, [pc, #420]	@ (8002e84 <xPortStartScheduler+0x1b0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10b      	bne.n	8002cfc <xPortStartScheduler+0x28>
    __asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002cfc:	4b60      	ldr	r3, [pc, #384]	@ (8002e80 <xPortStartScheduler+0x1ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a61      	ldr	r2, [pc, #388]	@ (8002e88 <xPortStartScheduler+0x1b4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10b      	bne.n	8002d1e <xPortStartScheduler+0x4a>
    __asm volatile
 8002d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0a:	f383 8811 	msr	BASEPRI, r3
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	f3bf 8f4f 	dsb	sy
 8002d16:	623b      	str	r3, [r7, #32]
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	e7fd      	b.n	8002d1a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e8c <xPortStartScheduler+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d26:	332c      	adds	r3, #44	@ 0x2c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <xPortStartScheduler+0x1bc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <xPortStartScheduler+0x74>
    __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	61fb      	str	r3, [r7, #28]
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	3338      	adds	r3, #56	@ 0x38
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a51      	ldr	r2, [pc, #324]	@ (8002e94 <xPortStartScheduler+0x1c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <xPortStartScheduler+0x98>
    __asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d58:	f383 8811 	msr	BASEPRI, r3
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	61bb      	str	r3, [r7, #24]
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d70:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <xPortStartScheduler+0x1c4>)
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <xPortStartScheduler+0x1c8>)
 8002d96:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002d98:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <xPortStartScheduler+0x1c8>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10b      	bne.n	8002db8 <xPortStartScheduler+0xe4>
    __asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	617b      	str	r3, [r7, #20]
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <xPortStartScheduler+0x11a>
    __asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	613b      	str	r3, [r7, #16]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df6:	2b80      	cmp	r3, #128	@ 0x80
 8002df8:	d0f1      	beq.n	8002dde <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d103      	bne.n	8002e08 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8002e00:	4b27      	ldr	r3, [pc, #156]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e004      	b.n	8002e12 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e10:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e12:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	4a21      	ldr	r2, [pc, #132]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e1a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e24:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea0 <xPortStartScheduler+0x1cc>)
 8002e26:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea4 <xPortStartScheduler+0x1d0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <xPortStartScheduler+0x1d0>)
 8002e36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e3a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ea4 <xPortStartScheduler+0x1d0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a18      	ldr	r2, [pc, #96]	@ (8002ea4 <xPortStartScheduler+0x1d0>)
 8002e42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e46:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002e48:	4b17      	ldr	r3, [pc, #92]	@ (8002ea8 <xPortStartScheduler+0x1d4>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e4e:	f000 f8e5 	bl	800301c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e52:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <xPortStartScheduler+0x1d8>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e58:	f000 f904 	bl	8003064 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <xPortStartScheduler+0x1dc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a13      	ldr	r2, [pc, #76]	@ (8002eb0 <xPortStartScheduler+0x1dc>)
 8002e62:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002e66:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e68:	f7ff ff1e 	bl	8002ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e6c:	f7fe fe5a 	bl	8001b24 <vTaskSwitchContext>
    prvTaskExitError();
 8002e70:	f7ff fed6 	bl	8002c20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3730      	adds	r7, #48	@ 0x30
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000ed00 	.word	0xe000ed00
 8002e84:	410fc271 	.word	0x410fc271
 8002e88:	410fc270 	.word	0x410fc270
 8002e8c:	e000ed08 	.word	0xe000ed08
 8002e90:	08002c81 	.word	0x08002c81
 8002e94:	08002f71 	.word	0x08002f71
 8002e98:	e000e400 	.word	0xe000e400
 8002e9c:	2000020c 	.word	0x2000020c
 8002ea0:	20000210 	.word	0x20000210
 8002ea4:	e000ed20 	.word	0xe000ed20
 8002ea8:	e000ed1c 	.word	0xe000ed1c
 8002eac:	20000004 	.word	0x20000004
 8002eb0:	e000ef34 	.word	0xe000ef34

08002eb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
    __asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	607b      	str	r3, [r7, #4]
}
 8002ecc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <vPortEnterCritical+0x5c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f10 <vPortEnterCritical+0x5c>)
 8002ed6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <vPortEnterCritical+0x5c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d110      	bne.n	8002f02 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <vPortEnterCritical+0x60>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <vPortEnterCritical+0x4e>
    __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	603b      	str	r3, [r7, #0]
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	e7fd      	b.n	8002efe <vPortEnterCritical+0x4a>
    }
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000004 	.word	0x20000004
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <vPortExitCritical+0x50>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <vPortExitCritical+0x26>
    __asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	607b      	str	r3, [r7, #4]
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <vPortExitCritical+0x50>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	4a08      	ldr	r2, [pc, #32]	@ (8002f68 <vPortExitCritical+0x50>)
 8002f46:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f48:	4b07      	ldr	r3, [pc, #28]	@ (8002f68 <vPortExitCritical+0x50>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <vPortExitCritical+0x44>
 8002f50:	2300      	movs	r3, #0
 8002f52:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8002f5a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	20000004 	.word	0x20000004
 8002f6c:	00000000 	.word	0x00000000

08002f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f70:	f3ef 8009 	mrs	r0, PSP
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4b15      	ldr	r3, [pc, #84]	@ (8002fd0 <pxCurrentTCBConst>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f01e 0f10 	tst.w	lr, #16
 8002f80:	bf08      	it	eq
 8002f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	6010      	str	r0, [r2, #0]
 8002f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002f94:	f380 8811 	msr	BASEPRI, r0
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f7fe fdc0 	bl	8001b24 <vTaskSwitchContext>
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f380 8811 	msr	BASEPRI, r0
 8002fac:	bc09      	pop	{r0, r3}
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb6:	f01e 0f10 	tst.w	lr, #16
 8002fba:	bf08      	it	eq
 8002fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fc0:	f380 8809 	msr	PSP, r0
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst>:
 8002fd0:	200000cc 	.word	0x200000cc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
    __asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	607b      	str	r3, [r7, #4]
}
 8002ff0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002ff2:	f7fe fc7d 	bl	80018f0 <xTaskIncrementTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <SysTick_Handler+0x40>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f383 8811 	msr	BASEPRI, r3
}
 800300e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <vPortSetupTimerInterrupt+0x38>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800302c:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <vPortSetupTimerInterrupt+0x3c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <vPortSetupTimerInterrupt+0x40>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <vPortSetupTimerInterrupt+0x44>)
 800303a:	3b01      	subs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800303e:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010
 8003054:	e000e018 	.word	0xe000e018
 8003058:	20000008 	.word	0x20000008
 800305c:	10624dd3 	.word	0x10624dd3
 8003060:	e000e014 	.word	0xe000e014

08003064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003074 <vPortEnableVFP+0x10>
 8003068:	6801      	ldr	r1, [r0, #0]
 800306a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800306e:	6001      	str	r1, [r0, #0]
 8003070:	4770      	bx	lr
 8003072:	0000      	.short	0x0000
 8003074:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop

0800307c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08e      	sub	sp, #56	@ 0x38
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800308e:	2308      	movs	r3, #8
 8003090:	43db      	mvns	r3, r3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d81b      	bhi.n	80030d0 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003098:	2208      	movs	r2, #8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d014      	beq.n	80030d4 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	f1c3 0308 	rsb	r3, r3, #8
 80030b4:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	43db      	mvns	r3, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d804      	bhi.n	80030ca <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	4413      	add	r3, r2
 80030c6:	607b      	str	r3, [r7, #4]
 80030c8:	e004      	b.n	80030d4 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	e001      	b.n	80030d4 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80030d4:	f7fe fae6 	bl	80016a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80030d8:	4b7a      	ldr	r3, [pc, #488]	@ (80032c4 <pvPortMalloc+0x248>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80030e0:	f000 f978 	bl	80033d4 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f2c0 80d3 	blt.w	8003292 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80cf 	beq.w	8003292 <pvPortMalloc+0x216>
 80030f4:	4b74      	ldr	r3, [pc, #464]	@ (80032c8 <pvPortMalloc+0x24c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	f200 80c9 	bhi.w	8003292 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003100:	4b72      	ldr	r3, [pc, #456]	@ (80032cc <pvPortMalloc+0x250>)
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003104:	4b71      	ldr	r3, [pc, #452]	@ (80032cc <pvPortMalloc+0x250>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800310a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310c:	4a70      	ldr	r2, [pc, #448]	@ (80032d0 <pvPortMalloc+0x254>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d305      	bcc.n	800311e <pvPortMalloc+0xa2>
 8003112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003114:	4a6f      	ldr	r2, [pc, #444]	@ (80032d4 <pvPortMalloc+0x258>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d801      	bhi.n	800311e <pvPortMalloc+0xa2>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <pvPortMalloc+0xa4>
 800311e:	2300      	movs	r3, #0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d129      	bne.n	8003178 <pvPortMalloc+0xfc>
    __asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	623b      	str	r3, [r7, #32]
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 800313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003148:	4a61      	ldr	r2, [pc, #388]	@ (80032d0 <pvPortMalloc+0x254>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d305      	bcc.n	800315a <pvPortMalloc+0xde>
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <pvPortMalloc+0x258>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d801      	bhi.n	800315a <pvPortMalloc+0xde>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <pvPortMalloc+0xe0>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <pvPortMalloc+0xfc>
    __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	61fb      	str	r3, [r7, #28]
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	429a      	cmp	r2, r3
 8003180:	d903      	bls.n	800318a <pvPortMalloc+0x10e>
 8003182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1d8      	bne.n	800313c <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800318a:	4b4e      	ldr	r3, [pc, #312]	@ (80032c4 <pvPortMalloc+0x248>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003190:	429a      	cmp	r2, r3
 8003192:	d07e      	beq.n	8003292 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2208      	movs	r2, #8
 800319a:	4413      	add	r3, r2
 800319c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800319e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a0:	4a4b      	ldr	r2, [pc, #300]	@ (80032d0 <pvPortMalloc+0x254>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d305      	bcc.n	80031b2 <pvPortMalloc+0x136>
 80031a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a8:	4a4a      	ldr	r2, [pc, #296]	@ (80032d4 <pvPortMalloc+0x258>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d801      	bhi.n	80031b2 <pvPortMalloc+0x136>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <pvPortMalloc+0x138>
 80031b2:	2300      	movs	r3, #0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <pvPortMalloc+0x154>
    __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	61bb      	str	r3, [r7, #24]
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80031d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d90b      	bls.n	80031fa <pvPortMalloc+0x17e>
    __asm volatile
 80031e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	617b      	str	r3, [r7, #20]
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	e7fd      	b.n	80031f6 <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	1ad2      	subs	r2, r2, r3
 8003202:	2308      	movs	r3, #8
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	429a      	cmp	r2, r3
 8003208:	d924      	bls.n	8003254 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800320a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <pvPortMalloc+0x1b8>
    __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	613b      	str	r3, [r7, #16]
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad2      	subs	r2, r2, r3
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003252:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003254:	4b1c      	ldr	r3, [pc, #112]	@ (80032c8 <pvPortMalloc+0x24c>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a1a      	ldr	r2, [pc, #104]	@ (80032c8 <pvPortMalloc+0x24c>)
 8003260:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003262:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <pvPortMalloc+0x24c>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <pvPortMalloc+0x25c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d203      	bcs.n	8003276 <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800326e:	4b16      	ldr	r3, [pc, #88]	@ (80032c8 <pvPortMalloc+0x24c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <pvPortMalloc+0x25c>)
 8003274:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800327e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003280:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003288:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <pvPortMalloc+0x260>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3301      	adds	r3, #1
 800328e:	4a13      	ldr	r2, [pc, #76]	@ (80032dc <pvPortMalloc+0x260>)
 8003290:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003292:	f7fe fa15 	bl	80016c0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <pvPortMalloc+0x23c>
    __asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	60fb      	str	r3, [r7, #12]
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <pvPortMalloc+0x238>
    return pvReturn;
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3738      	adds	r7, #56	@ 0x38
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20012e1c 	.word	0x20012e1c
 80032c8:	20012e20 	.word	0x20012e20
 80032cc:	20012e14 	.word	0x20012e14
 80032d0:	20000214 	.word	0x20000214
 80032d4:	20012e13 	.word	0x20012e13
 80032d8:	20012e24 	.word	0x20012e24
 80032dc:	20012e28 	.word	0x20012e28

080032e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d064      	beq.n	80033bc <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032f2:	2308      	movs	r3, #8
 80032f4:	425b      	negs	r3, r3
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4a30      	ldr	r2, [pc, #192]	@ (80033c4 <vPortFree+0xe4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d305      	bcc.n	8003314 <vPortFree+0x34>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <vPortFree+0xe8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d801      	bhi.n	8003314 <vPortFree+0x34>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <vPortFree+0x36>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <vPortFree+0x52>
    __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	617b      	str	r3, [r7, #20]
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	e7fd      	b.n	800332e <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <vPortFree+0x72>
    __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	613b      	str	r3, [r7, #16]
}
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	e7fd      	b.n	800334e <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <vPortFree+0x92>
    __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60fb      	str	r3, [r7, #12]
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0fdb      	lsrs	r3, r3, #31
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01c      	beq.n	80033bc <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d118      	bne.n	80033bc <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003396:	f7fe f985 	bl	80016a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <vPortFree+0xec>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <vPortFree+0xec>)
 80033a6:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033a8:	69b8      	ldr	r0, [r7, #24]
 80033aa:	f000 f86d 	bl	8003488 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <vPortFree+0xf0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	4a06      	ldr	r2, [pc, #24]	@ (80033d0 <vPortFree+0xf0>)
 80033b6:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80033b8:	f7fe f982 	bl	80016c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80033bc:	bf00      	nop
 80033be:	3720      	adds	r7, #32
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000214 	.word	0x20000214
 80033c8:	20012e13 	.word	0x20012e13
 80033cc:	20012e20 	.word	0x20012e20
 80033d0:	20012e2c 	.word	0x20012e2c

080033d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033da:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80033de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80033e0:	4b24      	ldr	r3, [pc, #144]	@ (8003474 <prvHeapInit+0xa0>)
 80033e2:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3307      	adds	r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <prvHeapInit+0xa0>)
 8003404:	4413      	add	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <prvHeapInit+0xa4>)
 800340c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800340e:	4b1a      	ldr	r3, [pc, #104]	@ (8003478 <prvHeapInit+0xa4>)
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	4413      	add	r3, r2
 800341a:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 800341c:	2208      	movs	r2, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f023 0307 	bic.w	r3, r3, #7
 800342a:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a13      	ldr	r2, [pc, #76]	@ (800347c <prvHeapInit+0xa8>)
 8003430:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <prvHeapInit+0xa8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2200      	movs	r2, #0
 8003438:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <prvHeapInit+0xa8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	1ad2      	subs	r2, r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003450:	4b0a      	ldr	r3, [pc, #40]	@ (800347c <prvHeapInit+0xa8>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <prvHeapInit+0xac>)
 800345e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <prvHeapInit+0xb0>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	20000214 	.word	0x20000214
 8003478:	20012e14 	.word	0x20012e14
 800347c:	20012e1c 	.word	0x20012e1c
 8003480:	20012e24 	.word	0x20012e24
 8003484:	20012e20 	.word	0x20012e20

08003488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003490:	4b36      	ldr	r3, [pc, #216]	@ (800356c <prvInsertBlockIntoFreeList+0xe4>)
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e002      	b.n	800349c <prvInsertBlockIntoFreeList+0x14>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d8f7      	bhi.n	8003496 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a30      	ldr	r2, [pc, #192]	@ (800356c <prvInsertBlockIntoFreeList+0xe4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d018      	beq.n	80034e0 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003570 <prvInsertBlockIntoFreeList+0xe8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d305      	bcc.n	80034c2 <prvInsertBlockIntoFreeList+0x3a>
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003574 <prvInsertBlockIntoFreeList+0xec>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d801      	bhi.n	80034c2 <prvInsertBlockIntoFreeList+0x3a>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <prvInsertBlockIntoFreeList+0x3c>
 80034c2:	2300      	movs	r3, #0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	60fb      	str	r3, [r7, #12]
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d108      	bne.n	8003504 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	441a      	add	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	441a      	add	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d118      	bne.n	800354a <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4b16      	ldr	r3, [pc, #88]	@ (8003578 <prvInsertBlockIntoFreeList+0xf0>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d00d      	beq.n	8003540 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	441a      	add	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e008      	b.n	8003552 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003540:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <prvInsertBlockIntoFreeList+0xf0>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e003      	b.n	8003552 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	429a      	cmp	r2, r3
 8003558:	d002      	beq.n	8003560 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20012e14 	.word	0x20012e14
 8003570:	20000214 	.word	0x20000214
 8003574:	20012e13 	.word	0x20012e13
 8003578:	20012e1c 	.word	0x20012e1c

0800357c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003582:	f000 fbe5 	bl	8003d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003586:	f000 f835 	bl	80035f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358a:	f000 f8c7 	bl	800371c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800358e:	f000 f89b 	bl	80036c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Before a mutex (semaphore) is used, it must be explicitly be created.
     In this example a mutex type semaphore is created */
  xMutex = xSemaphoreCreateMutex();
 8003592:	2001      	movs	r0, #1
 8003594:	f7fd f992 	bl	80008bc <xQueueCreateMutex>
 8003598:	4603      	mov	r3, r0
 800359a:	4a10      	ldr	r2, [pc, #64]	@ (80035dc <main+0x60>)
 800359c:	6013      	str	r3, [r2, #0]

  /* check the semaphore was created successfully before creating the tasks */
  if ( xMutex != NULL )
 800359e:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <main+0x60>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d018      	beq.n	80035d8 <main+0x5c>
  {
    /* Create two instances of the tasks that write from UART2.
       The string they write to is passed into the task as the task's parameter.
       The tasks are created at different priorities so some pre-emption will occur */
    xTaskCreate( prvPrintTask, "Print1", 1000, "Task 1 *************************\n\r", 1, NULL );
 80035a6:	2300      	movs	r3, #0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2301      	movs	r3, #1
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <main+0x64>)
 80035b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035b4:	490b      	ldr	r1, [pc, #44]	@ (80035e4 <main+0x68>)
 80035b6:	480c      	ldr	r0, [pc, #48]	@ (80035e8 <main+0x6c>)
 80035b8:	f7fd fe64 	bl	8001284 <xTaskCreate>
    xTaskCreate( prvPrintTask, "Print2", 1000, "Task 2 -------------------------\n\r", 2, NULL );
 80035bc:	2300      	movs	r3, #0
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2302      	movs	r3, #2
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <main+0x70>)
 80035c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80035ca:	4909      	ldr	r1, [pc, #36]	@ (80035f0 <main+0x74>)
 80035cc:	4806      	ldr	r0, [pc, #24]	@ (80035e8 <main+0x6c>)
 80035ce:	f7fd fe59 	bl	8001284 <xTaskCreate>

    /* start the scheduler so the created tasks start executing */
    vTaskStartScheduler();
 80035d2:	f7fe f823 	bl	800161c <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <main+0x5c>
 80035dc:	20012e78 	.word	0x20012e78
 80035e0:	08006a44 	.word	0x08006a44
 80035e4:	08006a68 	.word	0x08006a68
 80035e8:	080038a9 	.word	0x080038a9
 80035ec:	08006a70 	.word	0x08006a70
 80035f0:	08006a94 	.word	0x08006a94

080035f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b094      	sub	sp, #80	@ 0x50
 80035f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fa:	f107 0320 	add.w	r3, r7, #32
 80035fe:	2230      	movs	r2, #48	@ 0x30
 8003600:	2100      	movs	r1, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f002 fb5d 	bl	8005cc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <SystemClock_Config+0xcc>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <SystemClock_Config+0xcc>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	@ 0x40
 8003628:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <SystemClock_Config+0xcc>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003634:	2300      	movs	r3, #0
 8003636:	607b      	str	r3, [r7, #4]
 8003638:	4b22      	ldr	r3, [pc, #136]	@ (80036c4 <SystemClock_Config+0xd0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a21      	ldr	r2, [pc, #132]	@ (80036c4 <SystemClock_Config+0xd0>)
 800363e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b1f      	ldr	r3, [pc, #124]	@ (80036c4 <SystemClock_Config+0xd0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003650:	2302      	movs	r3, #2
 8003652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003654:	2301      	movs	r3, #1
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003658:	2310      	movs	r3, #16
 800365a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800365c:	2302      	movs	r3, #2
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003660:	2300      	movs	r3, #0
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003664:	2308      	movs	r3, #8
 8003666:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8003668:	2332      	movs	r3, #50	@ 0x32
 800366a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800366c:	2304      	movs	r3, #4
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003670:	2307      	movs	r3, #7
 8003672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fe67 	bl	800434c <HAL_RCC_OscConfig>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003684:	f000 f940 	bl	8003908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003688:	230f      	movs	r3, #15
 800368a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800369a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800369e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036a0:	f107 030c 	add.w	r3, r7, #12
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 f8c8 	bl	800483c <HAL_RCC_ClockConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036b2:	f000 f929 	bl	8003908 <Error_Handler>
  }
}
 80036b6:	bf00      	nop
 80036b8:	3750      	adds	r7, #80	@ 0x50
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000

080036c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036cc:	4b11      	ldr	r3, [pc, #68]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036ce:	4a12      	ldr	r2, [pc, #72]	@ (8003718 <MX_USART2_UART_Init+0x50>)
 80036d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036da:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036ee:	220c      	movs	r2, #12
 80036f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f2:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036f8:	4b06      	ldr	r3, [pc, #24]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036fe:	4805      	ldr	r0, [pc, #20]	@ (8003714 <MX_USART2_UART_Init+0x4c>)
 8003700:	f001 fd90 	bl	8005224 <HAL_UART_Init>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800370a:	f000 f8fd 	bl	8003908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20012e30 	.word	0x20012e30
 8003718:	40004400 	.word	0x40004400

0800371c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	@ 0x28
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b40      	ldr	r3, [pc, #256]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	4a3f      	ldr	r2, [pc, #252]	@ (8003838 <MX_GPIO_Init+0x11c>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6313      	str	r3, [r2, #48]	@ 0x30
 8003742:	4b3d      	ldr	r3, [pc, #244]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4a38      	ldr	r2, [pc, #224]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	6313      	str	r3, [r2, #48]	@ 0x30
 800375e:	4b36      	ldr	r3, [pc, #216]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b32      	ldr	r3, [pc, #200]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	4a31      	ldr	r2, [pc, #196]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003774:	f043 0308 	orr.w	r3, r3, #8
 8003778:	6313      	str	r3, [r2, #48]	@ 0x30
 800377a:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <MX_GPIO_Init+0x11c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <MX_GPIO_Init+0x11c>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003790:	f043 0304 	orr.w	r3, r3, #4
 8003794:	6313      	str	r3, [r2, #48]	@ 0x30
 8003796:	4b28      	ldr	r3, [pc, #160]	@ (8003838 <MX_GPIO_Init+0x11c>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80037a2:	2200      	movs	r2, #0
 80037a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80037a8:	4824      	ldr	r0, [pc, #144]	@ (800383c <MX_GPIO_Init+0x120>)
 80037aa:	f000 fd91 	bl	80042d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80037b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4619      	mov	r1, r3
 80037c2:	481f      	ldr	r0, [pc, #124]	@ (8003840 <MX_GPIO_Init+0x124>)
 80037c4:	f000 fbe8 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80037c8:	2304      	movs	r3, #4
 80037ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	481a      	ldr	r0, [pc, #104]	@ (8003844 <MX_GPIO_Init+0x128>)
 80037dc:	f000 fbdc 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 80037e0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80037e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e6:	2301      	movs	r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037f2:	f107 0314 	add.w	r3, r7, #20
 80037f6:	4619      	mov	r1, r3
 80037f8:	4810      	ldr	r0, [pc, #64]	@ (800383c <MX_GPIO_Init+0x120>)
 80037fa:	f000 fbcd 	bl	8003f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80037fe:	2380      	movs	r3, #128	@ 0x80
 8003800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800380e:	2306      	movs	r3, #6
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <MX_GPIO_Init+0x12c>)
 800381a:	f000 fbbd 	bl	8003f98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2106      	movs	r1, #6
 8003822:	2006      	movs	r0, #6
 8003824:	f000 fb8e 	bl	8003f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003828:	2006      	movs	r0, #6
 800382a:	f000 fba7 	bl	8003f7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800382e:	bf00      	nop
 8003830:	3728      	adds	r7, #40	@ 0x28
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40020000 	.word	0x40020000
 8003844:	40020400 	.word	0x40020400
 8003848:	40020800 	.word	0x40020800

0800384c <New_UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void New_UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
     If any other delay period was used then the code must check that xSemaphoreTake()
     returns pdTRUE before accessing the shared resource (which in this case is UART2).
     
     As noted earlier in the book, indefinite timeouts are not recommended for
     production code */
  xSemaphoreTake( xMutex, portMAX_DELAY );
 8003856:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <New_UART2_Print_Text+0x58>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f04f 31ff 	mov.w	r1, #4294967295
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fa28 	bl	8000cb4 <xQueueSemaphoreTake>
  {
    /* The following lines will only execute once the mutex has been successfully obtained.
       UART2 can be accessed freely now as only one task can have the mutex at any time. */

    /* loop through the string until null character found */
    for ( character = 0; text[ character ] != '\0'; character++ )
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e00b      	b.n	8003882 <New_UART2_Print_Text+0x36>
    {
      /* transmit current character over UART */
      HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	18d1      	adds	r1, r2, r3
 8003870:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003874:	2201      	movs	r2, #1
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f001 fd24 	bl	80052c4 <HAL_UART_Transmit>
    for ( character = 0; text[ character ] != '\0'; character++ )
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	3301      	adds	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ed      	bne.n	800386a <New_UART2_Print_Text+0x1e>
    }

    /* the mutex MUST be given back! */
  }
  xSemaphoreGive( xMutex );
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <New_UART2_Print_Text+0x58>)
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	2200      	movs	r2, #0
 8003896:	2100      	movs	r1, #0
 8003898:	f7fd f828 	bl	80008ec <xQueueGenericSend>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20012e78 	.word	0x20012e78

080038a8 <prvPrintTask>:

static void prvPrintTask( void *pvParameters )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  char *pcStringToPrint;
  const TickType_t xMaxBlockTimeTicks = 0x20;
 80038b0:	2320      	movs	r3, #32
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Two instances of this task are created.
     The string printed by the task is passed into the task using the task's parameter.
     The parameter is cast to the required type */
  pcStringToPrint = ( char * ) pvParameters;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60bb      	str	r3, [r7, #8]

  for ( ;; )
  {
    /* print out the string using the newly defined function */
    New_UART2_Print_Text( &huart2, pcStringToPrint );
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4809      	ldr	r0, [pc, #36]	@ (80038e0 <prvPrintTask+0x38>)
 80038bc:	f7ff ffc6 	bl	800384c <New_UART2_Print_Text>
    /* Wait a pseudo random time (0 to 0x1F ticks).
       Note that rand() is not necessarily reentrant, but in this case it does not really
       matter as the code does not care what value is returned.
       In a more secure application, a version of rand() that is known to be reentrant
       should be used - or calls to rand() should be protected using a critical section */
    vTaskDelay( rand() % xMaxBlockTimeTicks );
 80038c0:	f002 f8bc 	bl	8005a3c <rand>
 80038c4:	4603      	mov	r3, r0
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80038cc:	68f9      	ldr	r1, [r7, #12]
 80038ce:	fb01 f202 	mul.w	r2, r1, r2
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fe21 	bl	800151c <vTaskDelay>
    New_UART2_Print_Text( &huart2, pcStringToPrint );
 80038da:	bf00      	nop
 80038dc:	e7ec      	b.n	80038b8 <prvPrintTask+0x10>
 80038de:	bf00      	nop
 80038e0:	20012e30 	.word	0x20012e30

080038e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038f6:	f000 fa4d 	bl	8003d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40001000 	.word	0x40001000

08003908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800390c:	b672      	cpsid	i
}
 800390e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <Error_Handler+0x8>

08003914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_MspInit+0x4c>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	4a0f      	ldr	r2, [pc, #60]	@ (8003960 <HAL_MspInit+0x4c>)
 8003924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003928:	6453      	str	r3, [r2, #68]	@ 0x44
 800392a:	4b0d      	ldr	r3, [pc, #52]	@ (8003960 <HAL_MspInit+0x4c>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HAL_MspInit+0x4c>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <HAL_MspInit+0x4c>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	@ 0x40
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_MspInit+0x4c>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800

08003964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	@ 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <HAL_UART_MspInit+0x84>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d12b      	bne.n	80039de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	4b18      	ldr	r3, [pc, #96]	@ (80039ec <HAL_UART_MspInit+0x88>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HAL_UART_MspInit+0x88>)
 8003990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003994:	6413      	str	r3, [r2, #64]	@ 0x40
 8003996:	4b15      	ldr	r3, [pc, #84]	@ (80039ec <HAL_UART_MspInit+0x88>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_UART_MspInit+0x88>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	4a10      	ldr	r2, [pc, #64]	@ (80039ec <HAL_UART_MspInit+0x88>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b2:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <HAL_UART_MspInit+0x88>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039be:	230c      	movs	r3, #12
 80039c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ce:	2307      	movs	r3, #7
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d2:	f107 0314 	add.w	r3, r7, #20
 80039d6:	4619      	mov	r1, r3
 80039d8:	4805      	ldr	r0, [pc, #20]	@ (80039f0 <HAL_UART_MspInit+0x8c>)
 80039da:	f000 fadd 	bl	8003f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039de:	bf00      	nop
 80039e0:	3728      	adds	r7, #40	@ 0x28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40020000 	.word	0x40020000

080039f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	4b33      	ldr	r3, [pc, #204]	@ (8003ad8 <HAL_InitTick+0xe4>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	4a32      	ldr	r2, [pc, #200]	@ (8003ad8 <HAL_InitTick+0xe4>)
 8003a0e:	f043 0310 	orr.w	r3, r3, #16
 8003a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a14:	4b30      	ldr	r3, [pc, #192]	@ (8003ad8 <HAL_InitTick+0xe4>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f926 	bl	8004c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a3a:	f001 f8f7 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8003a3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a40:	e004      	b.n	8003a4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a42:	f001 f8f3 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8003a46:	4603      	mov	r3, r0
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	4a23      	ldr	r2, [pc, #140]	@ (8003adc <HAL_InitTick+0xe8>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0c9b      	lsrs	r3, r3, #18
 8003a56:	3b01      	subs	r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ae4 <HAL_InitTick+0xf0>)
 8003a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a80:	4817      	ldr	r0, [pc, #92]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a82:	f001 f92d 	bl	8004ce0 <HAL_TIM_Base_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11b      	bne.n	8003acc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a94:	4812      	ldr	r0, [pc, #72]	@ (8003ae0 <HAL_InitTick+0xec>)
 8003a96:	f001 f97d 	bl	8004d94 <HAL_TIM_Base_Start_IT>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aa8:	2036      	movs	r0, #54	@ 0x36
 8003aaa:	f000 fa67 	bl	8003f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b0f      	cmp	r3, #15
 8003ab2:	d808      	bhi.n	8003ac6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	2036      	movs	r0, #54	@ 0x36
 8003aba:	f000 fa43 	bl	8003f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003abe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <HAL_InitTick+0xf4>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e002      	b.n	8003acc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003acc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3738      	adds	r7, #56	@ 0x38
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	431bde83 	.word	0x431bde83
 8003ae0:	20012e7c 	.word	0x20012e7c
 8003ae4:	40001000 	.word	0x40001000
 8003ae8:	2000000c 	.word	0x2000000c

08003aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <NMI_Handler+0x4>

08003af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <HardFault_Handler+0x4>

08003afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <MemManage_Handler+0x4>

08003b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <BusFault_Handler+0x4>

08003b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <UsageFault_Handler+0x4>

08003b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f000 fbec 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* callback added manually here since the EXTI0
     interrupt is generated by SW. Otherwise the
     callback won't be called because the GPIO_PIN_0's
     state evaluates to RESET */
  HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f000 fc01 	bl	8004334 <HAL_GPIO_EXTI_Callback>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b3c:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <TIM6_DAC_IRQHandler+0x10>)
 8003b3e:	f001 f999 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20012e7c 	.word	0x20012e7c

08003b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return 1;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_kill>:

int _kill(int pid, int sig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b66:	f002 f8fb 	bl	8005d60 <__errno>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2216      	movs	r2, #22
 8003b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_exit>:

void _exit (int status)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b84:	f04f 31ff 	mov.w	r1, #4294967295
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ffe7 	bl	8003b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <_exit+0x12>

08003b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e00a      	b.n	8003bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	4601      	mov	r1, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	60ba      	str	r2, [r7, #8]
 8003bb0:	b2ca      	uxtb	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	dbf0      	blt.n	8003ba4 <_read+0x12>
  }

  return len;
 8003bc2:	687b      	ldr	r3, [r7, #4]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e009      	b.n	8003bf2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	60ba      	str	r2, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	dbf1      	blt.n	8003bde <_write+0x12>
  }
  return len;
 8003bfa:	687b      	ldr	r3, [r7, #4]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_close>:

int _close(int file)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c2c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_isatty>:

int _isatty(int file)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c44:	2301      	movs	r3, #1
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c74:	4a14      	ldr	r2, [pc, #80]	@ (8003cc8 <_sbrk+0x5c>)
 8003c76:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <_sbrk+0x60>)
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c80:	4b13      	ldr	r3, [pc, #76]	@ (8003cd0 <_sbrk+0x64>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <_sbrk+0x64>)
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <_sbrk+0x68>)
 8003c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <_sbrk+0x64>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d207      	bcs.n	8003cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c9c:	f002 f860 	bl	8005d60 <__errno>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	220c      	movs	r2, #12
 8003ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	e009      	b.n	8003cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <_sbrk+0x64>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <_sbrk+0x64>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	4a05      	ldr	r2, [pc, #20]	@ (8003cd0 <_sbrk+0x64>)
 8003cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20020000 	.word	0x20020000
 8003ccc:	00000400 	.word	0x00000400
 8003cd0:	20012ec4 	.word	0x20012ec4
 8003cd4:	20013018 	.word	0x20013018

08003cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cdc:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <SystemInit+0x20>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ce2:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <SystemInit+0x20>)
 8003ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d00:	f7ff ffea 	bl	8003cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d04:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d06:	490d      	ldr	r1, [pc, #52]	@ (8003d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d08:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d0c:	e002      	b.n	8003d14 <LoopCopyDataInit>

08003d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d12:	3304      	adds	r3, #4

08003d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d18:	d3f9      	bcc.n	8003d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8003d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d20:	e001      	b.n	8003d26 <LoopFillZerobss>

08003d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d24:	3204      	adds	r2, #4

08003d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d28:	d3fb      	bcc.n	8003d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f002 f81f 	bl	8005d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2e:	f7ff fc25 	bl	800357c <main>
  bx  lr    
 8003d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003d40:	08006ba4 	.word	0x08006ba4
  ldr r2, =_sbss
 8003d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003d48:	20013018 	.word	0x20013018

08003d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC_IRQHandler>
	...

08003d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d54:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0d      	ldr	r2, [pc, #52]	@ (8003d90 <HAL_Init+0x40>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d60:	4b0b      	ldr	r3, [pc, #44]	@ (8003d90 <HAL_Init+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <HAL_Init+0x40>)
 8003d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d6c:	4b08      	ldr	r3, [pc, #32]	@ (8003d90 <HAL_Init+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a07      	ldr	r2, [pc, #28]	@ (8003d90 <HAL_Init+0x40>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d78:	2003      	movs	r0, #3
 8003d7a:	f000 f8d8 	bl	8003f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7ff fe38 	bl	80039f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d84:	f7ff fdc6 	bl	8003914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00

08003d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d98:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <HAL_IncTick+0x20>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_IncTick+0x24>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	4a04      	ldr	r2, [pc, #16]	@ (8003db8 <HAL_IncTick+0x24>)
 8003da6:	6013      	str	r3, [r2, #0]
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000010 	.word	0x20000010
 8003db8:	20012ec8 	.word	0x20012ec8

08003dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	@ (8003dd0 <HAL_GetTick+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20012ec8 	.word	0x20012ec8

08003dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e06:	4a04      	ldr	r2, [pc, #16]	@ (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	60d3      	str	r3, [r2, #12]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4907      	ldr	r1, [pc, #28]	@ (8003e70 <__NVIC_EnableIRQ+0x38>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	@ (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	@ (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f1c3 0307 	rsb	r3, r3, #7
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf28      	it	cs
 8003ee6:	2304      	movcs	r3, #4
 8003ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d902      	bls.n	8003ef8 <NVIC_EncodePriority+0x30>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3b03      	subs	r3, #3
 8003ef6:	e000      	b.n	8003efa <NVIC_EncodePriority+0x32>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	4313      	orrs	r3, r2
         );
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	@ 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff ff4c 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f3c:	bf00      	nop
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f56:	f7ff ff61 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	6978      	ldr	r0, [r7, #20]
 8003f62:	f7ff ffb1 	bl	8003ec8 <NVIC_EncodePriority>
 8003f66:	4602      	mov	r2, r0
 8003f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff80 	bl	8003e74 <__NVIC_SetPriority>
}
 8003f74:	bf00      	nop
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff54 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	@ 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e16b      	b.n	800428c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	f040 815a 	bne.w	8004286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d005      	beq.n	8003fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d130      	bne.n	800404c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004020:	2201      	movs	r2, #1
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 0201 	and.w	r2, r3, #1
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0303 	and.w	r3, r3, #3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d017      	beq.n	8004088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	2203      	movs	r2, #3
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d123      	bne.n	80040dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	08da      	lsrs	r2, r3, #3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3208      	adds	r2, #8
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	220f      	movs	r2, #15
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4013      	ands	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	08da      	lsrs	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3208      	adds	r2, #8
 80040d6:	69b9      	ldr	r1, [r7, #24]
 80040d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2203      	movs	r2, #3
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0203 	and.w	r2, r3, #3
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80b4 	beq.w	8004286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b60      	ldr	r3, [pc, #384]	@ (80042a4 <HAL_GPIO_Init+0x30c>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4a5f      	ldr	r2, [pc, #380]	@ (80042a4 <HAL_GPIO_Init+0x30c>)
 8004128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800412c:	6453      	str	r3, [r2, #68]	@ 0x44
 800412e:	4b5d      	ldr	r3, [pc, #372]	@ (80042a4 <HAL_GPIO_Init+0x30c>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800413a:	4a5b      	ldr	r2, [pc, #364]	@ (80042a8 <HAL_GPIO_Init+0x310>)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	3302      	adds	r3, #2
 8004142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	220f      	movs	r2, #15
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a52      	ldr	r2, [pc, #328]	@ (80042ac <HAL_GPIO_Init+0x314>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d02b      	beq.n	80041be <HAL_GPIO_Init+0x226>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a51      	ldr	r2, [pc, #324]	@ (80042b0 <HAL_GPIO_Init+0x318>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d025      	beq.n	80041ba <HAL_GPIO_Init+0x222>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a50      	ldr	r2, [pc, #320]	@ (80042b4 <HAL_GPIO_Init+0x31c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <HAL_GPIO_Init+0x21e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4f      	ldr	r2, [pc, #316]	@ (80042b8 <HAL_GPIO_Init+0x320>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d019      	beq.n	80041b2 <HAL_GPIO_Init+0x21a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4e      	ldr	r2, [pc, #312]	@ (80042bc <HAL_GPIO_Init+0x324>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_GPIO_Init+0x216>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a4d      	ldr	r2, [pc, #308]	@ (80042c0 <HAL_GPIO_Init+0x328>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00d      	beq.n	80041aa <HAL_GPIO_Init+0x212>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a4c      	ldr	r2, [pc, #304]	@ (80042c4 <HAL_GPIO_Init+0x32c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <HAL_GPIO_Init+0x20e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4b      	ldr	r2, [pc, #300]	@ (80042c8 <HAL_GPIO_Init+0x330>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_GPIO_Init+0x20a>
 800419e:	2307      	movs	r3, #7
 80041a0:	e00e      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041a2:	2308      	movs	r3, #8
 80041a4:	e00c      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041a6:	2306      	movs	r3, #6
 80041a8:	e00a      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041aa:	2305      	movs	r3, #5
 80041ac:	e008      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041ae:	2304      	movs	r3, #4
 80041b0:	e006      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041b2:	2303      	movs	r3, #3
 80041b4:	e004      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e002      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_GPIO_Init+0x228>
 80041be:	2300      	movs	r3, #0
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f002 0203 	and.w	r2, r2, #3
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	4093      	lsls	r3, r2
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041d0:	4935      	ldr	r1, [pc, #212]	@ (80042a8 <HAL_GPIO_Init+0x310>)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	3302      	adds	r3, #2
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041de:	4b3b      	ldr	r3, [pc, #236]	@ (80042cc <HAL_GPIO_Init+0x334>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004202:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <HAL_GPIO_Init+0x334>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004208:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <HAL_GPIO_Init+0x334>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800422c:	4a27      	ldr	r2, [pc, #156]	@ (80042cc <HAL_GPIO_Init+0x334>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004232:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <HAL_GPIO_Init+0x334>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	43db      	mvns	r3, r3
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4013      	ands	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004256:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_GPIO_Init+0x334>)
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_GPIO_Init+0x334>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004280:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <HAL_GPIO_Init+0x334>)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3301      	adds	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b0f      	cmp	r3, #15
 8004290:	f67f ae90 	bls.w	8003fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop
 8004298:	3724      	adds	r7, #36	@ 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40013800 	.word	0x40013800
 80042ac:	40020000 	.word	0x40020000
 80042b0:	40020400 	.word	0x40020400
 80042b4:	40020800 	.word	0x40020800
 80042b8:	40020c00 	.word	0x40020c00
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40021400 	.word	0x40021400
 80042c4:	40021800 	.word	0x40021800
 80042c8:	40021c00 	.word	0x40021c00
 80042cc:	40013c00 	.word	0x40013c00

080042d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]
 80042dc:	4613      	mov	r3, r2
 80042de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042e0:	787b      	ldrb	r3, [r7, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042e6:	887a      	ldrh	r2, [r7, #2]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042ec:	e003      	b.n	80042f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	041a      	lsls	r2, r3, #16
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	619a      	str	r2, [r3, #24]
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431a:	4a05      	ldr	r2, [pc, #20]	@ (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f806 	bl	8004334 <HAL_GPIO_EXTI_Callback>
  }
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40013c00 	.word	0x40013c00

08004334 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e267      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d075      	beq.n	8004456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800436a:	4b88      	ldr	r3, [pc, #544]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d00c      	beq.n	8004390 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004376:	4b85      	ldr	r3, [pc, #532]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800437e:	2b08      	cmp	r3, #8
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b82      	ldr	r3, [pc, #520]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438e:	d10b      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	4b7e      	ldr	r3, [pc, #504]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05b      	beq.n	8004454 <HAL_RCC_OscConfig+0x108>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d157      	bne.n	8004454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e242      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x74>
 80043b2:	4b76      	ldr	r3, [pc, #472]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a75      	ldr	r2, [pc, #468]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e01d      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b70      	ldr	r3, [pc, #448]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a6f      	ldr	r2, [pc, #444]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b6d      	ldr	r3, [pc, #436]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6c      	ldr	r2, [pc, #432]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e00b      	b.n	80043fc <HAL_RCC_OscConfig+0xb0>
 80043e4:	4b69      	ldr	r3, [pc, #420]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a68      	ldr	r2, [pc, #416]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4b66      	ldr	r3, [pc, #408]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7ff fcda 	bl	8003dbc <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7ff fcd6 	bl	8003dbc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e207      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800441e:	4b5b      	ldr	r3, [pc, #364]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xc0>
 800442a:	e014      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442c:	f7ff fcc6 	bl	8003dbc <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7ff fcc2 	bl	8003dbc <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b64      	cmp	r3, #100	@ 0x64
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e1f3      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004446:	4b51      	ldr	r3, [pc, #324]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0xe8>
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d063      	beq.n	800452a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004462:	4b4a      	ldr	r3, [pc, #296]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00b      	beq.n	8004486 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b47      	ldr	r3, [pc, #284]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004476:	2b08      	cmp	r3, #8
 8004478:	d11c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b44      	ldr	r3, [pc, #272]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	4b41      	ldr	r3, [pc, #260]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1c7      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800449e:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4937      	ldr	r1, [pc, #220]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	e03a      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044bc:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <HAL_RCC_OscConfig+0x244>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7ff fc7b 	bl	8003dbc <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ca:	f7ff fc77 	bl	8003dbc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1a8      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044dc:	4b2b      	ldr	r3, [pc, #172]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b28      	ldr	r3, [pc, #160]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4925      	ldr	r1, [pc, #148]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b24      	ldr	r3, [pc, #144]	@ (8004590 <HAL_RCC_OscConfig+0x244>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7ff fc5a 	bl	8003dbc <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450c:	f7ff fc56 	bl	8003dbc <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e187      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b1b      	ldr	r3, [pc, #108]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d036      	beq.n	80045a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b15      	ldr	r3, [pc, #84]	@ (8004594 <HAL_RCC_OscConfig+0x248>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7ff fc3a 	bl	8003dbc <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7ff fc36 	bl	8003dbc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e167      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800455e:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_OscConfig+0x240>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x200>
 800456a:	e01b      	b.n	80045a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <HAL_RCC_OscConfig+0x248>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7ff fc23 	bl	8003dbc <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	e00e      	b.n	8004598 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7ff fc1f 	bl	8003dbc <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d907      	bls.n	8004598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e150      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 800458c:	40023800 	.word	0x40023800
 8004590:	42470000 	.word	0x42470000
 8004594:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ea      	bne.n	800457a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8097 	beq.w	80046e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b81      	ldr	r3, [pc, #516]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	4b7d      	ldr	r3, [pc, #500]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	4a7c      	ldr	r2, [pc, #496]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045d2:	4b7a      	ldr	r3, [pc, #488]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045da:	60bb      	str	r3, [r7, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b77      	ldr	r3, [pc, #476]	@ (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d118      	bne.n	8004620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ee:	4b74      	ldr	r3, [pc, #464]	@ (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a73      	ldr	r2, [pc, #460]	@ (80047c0 <HAL_RCC_OscConfig+0x474>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fa:	f7ff fbdf 	bl	8003dbc <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7ff fbdb 	bl	8003dbc <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e10c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	4b6a      	ldr	r3, [pc, #424]	@ (80047c0 <HAL_RCC_OscConfig+0x474>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x2ea>
 8004628:	4b64      	ldr	r3, [pc, #400]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462c:	4a63      	ldr	r2, [pc, #396]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6713      	str	r3, [r2, #112]	@ 0x70
 8004634:	e01c      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b05      	cmp	r3, #5
 800463c:	d10c      	bne.n	8004658 <HAL_RCC_OscConfig+0x30c>
 800463e:	4b5f      	ldr	r3, [pc, #380]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	4a5e      	ldr	r2, [pc, #376]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	6713      	str	r3, [r2, #112]	@ 0x70
 800464a:	4b5c      	ldr	r3, [pc, #368]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	4a5b      	ldr	r2, [pc, #364]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6713      	str	r3, [r2, #112]	@ 0x70
 8004656:	e00b      	b.n	8004670 <HAL_RCC_OscConfig+0x324>
 8004658:	4b58      	ldr	r3, [pc, #352]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a57      	ldr	r2, [pc, #348]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
 8004664:	4b55      	ldr	r3, [pc, #340]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004668:	4a54      	ldr	r2, [pc, #336]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0304 	bic.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7ff fba0 	bl	8003dbc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	e00a      	b.n	8004696 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004680:	f7ff fb9c 	bl	8003dbc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e0cb      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ee      	beq.n	8004680 <HAL_RCC_OscConfig+0x334>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a4:	f7ff fb8a 	bl	8003dbc <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7ff fb86 	bl	8003dbc <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e0b5      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	4b3e      	ldr	r3, [pc, #248]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1ee      	bne.n	80046ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d105      	bne.n	80046e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d4:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	4a38      	ldr	r2, [pc, #224]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80046da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80a1 	beq.w	800482c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ea:	4b34      	ldr	r3, [pc, #208]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d05c      	beq.n	80047b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d141      	bne.n	8004782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fe:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7ff fb5a 	bl	8003dbc <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470c:	f7ff fb56 	bl	8003dbc <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e087      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69da      	ldr	r2, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	019b      	lsls	r3, r3, #6
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	491b      	ldr	r1, [pc, #108]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475a:	f7ff fb2f 	bl	8003dbc <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004762:	f7ff fb2b 	bl	8003dbc <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e05c      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0f0      	beq.n	8004762 <HAL_RCC_OscConfig+0x416>
 8004780:	e054      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <HAL_RCC_OscConfig+0x478>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7ff fb18 	bl	8003dbc <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004790:	f7ff fb14 	bl	8003dbc <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e045      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a2:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_RCC_OscConfig+0x470>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x444>
 80047ae:	e03d      	b.n	800482c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e038      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000
 80047c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004838 <HAL_RCC_OscConfig+0x4ec>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d028      	beq.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d121      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11a      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004800:	4293      	cmp	r3, r2
 8004802:	d111      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d107      	bne.n	8004828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d001      	beq.n	800482c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800

0800483c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0cc      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004850:	4b68      	ldr	r3, [pc, #416]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d90c      	bls.n	8004878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b65      	ldr	r3, [pc, #404]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b63      	ldr	r3, [pc, #396]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e0b8      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d020      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004890:	4b59      	ldr	r3, [pc, #356]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a58      	ldr	r2, [pc, #352]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800489a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a8:	4b53      	ldr	r3, [pc, #332]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a52      	ldr	r2, [pc, #328]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b4:	4b50      	ldr	r3, [pc, #320]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	494d      	ldr	r1, [pc, #308]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d044      	beq.n	800495c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048da:	4b47      	ldr	r3, [pc, #284]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d119      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	2b03      	cmp	r3, #3
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fa:	4b3f      	ldr	r3, [pc, #252]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e06f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490a:	4b3b      	ldr	r3, [pc, #236]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e067      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800491a:	4b37      	ldr	r3, [pc, #220]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0203 	bic.w	r2, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4934      	ldr	r1, [pc, #208]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800492c:	f7ff fa46 	bl	8003dbc <HAL_GetTick>
 8004930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	e00a      	b.n	800494a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004934:	f7ff fa42 	bl	8003dbc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e04f      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	4b2b      	ldr	r3, [pc, #172]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 020c 	and.w	r2, r3, #12
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	429a      	cmp	r2, r3
 800495a:	d1eb      	bne.n	8004934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800495c:	4b25      	ldr	r3, [pc, #148]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d20c      	bcs.n	8004984 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b20      	ldr	r3, [pc, #128]	@ (80049f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e032      	b.n	80049ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004990:	4b19      	ldr	r3, [pc, #100]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4916      	ldr	r1, [pc, #88]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ae:	4b12      	ldr	r3, [pc, #72]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	490e      	ldr	r1, [pc, #56]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049c2:	f000 f821 	bl	8004a08 <HAL_RCC_GetSysClockFreq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	490a      	ldr	r1, [pc, #40]	@ (80049fc <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	5ccb      	ldrb	r3, [r1, r3]
 80049d6:	fa22 f303 	lsr.w	r3, r2, r3
 80049da:	4a09      	ldr	r2, [pc, #36]	@ (8004a00 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049de:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCC_ClockConfig+0x1c8>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff f806 	bl	80039f4 <HAL_InitTick>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023c00 	.word	0x40023c00
 80049f8:	40023800 	.word	0x40023800
 80049fc:	08006a9c 	.word	0x08006a9c
 8004a00:	20000008 	.word	0x20000008
 8004a04:	2000000c 	.word	0x2000000c

08004a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b094      	sub	sp, #80	@ 0x50
 8004a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a14:	2300      	movs	r3, #0
 8004a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a18:	2300      	movs	r3, #0
 8004a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	4b79      	ldr	r3, [pc, #484]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 030c 	and.w	r3, r3, #12
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d00d      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x40>
 8004a2c:	2b08      	cmp	r3, #8
 8004a2e:	f200 80e1 	bhi.w	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_RCC_GetSysClockFreq+0x34>
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d003      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a3a:	e0db      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4b73      	ldr	r3, [pc, #460]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a40:	e0db      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a42:	4b73      	ldr	r3, [pc, #460]	@ (8004c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a46:	e0d8      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a48:	4b6f      	ldr	r3, [pc, #444]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a52:	4b6d      	ldr	r3, [pc, #436]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d063      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	2200      	movs	r2, #0
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a7a:	4622      	mov	r2, r4
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	f04f 0000 	mov.w	r0, #0
 8004a82:	f04f 0100 	mov.w	r1, #0
 8004a86:	0159      	lsls	r1, r3, #5
 8004a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a8c:	0150      	lsls	r0, r2, #5
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4621      	mov	r1, r4
 8004a94:	1a51      	subs	r1, r2, r1
 8004a96:	6139      	str	r1, [r7, #16]
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004aac:	4659      	mov	r1, fp
 8004aae:	018b      	lsls	r3, r1, #6
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	018a      	lsls	r2, r1, #6
 8004aba:	4651      	mov	r1, sl
 8004abc:	ebb2 0801 	subs.w	r8, r2, r1
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ada:	4690      	mov	r8, r2
 8004adc:	4699      	mov	r9, r3
 8004ade:	4623      	mov	r3, r4
 8004ae0:	eb18 0303 	adds.w	r3, r8, r3
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	462b      	mov	r3, r5
 8004ae8:	eb49 0303 	adc.w	r3, r9, r3
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004afa:	4629      	mov	r1, r5
 8004afc:	024b      	lsls	r3, r1, #9
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b04:	4621      	mov	r1, r4
 8004b06:	024a      	lsls	r2, r1, #9
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b0e:	2200      	movs	r2, #0
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b18:	f7fb fbaa 	bl	8000270 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b24:	e058      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b26:	4b38      	ldr	r3, [pc, #224]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	099b      	lsrs	r3, r3, #6
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	4611      	mov	r1, r2
 8004b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	f04f 0000 	mov.w	r0, #0
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	0159      	lsls	r1, r3, #5
 8004b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b52:	0150      	lsls	r0, r2, #5
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4641      	mov	r1, r8
 8004b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b5e:	4649      	mov	r1, r9
 8004b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b78:	ebb2 040a 	subs.w	r4, r2, sl
 8004b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	00eb      	lsls	r3, r5, #3
 8004b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	4614      	mov	r4, r2
 8004b92:	461d      	mov	r5, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	18e3      	adds	r3, r4, r3
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	eb45 0303 	adc.w	r3, r5, r3
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bae:	4629      	mov	r1, r5
 8004bb0:	028b      	lsls	r3, r1, #10
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bb8:	4621      	mov	r1, r4
 8004bba:	028a      	lsls	r2, r1, #10
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	61fa      	str	r2, [r7, #28]
 8004bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bcc:	f7fb fb50 	bl	8000270 <__aeabi_uldivmod>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3750      	adds	r7, #80	@ 0x50
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	007a1200 	.word	0x007a1200

08004c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000008 	.word	0x20000008

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff0 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	@ (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	08006aac 	.word	0x08006aac

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c58:	f7ff ffdc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4903      	ldr	r1, [pc, #12]	@ (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6a:	5ccb      	ldrb	r3, [r1, r3]
 8004c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	08006aac 	.word	0x08006aac

08004c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	220f      	movs	r2, #15
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c8c:	4b12      	ldr	r3, [pc, #72]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	@ (8004cdc <HAL_RCC_GetClockConfig+0x60>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0207 	and.w	r2, r3, #7
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40023c00 	.word	0x40023c00

08004ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e041      	b.n	8004d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f839 	bl	8004d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 f9c0 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
	...

08004d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e04e      	b.n	8004e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a23      	ldr	r2, [pc, #140]	@ (8004e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d022      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd6:	d01d      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d018      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00e      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d009      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a19      	ldr	r2, [pc, #100]	@ (8004e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x80>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a18      	ldr	r2, [pc, #96]	@ (8004e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d111      	bne.n	8004e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b06      	cmp	r3, #6
 8004e24:	d010      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0201 	orr.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	e007      	b.n	8004e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40010000 	.word	0x40010000
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800
 8004e64:	40000c00 	.word	0x40000c00
 8004e68:	40010400 	.word	0x40010400
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40001800 	.word	0x40001800

08004e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8d2 	bl	8005068 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f8c4 	bl	8005054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f8d5 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8ac 	bl	8005068 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f89e 	bl	8005054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f8af 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f886 	bl	8005068 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f878 	bl	8005054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f889 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f860 	bl	8005068 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f852 	bl	8005054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f863 	bl	800507c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0201 	mvn.w	r2, #1
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fe fc82 	bl	80038e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f906 	bl	8005210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00c      	beq.n	8005028 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f834 	bl	8005090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0220 	mvn.w	r2, #32
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8d8 	bl	80051fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a46      	ldr	r2, [pc, #280]	@ (80051d0 <TIM_Base_SetConfig+0x12c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c2:	d00f      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a43      	ldr	r2, [pc, #268]	@ (80051d4 <TIM_Base_SetConfig+0x130>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a42      	ldr	r2, [pc, #264]	@ (80051d8 <TIM_Base_SetConfig+0x134>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d007      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a41      	ldr	r2, [pc, #260]	@ (80051dc <TIM_Base_SetConfig+0x138>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d003      	beq.n	80050e4 <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a40      	ldr	r2, [pc, #256]	@ (80051e0 <TIM_Base_SetConfig+0x13c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d108      	bne.n	80050f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a35      	ldr	r2, [pc, #212]	@ (80051d0 <TIM_Base_SetConfig+0x12c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d02b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005104:	d027      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a32      	ldr	r2, [pc, #200]	@ (80051d4 <TIM_Base_SetConfig+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d023      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a31      	ldr	r2, [pc, #196]	@ (80051d8 <TIM_Base_SetConfig+0x134>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <TIM_Base_SetConfig+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2f      	ldr	r2, [pc, #188]	@ (80051e0 <TIM_Base_SetConfig+0x13c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2e      	ldr	r2, [pc, #184]	@ (80051e4 <TIM_Base_SetConfig+0x140>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <TIM_Base_SetConfig+0x144>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	@ (80051ec <TIM_Base_SetConfig+0x148>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2b      	ldr	r2, [pc, #172]	@ (80051f0 <TIM_Base_SetConfig+0x14c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <TIM_Base_SetConfig+0x150>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <TIM_Base_SetConfig+0x154>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <TIM_Base_SetConfig+0x12c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a12      	ldr	r2, [pc, #72]	@ (80051e0 <TIM_Base_SetConfig+0x13c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	611a      	str	r2, [r3, #16]
  }
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800
 80051f0:	40001800 	.word	0x40001800
 80051f4:	40001c00 	.word	0x40001c00
 80051f8:	40002000 	.word	0x40002000

080051fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e042      	b.n	80052bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fe fb8a 	bl	8003964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	@ 0x24
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f973 	bl	8005554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	@ 0x28
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	4613      	mov	r3, r2
 80052d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d175      	bne.n	80053d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <HAL_UART_Transmit+0x2c>
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e06e      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2221      	movs	r2, #33	@ 0x21
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005302:	f7fe fd5b 	bl	8003dbc <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	88fa      	ldrh	r2, [r7, #6]
 8005312:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e02e      	b.n	8005398 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	@ 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f848 	bl	80053da <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e03a      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	3302      	adds	r3, #2
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	e007      	b.n	800538a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	3301      	adds	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1cb      	bne.n	800533a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2140      	movs	r1, #64	@ 0x40
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f814 	bl	80053da <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e006      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b086      	sub	sp, #24
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ea:	e03b      	b.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d037      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f4:	f7fe fce2 	bl	8003dbc <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d302      	bcc.n	800540a <UART_WaitOnFlagUntilTimeout+0x30>
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e03a      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d023      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b80      	cmp	r3, #128	@ 0x80
 8005420:	d020      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b40      	cmp	r3, #64	@ 0x40
 8005426:	d01d      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b08      	cmp	r3, #8
 8005434:	d116      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	617b      	str	r3, [r7, #20]
 800544a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f81d 	bl	800548c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2208      	movs	r2, #8
 8005456:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e00f      	b.n	8005484 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	d0b4      	beq.n	80053ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b095      	sub	sp, #84	@ 0x54
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80054b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054bc:	e841 2300 	strex	r3, r2, [r1]
 80054c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1e5      	bne.n	8005494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	2b01      	cmp	r3, #1
 8005502:	d119      	bne.n	8005538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	60bb      	str	r3, [r7, #8]
   return(result);
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005524:	61ba      	str	r2, [r7, #24]
 8005526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6979      	ldr	r1, [r7, #20]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	613b      	str	r3, [r7, #16]
   return(result);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005546:	bf00      	nop
 8005548:	3754      	adds	r7, #84	@ 0x54
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
	...

08005554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b0c0      	sub	sp, #256	@ 0x100
 800555a:	af00      	add	r7, sp, #0
 800555c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	ea40 0301 	orr.w	r3, r0, r1
 800557c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055ac:	f021 010c 	bic.w	r1, r1, #12
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ba:	430b      	orrs	r3, r1
 80055bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	6999      	ldr	r1, [r3, #24]
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	ea40 0301 	orr.w	r3, r0, r1
 80055da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <UART_SetConfig+0x2cc>)
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d005      	beq.n	80055f4 <UART_SetConfig+0xa0>
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005824 <UART_SetConfig+0x2d0>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7ff fb2e 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 80055f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055fc:	e003      	b.n	8005606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055fe:	f7ff fb15 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8005602:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	f040 810c 	bne.w	800582c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800561e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	1891      	adds	r1, r2, r2
 800562c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800562e:	415b      	adcs	r3, r3
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005636:	4621      	mov	r1, r4
 8005638:	eb12 0801 	adds.w	r8, r2, r1
 800563c:	4629      	mov	r1, r5
 800563e:	eb43 0901 	adc.w	r9, r3, r1
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800564e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005656:	4690      	mov	r8, r2
 8005658:	4699      	mov	r9, r3
 800565a:	4623      	mov	r3, r4
 800565c:	eb18 0303 	adds.w	r3, r8, r3
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005664:	462b      	mov	r3, r5
 8005666:	eb49 0303 	adc.w	r3, r9, r3
 800566a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800567a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800567e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005682:	460b      	mov	r3, r1
 8005684:	18db      	adds	r3, r3, r3
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
 8005688:	4613      	mov	r3, r2
 800568a:	eb42 0303 	adc.w	r3, r2, r3
 800568e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005698:	f7fa fdea 	bl	8000270 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <UART_SetConfig+0x2d4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056c4:	415b      	adcs	r3, r3
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056cc:	4641      	mov	r1, r8
 80056ce:	eb12 0a01 	adds.w	sl, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0b01 	adc.w	fp, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ec:	4692      	mov	sl, r2
 80056ee:	469b      	mov	fp, r3
 80056f0:	4643      	mov	r3, r8
 80056f2:	eb1a 0303 	adds.w	r3, sl, r3
 80056f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056fa:	464b      	mov	r3, r9
 80056fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005710:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800572a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800572e:	f7fa fd9f 	bl	8000270 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4611      	mov	r1, r2
 8005738:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <UART_SetConfig+0x2d4>)
 800573a:	fba3 2301 	umull	r2, r3, r3, r1
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2264      	movs	r2, #100	@ 0x64
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	1acb      	subs	r3, r1, r3
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800574e:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005750:	fba3 2302 	umull	r2, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005768:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800576c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005778:	415b      	adcs	r3, r3
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005780:	4641      	mov	r1, r8
 8005782:	1851      	adds	r1, r2, r1
 8005784:	6339      	str	r1, [r7, #48]	@ 0x30
 8005786:	4649      	mov	r1, r9
 8005788:	414b      	adcs	r3, r1
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005798:	4659      	mov	r1, fp
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4651      	mov	r1, sl
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4642      	mov	r2, r8
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b4:	464b      	mov	r3, r9
 80057b6:	460a      	mov	r2, r1
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057d4:	460b      	mov	r3, r1
 80057d6:	18db      	adds	r3, r3, r3
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	4613      	mov	r3, r2
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057ea:	f7fa fd41 	bl	8000270 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <UART_SetConfig+0x2d4>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	@ 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	@ 0x32
 8005806:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4422      	add	r2, r4
 800581a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800581c:	e106      	b.n	8005a2c <UART_SetConfig+0x4d8>
 800581e:	bf00      	nop
 8005820:	40011000 	.word	0x40011000
 8005824:	40011400 	.word	0x40011400
 8005828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800583a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	6239      	str	r1, [r7, #32]
 8005846:	415b      	adcs	r3, r3
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800584e:	4641      	mov	r1, r8
 8005850:	1854      	adds	r4, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0501 	adc.w	r5, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005874:	464b      	mov	r3, r9
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800588a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800589a:	4629      	mov	r1, r5
 800589c:	008b      	lsls	r3, r1, #2
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a4:	4621      	mov	r1, r4
 80058a6:	008a      	lsls	r2, r1, #2
 80058a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058ac:	f7fa fce0 	bl	8000270 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4b60      	ldr	r3, [pc, #384]	@ (8005a38 <UART_SetConfig+0x4e4>)
 80058b6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	011c      	lsls	r4, r3, #4
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	61b9      	str	r1, [r7, #24]
 80058d8:	415b      	adcs	r3, r3
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6139      	str	r1, [r7, #16]
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800592a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005938:	4649      	mov	r1, r9
 800593a:	008b      	lsls	r3, r1, #2
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005942:	4641      	mov	r1, r8
 8005944:	008a      	lsls	r2, r1, #2
 8005946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800594a:	f7fa fc91 	bl	8000270 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4611      	mov	r1, r2
 8005954:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005956:	fba3 2301 	umull	r2, r3, r3, r1
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2264      	movs	r2, #100	@ 0x64
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	@ 0x32
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <UART_SetConfig+0x4e4>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005974:	441c      	add	r4, r3
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	673b      	str	r3, [r7, #112]	@ 0x70
 800597e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	415b      	adcs	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c6:	464b      	mov	r3, r9
 80059c8:	460a      	mov	r2, r1
 80059ca:	eb42 0303 	adc.w	r3, r2, r3
 80059ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059da:	667a      	str	r2, [r7, #100]	@ 0x64
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059fa:	f7fa fc39 	bl	8000270 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	@ 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	3332      	adds	r3, #50	@ 0x32
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4422      	add	r2, r4
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	51eb851f 	.word	0x51eb851f

08005a3c <rand>:
 8005a3c:	4b16      	ldr	r3, [pc, #88]	@ (8005a98 <rand+0x5c>)
 8005a3e:	b510      	push	{r4, lr}
 8005a40:	681c      	ldr	r4, [r3, #0]
 8005a42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005a44:	b9b3      	cbnz	r3, 8005a74 <rand+0x38>
 8005a46:	2018      	movs	r0, #24
 8005a48:	f000 fa2e 	bl	8005ea8 <malloc>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6320      	str	r0, [r4, #48]	@ 0x30
 8005a50:	b920      	cbnz	r0, 8005a5c <rand+0x20>
 8005a52:	4b12      	ldr	r3, [pc, #72]	@ (8005a9c <rand+0x60>)
 8005a54:	4812      	ldr	r0, [pc, #72]	@ (8005aa0 <rand+0x64>)
 8005a56:	2152      	movs	r1, #82	@ 0x52
 8005a58:	f000 f9be 	bl	8005dd8 <__assert_func>
 8005a5c:	4911      	ldr	r1, [pc, #68]	@ (8005aa4 <rand+0x68>)
 8005a5e:	4b12      	ldr	r3, [pc, #72]	@ (8005aa8 <rand+0x6c>)
 8005a60:	e9c0 1300 	strd	r1, r3, [r0]
 8005a64:	4b11      	ldr	r3, [pc, #68]	@ (8005aac <rand+0x70>)
 8005a66:	6083      	str	r3, [r0, #8]
 8005a68:	230b      	movs	r3, #11
 8005a6a:	8183      	strh	r3, [r0, #12]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	2001      	movs	r0, #1
 8005a70:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005a74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a76:	480e      	ldr	r0, [pc, #56]	@ (8005ab0 <rand+0x74>)
 8005a78:	690b      	ldr	r3, [r1, #16]
 8005a7a:	694c      	ldr	r4, [r1, #20]
 8005a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005ab4 <rand+0x78>)
 8005a7e:	4358      	muls	r0, r3
 8005a80:	fb02 0004 	mla	r0, r2, r4, r0
 8005a84:	fba3 3202 	umull	r3, r2, r3, r2
 8005a88:	3301      	adds	r3, #1
 8005a8a:	eb40 0002 	adc.w	r0, r0, r2
 8005a8e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005a92:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a96:	bd10      	pop	{r4, pc}
 8005a98:	20000020 	.word	0x20000020
 8005a9c:	08006ab4 	.word	0x08006ab4
 8005aa0:	08006acb 	.word	0x08006acb
 8005aa4:	abcd330e 	.word	0xabcd330e
 8005aa8:	e66d1234 	.word	0xe66d1234
 8005aac:	0005deec 	.word	0x0005deec
 8005ab0:	5851f42d 	.word	0x5851f42d
 8005ab4:	4c957f2d 	.word	0x4c957f2d

08005ab8 <std>:
 8005ab8:	2300      	movs	r3, #0
 8005aba:	b510      	push	{r4, lr}
 8005abc:	4604      	mov	r4, r0
 8005abe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ac6:	6083      	str	r3, [r0, #8]
 8005ac8:	8181      	strh	r1, [r0, #12]
 8005aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8005acc:	81c2      	strh	r2, [r0, #14]
 8005ace:	6183      	str	r3, [r0, #24]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	305c      	adds	r0, #92	@ 0x5c
 8005ad6:	f000 f8f4 	bl	8005cc2 <memset>
 8005ada:	4b0d      	ldr	r3, [pc, #52]	@ (8005b10 <std+0x58>)
 8005adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ade:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <std+0x5c>)
 8005ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8005b18 <std+0x60>)
 8005ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b1c <std+0x64>)
 8005ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <std+0x68>)
 8005aec:	6224      	str	r4, [r4, #32]
 8005aee:	429c      	cmp	r4, r3
 8005af0:	d006      	beq.n	8005b00 <std+0x48>
 8005af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005af6:	4294      	cmp	r4, r2
 8005af8:	d002      	beq.n	8005b00 <std+0x48>
 8005afa:	33d0      	adds	r3, #208	@ 0xd0
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d105      	bne.n	8005b0c <std+0x54>
 8005b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b08:	f000 b954 	b.w	8005db4 <__retarget_lock_init_recursive>
 8005b0c:	bd10      	pop	{r4, pc}
 8005b0e:	bf00      	nop
 8005b10:	08005c3d 	.word	0x08005c3d
 8005b14:	08005c5f 	.word	0x08005c5f
 8005b18:	08005c97 	.word	0x08005c97
 8005b1c:	08005cbb 	.word	0x08005cbb
 8005b20:	20012ecc 	.word	0x20012ecc

08005b24 <stdio_exit_handler>:
 8005b24:	4a02      	ldr	r2, [pc, #8]	@ (8005b30 <stdio_exit_handler+0xc>)
 8005b26:	4903      	ldr	r1, [pc, #12]	@ (8005b34 <stdio_exit_handler+0x10>)
 8005b28:	4803      	ldr	r0, [pc, #12]	@ (8005b38 <stdio_exit_handler+0x14>)
 8005b2a:	f000 b869 	b.w	8005c00 <_fwalk_sglue>
 8005b2e:	bf00      	nop
 8005b30:	20000014 	.word	0x20000014
 8005b34:	0800611d 	.word	0x0800611d
 8005b38:	20000024 	.word	0x20000024

08005b3c <cleanup_stdio>:
 8005b3c:	6841      	ldr	r1, [r0, #4]
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <cleanup_stdio+0x34>)
 8005b40:	4299      	cmp	r1, r3
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	d001      	beq.n	8005b4c <cleanup_stdio+0x10>
 8005b48:	f000 fae8 	bl	800611c <_fflush_r>
 8005b4c:	68a1      	ldr	r1, [r4, #8]
 8005b4e:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <cleanup_stdio+0x38>)
 8005b50:	4299      	cmp	r1, r3
 8005b52:	d002      	beq.n	8005b5a <cleanup_stdio+0x1e>
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 fae1 	bl	800611c <_fflush_r>
 8005b5a:	68e1      	ldr	r1, [r4, #12]
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <cleanup_stdio+0x3c>)
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	d004      	beq.n	8005b6c <cleanup_stdio+0x30>
 8005b62:	4620      	mov	r0, r4
 8005b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b68:	f000 bad8 	b.w	800611c <_fflush_r>
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	bf00      	nop
 8005b70:	20012ecc 	.word	0x20012ecc
 8005b74:	20012f34 	.word	0x20012f34
 8005b78:	20012f9c 	.word	0x20012f9c

08005b7c <global_stdio_init.part.0>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005bac <global_stdio_init.part.0+0x30>)
 8005b80:	4c0b      	ldr	r4, [pc, #44]	@ (8005bb0 <global_stdio_init.part.0+0x34>)
 8005b82:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb4 <global_stdio_init.part.0+0x38>)
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	4620      	mov	r0, r4
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	f7ff ff94 	bl	8005ab8 <std>
 8005b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b94:	2201      	movs	r2, #1
 8005b96:	2109      	movs	r1, #9
 8005b98:	f7ff ff8e 	bl	8005ab8 <std>
 8005b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ba6:	2112      	movs	r1, #18
 8005ba8:	f7ff bf86 	b.w	8005ab8 <std>
 8005bac:	20013004 	.word	0x20013004
 8005bb0:	20012ecc 	.word	0x20012ecc
 8005bb4:	08005b25 	.word	0x08005b25

08005bb8 <__sfp_lock_acquire>:
 8005bb8:	4801      	ldr	r0, [pc, #4]	@ (8005bc0 <__sfp_lock_acquire+0x8>)
 8005bba:	f000 b8fc 	b.w	8005db6 <__retarget_lock_acquire_recursive>
 8005bbe:	bf00      	nop
 8005bc0:	2001300d 	.word	0x2001300d

08005bc4 <__sfp_lock_release>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	@ (8005bcc <__sfp_lock_release+0x8>)
 8005bc6:	f000 b8f7 	b.w	8005db8 <__retarget_lock_release_recursive>
 8005bca:	bf00      	nop
 8005bcc:	2001300d 	.word	0x2001300d

08005bd0 <__sinit>:
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	f7ff fff0 	bl	8005bb8 <__sfp_lock_acquire>
 8005bd8:	6a23      	ldr	r3, [r4, #32]
 8005bda:	b11b      	cbz	r3, 8005be4 <__sinit+0x14>
 8005bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be0:	f7ff bff0 	b.w	8005bc4 <__sfp_lock_release>
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <__sinit+0x28>)
 8005be6:	6223      	str	r3, [r4, #32]
 8005be8:	4b04      	ldr	r3, [pc, #16]	@ (8005bfc <__sinit+0x2c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1f5      	bne.n	8005bdc <__sinit+0xc>
 8005bf0:	f7ff ffc4 	bl	8005b7c <global_stdio_init.part.0>
 8005bf4:	e7f2      	b.n	8005bdc <__sinit+0xc>
 8005bf6:	bf00      	nop
 8005bf8:	08005b3d 	.word	0x08005b3d
 8005bfc:	20013004 	.word	0x20013004

08005c00 <_fwalk_sglue>:
 8005c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c04:	4607      	mov	r7, r0
 8005c06:	4688      	mov	r8, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c10:	f1b9 0901 	subs.w	r9, r9, #1
 8005c14:	d505      	bpl.n	8005c22 <_fwalk_sglue+0x22>
 8005c16:	6824      	ldr	r4, [r4, #0]
 8005c18:	2c00      	cmp	r4, #0
 8005c1a:	d1f7      	bne.n	8005c0c <_fwalk_sglue+0xc>
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c22:	89ab      	ldrh	r3, [r5, #12]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d907      	bls.n	8005c38 <_fwalk_sglue+0x38>
 8005c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	d003      	beq.n	8005c38 <_fwalk_sglue+0x38>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4638      	mov	r0, r7
 8005c34:	47c0      	blx	r8
 8005c36:	4306      	orrs	r6, r0
 8005c38:	3568      	adds	r5, #104	@ 0x68
 8005c3a:	e7e9      	b.n	8005c10 <_fwalk_sglue+0x10>

08005c3c <__sread>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	460c      	mov	r4, r1
 8005c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c44:	f000 f868 	bl	8005d18 <_read_r>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	bfab      	itete	ge
 8005c4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c50:	181b      	addge	r3, r3, r0
 8005c52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c56:	bfac      	ite	ge
 8005c58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c5a:	81a3      	strhlt	r3, [r4, #12]
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <__swrite>:
 8005c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c62:	461f      	mov	r7, r3
 8005c64:	898b      	ldrh	r3, [r1, #12]
 8005c66:	05db      	lsls	r3, r3, #23
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	d505      	bpl.n	8005c7c <__swrite+0x1e>
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	2302      	movs	r3, #2
 8005c76:	2200      	movs	r2, #0
 8005c78:	f000 f83c 	bl	8005cf4 <_lseek_r>
 8005c7c:	89a3      	ldrh	r3, [r4, #12]
 8005c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	4632      	mov	r2, r6
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c92:	f000 b853 	b.w	8005d3c <_write_r>

08005c96 <__sseek>:
 8005c96:	b510      	push	{r4, lr}
 8005c98:	460c      	mov	r4, r1
 8005c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c9e:	f000 f829 	bl	8005cf4 <_lseek_r>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	bf15      	itete	ne
 8005ca8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005caa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cb2:	81a3      	strheq	r3, [r4, #12]
 8005cb4:	bf18      	it	ne
 8005cb6:	81a3      	strhne	r3, [r4, #12]
 8005cb8:	bd10      	pop	{r4, pc}

08005cba <__sclose>:
 8005cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbe:	f000 b809 	b.w	8005cd4 <_close_r>

08005cc2 <memset>:
 8005cc2:	4402      	add	r2, r0
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d100      	bne.n	8005ccc <memset+0xa>
 8005cca:	4770      	bx	lr
 8005ccc:	f803 1b01 	strb.w	r1, [r3], #1
 8005cd0:	e7f9      	b.n	8005cc6 <memset+0x4>
	...

08005cd4 <_close_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d06      	ldr	r5, [pc, #24]	@ (8005cf0 <_close_r+0x1c>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	f7fd ff90 	bl	8003c04 <_close>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_close_r+0x1a>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_close_r+0x1a>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	20013008 	.word	0x20013008

08005cf4 <_lseek_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	@ (8005d14 <_lseek_r+0x20>)
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	602a      	str	r2, [r5, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7fd ffa5 	bl	8003c52 <_lseek>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_lseek_r+0x1e>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_lseek_r+0x1e>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	20013008 	.word	0x20013008

08005d18 <_read_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	@ (8005d38 <_read_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fd ff33 	bl	8003b92 <_read>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_read_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_read_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	20013008 	.word	0x20013008

08005d3c <_write_r>:
 8005d3c:	b538      	push	{r3, r4, r5, lr}
 8005d3e:	4d07      	ldr	r5, [pc, #28]	@ (8005d5c <_write_r+0x20>)
 8005d40:	4604      	mov	r4, r0
 8005d42:	4608      	mov	r0, r1
 8005d44:	4611      	mov	r1, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	602a      	str	r2, [r5, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f7fd ff3e 	bl	8003bcc <_write>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_write_r+0x1e>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_write_r+0x1e>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	20013008 	.word	0x20013008

08005d60 <__errno>:
 8005d60:	4b01      	ldr	r3, [pc, #4]	@ (8005d68 <__errno+0x8>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000020 	.word	0x20000020

08005d6c <__libc_init_array>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005da4 <__libc_init_array+0x38>)
 8005d70:	4c0d      	ldr	r4, [pc, #52]	@ (8005da8 <__libc_init_array+0x3c>)
 8005d72:	1b64      	subs	r4, r4, r5
 8005d74:	10a4      	asrs	r4, r4, #2
 8005d76:	2600      	movs	r6, #0
 8005d78:	42a6      	cmp	r6, r4
 8005d7a:	d109      	bne.n	8005d90 <__libc_init_array+0x24>
 8005d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dac <__libc_init_array+0x40>)
 8005d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005db0 <__libc_init_array+0x44>)
 8005d80:	f000 fe48 	bl	8006a14 <_init>
 8005d84:	1b64      	subs	r4, r4, r5
 8005d86:	10a4      	asrs	r4, r4, #2
 8005d88:	2600      	movs	r6, #0
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	d105      	bne.n	8005d9a <__libc_init_array+0x2e>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d94:	4798      	blx	r3
 8005d96:	3601      	adds	r6, #1
 8005d98:	e7ee      	b.n	8005d78 <__libc_init_array+0xc>
 8005d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9e:	4798      	blx	r3
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7f2      	b.n	8005d8a <__libc_init_array+0x1e>
 8005da4:	08006b9c 	.word	0x08006b9c
 8005da8:	08006b9c 	.word	0x08006b9c
 8005dac:	08006b9c 	.word	0x08006b9c
 8005db0:	08006ba0 	.word	0x08006ba0

08005db4 <__retarget_lock_init_recursive>:
 8005db4:	4770      	bx	lr

08005db6 <__retarget_lock_acquire_recursive>:
 8005db6:	4770      	bx	lr

08005db8 <__retarget_lock_release_recursive>:
 8005db8:	4770      	bx	lr

08005dba <memcpy>:
 8005dba:	440a      	add	r2, r1
 8005dbc:	4291      	cmp	r1, r2
 8005dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc2:	d100      	bne.n	8005dc6 <memcpy+0xc>
 8005dc4:	4770      	bx	lr
 8005dc6:	b510      	push	{r4, lr}
 8005dc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd0:	4291      	cmp	r1, r2
 8005dd2:	d1f9      	bne.n	8005dc8 <memcpy+0xe>
 8005dd4:	bd10      	pop	{r4, pc}
	...

08005dd8 <__assert_func>:
 8005dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005dda:	4614      	mov	r4, r2
 8005ddc:	461a      	mov	r2, r3
 8005dde:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <__assert_func+0x2c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4605      	mov	r5, r0
 8005de4:	68d8      	ldr	r0, [r3, #12]
 8005de6:	b954      	cbnz	r4, 8005dfe <__assert_func+0x26>
 8005de8:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <__assert_func+0x30>)
 8005dea:	461c      	mov	r4, r3
 8005dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005df0:	9100      	str	r1, [sp, #0]
 8005df2:	462b      	mov	r3, r5
 8005df4:	4905      	ldr	r1, [pc, #20]	@ (8005e0c <__assert_func+0x34>)
 8005df6:	f000 f9b9 	bl	800616c <fiprintf>
 8005dfa:	f000 f9d9 	bl	80061b0 <abort>
 8005dfe:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__assert_func+0x38>)
 8005e00:	e7f4      	b.n	8005dec <__assert_func+0x14>
 8005e02:	bf00      	nop
 8005e04:	20000020 	.word	0x20000020
 8005e08:	08006b5e 	.word	0x08006b5e
 8005e0c:	08006b30 	.word	0x08006b30
 8005e10:	08006b23 	.word	0x08006b23

08005e14 <_free_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4605      	mov	r5, r0
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	d041      	beq.n	8005ea0 <_free_r+0x8c>
 8005e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e20:	1f0c      	subs	r4, r1, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfb8      	it	lt
 8005e26:	18e4      	addlt	r4, r4, r3
 8005e28:	f000 f8e8 	bl	8005ffc <__malloc_lock>
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <_free_r+0x90>)
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	b933      	cbnz	r3, 8005e40 <_free_r+0x2c>
 8005e32:	6063      	str	r3, [r4, #4]
 8005e34:	6014      	str	r4, [r2, #0]
 8005e36:	4628      	mov	r0, r5
 8005e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e3c:	f000 b8e4 	b.w	8006008 <__malloc_unlock>
 8005e40:	42a3      	cmp	r3, r4
 8005e42:	d908      	bls.n	8005e56 <_free_r+0x42>
 8005e44:	6820      	ldr	r0, [r4, #0]
 8005e46:	1821      	adds	r1, r4, r0
 8005e48:	428b      	cmp	r3, r1
 8005e4a:	bf01      	itttt	eq
 8005e4c:	6819      	ldreq	r1, [r3, #0]
 8005e4e:	685b      	ldreq	r3, [r3, #4]
 8005e50:	1809      	addeq	r1, r1, r0
 8005e52:	6021      	streq	r1, [r4, #0]
 8005e54:	e7ed      	b.n	8005e32 <_free_r+0x1e>
 8005e56:	461a      	mov	r2, r3
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b10b      	cbz	r3, 8005e60 <_free_r+0x4c>
 8005e5c:	42a3      	cmp	r3, r4
 8005e5e:	d9fa      	bls.n	8005e56 <_free_r+0x42>
 8005e60:	6811      	ldr	r1, [r2, #0]
 8005e62:	1850      	adds	r0, r2, r1
 8005e64:	42a0      	cmp	r0, r4
 8005e66:	d10b      	bne.n	8005e80 <_free_r+0x6c>
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	4401      	add	r1, r0
 8005e6c:	1850      	adds	r0, r2, r1
 8005e6e:	4283      	cmp	r3, r0
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	d1e0      	bne.n	8005e36 <_free_r+0x22>
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	6053      	str	r3, [r2, #4]
 8005e7a:	4408      	add	r0, r1
 8005e7c:	6010      	str	r0, [r2, #0]
 8005e7e:	e7da      	b.n	8005e36 <_free_r+0x22>
 8005e80:	d902      	bls.n	8005e88 <_free_r+0x74>
 8005e82:	230c      	movs	r3, #12
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	e7d6      	b.n	8005e36 <_free_r+0x22>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	1821      	adds	r1, r4, r0
 8005e8c:	428b      	cmp	r3, r1
 8005e8e:	bf04      	itt	eq
 8005e90:	6819      	ldreq	r1, [r3, #0]
 8005e92:	685b      	ldreq	r3, [r3, #4]
 8005e94:	6063      	str	r3, [r4, #4]
 8005e96:	bf04      	itt	eq
 8005e98:	1809      	addeq	r1, r1, r0
 8005e9a:	6021      	streq	r1, [r4, #0]
 8005e9c:	6054      	str	r4, [r2, #4]
 8005e9e:	e7ca      	b.n	8005e36 <_free_r+0x22>
 8005ea0:	bd38      	pop	{r3, r4, r5, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20013014 	.word	0x20013014

08005ea8 <malloc>:
 8005ea8:	4b02      	ldr	r3, [pc, #8]	@ (8005eb4 <malloc+0xc>)
 8005eaa:	4601      	mov	r1, r0
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	f000 b825 	b.w	8005efc <_malloc_r>
 8005eb2:	bf00      	nop
 8005eb4:	20000020 	.word	0x20000020

08005eb8 <sbrk_aligned>:
 8005eb8:	b570      	push	{r4, r5, r6, lr}
 8005eba:	4e0f      	ldr	r6, [pc, #60]	@ (8005ef8 <sbrk_aligned+0x40>)
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	6831      	ldr	r1, [r6, #0]
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	b911      	cbnz	r1, 8005eca <sbrk_aligned+0x12>
 8005ec4:	f000 f964 	bl	8006190 <_sbrk_r>
 8005ec8:	6030      	str	r0, [r6, #0]
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f95f 	bl	8006190 <_sbrk_r>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d103      	bne.n	8005ede <sbrk_aligned+0x26>
 8005ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8005eda:	4620      	mov	r0, r4
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	1cc4      	adds	r4, r0, #3
 8005ee0:	f024 0403 	bic.w	r4, r4, #3
 8005ee4:	42a0      	cmp	r0, r4
 8005ee6:	d0f8      	beq.n	8005eda <sbrk_aligned+0x22>
 8005ee8:	1a21      	subs	r1, r4, r0
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f950 	bl	8006190 <_sbrk_r>
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	d1f2      	bne.n	8005eda <sbrk_aligned+0x22>
 8005ef4:	e7ef      	b.n	8005ed6 <sbrk_aligned+0x1e>
 8005ef6:	bf00      	nop
 8005ef8:	20013010 	.word	0x20013010

08005efc <_malloc_r>:
 8005efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	1ccd      	adds	r5, r1, #3
 8005f02:	f025 0503 	bic.w	r5, r5, #3
 8005f06:	3508      	adds	r5, #8
 8005f08:	2d0c      	cmp	r5, #12
 8005f0a:	bf38      	it	cc
 8005f0c:	250c      	movcc	r5, #12
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	4606      	mov	r6, r0
 8005f12:	db01      	blt.n	8005f18 <_malloc_r+0x1c>
 8005f14:	42a9      	cmp	r1, r5
 8005f16:	d904      	bls.n	8005f22 <_malloc_r+0x26>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ff8 <_malloc_r+0xfc>
 8005f26:	f000 f869 	bl	8005ffc <__malloc_lock>
 8005f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f2e:	461c      	mov	r4, r3
 8005f30:	bb44      	cbnz	r4, 8005f84 <_malloc_r+0x88>
 8005f32:	4629      	mov	r1, r5
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7ff ffbf 	bl	8005eb8 <sbrk_aligned>
 8005f3a:	1c43      	adds	r3, r0, #1
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	d158      	bne.n	8005ff2 <_malloc_r+0xf6>
 8005f40:	f8d8 4000 	ldr.w	r4, [r8]
 8005f44:	4627      	mov	r7, r4
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	d143      	bne.n	8005fd2 <_malloc_r+0xd6>
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d04b      	beq.n	8005fe6 <_malloc_r+0xea>
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	4639      	mov	r1, r7
 8005f52:	4630      	mov	r0, r6
 8005f54:	eb04 0903 	add.w	r9, r4, r3
 8005f58:	f000 f91a 	bl	8006190 <_sbrk_r>
 8005f5c:	4581      	cmp	r9, r0
 8005f5e:	d142      	bne.n	8005fe6 <_malloc_r+0xea>
 8005f60:	6821      	ldr	r1, [r4, #0]
 8005f62:	1a6d      	subs	r5, r5, r1
 8005f64:	4629      	mov	r1, r5
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ffa6 	bl	8005eb8 <sbrk_aligned>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d03a      	beq.n	8005fe6 <_malloc_r+0xea>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	442b      	add	r3, r5
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	bb62      	cbnz	r2, 8005fd8 <_malloc_r+0xdc>
 8005f7e:	f8c8 7000 	str.w	r7, [r8]
 8005f82:	e00f      	b.n	8005fa4 <_malloc_r+0xa8>
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	1b52      	subs	r2, r2, r5
 8005f88:	d420      	bmi.n	8005fcc <_malloc_r+0xd0>
 8005f8a:	2a0b      	cmp	r2, #11
 8005f8c:	d917      	bls.n	8005fbe <_malloc_r+0xc2>
 8005f8e:	1961      	adds	r1, r4, r5
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	6025      	str	r5, [r4, #0]
 8005f94:	bf18      	it	ne
 8005f96:	6059      	strne	r1, [r3, #4]
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	bf08      	it	eq
 8005f9c:	f8c8 1000 	streq.w	r1, [r8]
 8005fa0:	5162      	str	r2, [r4, r5]
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f000 f82f 	bl	8006008 <__malloc_unlock>
 8005faa:	f104 000b 	add.w	r0, r4, #11
 8005fae:	1d23      	adds	r3, r4, #4
 8005fb0:	f020 0007 	bic.w	r0, r0, #7
 8005fb4:	1ac2      	subs	r2, r0, r3
 8005fb6:	bf1c      	itt	ne
 8005fb8:	1a1b      	subne	r3, r3, r0
 8005fba:	50a3      	strne	r3, [r4, r2]
 8005fbc:	e7af      	b.n	8005f1e <_malloc_r+0x22>
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	bf0c      	ite	eq
 8005fc4:	f8c8 2000 	streq.w	r2, [r8]
 8005fc8:	605a      	strne	r2, [r3, #4]
 8005fca:	e7eb      	b.n	8005fa4 <_malloc_r+0xa8>
 8005fcc:	4623      	mov	r3, r4
 8005fce:	6864      	ldr	r4, [r4, #4]
 8005fd0:	e7ae      	b.n	8005f30 <_malloc_r+0x34>
 8005fd2:	463c      	mov	r4, r7
 8005fd4:	687f      	ldr	r7, [r7, #4]
 8005fd6:	e7b6      	b.n	8005f46 <_malloc_r+0x4a>
 8005fd8:	461a      	mov	r2, r3
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	42a3      	cmp	r3, r4
 8005fde:	d1fb      	bne.n	8005fd8 <_malloc_r+0xdc>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6053      	str	r3, [r2, #4]
 8005fe4:	e7de      	b.n	8005fa4 <_malloc_r+0xa8>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	6033      	str	r3, [r6, #0]
 8005fea:	4630      	mov	r0, r6
 8005fec:	f000 f80c 	bl	8006008 <__malloc_unlock>
 8005ff0:	e794      	b.n	8005f1c <_malloc_r+0x20>
 8005ff2:	6005      	str	r5, [r0, #0]
 8005ff4:	e7d6      	b.n	8005fa4 <_malloc_r+0xa8>
 8005ff6:	bf00      	nop
 8005ff8:	20013014 	.word	0x20013014

08005ffc <__malloc_lock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	@ (8006004 <__malloc_lock+0x8>)
 8005ffe:	f7ff beda 	b.w	8005db6 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	2001300c 	.word	0x2001300c

08006008 <__malloc_unlock>:
 8006008:	4801      	ldr	r0, [pc, #4]	@ (8006010 <__malloc_unlock+0x8>)
 800600a:	f7ff bed5 	b.w	8005db8 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	2001300c 	.word	0x2001300c

08006014 <__sflush_r>:
 8006014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601c:	0716      	lsls	r6, r2, #28
 800601e:	4605      	mov	r5, r0
 8006020:	460c      	mov	r4, r1
 8006022:	d454      	bmi.n	80060ce <__sflush_r+0xba>
 8006024:	684b      	ldr	r3, [r1, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	dc02      	bgt.n	8006030 <__sflush_r+0x1c>
 800602a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	dd48      	ble.n	80060c2 <__sflush_r+0xae>
 8006030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006032:	2e00      	cmp	r6, #0
 8006034:	d045      	beq.n	80060c2 <__sflush_r+0xae>
 8006036:	2300      	movs	r3, #0
 8006038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800603c:	682f      	ldr	r7, [r5, #0]
 800603e:	6a21      	ldr	r1, [r4, #32]
 8006040:	602b      	str	r3, [r5, #0]
 8006042:	d030      	beq.n	80060a6 <__sflush_r+0x92>
 8006044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	0759      	lsls	r1, r3, #29
 800604a:	d505      	bpl.n	8006058 <__sflush_r+0x44>
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006052:	b10b      	cbz	r3, 8006058 <__sflush_r+0x44>
 8006054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	2300      	movs	r3, #0
 800605a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800605c:	6a21      	ldr	r1, [r4, #32]
 800605e:	4628      	mov	r0, r5
 8006060:	47b0      	blx	r6
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	d106      	bne.n	8006076 <__sflush_r+0x62>
 8006068:	6829      	ldr	r1, [r5, #0]
 800606a:	291d      	cmp	r1, #29
 800606c:	d82b      	bhi.n	80060c6 <__sflush_r+0xb2>
 800606e:	4a2a      	ldr	r2, [pc, #168]	@ (8006118 <__sflush_r+0x104>)
 8006070:	410a      	asrs	r2, r1
 8006072:	07d6      	lsls	r6, r2, #31
 8006074:	d427      	bmi.n	80060c6 <__sflush_r+0xb2>
 8006076:	2200      	movs	r2, #0
 8006078:	6062      	str	r2, [r4, #4]
 800607a:	04d9      	lsls	r1, r3, #19
 800607c:	6922      	ldr	r2, [r4, #16]
 800607e:	6022      	str	r2, [r4, #0]
 8006080:	d504      	bpl.n	800608c <__sflush_r+0x78>
 8006082:	1c42      	adds	r2, r0, #1
 8006084:	d101      	bne.n	800608a <__sflush_r+0x76>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	b903      	cbnz	r3, 800608c <__sflush_r+0x78>
 800608a:	6560      	str	r0, [r4, #84]	@ 0x54
 800608c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800608e:	602f      	str	r7, [r5, #0]
 8006090:	b1b9      	cbz	r1, 80060c2 <__sflush_r+0xae>
 8006092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006096:	4299      	cmp	r1, r3
 8006098:	d002      	beq.n	80060a0 <__sflush_r+0x8c>
 800609a:	4628      	mov	r0, r5
 800609c:	f7ff feba 	bl	8005e14 <_free_r>
 80060a0:	2300      	movs	r3, #0
 80060a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80060a4:	e00d      	b.n	80060c2 <__sflush_r+0xae>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b0      	blx	r6
 80060ac:	4602      	mov	r2, r0
 80060ae:	1c50      	adds	r0, r2, #1
 80060b0:	d1c9      	bne.n	8006046 <__sflush_r+0x32>
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0c6      	beq.n	8006046 <__sflush_r+0x32>
 80060b8:	2b1d      	cmp	r3, #29
 80060ba:	d001      	beq.n	80060c0 <__sflush_r+0xac>
 80060bc:	2b16      	cmp	r3, #22
 80060be:	d11e      	bne.n	80060fe <__sflush_r+0xea>
 80060c0:	602f      	str	r7, [r5, #0]
 80060c2:	2000      	movs	r0, #0
 80060c4:	e022      	b.n	800610c <__sflush_r+0xf8>
 80060c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ca:	b21b      	sxth	r3, r3
 80060cc:	e01b      	b.n	8006106 <__sflush_r+0xf2>
 80060ce:	690f      	ldr	r7, [r1, #16]
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	d0f6      	beq.n	80060c2 <__sflush_r+0xae>
 80060d4:	0793      	lsls	r3, r2, #30
 80060d6:	680e      	ldr	r6, [r1, #0]
 80060d8:	bf08      	it	eq
 80060da:	694b      	ldreq	r3, [r1, #20]
 80060dc:	600f      	str	r7, [r1, #0]
 80060de:	bf18      	it	ne
 80060e0:	2300      	movne	r3, #0
 80060e2:	eba6 0807 	sub.w	r8, r6, r7
 80060e6:	608b      	str	r3, [r1, #8]
 80060e8:	f1b8 0f00 	cmp.w	r8, #0
 80060ec:	dde9      	ble.n	80060c2 <__sflush_r+0xae>
 80060ee:	6a21      	ldr	r1, [r4, #32]
 80060f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80060f2:	4643      	mov	r3, r8
 80060f4:	463a      	mov	r2, r7
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b0      	blx	r6
 80060fa:	2800      	cmp	r0, #0
 80060fc:	dc08      	bgt.n	8006110 <__sflush_r+0xfc>
 80060fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	f04f 30ff 	mov.w	r0, #4294967295
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006110:	4407      	add	r7, r0
 8006112:	eba8 0800 	sub.w	r8, r8, r0
 8006116:	e7e7      	b.n	80060e8 <__sflush_r+0xd4>
 8006118:	dfbffffe 	.word	0xdfbffffe

0800611c <_fflush_r>:
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	4605      	mov	r5, r0
 8006122:	460c      	mov	r4, r1
 8006124:	b913      	cbnz	r3, 800612c <_fflush_r+0x10>
 8006126:	2500      	movs	r5, #0
 8006128:	4628      	mov	r0, r5
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	b118      	cbz	r0, 8006136 <_fflush_r+0x1a>
 800612e:	6a03      	ldr	r3, [r0, #32]
 8006130:	b90b      	cbnz	r3, 8006136 <_fflush_r+0x1a>
 8006132:	f7ff fd4d 	bl	8005bd0 <__sinit>
 8006136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f3      	beq.n	8006126 <_fflush_r+0xa>
 800613e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006140:	07d0      	lsls	r0, r2, #31
 8006142:	d404      	bmi.n	800614e <_fflush_r+0x32>
 8006144:	0599      	lsls	r1, r3, #22
 8006146:	d402      	bmi.n	800614e <_fflush_r+0x32>
 8006148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800614a:	f7ff fe34 	bl	8005db6 <__retarget_lock_acquire_recursive>
 800614e:	4628      	mov	r0, r5
 8006150:	4621      	mov	r1, r4
 8006152:	f7ff ff5f 	bl	8006014 <__sflush_r>
 8006156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006158:	07da      	lsls	r2, r3, #31
 800615a:	4605      	mov	r5, r0
 800615c:	d4e4      	bmi.n	8006128 <_fflush_r+0xc>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	059b      	lsls	r3, r3, #22
 8006162:	d4e1      	bmi.n	8006128 <_fflush_r+0xc>
 8006164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006166:	f7ff fe27 	bl	8005db8 <__retarget_lock_release_recursive>
 800616a:	e7dd      	b.n	8006128 <_fflush_r+0xc>

0800616c <fiprintf>:
 800616c:	b40e      	push	{r1, r2, r3}
 800616e:	b503      	push	{r0, r1, lr}
 8006170:	4601      	mov	r1, r0
 8006172:	ab03      	add	r3, sp, #12
 8006174:	4805      	ldr	r0, [pc, #20]	@ (800618c <fiprintf+0x20>)
 8006176:	f853 2b04 	ldr.w	r2, [r3], #4
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	9301      	str	r3, [sp, #4]
 800617e:	f000 f847 	bl	8006210 <_vfiprintf_r>
 8006182:	b002      	add	sp, #8
 8006184:	f85d eb04 	ldr.w	lr, [sp], #4
 8006188:	b003      	add	sp, #12
 800618a:	4770      	bx	lr
 800618c:	20000020 	.word	0x20000020

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d06      	ldr	r5, [pc, #24]	@ (80061ac <_sbrk_r+0x1c>)
 8006194:	2300      	movs	r3, #0
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fd fd66 	bl	8003c6c <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20013008 	.word	0x20013008

080061b0 <abort>:
 80061b0:	b508      	push	{r3, lr}
 80061b2:	2006      	movs	r0, #6
 80061b4:	f000 fb8e 	bl	80068d4 <raise>
 80061b8:	2001      	movs	r0, #1
 80061ba:	f7fd fcdf 	bl	8003b7c <_exit>

080061be <__sfputc_r>:
 80061be:	6893      	ldr	r3, [r2, #8]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	b410      	push	{r4}
 80061c6:	6093      	str	r3, [r2, #8]
 80061c8:	da08      	bge.n	80061dc <__sfputc_r+0x1e>
 80061ca:	6994      	ldr	r4, [r2, #24]
 80061cc:	42a3      	cmp	r3, r4
 80061ce:	db01      	blt.n	80061d4 <__sfputc_r+0x16>
 80061d0:	290a      	cmp	r1, #10
 80061d2:	d103      	bne.n	80061dc <__sfputc_r+0x1e>
 80061d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061d8:	f000 bac0 	b.w	800675c <__swbuf_r>
 80061dc:	6813      	ldr	r3, [r2, #0]
 80061de:	1c58      	adds	r0, r3, #1
 80061e0:	6010      	str	r0, [r2, #0]
 80061e2:	7019      	strb	r1, [r3, #0]
 80061e4:	4608      	mov	r0, r1
 80061e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <__sfputs_r>:
 80061ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ee:	4606      	mov	r6, r0
 80061f0:	460f      	mov	r7, r1
 80061f2:	4614      	mov	r4, r2
 80061f4:	18d5      	adds	r5, r2, r3
 80061f6:	42ac      	cmp	r4, r5
 80061f8:	d101      	bne.n	80061fe <__sfputs_r+0x12>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e007      	b.n	800620e <__sfputs_r+0x22>
 80061fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006202:	463a      	mov	r2, r7
 8006204:	4630      	mov	r0, r6
 8006206:	f7ff ffda 	bl	80061be <__sfputc_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d1f3      	bne.n	80061f6 <__sfputs_r+0xa>
 800620e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006210 <_vfiprintf_r>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	460d      	mov	r5, r1
 8006216:	b09d      	sub	sp, #116	@ 0x74
 8006218:	4614      	mov	r4, r2
 800621a:	4698      	mov	r8, r3
 800621c:	4606      	mov	r6, r0
 800621e:	b118      	cbz	r0, 8006228 <_vfiprintf_r+0x18>
 8006220:	6a03      	ldr	r3, [r0, #32]
 8006222:	b90b      	cbnz	r3, 8006228 <_vfiprintf_r+0x18>
 8006224:	f7ff fcd4 	bl	8005bd0 <__sinit>
 8006228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	d405      	bmi.n	800623a <_vfiprintf_r+0x2a>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	059a      	lsls	r2, r3, #22
 8006232:	d402      	bmi.n	800623a <_vfiprintf_r+0x2a>
 8006234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006236:	f7ff fdbe 	bl	8005db6 <__retarget_lock_acquire_recursive>
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	071b      	lsls	r3, r3, #28
 800623e:	d501      	bpl.n	8006244 <_vfiprintf_r+0x34>
 8006240:	692b      	ldr	r3, [r5, #16]
 8006242:	b99b      	cbnz	r3, 800626c <_vfiprintf_r+0x5c>
 8006244:	4629      	mov	r1, r5
 8006246:	4630      	mov	r0, r6
 8006248:	f000 fac6 	bl	80067d8 <__swsetup_r>
 800624c:	b170      	cbz	r0, 800626c <_vfiprintf_r+0x5c>
 800624e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006250:	07dc      	lsls	r4, r3, #31
 8006252:	d504      	bpl.n	800625e <_vfiprintf_r+0x4e>
 8006254:	f04f 30ff 	mov.w	r0, #4294967295
 8006258:	b01d      	add	sp, #116	@ 0x74
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	0598      	lsls	r0, r3, #22
 8006262:	d4f7      	bmi.n	8006254 <_vfiprintf_r+0x44>
 8006264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006266:	f7ff fda7 	bl	8005db8 <__retarget_lock_release_recursive>
 800626a:	e7f3      	b.n	8006254 <_vfiprintf_r+0x44>
 800626c:	2300      	movs	r3, #0
 800626e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006270:	2320      	movs	r3, #32
 8006272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006276:	f8cd 800c 	str.w	r8, [sp, #12]
 800627a:	2330      	movs	r3, #48	@ 0x30
 800627c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800642c <_vfiprintf_r+0x21c>
 8006280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006284:	f04f 0901 	mov.w	r9, #1
 8006288:	4623      	mov	r3, r4
 800628a:	469a      	mov	sl, r3
 800628c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006290:	b10a      	cbz	r2, 8006296 <_vfiprintf_r+0x86>
 8006292:	2a25      	cmp	r2, #37	@ 0x25
 8006294:	d1f9      	bne.n	800628a <_vfiprintf_r+0x7a>
 8006296:	ebba 0b04 	subs.w	fp, sl, r4
 800629a:	d00b      	beq.n	80062b4 <_vfiprintf_r+0xa4>
 800629c:	465b      	mov	r3, fp
 800629e:	4622      	mov	r2, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffa2 	bl	80061ec <__sfputs_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	f000 80a7 	beq.w	80063fc <_vfiprintf_r+0x1ec>
 80062ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062b0:	445a      	add	r2, fp
 80062b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062b4:	f89a 3000 	ldrb.w	r3, [sl]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 809f 	beq.w	80063fc <_vfiprintf_r+0x1ec>
 80062be:	2300      	movs	r3, #0
 80062c0:	f04f 32ff 	mov.w	r2, #4294967295
 80062c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062c8:	f10a 0a01 	add.w	sl, sl, #1
 80062cc:	9304      	str	r3, [sp, #16]
 80062ce:	9307      	str	r3, [sp, #28]
 80062d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80062d6:	4654      	mov	r4, sl
 80062d8:	2205      	movs	r2, #5
 80062da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062de:	4853      	ldr	r0, [pc, #332]	@ (800642c <_vfiprintf_r+0x21c>)
 80062e0:	f7f9 ff76 	bl	80001d0 <memchr>
 80062e4:	9a04      	ldr	r2, [sp, #16]
 80062e6:	b9d8      	cbnz	r0, 8006320 <_vfiprintf_r+0x110>
 80062e8:	06d1      	lsls	r1, r2, #27
 80062ea:	bf44      	itt	mi
 80062ec:	2320      	movmi	r3, #32
 80062ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062f2:	0713      	lsls	r3, r2, #28
 80062f4:	bf44      	itt	mi
 80062f6:	232b      	movmi	r3, #43	@ 0x2b
 80062f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006300:	2b2a      	cmp	r3, #42	@ 0x2a
 8006302:	d015      	beq.n	8006330 <_vfiprintf_r+0x120>
 8006304:	9a07      	ldr	r2, [sp, #28]
 8006306:	4654      	mov	r4, sl
 8006308:	2000      	movs	r0, #0
 800630a:	f04f 0c0a 	mov.w	ip, #10
 800630e:	4621      	mov	r1, r4
 8006310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006314:	3b30      	subs	r3, #48	@ 0x30
 8006316:	2b09      	cmp	r3, #9
 8006318:	d94b      	bls.n	80063b2 <_vfiprintf_r+0x1a2>
 800631a:	b1b0      	cbz	r0, 800634a <_vfiprintf_r+0x13a>
 800631c:	9207      	str	r2, [sp, #28]
 800631e:	e014      	b.n	800634a <_vfiprintf_r+0x13a>
 8006320:	eba0 0308 	sub.w	r3, r0, r8
 8006324:	fa09 f303 	lsl.w	r3, r9, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	9304      	str	r3, [sp, #16]
 800632c:	46a2      	mov	sl, r4
 800632e:	e7d2      	b.n	80062d6 <_vfiprintf_r+0xc6>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	1d19      	adds	r1, r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	9103      	str	r1, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfbb      	ittet	lt
 800633c:	425b      	neglt	r3, r3
 800633e:	f042 0202 	orrlt.w	r2, r2, #2
 8006342:	9307      	strge	r3, [sp, #28]
 8006344:	9307      	strlt	r3, [sp, #28]
 8006346:	bfb8      	it	lt
 8006348:	9204      	strlt	r2, [sp, #16]
 800634a:	7823      	ldrb	r3, [r4, #0]
 800634c:	2b2e      	cmp	r3, #46	@ 0x2e
 800634e:	d10a      	bne.n	8006366 <_vfiprintf_r+0x156>
 8006350:	7863      	ldrb	r3, [r4, #1]
 8006352:	2b2a      	cmp	r3, #42	@ 0x2a
 8006354:	d132      	bne.n	80063bc <_vfiprintf_r+0x1ac>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	1d1a      	adds	r2, r3, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	9203      	str	r2, [sp, #12]
 800635e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006362:	3402      	adds	r4, #2
 8006364:	9305      	str	r3, [sp, #20]
 8006366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800643c <_vfiprintf_r+0x22c>
 800636a:	7821      	ldrb	r1, [r4, #0]
 800636c:	2203      	movs	r2, #3
 800636e:	4650      	mov	r0, sl
 8006370:	f7f9 ff2e 	bl	80001d0 <memchr>
 8006374:	b138      	cbz	r0, 8006386 <_vfiprintf_r+0x176>
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	eba0 000a 	sub.w	r0, r0, sl
 800637c:	2240      	movs	r2, #64	@ 0x40
 800637e:	4082      	lsls	r2, r0
 8006380:	4313      	orrs	r3, r2
 8006382:	3401      	adds	r4, #1
 8006384:	9304      	str	r3, [sp, #16]
 8006386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800638a:	4829      	ldr	r0, [pc, #164]	@ (8006430 <_vfiprintf_r+0x220>)
 800638c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006390:	2206      	movs	r2, #6
 8006392:	f7f9 ff1d 	bl	80001d0 <memchr>
 8006396:	2800      	cmp	r0, #0
 8006398:	d03f      	beq.n	800641a <_vfiprintf_r+0x20a>
 800639a:	4b26      	ldr	r3, [pc, #152]	@ (8006434 <_vfiprintf_r+0x224>)
 800639c:	bb1b      	cbnz	r3, 80063e6 <_vfiprintf_r+0x1d6>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	3307      	adds	r3, #7
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	3308      	adds	r3, #8
 80063a8:	9303      	str	r3, [sp, #12]
 80063aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ac:	443b      	add	r3, r7
 80063ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b0:	e76a      	b.n	8006288 <_vfiprintf_r+0x78>
 80063b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b6:	460c      	mov	r4, r1
 80063b8:	2001      	movs	r0, #1
 80063ba:	e7a8      	b.n	800630e <_vfiprintf_r+0xfe>
 80063bc:	2300      	movs	r3, #0
 80063be:	3401      	adds	r4, #1
 80063c0:	9305      	str	r3, [sp, #20]
 80063c2:	4619      	mov	r1, r3
 80063c4:	f04f 0c0a 	mov.w	ip, #10
 80063c8:	4620      	mov	r0, r4
 80063ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ce:	3a30      	subs	r2, #48	@ 0x30
 80063d0:	2a09      	cmp	r2, #9
 80063d2:	d903      	bls.n	80063dc <_vfiprintf_r+0x1cc>
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0c6      	beq.n	8006366 <_vfiprintf_r+0x156>
 80063d8:	9105      	str	r1, [sp, #20]
 80063da:	e7c4      	b.n	8006366 <_vfiprintf_r+0x156>
 80063dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80063e0:	4604      	mov	r4, r0
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7f0      	b.n	80063c8 <_vfiprintf_r+0x1b8>
 80063e6:	ab03      	add	r3, sp, #12
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	462a      	mov	r2, r5
 80063ec:	4b12      	ldr	r3, [pc, #72]	@ (8006438 <_vfiprintf_r+0x228>)
 80063ee:	a904      	add	r1, sp, #16
 80063f0:	4630      	mov	r0, r6
 80063f2:	f3af 8000 	nop.w
 80063f6:	4607      	mov	r7, r0
 80063f8:	1c78      	adds	r0, r7, #1
 80063fa:	d1d6      	bne.n	80063aa <_vfiprintf_r+0x19a>
 80063fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d405      	bmi.n	800640e <_vfiprintf_r+0x1fe>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d402      	bmi.n	800640e <_vfiprintf_r+0x1fe>
 8006408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800640a:	f7ff fcd5 	bl	8005db8 <__retarget_lock_release_recursive>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	065b      	lsls	r3, r3, #25
 8006412:	f53f af1f 	bmi.w	8006254 <_vfiprintf_r+0x44>
 8006416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006418:	e71e      	b.n	8006258 <_vfiprintf_r+0x48>
 800641a:	ab03      	add	r3, sp, #12
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	462a      	mov	r2, r5
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <_vfiprintf_r+0x228>)
 8006422:	a904      	add	r1, sp, #16
 8006424:	4630      	mov	r0, r6
 8006426:	f000 f879 	bl	800651c <_printf_i>
 800642a:	e7e4      	b.n	80063f6 <_vfiprintf_r+0x1e6>
 800642c:	08006b5f 	.word	0x08006b5f
 8006430:	08006b69 	.word	0x08006b69
 8006434:	00000000 	.word	0x00000000
 8006438:	080061ed 	.word	0x080061ed
 800643c:	08006b65 	.word	0x08006b65

08006440 <_printf_common>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	4616      	mov	r6, r2
 8006446:	4698      	mov	r8, r3
 8006448:	688a      	ldr	r2, [r1, #8]
 800644a:	690b      	ldr	r3, [r1, #16]
 800644c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006450:	4293      	cmp	r3, r2
 8006452:	bfb8      	it	lt
 8006454:	4613      	movlt	r3, r2
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800645c:	4607      	mov	r7, r0
 800645e:	460c      	mov	r4, r1
 8006460:	b10a      	cbz	r2, 8006466 <_printf_common+0x26>
 8006462:	3301      	adds	r3, #1
 8006464:	6033      	str	r3, [r6, #0]
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	0699      	lsls	r1, r3, #26
 800646a:	bf42      	ittt	mi
 800646c:	6833      	ldrmi	r3, [r6, #0]
 800646e:	3302      	addmi	r3, #2
 8006470:	6033      	strmi	r3, [r6, #0]
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	f015 0506 	ands.w	r5, r5, #6
 8006478:	d106      	bne.n	8006488 <_printf_common+0x48>
 800647a:	f104 0a19 	add.w	sl, r4, #25
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	6832      	ldr	r2, [r6, #0]
 8006482:	1a9b      	subs	r3, r3, r2
 8006484:	42ab      	cmp	r3, r5
 8006486:	dc26      	bgt.n	80064d6 <_printf_common+0x96>
 8006488:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	3b00      	subs	r3, #0
 8006490:	bf18      	it	ne
 8006492:	2301      	movne	r3, #1
 8006494:	0692      	lsls	r2, r2, #26
 8006496:	d42b      	bmi.n	80064f0 <_printf_common+0xb0>
 8006498:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800649c:	4641      	mov	r1, r8
 800649e:	4638      	mov	r0, r7
 80064a0:	47c8      	blx	r9
 80064a2:	3001      	adds	r0, #1
 80064a4:	d01e      	beq.n	80064e4 <_printf_common+0xa4>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	6922      	ldr	r2, [r4, #16]
 80064aa:	f003 0306 	and.w	r3, r3, #6
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	bf02      	ittt	eq
 80064b2:	68e5      	ldreq	r5, [r4, #12]
 80064b4:	6833      	ldreq	r3, [r6, #0]
 80064b6:	1aed      	subeq	r5, r5, r3
 80064b8:	68a3      	ldr	r3, [r4, #8]
 80064ba:	bf0c      	ite	eq
 80064bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064c0:	2500      	movne	r5, #0
 80064c2:	4293      	cmp	r3, r2
 80064c4:	bfc4      	itt	gt
 80064c6:	1a9b      	subgt	r3, r3, r2
 80064c8:	18ed      	addgt	r5, r5, r3
 80064ca:	2600      	movs	r6, #0
 80064cc:	341a      	adds	r4, #26
 80064ce:	42b5      	cmp	r5, r6
 80064d0:	d11a      	bne.n	8006508 <_printf_common+0xc8>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e008      	b.n	80064e8 <_printf_common+0xa8>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4652      	mov	r2, sl
 80064da:	4641      	mov	r1, r8
 80064dc:	4638      	mov	r0, r7
 80064de:	47c8      	blx	r9
 80064e0:	3001      	adds	r0, #1
 80064e2:	d103      	bne.n	80064ec <_printf_common+0xac>
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	3501      	adds	r5, #1
 80064ee:	e7c6      	b.n	800647e <_printf_common+0x3e>
 80064f0:	18e1      	adds	r1, r4, r3
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	2030      	movs	r0, #48	@ 0x30
 80064f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80064fa:	4422      	add	r2, r4
 80064fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006500:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006504:	3302      	adds	r3, #2
 8006506:	e7c7      	b.n	8006498 <_printf_common+0x58>
 8006508:	2301      	movs	r3, #1
 800650a:	4622      	mov	r2, r4
 800650c:	4641      	mov	r1, r8
 800650e:	4638      	mov	r0, r7
 8006510:	47c8      	blx	r9
 8006512:	3001      	adds	r0, #1
 8006514:	d0e6      	beq.n	80064e4 <_printf_common+0xa4>
 8006516:	3601      	adds	r6, #1
 8006518:	e7d9      	b.n	80064ce <_printf_common+0x8e>
	...

0800651c <_printf_i>:
 800651c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	7e0f      	ldrb	r7, [r1, #24]
 8006522:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006524:	2f78      	cmp	r7, #120	@ 0x78
 8006526:	4691      	mov	r9, r2
 8006528:	4680      	mov	r8, r0
 800652a:	460c      	mov	r4, r1
 800652c:	469a      	mov	sl, r3
 800652e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006532:	d807      	bhi.n	8006544 <_printf_i+0x28>
 8006534:	2f62      	cmp	r7, #98	@ 0x62
 8006536:	d80a      	bhi.n	800654e <_printf_i+0x32>
 8006538:	2f00      	cmp	r7, #0
 800653a:	f000 80d2 	beq.w	80066e2 <_printf_i+0x1c6>
 800653e:	2f58      	cmp	r7, #88	@ 0x58
 8006540:	f000 80b9 	beq.w	80066b6 <_printf_i+0x19a>
 8006544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800654c:	e03a      	b.n	80065c4 <_printf_i+0xa8>
 800654e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006552:	2b15      	cmp	r3, #21
 8006554:	d8f6      	bhi.n	8006544 <_printf_i+0x28>
 8006556:	a101      	add	r1, pc, #4	@ (adr r1, 800655c <_printf_i+0x40>)
 8006558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800655c:	080065b5 	.word	0x080065b5
 8006560:	080065c9 	.word	0x080065c9
 8006564:	08006545 	.word	0x08006545
 8006568:	08006545 	.word	0x08006545
 800656c:	08006545 	.word	0x08006545
 8006570:	08006545 	.word	0x08006545
 8006574:	080065c9 	.word	0x080065c9
 8006578:	08006545 	.word	0x08006545
 800657c:	08006545 	.word	0x08006545
 8006580:	08006545 	.word	0x08006545
 8006584:	08006545 	.word	0x08006545
 8006588:	080066c9 	.word	0x080066c9
 800658c:	080065f3 	.word	0x080065f3
 8006590:	08006683 	.word	0x08006683
 8006594:	08006545 	.word	0x08006545
 8006598:	08006545 	.word	0x08006545
 800659c:	080066eb 	.word	0x080066eb
 80065a0:	08006545 	.word	0x08006545
 80065a4:	080065f3 	.word	0x080065f3
 80065a8:	08006545 	.word	0x08006545
 80065ac:	08006545 	.word	0x08006545
 80065b0:	0800668b 	.word	0x0800668b
 80065b4:	6833      	ldr	r3, [r6, #0]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6032      	str	r2, [r6, #0]
 80065bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80065c4:	2301      	movs	r3, #1
 80065c6:	e09d      	b.n	8006704 <_printf_i+0x1e8>
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	6820      	ldr	r0, [r4, #0]
 80065cc:	1d19      	adds	r1, r3, #4
 80065ce:	6031      	str	r1, [r6, #0]
 80065d0:	0606      	lsls	r6, r0, #24
 80065d2:	d501      	bpl.n	80065d8 <_printf_i+0xbc>
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	e003      	b.n	80065e0 <_printf_i+0xc4>
 80065d8:	0645      	lsls	r5, r0, #25
 80065da:	d5fb      	bpl.n	80065d4 <_printf_i+0xb8>
 80065dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	da03      	bge.n	80065ec <_printf_i+0xd0>
 80065e4:	232d      	movs	r3, #45	@ 0x2d
 80065e6:	426d      	negs	r5, r5
 80065e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ec:	4859      	ldr	r0, [pc, #356]	@ (8006754 <_printf_i+0x238>)
 80065ee:	230a      	movs	r3, #10
 80065f0:	e011      	b.n	8006616 <_printf_i+0xfa>
 80065f2:	6821      	ldr	r1, [r4, #0]
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	0608      	lsls	r0, r1, #24
 80065f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80065fc:	d402      	bmi.n	8006604 <_printf_i+0xe8>
 80065fe:	0649      	lsls	r1, r1, #25
 8006600:	bf48      	it	mi
 8006602:	b2ad      	uxthmi	r5, r5
 8006604:	2f6f      	cmp	r7, #111	@ 0x6f
 8006606:	4853      	ldr	r0, [pc, #332]	@ (8006754 <_printf_i+0x238>)
 8006608:	6033      	str	r3, [r6, #0]
 800660a:	bf14      	ite	ne
 800660c:	230a      	movne	r3, #10
 800660e:	2308      	moveq	r3, #8
 8006610:	2100      	movs	r1, #0
 8006612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006616:	6866      	ldr	r6, [r4, #4]
 8006618:	60a6      	str	r6, [r4, #8]
 800661a:	2e00      	cmp	r6, #0
 800661c:	bfa2      	ittt	ge
 800661e:	6821      	ldrge	r1, [r4, #0]
 8006620:	f021 0104 	bicge.w	r1, r1, #4
 8006624:	6021      	strge	r1, [r4, #0]
 8006626:	b90d      	cbnz	r5, 800662c <_printf_i+0x110>
 8006628:	2e00      	cmp	r6, #0
 800662a:	d04b      	beq.n	80066c4 <_printf_i+0x1a8>
 800662c:	4616      	mov	r6, r2
 800662e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006632:	fb03 5711 	mls	r7, r3, r1, r5
 8006636:	5dc7      	ldrb	r7, [r0, r7]
 8006638:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800663c:	462f      	mov	r7, r5
 800663e:	42bb      	cmp	r3, r7
 8006640:	460d      	mov	r5, r1
 8006642:	d9f4      	bls.n	800662e <_printf_i+0x112>
 8006644:	2b08      	cmp	r3, #8
 8006646:	d10b      	bne.n	8006660 <_printf_i+0x144>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	07df      	lsls	r7, r3, #31
 800664c:	d508      	bpl.n	8006660 <_printf_i+0x144>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	6861      	ldr	r1, [r4, #4]
 8006652:	4299      	cmp	r1, r3
 8006654:	bfde      	ittt	le
 8006656:	2330      	movle	r3, #48	@ 0x30
 8006658:	f806 3c01 	strble.w	r3, [r6, #-1]
 800665c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006660:	1b92      	subs	r2, r2, r6
 8006662:	6122      	str	r2, [r4, #16]
 8006664:	f8cd a000 	str.w	sl, [sp]
 8006668:	464b      	mov	r3, r9
 800666a:	aa03      	add	r2, sp, #12
 800666c:	4621      	mov	r1, r4
 800666e:	4640      	mov	r0, r8
 8006670:	f7ff fee6 	bl	8006440 <_printf_common>
 8006674:	3001      	adds	r0, #1
 8006676:	d14a      	bne.n	800670e <_printf_i+0x1f2>
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	b004      	add	sp, #16
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	f043 0320 	orr.w	r3, r3, #32
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	4833      	ldr	r0, [pc, #204]	@ (8006758 <_printf_i+0x23c>)
 800668c:	2778      	movs	r7, #120	@ 0x78
 800668e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	6831      	ldr	r1, [r6, #0]
 8006696:	061f      	lsls	r7, r3, #24
 8006698:	f851 5b04 	ldr.w	r5, [r1], #4
 800669c:	d402      	bmi.n	80066a4 <_printf_i+0x188>
 800669e:	065f      	lsls	r7, r3, #25
 80066a0:	bf48      	it	mi
 80066a2:	b2ad      	uxthmi	r5, r5
 80066a4:	6031      	str	r1, [r6, #0]
 80066a6:	07d9      	lsls	r1, r3, #31
 80066a8:	bf44      	itt	mi
 80066aa:	f043 0320 	orrmi.w	r3, r3, #32
 80066ae:	6023      	strmi	r3, [r4, #0]
 80066b0:	b11d      	cbz	r5, 80066ba <_printf_i+0x19e>
 80066b2:	2310      	movs	r3, #16
 80066b4:	e7ac      	b.n	8006610 <_printf_i+0xf4>
 80066b6:	4827      	ldr	r0, [pc, #156]	@ (8006754 <_printf_i+0x238>)
 80066b8:	e7e9      	b.n	800668e <_printf_i+0x172>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	f023 0320 	bic.w	r3, r3, #32
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	e7f6      	b.n	80066b2 <_printf_i+0x196>
 80066c4:	4616      	mov	r6, r2
 80066c6:	e7bd      	b.n	8006644 <_printf_i+0x128>
 80066c8:	6833      	ldr	r3, [r6, #0]
 80066ca:	6825      	ldr	r5, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6030      	str	r0, [r6, #0]
 80066d2:	062e      	lsls	r6, r5, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1c0>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1c6>
 80066dc:	0668      	lsls	r0, r5, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1bc>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4616      	mov	r6, r2
 80066e8:	e7bc      	b.n	8006664 <_printf_i+0x148>
 80066ea:	6833      	ldr	r3, [r6, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	6032      	str	r2, [r6, #0]
 80066f0:	681e      	ldr	r6, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4630      	mov	r0, r6
 80066f8:	f7f9 fd6a 	bl	80001d0 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1e6>
 80066fe:	1b80      	subs	r0, r0, r6
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800670c:	e7aa      	b.n	8006664 <_printf_i+0x148>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	4632      	mov	r2, r6
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ad      	beq.n	8006678 <_printf_i+0x15c>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x22e>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a6      	b.n	800667c <_printf_i+0x160>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09d      	beq.n	8006678 <_printf_i+0x15c>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x212>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x206>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x222>
 8006752:	bf00      	nop
 8006754:	08006b70 	.word	0x08006b70
 8006758:	08006b81 	.word	0x08006b81

0800675c <__swbuf_r>:
 800675c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675e:	460e      	mov	r6, r1
 8006760:	4614      	mov	r4, r2
 8006762:	4605      	mov	r5, r0
 8006764:	b118      	cbz	r0, 800676e <__swbuf_r+0x12>
 8006766:	6a03      	ldr	r3, [r0, #32]
 8006768:	b90b      	cbnz	r3, 800676e <__swbuf_r+0x12>
 800676a:	f7ff fa31 	bl	8005bd0 <__sinit>
 800676e:	69a3      	ldr	r3, [r4, #24]
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	071a      	lsls	r2, r3, #28
 8006776:	d501      	bpl.n	800677c <__swbuf_r+0x20>
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	b943      	cbnz	r3, 800678e <__swbuf_r+0x32>
 800677c:	4621      	mov	r1, r4
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f82a 	bl	80067d8 <__swsetup_r>
 8006784:	b118      	cbz	r0, 800678e <__swbuf_r+0x32>
 8006786:	f04f 37ff 	mov.w	r7, #4294967295
 800678a:	4638      	mov	r0, r7
 800678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	6922      	ldr	r2, [r4, #16]
 8006792:	1a98      	subs	r0, r3, r2
 8006794:	6963      	ldr	r3, [r4, #20]
 8006796:	b2f6      	uxtb	r6, r6
 8006798:	4283      	cmp	r3, r0
 800679a:	4637      	mov	r7, r6
 800679c:	dc05      	bgt.n	80067aa <__swbuf_r+0x4e>
 800679e:	4621      	mov	r1, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff fcbb 	bl	800611c <_fflush_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d1ed      	bne.n	8006786 <__swbuf_r+0x2a>
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	60a3      	str	r3, [r4, #8]
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	701e      	strb	r6, [r3, #0]
 80067b8:	6962      	ldr	r2, [r4, #20]
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	429a      	cmp	r2, r3
 80067be:	d004      	beq.n	80067ca <__swbuf_r+0x6e>
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	07db      	lsls	r3, r3, #31
 80067c4:	d5e1      	bpl.n	800678a <__swbuf_r+0x2e>
 80067c6:	2e0a      	cmp	r6, #10
 80067c8:	d1df      	bne.n	800678a <__swbuf_r+0x2e>
 80067ca:	4621      	mov	r1, r4
 80067cc:	4628      	mov	r0, r5
 80067ce:	f7ff fca5 	bl	800611c <_fflush_r>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d0d9      	beq.n	800678a <__swbuf_r+0x2e>
 80067d6:	e7d6      	b.n	8006786 <__swbuf_r+0x2a>

080067d8 <__swsetup_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <__swsetup_r+0xa8>)
 80067dc:	4605      	mov	r5, r0
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	460c      	mov	r4, r1
 80067e2:	b118      	cbz	r0, 80067ec <__swsetup_r+0x14>
 80067e4:	6a03      	ldr	r3, [r0, #32]
 80067e6:	b90b      	cbnz	r3, 80067ec <__swsetup_r+0x14>
 80067e8:	f7ff f9f2 	bl	8005bd0 <__sinit>
 80067ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f0:	0719      	lsls	r1, r3, #28
 80067f2:	d422      	bmi.n	800683a <__swsetup_r+0x62>
 80067f4:	06da      	lsls	r2, r3, #27
 80067f6:	d407      	bmi.n	8006808 <__swsetup_r+0x30>
 80067f8:	2209      	movs	r2, #9
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	e033      	b.n	8006870 <__swsetup_r+0x98>
 8006808:	0758      	lsls	r0, r3, #29
 800680a:	d512      	bpl.n	8006832 <__swsetup_r+0x5a>
 800680c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800680e:	b141      	cbz	r1, 8006822 <__swsetup_r+0x4a>
 8006810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <__swsetup_r+0x46>
 8006818:	4628      	mov	r0, r5
 800681a:	f7ff fafb 	bl	8005e14 <_free_r>
 800681e:	2300      	movs	r3, #0
 8006820:	6363      	str	r3, [r4, #52]	@ 0x34
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	2300      	movs	r3, #0
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	f043 0308 	orr.w	r3, r3, #8
 8006838:	81a3      	strh	r3, [r4, #12]
 800683a:	6923      	ldr	r3, [r4, #16]
 800683c:	b94b      	cbnz	r3, 8006852 <__swsetup_r+0x7a>
 800683e:	89a3      	ldrh	r3, [r4, #12]
 8006840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006848:	d003      	beq.n	8006852 <__swsetup_r+0x7a>
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f000 f883 	bl	8006958 <__smakebuf_r>
 8006852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006856:	f013 0201 	ands.w	r2, r3, #1
 800685a:	d00a      	beq.n	8006872 <__swsetup_r+0x9a>
 800685c:	2200      	movs	r2, #0
 800685e:	60a2      	str	r2, [r4, #8]
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	4252      	negs	r2, r2
 8006864:	61a2      	str	r2, [r4, #24]
 8006866:	6922      	ldr	r2, [r4, #16]
 8006868:	b942      	cbnz	r2, 800687c <__swsetup_r+0xa4>
 800686a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800686e:	d1c5      	bne.n	80067fc <__swsetup_r+0x24>
 8006870:	bd38      	pop	{r3, r4, r5, pc}
 8006872:	0799      	lsls	r1, r3, #30
 8006874:	bf58      	it	pl
 8006876:	6962      	ldrpl	r2, [r4, #20]
 8006878:	60a2      	str	r2, [r4, #8]
 800687a:	e7f4      	b.n	8006866 <__swsetup_r+0x8e>
 800687c:	2000      	movs	r0, #0
 800687e:	e7f7      	b.n	8006870 <__swsetup_r+0x98>
 8006880:	20000020 	.word	0x20000020

08006884 <_raise_r>:
 8006884:	291f      	cmp	r1, #31
 8006886:	b538      	push	{r3, r4, r5, lr}
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	d904      	bls.n	8006898 <_raise_r+0x14>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800689a:	b112      	cbz	r2, 80068a2 <_raise_r+0x1e>
 800689c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068a0:	b94b      	cbnz	r3, 80068b6 <_raise_r+0x32>
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f830 	bl	8006908 <_getpid_r>
 80068a8:	4622      	mov	r2, r4
 80068aa:	4601      	mov	r1, r0
 80068ac:	4628      	mov	r0, r5
 80068ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b2:	f000 b817 	b.w	80068e4 <_kill_r>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00a      	beq.n	80068d0 <_raise_r+0x4c>
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	d103      	bne.n	80068c6 <_raise_r+0x42>
 80068be:	2316      	movs	r3, #22
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	e7e7      	b.n	8006896 <_raise_r+0x12>
 80068c6:	2100      	movs	r1, #0
 80068c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068cc:	4620      	mov	r0, r4
 80068ce:	4798      	blx	r3
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7e0      	b.n	8006896 <_raise_r+0x12>

080068d4 <raise>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	@ (80068e0 <raise+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f7ff bfd3 	b.w	8006884 <_raise_r>
 80068de:	bf00      	nop
 80068e0:	20000020 	.word	0x20000020

080068e4 <_kill_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	@ (8006904 <_kill_r+0x20>)
 80068e8:	2300      	movs	r3, #0
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f7fd f933 	bl	8003b5c <_kill>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d102      	bne.n	8006900 <_kill_r+0x1c>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	b103      	cbz	r3, 8006900 <_kill_r+0x1c>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	20013008 	.word	0x20013008

08006908 <_getpid_r>:
 8006908:	f7fd b920 	b.w	8003b4c <_getpid>

0800690c <__swhatbuf_r>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	2900      	cmp	r1, #0
 8006916:	b096      	sub	sp, #88	@ 0x58
 8006918:	4615      	mov	r5, r2
 800691a:	461e      	mov	r6, r3
 800691c:	da0d      	bge.n	800693a <__swhatbuf_r+0x2e>
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006924:	f04f 0100 	mov.w	r1, #0
 8006928:	bf14      	ite	ne
 800692a:	2340      	movne	r3, #64	@ 0x40
 800692c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006930:	2000      	movs	r0, #0
 8006932:	6031      	str	r1, [r6, #0]
 8006934:	602b      	str	r3, [r5, #0]
 8006936:	b016      	add	sp, #88	@ 0x58
 8006938:	bd70      	pop	{r4, r5, r6, pc}
 800693a:	466a      	mov	r2, sp
 800693c:	f000 f848 	bl	80069d0 <_fstat_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	dbec      	blt.n	800691e <__swhatbuf_r+0x12>
 8006944:	9901      	ldr	r1, [sp, #4]
 8006946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800694a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800694e:	4259      	negs	r1, r3
 8006950:	4159      	adcs	r1, r3
 8006952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006956:	e7eb      	b.n	8006930 <__swhatbuf_r+0x24>

08006958 <__smakebuf_r>:
 8006958:	898b      	ldrh	r3, [r1, #12]
 800695a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800695c:	079d      	lsls	r5, r3, #30
 800695e:	4606      	mov	r6, r0
 8006960:	460c      	mov	r4, r1
 8006962:	d507      	bpl.n	8006974 <__smakebuf_r+0x1c>
 8006964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	6123      	str	r3, [r4, #16]
 800696c:	2301      	movs	r3, #1
 800696e:	6163      	str	r3, [r4, #20]
 8006970:	b003      	add	sp, #12
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	ab01      	add	r3, sp, #4
 8006976:	466a      	mov	r2, sp
 8006978:	f7ff ffc8 	bl	800690c <__swhatbuf_r>
 800697c:	9f00      	ldr	r7, [sp, #0]
 800697e:	4605      	mov	r5, r0
 8006980:	4639      	mov	r1, r7
 8006982:	4630      	mov	r0, r6
 8006984:	f7ff faba 	bl	8005efc <_malloc_r>
 8006988:	b948      	cbnz	r0, 800699e <__smakebuf_r+0x46>
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	059a      	lsls	r2, r3, #22
 8006990:	d4ee      	bmi.n	8006970 <__smakebuf_r+0x18>
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	e7e2      	b.n	8006964 <__smakebuf_r+0xc>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	6020      	str	r0, [r4, #0]
 80069a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a6:	81a3      	strh	r3, [r4, #12]
 80069a8:	9b01      	ldr	r3, [sp, #4]
 80069aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069ae:	b15b      	cbz	r3, 80069c8 <__smakebuf_r+0x70>
 80069b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 f81d 	bl	80069f4 <_isatty_r>
 80069ba:	b128      	cbz	r0, 80069c8 <__smakebuf_r+0x70>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	431d      	orrs	r5, r3
 80069cc:	81a5      	strh	r5, [r4, #12]
 80069ce:	e7cf      	b.n	8006970 <__smakebuf_r+0x18>

080069d0 <_fstat_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4d07      	ldr	r5, [pc, #28]	@ (80069f0 <_fstat_r+0x20>)
 80069d4:	2300      	movs	r3, #0
 80069d6:	4604      	mov	r4, r0
 80069d8:	4608      	mov	r0, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	602b      	str	r3, [r5, #0]
 80069de:	f7fd f91d 	bl	8003c1c <_fstat>
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	d102      	bne.n	80069ec <_fstat_r+0x1c>
 80069e6:	682b      	ldr	r3, [r5, #0]
 80069e8:	b103      	cbz	r3, 80069ec <_fstat_r+0x1c>
 80069ea:	6023      	str	r3, [r4, #0]
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
 80069ee:	bf00      	nop
 80069f0:	20013008 	.word	0x20013008

080069f4 <_isatty_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	@ (8006a10 <_isatty_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fd f91c 	bl	8003c3c <_isatty>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_isatty_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_isatty_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	20013008 	.word	0x20013008

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
