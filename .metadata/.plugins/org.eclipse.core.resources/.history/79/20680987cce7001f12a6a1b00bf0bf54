
App_021_Example_7.1_Binary_Semaphore_Synch_Task_With_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d0  080077d0  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  080077d0  080077d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077d8  080077d8  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077d8  080077d8  000087d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077dc  080077dc  000087dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080077e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          00019918  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001992c  2001992c  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018515  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000323b  00000000  00000000  00021559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e8  00000000  00000000  00024798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001108  00000000  00000000  00025d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f07  00000000  00000000  00026e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019b93  00000000  00000000  0004bd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eba58  00000000  00000000  00065922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015137a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c34  00000000  00000000  001513c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000da  00000000  00000000  00156ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007640 	.word	0x08007640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08007640 	.word	0x08007640

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eb4 	.word	0x20012eb4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96a 	b.w	8000550 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	460c      	mov	r4, r1
 800029c:	2b00      	cmp	r3, #0
 800029e:	d14e      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a0:	4694      	mov	ip, r2
 80002a2:	458c      	cmp	ip, r1
 80002a4:	4686      	mov	lr, r0
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	d962      	bls.n	8000372 <__udivmoddi4+0xde>
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0320 	rsb	r3, r2, #32
 80002b2:	4091      	lsls	r1, r2
 80002b4:	fa20 f303 	lsr.w	r3, r0, r3
 80002b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002bc:	4319      	orrs	r1, r3
 80002be:	fa00 fe02 	lsl.w	lr, r0, r2
 80002c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002c6:	fa1f f68c 	uxth.w	r6, ip
 80002ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d2:	fb07 1114 	mls	r1, r7, r4, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb04 f106 	mul.w	r1, r4, r6
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ea:	f080 8112 	bcs.w	8000512 <__udivmoddi4+0x27e>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 810f 	bls.w	8000512 <__udivmoddi4+0x27e>
 80002f4:	3c02      	subs	r4, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a59      	subs	r1, r3, r1
 80002fa:	fa1f f38e 	uxth.w	r3, lr
 80002fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000302:	fb07 1110 	mls	r1, r7, r0, r1
 8000306:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030a:	fb00 f606 	mul.w	r6, r0, r6
 800030e:	429e      	cmp	r6, r3
 8000310:	d90a      	bls.n	8000328 <__udivmoddi4+0x94>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f100 31ff 	add.w	r1, r0, #4294967295
 800031a:	f080 80fc 	bcs.w	8000516 <__udivmoddi4+0x282>
 800031e:	429e      	cmp	r6, r3
 8000320:	f240 80f9 	bls.w	8000516 <__udivmoddi4+0x282>
 8000324:	4463      	add	r3, ip
 8000326:	3802      	subs	r0, #2
 8000328:	1b9b      	subs	r3, r3, r6
 800032a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800032e:	2100      	movs	r1, #0
 8000330:	b11d      	cbz	r5, 800033a <__udivmoddi4+0xa6>
 8000332:	40d3      	lsrs	r3, r2
 8000334:	2200      	movs	r2, #0
 8000336:	e9c5 3200 	strd	r3, r2, [r5]
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d905      	bls.n	800034e <__udivmoddi4+0xba>
 8000342:	b10d      	cbz	r5, 8000348 <__udivmoddi4+0xb4>
 8000344:	e9c5 0100 	strd	r0, r1, [r5]
 8000348:	2100      	movs	r1, #0
 800034a:	4608      	mov	r0, r1
 800034c:	e7f5      	b.n	800033a <__udivmoddi4+0xa6>
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	d146      	bne.n	80003e4 <__udivmoddi4+0x150>
 8000356:	42a3      	cmp	r3, r4
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0xcc>
 800035a:	4290      	cmp	r0, r2
 800035c:	f0c0 80f0 	bcc.w	8000540 <__udivmoddi4+0x2ac>
 8000360:	1a86      	subs	r6, r0, r2
 8000362:	eb64 0303 	sbc.w	r3, r4, r3
 8000366:	2001      	movs	r0, #1
 8000368:	2d00      	cmp	r5, #0
 800036a:	d0e6      	beq.n	800033a <__udivmoddi4+0xa6>
 800036c:	e9c5 6300 	strd	r6, r3, [r5]
 8000370:	e7e3      	b.n	800033a <__udivmoddi4+0xa6>
 8000372:	2a00      	cmp	r2, #0
 8000374:	f040 8090 	bne.w	8000498 <__udivmoddi4+0x204>
 8000378:	eba1 040c 	sub.w	r4, r1, ip
 800037c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000380:	fa1f f78c 	uxth.w	r7, ip
 8000384:	2101      	movs	r1, #1
 8000386:	fbb4 f6f8 	udiv	r6, r4, r8
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb08 4416 	mls	r4, r8, r6, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb07 f006 	mul.w	r0, r7, r6
 800039a:	4298      	cmp	r0, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x11c>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x11a>
 80003a8:	4298      	cmp	r0, r3
 80003aa:	f200 80cd 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 80003ae:	4626      	mov	r6, r4
 80003b0:	1a1c      	subs	r4, r3, r0
 80003b2:	fa1f f38e 	uxth.w	r3, lr
 80003b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ba:	fb08 4410 	mls	r4, r8, r0, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb00 f707 	mul.w	r7, r0, r7
 80003c6:	429f      	cmp	r7, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x148>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x146>
 80003d4:	429f      	cmp	r7, r3
 80003d6:	f200 80b0 	bhi.w	800053a <__udivmoddi4+0x2a6>
 80003da:	4620      	mov	r0, r4
 80003dc:	1bdb      	subs	r3, r3, r7
 80003de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e2:	e7a5      	b.n	8000330 <__udivmoddi4+0x9c>
 80003e4:	f1c1 0620 	rsb	r6, r1, #32
 80003e8:	408b      	lsls	r3, r1
 80003ea:	fa22 f706 	lsr.w	r7, r2, r6
 80003ee:	431f      	orrs	r7, r3
 80003f0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003f4:	fa04 f301 	lsl.w	r3, r4, r1
 80003f8:	ea43 030c 	orr.w	r3, r3, ip
 80003fc:	40f4      	lsrs	r4, r6
 80003fe:	fa00 f801 	lsl.w	r8, r0, r1
 8000402:	0c38      	lsrs	r0, r7, #16
 8000404:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000408:	fbb4 fef0 	udiv	lr, r4, r0
 800040c:	fa1f fc87 	uxth.w	ip, r7
 8000410:	fb00 441e 	mls	r4, r0, lr, r4
 8000414:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000418:	fb0e f90c 	mul.w	r9, lr, ip
 800041c:	45a1      	cmp	r9, r4
 800041e:	fa02 f201 	lsl.w	r2, r2, r1
 8000422:	d90a      	bls.n	800043a <__udivmoddi4+0x1a6>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f10e 3aff 	add.w	sl, lr, #4294967295
 800042a:	f080 8084 	bcs.w	8000536 <__udivmoddi4+0x2a2>
 800042e:	45a1      	cmp	r9, r4
 8000430:	f240 8081 	bls.w	8000536 <__udivmoddi4+0x2a2>
 8000434:	f1ae 0e02 	sub.w	lr, lr, #2
 8000438:	443c      	add	r4, r7
 800043a:	eba4 0409 	sub.w	r4, r4, r9
 800043e:	fa1f f983 	uxth.w	r9, r3
 8000442:	fbb4 f3f0 	udiv	r3, r4, r0
 8000446:	fb00 4413 	mls	r4, r0, r3, r4
 800044a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800044e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000452:	45a4      	cmp	ip, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x1d2>
 8000456:	193c      	adds	r4, r7, r4
 8000458:	f103 30ff 	add.w	r0, r3, #4294967295
 800045c:	d267      	bcs.n	800052e <__udivmoddi4+0x29a>
 800045e:	45a4      	cmp	ip, r4
 8000460:	d965      	bls.n	800052e <__udivmoddi4+0x29a>
 8000462:	3b02      	subs	r3, #2
 8000464:	443c      	add	r4, r7
 8000466:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800046a:	fba0 9302 	umull	r9, r3, r0, r2
 800046e:	eba4 040c 	sub.w	r4, r4, ip
 8000472:	429c      	cmp	r4, r3
 8000474:	46ce      	mov	lr, r9
 8000476:	469c      	mov	ip, r3
 8000478:	d351      	bcc.n	800051e <__udivmoddi4+0x28a>
 800047a:	d04e      	beq.n	800051a <__udivmoddi4+0x286>
 800047c:	b155      	cbz	r5, 8000494 <__udivmoddi4+0x200>
 800047e:	ebb8 030e 	subs.w	r3, r8, lr
 8000482:	eb64 040c 	sbc.w	r4, r4, ip
 8000486:	fa04 f606 	lsl.w	r6, r4, r6
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431e      	orrs	r6, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e750      	b.n	800033a <__udivmoddi4+0xa6>
 8000498:	f1c2 0320 	rsb	r3, r2, #32
 800049c:	fa20 f103 	lsr.w	r1, r0, r3
 80004a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a4:	fa24 f303 	lsr.w	r3, r4, r3
 80004a8:	4094      	lsls	r4, r2
 80004aa:	430c      	orrs	r4, r1
 80004ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004b0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004b4:	fa1f f78c 	uxth.w	r7, ip
 80004b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004bc:	fb08 3110 	mls	r1, r8, r0, r3
 80004c0:	0c23      	lsrs	r3, r4, #16
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb00 f107 	mul.w	r1, r0, r7
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x24c>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004d6:	d22c      	bcs.n	8000532 <__udivmoddi4+0x29e>
 80004d8:	4299      	cmp	r1, r3
 80004da:	d92a      	bls.n	8000532 <__udivmoddi4+0x29e>
 80004dc:	3802      	subs	r0, #2
 80004de:	4463      	add	r3, ip
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e8:	fb08 3311 	mls	r3, r8, r1, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb01 f307 	mul.w	r3, r1, r7
 80004f4:	42a3      	cmp	r3, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x276>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000500:	d213      	bcs.n	800052a <__udivmoddi4+0x296>
 8000502:	42a3      	cmp	r3, r4
 8000504:	d911      	bls.n	800052a <__udivmoddi4+0x296>
 8000506:	3902      	subs	r1, #2
 8000508:	4464      	add	r4, ip
 800050a:	1ae4      	subs	r4, r4, r3
 800050c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000510:	e739      	b.n	8000386 <__udivmoddi4+0xf2>
 8000512:	4604      	mov	r4, r0
 8000514:	e6f0      	b.n	80002f8 <__udivmoddi4+0x64>
 8000516:	4608      	mov	r0, r1
 8000518:	e706      	b.n	8000328 <__udivmoddi4+0x94>
 800051a:	45c8      	cmp	r8, r9
 800051c:	d2ae      	bcs.n	800047c <__udivmoddi4+0x1e8>
 800051e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000522:	eb63 0c07 	sbc.w	ip, r3, r7
 8000526:	3801      	subs	r0, #1
 8000528:	e7a8      	b.n	800047c <__udivmoddi4+0x1e8>
 800052a:	4631      	mov	r1, r6
 800052c:	e7ed      	b.n	800050a <__udivmoddi4+0x276>
 800052e:	4603      	mov	r3, r0
 8000530:	e799      	b.n	8000466 <__udivmoddi4+0x1d2>
 8000532:	4630      	mov	r0, r6
 8000534:	e7d4      	b.n	80004e0 <__udivmoddi4+0x24c>
 8000536:	46d6      	mov	lr, sl
 8000538:	e77f      	b.n	800043a <__udivmoddi4+0x1a6>
 800053a:	4463      	add	r3, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e74d      	b.n	80003dc <__udivmoddi4+0x148>
 8000540:	4606      	mov	r6, r0
 8000542:	4623      	mov	r3, r4
 8000544:	4608      	mov	r0, r1
 8000546:	e70f      	b.n	8000368 <__udivmoddi4+0xd4>
 8000548:	3e02      	subs	r6, #2
 800054a:	4463      	add	r3, ip
 800054c:	e730      	b.n	80003b0 <__udivmoddi4+0x11c>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fbb9 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f839 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f919 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f8ed 	bl	8000744 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800056a:	f000 f89d 	bl	80006a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* enable CYCCNT (Cycle Count, needed for SEGGER SystemView) in DWT_CTRL register */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <main+0x6c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4a13      	ldr	r2, [pc, #76]	@ (80005c0 <main+0x6c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]

  /* initialize and configure SEGGER SystemView */
  SEGGER_SYSVIEW_Conf();
 800057a:	f005 fb3f 	bl	8005bfc <SEGGER_SYSVIEW_Conf>

  /* start recording SEGGER SystemView events */
  SEGGER_SYSVIEW_Start();
 800057e:	f006 f895 	bl	80066ac <SEGGER_SYSVIEW_Start>
  
  /* Before a semaphore is used it must be explicitly created.
     In this example a binary semaphore is created */
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000582:	2203      	movs	r2, #3
 8000584:	2100      	movs	r1, #0
 8000586:	2001      	movs	r0, #1
 8000588:	f002 fd14 	bl	8002fb4 <xQueueGenericCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <main+0x70>)
 8000590:	6013      	str	r3, [r2, #0]

  /* check the semaphore was created successfully */
  if ( xBinarySemaphore != NULL )
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <main+0x70>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d010      	beq.n	80005bc <main+0x68>
    /* Create the 'handler' task, which is the task to which interrupt processing
       is deferred. This is the task that will be syncronized with the interrupt.
       (The handler task must be created with a high priority to ensure it runs
       immediately after the interrupt exits. But since this is the only task
       running for this example, then a priority of 1 is chosen) */
    xTaskCreate( vHandlerTask, "Handler", 1000, NULL, 1, NULL );
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005a8:	4907      	ldr	r1, [pc, #28]	@ (80005c8 <main+0x74>)
 80005aa:	4808      	ldr	r0, [pc, #32]	@ (80005cc <main+0x78>)
 80005ac:	f003 f98d 	bl	80038ca <xTaskCreate>

    /* start the TIM3 in interrupt mode */
    HAL_TIM_Base_Start_IT( &htim3 );
 80005b0:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <main+0x7c>)
 80005b2:	f001 fb9b 	bl	8001cec <HAL_TIM_Base_Start_IT>

    /* start the scheduler */
    vTaskStartScheduler();
 80005b6:	f003 fb41 	bl	8003c3c <vTaskStartScheduler>

  /* If all is well, main() will not reach here because the scheduler will now
     be running the created tasks.
     If main() does reach here, then there was not enough heap memory to create either
     the idle or timer tasks */
  while (1)
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x68>
 80005c0:	e0001000 	.word	0xe0001000
 80005c4:	200000c0 	.word	0x200000c0
 80005c8:	08007658 	.word	0x08007658
 80005cc:	080008f5 	.word	0x080008f5
 80005d0:	20000030 	.word	0x20000030

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f006 fff1 	bl	80075ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000648:	2332      	movs	r3, #50	@ 0x32
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fe2d 	bl	80012b8 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f9ae 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f88e 	bl	80017a8 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f997 	bl	80009c4 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <MX_TIM3_Init+0x94>)
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <MX_TIM3_Init+0x98>)
 80006c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12499;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	@ (800073c <MX_TIM3_Init+0x94>)
 80006cc:	f243 02d3 	movw	r2, #12499	@ 0x30d3
 80006d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <MX_TIM3_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <MX_TIM3_Init+0x94>)
 80006da:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80006de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e0:	4b16      	ldr	r3, [pc, #88]	@ (800073c <MX_TIM3_Init+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_TIM3_Init+0x94>)
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <MX_TIM3_Init+0x94>)
 80006ee:	f001 faad 	bl	8001c4c <HAL_TIM_Base_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80006f8:	f000 f964 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_TIM3_Init+0x94>)
 800070a:	f001 fc4f 	bl	8001fac <HAL_TIM_ConfigClockSource>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 f956 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	@ (800073c <MX_TIM3_Init+0x94>)
 8000726:	f001 fe77 	bl	8002418 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000730:	f000 f948 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000030 	.word	0x20000030
 8000740:	40000400 	.word	0x40000400

08000744 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_USART2_UART_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_USART2_UART_Init+0x4c>)
 800077c:	f001 fedc 	bl	8002538 <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000786:	f000 f91d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a3a      	ldr	r2, [pc, #232]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	4b34      	ldr	r3, [pc, #208]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a33      	ldr	r2, [pc, #204]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a2c      	ldr	r2, [pc, #176]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007f0:	f043 0308 	orr.w	r3, r3, #8
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_GPIO_Init+0x108>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	@ (80008a0 <MX_GPIO_Init+0x108>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_GPIO_Init+0x108>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000824:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0x10c>)
 8000826:	f000 fd13 	bl	8001250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800082a:	2301      	movs	r3, #1
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	@ (80008a8 <MX_GPIO_Init+0x110>)
 800083e:	f000 fb6b 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000842:	2304      	movs	r3, #4
 8000844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4815      	ldr	r0, [pc, #84]	@ (80008ac <MX_GPIO_Init+0x114>)
 8000856:	f000 fb5f 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800085a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <MX_GPIO_Init+0x10c>)
 8000874:	f000 fb50 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000888:	2306      	movs	r3, #6
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <MX_GPIO_Init+0x118>)
 8000894:	f000 fb40 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020c00 	.word	0x40020c00
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40020800 	.word	0x40020800

080008b4 <UART2_Print_Text>:

/* USER CODE BEGIN 4 */
void UART2_Print_Text( UART_HandleTypeDef *huart, const char *text )
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint8_t character;

  /* loop through the string until null character found */
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	e00b      	b.n	80008dc <UART2_Print_Text+0x28>
  {
    /* transmit current character over UART */
    HAL_UART_Transmit( huart, ( const uint8_t* ) &text[ character ], 1, 5000 );
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	18d1      	adds	r1, r2, r3
 80008ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008ce:	2201      	movs	r2, #1
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f001 fe81 	bl	80025d8 <HAL_UART_Transmit>
  for ( character = 0; text[ character ] != '\0'; character++ )
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
 80008d8:	3301      	adds	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1ed      	bne.n	80008c4 <UART2_Print_Text+0x10>
  }
}
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <vHandlerTask>:

static void vHandlerTask( void *pvParameters )
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* xMaxExpectedBlockTime holds the maximum time expected between two interrupts */
  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 600 );
 80008fc:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000900:	60fb      	str	r3, [r7, #12]
  {
    /* The semaphore is 'given' by the TIM3 timeout interrupt.
       Wait a maximum of xMaxExpectedBlockTime ticks for the next interrupt.
       Use the semaphore to wait for the event. The semaphore was created before
       the scheduler was started so before this task ran for the first time */
    if ( xSemaphoreTake( xBinarySemaphore, xMaxExpectedBlockTime ) == pdPASS )
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <vHandlerTask+0x34>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68f9      	ldr	r1, [r7, #12]
 8000908:	4618      	mov	r0, r3
 800090a:	f002 fd69 	bl	80033e0 <xQueueSemaphoreTake>
 800090e:	4603      	mov	r3, r0
 8000910:	2b01      	cmp	r3, #1
 8000912:	d104      	bne.n	800091e <vHandlerTask+0x2a>
    {
      /* The semaphore was obtained (the event must have occurred).
         Process the event (in this case, just print out a message) */
      UART2_Print_Text( &huart2, "Handler task - Processing event.\r\n" );
 8000914:	4905      	ldr	r1, [pc, #20]	@ (800092c <vHandlerTask+0x38>)
 8000916:	4806      	ldr	r0, [pc, #24]	@ (8000930 <vHandlerTask+0x3c>)
 8000918:	f7ff ffcc 	bl	80008b4 <UART2_Print_Text>
 800091c:	e7f1      	b.n	8000902 <vHandlerTask+0xe>
    }
    else
    {
      /* An event was not received within the expected time.
         Indicate this by printing out an error message */
      UART2_Print_Text( &huart2, "Handler task - Error.\r\n" );
 800091e:	4905      	ldr	r1, [pc, #20]	@ (8000934 <vHandlerTask+0x40>)
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <vHandlerTask+0x3c>)
 8000922:	f7ff ffc7 	bl	80008b4 <UART2_Print_Text>
    if ( xSemaphoreTake( xBinarySemaphore, xMaxExpectedBlockTime ) == pdPASS )
 8000926:	e7ec      	b.n	8000902 <vHandlerTask+0xe>
 8000928:	200000c0 	.word	0x200000c0
 800092c:	08007660 	.word	0x08007660
 8000930:	20000078 	.word	0x20000078
 8000934:	08007684 	.word	0x08007684

08000938 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken;

  /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE
     as it will get set to pdTRUE inside the interrupt safe API function
     if a context switch is required */
  xHigherPriorityTaskWoken = pdFALSE;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]

  if ( htim->Instance == TIM3 )
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d120      	bne.n	8000990 <HAL_TIM_PeriodElapsedCallback+0x58>
  {
    /* used for debugging purposes (check TIM3 period via a logic analyzer) */
    HAL_GPIO_TogglePin( GPIOD, GPIO_PIN_12 );
 800094e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000952:	4816      	ldr	r0, [pc, #88]	@ (80009ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000954:	f000 fc95 	bl	8001282 <HAL_GPIO_TogglePin>

    /* print out a message */
    UART2_Print_Text( &huart2, "ISR Handler - About to give a semaphore.\r\n" );
 8000958:	4915      	ldr	r1, [pc, #84]	@ (80009b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800095a:	4816      	ldr	r0, [pc, #88]	@ (80009b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800095c:	f7ff ffaa 	bl	80008b4 <UART2_Print_Text>

    /* 'give' the semaphore to unblock the task, passing in the address of xHigherPriorityTaskWoken
       as the interrupt safe API function's pxHigherPriorityTaskWoken parameter */
    xSemaphoreGiveFromISR( xBinarySemaphore, &xHigherPriorityTaskWoken );
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f107 020c 	add.w	r2, r7, #12
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fb9d 	bl	80030aa <xQueueGiveFromISR>
    /* Pass the xHigherPriorityTaskWoken value into portYIELD_FROM_ISR():
       - If xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR(),
         then calling portYIELD_FROM_ISR() will request a context switch.
       - If xHigherPriorityTaskWoken is still pdFALSE then calling portYIELD_FROM_ISR()
         will have no effect */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00a      	beq.n	800098c <HAL_TIM_PeriodElapsedCallback+0x54>
 8000976:	f006 f9bf 	bl	8006cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 800097c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	f3bf 8f4f 	dsb	sy
 8000986:	f3bf 8f6f 	isb	sy
 800098a:	e001      	b.n	8000990 <HAL_TIM_PeriodElapsedCallback+0x58>
 800098c:	f006 f998 	bl	8006cc0 <SEGGER_SYSVIEW_RecordExitISR>
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x66>
    HAL_IncTick();
 800099a:	f000 f9bb 	bl	8000d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40000400 	.word	0x40000400
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	0800769c 	.word	0x0800769c
 80009b4:	20000078 	.word	0x20000078
 80009b8:	200000c0 	.word	0x200000c0
 80009bc:	e000ed04 	.word	0xe000ed04
 80009c0:	40001000 	.word	0x40001000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  HAL_NVIC_SetPriorityGrouping( 0 );
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 fa4d 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d115      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_TIM_Base_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <HAL_TIM_Base_MspInit+0x4c>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_TIM_Base_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2106      	movs	r1, #6
 8000a52:	201d      	movs	r0, #29
 8000a54:	f000 fa36 	bl	8000ec4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a58:	201d      	movs	r0, #29
 8000a5a:	f000 fa4f 	bl	8000efc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40000400 	.word	0x40000400
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	@ 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <HAL_UART_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aca:	230c      	movs	r3, #12
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ada:	2307      	movs	r3, #7
 8000adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <HAL_UART_MspInit+0x8c>)
 8000ae6:	f000 fa17 	bl	8000f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	@ 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	@ 0x38
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a32      	ldr	r2, [pc, #200]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b30      	ldr	r3, [pc, #192]	@ (8000be4 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b2c:	f107 0210 	add.w	r2, r7, #16
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f856 	bl	8001be8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b46:	f001 f827 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f823 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8000b52:	4603      	mov	r3, r0
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <HAL_InitTick+0xe8>)
 8000b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b60:	0c9b      	lsrs	r3, r3, #18
 8000b62:	3b01      	subs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <HAL_InitTick+0xec>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xf0>)
 8000b6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <HAL_InitTick+0xec>)
 8000b6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b72:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_InitTick+0xec>)
 8000b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b78:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <HAL_InitTick+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b8c:	4817      	ldr	r0, [pc, #92]	@ (8000bec <HAL_InitTick+0xec>)
 8000b8e:	f001 f85d 	bl	8001c4c <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d11b      	bne.n	8000bd8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba0:	4812      	ldr	r0, [pc, #72]	@ (8000bec <HAL_InitTick+0xec>)
 8000ba2:	f001 f8a3 	bl	8001cec <HAL_TIM_Base_Start_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d111      	bne.n	8000bd8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb4:	2036      	movs	r0, #54	@ 0x36
 8000bb6:	f000 f9a1 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d808      	bhi.n	8000bd2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2036      	movs	r0, #54	@ 0x36
 8000bc6:	f000 f97d 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bca:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0xf4>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e002      	b.n	8000bd8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3738      	adds	r7, #56	@ 0x38
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	200000c4 	.word	0x200000c4
 8000bf0:	40001000 	.word	0x40001000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <TIM3_IRQHandler+0x10>)
 8000c36:	f001 f8c9 	bl	8001dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000030 	.word	0x20000030

08000c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <TIM6_DAC_IRQHandler+0x10>)
 8000c4a:	f001 f8bf 	bl	8001dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000c4 	.word	0x200000c4

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f006 fc97 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc51 	bl	8000554 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cc0:	080077e0 	.word	0x080077e0
  ldr r2, =_sbss
 8000cc4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cc8:	2001992c 	.word	0x2001992c

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f8d8 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f7ff fefe 	bl	8000b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe64 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	2000010c 	.word	0x2000010c

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000010c 	.word	0x2000010c

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e16b      	b.n	800120c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 815a 	bne.w	8001206 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80b4 	beq.w	8001206 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b60      	ldr	r3, [pc, #384]	@ (8001224 <HAL_GPIO_Init+0x30c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001224 <HAL_GPIO_Init+0x30c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001224 <HAL_GPIO_Init+0x30c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001228 <HAL_GPIO_Init+0x310>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a52      	ldr	r2, [pc, #328]	@ (800122c <HAL_GPIO_Init+0x314>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d02b      	beq.n	800113e <HAL_GPIO_Init+0x226>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a51      	ldr	r2, [pc, #324]	@ (8001230 <HAL_GPIO_Init+0x318>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x222>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a50      	ldr	r2, [pc, #320]	@ (8001234 <HAL_GPIO_Init+0x31c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x21e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001238 <HAL_GPIO_Init+0x320>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x21a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4e      	ldr	r2, [pc, #312]	@ (800123c <HAL_GPIO_Init+0x324>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x216>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4d      	ldr	r2, [pc, #308]	@ (8001240 <HAL_GPIO_Init+0x328>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x212>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4c      	ldr	r2, [pc, #304]	@ (8001244 <HAL_GPIO_Init+0x32c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x20e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4b      	ldr	r2, [pc, #300]	@ (8001248 <HAL_GPIO_Init+0x330>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x20a>
 800111e:	2307      	movs	r3, #7
 8001120:	e00e      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001122:	2308      	movs	r3, #8
 8001124:	e00c      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001126:	2306      	movs	r3, #6
 8001128:	e00a      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800112a:	2305      	movs	r3, #5
 800112c:	e008      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800112e:	2304      	movs	r3, #4
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001132:	2303      	movs	r3, #3
 8001134:	e004      	b.n	8001140 <HAL_GPIO_Init+0x228>
 8001136:	2302      	movs	r3, #2
 8001138:	e002      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x228>
 800113e:	2300      	movs	r3, #0
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	f002 0203 	and.w	r2, r2, #3
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	4093      	lsls	r3, r2
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001150:	4935      	ldr	r1, [pc, #212]	@ (8001228 <HAL_GPIO_Init+0x310>)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b3b      	ldr	r3, [pc, #236]	@ (800124c <HAL_GPIO_Init+0x334>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a32      	ldr	r2, [pc, #200]	@ (800124c <HAL_GPIO_Init+0x334>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b30      	ldr	r3, [pc, #192]	@ (800124c <HAL_GPIO_Init+0x334>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a27      	ldr	r2, [pc, #156]	@ (800124c <HAL_GPIO_Init+0x334>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_GPIO_Init+0x334>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d6:	4a1d      	ldr	r2, [pc, #116]	@ (800124c <HAL_GPIO_Init+0x334>)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <HAL_GPIO_Init+0x334>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001200:	4a12      	ldr	r2, [pc, #72]	@ (800124c <HAL_GPIO_Init+0x334>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3301      	adds	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	2b0f      	cmp	r3, #15
 8001210:	f67f ae90 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40013800 	.word	0x40013800
 800122c:	40020000 	.word	0x40020000
 8001230:	40020400 	.word	0x40020400
 8001234:	40020800 	.word	0x40020800
 8001238:	40020c00 	.word	0x40020c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40021400 	.word	0x40021400
 8001244:	40021800 	.word	0x40021800
 8001248:	40021c00 	.word	0x40021c00
 800124c:	40013c00 	.word	0x40013c00

08001250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
 800125c:	4613      	mov	r3, r2
 800125e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001266:	887a      	ldrh	r2, [r7, #2]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800126c:	e003      	b.n	8001276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	041a      	lsls	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	619a      	str	r2, [r3, #24]
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	460b      	mov	r3, r1
 800128c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001294:	887a      	ldrh	r2, [r7, #2]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	041a      	lsls	r2, r3, #16
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43d9      	mvns	r1, r3
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	400b      	ands	r3, r1
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	619a      	str	r2, [r3, #24]
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e267      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d075      	beq.n	80013c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d6:	4b88      	ldr	r3, [pc, #544]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d00c      	beq.n	80012fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b85      	ldr	r3, [pc, #532]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d112      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fa:	d10b      	bne.n	8001314 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d05b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x108>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d157      	bne.n	80013c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e242      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800131c:	d106      	bne.n	800132c <HAL_RCC_OscConfig+0x74>
 800131e:	4b76      	ldr	r3, [pc, #472]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a75      	ldr	r2, [pc, #468]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0x98>
 8001336:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6d      	ldr	r3, [pc, #436]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6c      	ldr	r2, [pc, #432]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xb0>
 8001350:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a68      	ldr	r2, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fce4 	bl	8000d3c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fce0 	bl	8000d3c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e207      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xc0>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcd0 	bl	8000d3c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fccc 	bl	8000d3c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1f3      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b51      	ldr	r3, [pc, #324]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0xe8>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ce:	4b4a      	ldr	r3, [pc, #296]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b44      	ldr	r3, [pc, #272]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1c7      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b3b      	ldr	r3, [pc, #236]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4937      	ldr	r1, [pc, #220]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e03a      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d020      	beq.n	800146a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142e:	f7ff fc85 	bl	8000d3c <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001436:	f7ff fc81 	bl	8000d3c <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e1a8      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4925      	ldr	r1, [pc, #148]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146a:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <HAL_RCC_OscConfig+0x244>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc64 	bl	8000d3c <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fc60 	bl	8000d3c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e187      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d036      	beq.n	8001510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fc44 	bl	8000d3c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc40 	bl	8000d3c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e167      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x200>
 80014d6:	e01b      	b.n	8001510 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_RCC_OscConfig+0x248>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fc2d 	bl	8000d3c <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	e00e      	b.n	8001504 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fc29 	bl	8000d3c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d907      	bls.n	8001504 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e150      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470000 	.word	0x42470000
 8001500:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1ea      	bne.n	80014e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 8097 	beq.w	800164c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b81      	ldr	r3, [pc, #516]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b7d      	ldr	r3, [pc, #500]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a7c      	ldr	r2, [pc, #496]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b7a      	ldr	r3, [pc, #488]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b77      	ldr	r3, [pc, #476]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b74      	ldr	r3, [pc, #464]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a73      	ldr	r2, [pc, #460]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbe9 	bl	8000d3c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fbe5 	bl	8000d3c <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e10c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x474>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2ea>
 8001594:	4b64      	ldr	r3, [pc, #400]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a63      	ldr	r2, [pc, #396]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	e01c      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x30c>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ae:	4a5e      	ldr	r2, [pc, #376]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0x324>
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015c8:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d0:	4b55      	ldr	r3, [pc, #340]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d4:	4a54      	ldr	r2, [pc, #336]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbaa 	bl	8000d3c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fba6 	bl	8000d3c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0cb      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0ee      	beq.n	80015ec <HAL_RCC_OscConfig+0x334>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fb94 	bl	8000d3c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fb90 	bl	8000d3c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0b5      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001644:	4a38      	ldr	r2, [pc, #224]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a1 	beq.w	8001798 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b08      	cmp	r3, #8
 8001660:	d05c      	beq.n	800171c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d141      	bne.n	80016ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb64 	bl	8000d3c <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb60 	bl	8000d3c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e087      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b27      	ldr	r3, [pc, #156]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a4:	019b      	lsls	r3, r3, #6
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	3b01      	subs	r3, #1
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b8:	061b      	lsls	r3, r3, #24
 80016ba:	491b      	ldr	r1, [pc, #108]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb39 	bl	8000d3c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ce:	f7ff fb35 	bl	8000d3c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e05c      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x416>
 80016ec:	e054      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb22 	bl	8000d3c <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb1e 	bl	8000d3c <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e045      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x444>
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d107      	bne.n	8001734 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e038      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001734:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <HAL_RCC_OscConfig+0x4ec>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d028      	beq.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d121      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d11a      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800176c:	4293      	cmp	r3, r2
 800176e:	d111      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d107      	bne.n	8001794 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0cc      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d90c      	bls.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b65      	ldr	r3, [pc, #404]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b63      	ldr	r3, [pc, #396]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0b8      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017fc:	4b59      	ldr	r3, [pc, #356]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a58      	ldr	r2, [pc, #352]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001814:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a52      	ldr	r2, [pc, #328]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800181e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001820:	4b50      	ldr	r3, [pc, #320]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	494d      	ldr	r1, [pc, #308]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d044      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b47      	ldr	r3, [pc, #284]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d119      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e07f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d003      	beq.n	8001866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	2b03      	cmp	r3, #3
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001866:	4b3f      	ldr	r3, [pc, #252]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e06f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e067      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b37      	ldr	r3, [pc, #220]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4934      	ldr	r1, [pc, #208]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff fa50 	bl	8000d3c <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a0:	f7ff fa4c 	bl	8000d3c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e04f      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 020c 	and.w	r2, r3, #12
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d1eb      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d20c      	bcs.n	80018f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e032      	b.n	8001956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	4916      	ldr	r1, [pc, #88]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d009      	beq.n	800192e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	490e      	ldr	r1, [pc, #56]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192e:	f000 f821 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 8001932:	4602      	mov	r2, r0
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	490a      	ldr	r1, [pc, #40]	@ (8001968 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	5ccb      	ldrb	r3, [r1, r3]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f8d6 	bl	8000b00 <HAL_InitTick>

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00
 8001964:	40023800 	.word	0x40023800
 8001968:	08007790 	.word	0x08007790
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001978:	b094      	sub	sp, #80	@ 0x50
 800197a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001980:	2300      	movs	r3, #0
 8001982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800198c:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d00d      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001998:	2b08      	cmp	r3, #8
 800199a:	f200 80e1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x3a>
 80019a6:	e0db      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b73      	ldr	r3, [pc, #460]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 80019aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80019ac:	e0db      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x208>)
 80019b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019b2:	e0d8      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b6d      	ldr	r3, [pc, #436]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	2200      	movs	r2, #0
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019e6:	4622      	mov	r2, r4
 80019e8:	462b      	mov	r3, r5
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0159      	lsls	r1, r3, #5
 80019f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f8:	0150      	lsls	r0, r2, #5
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4621      	mov	r1, r4
 8001a00:	1a51      	subs	r1, r2, r1
 8001a02:	6139      	str	r1, [r7, #16]
 8001a04:	4629      	mov	r1, r5
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a18:	4659      	mov	r1, fp
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	4651      	mov	r1, sl
 8001a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a22:	4651      	mov	r1, sl
 8001a24:	018a      	lsls	r2, r1, #6
 8001a26:	4651      	mov	r1, sl
 8001a28:	ebb2 0801 	subs.w	r8, r2, r1
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a46:	4690      	mov	r8, r2
 8001a48:	4699      	mov	r9, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	eb18 0303 	adds.w	r3, r8, r3
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	462b      	mov	r3, r5
 8001a54:	eb49 0303 	adc.w	r3, r9, r3
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	f04f 0300 	mov.w	r3, #0
 8001a62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a66:	4629      	mov	r1, r5
 8001a68:	024b      	lsls	r3, r1, #9
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a70:	4621      	mov	r1, r4
 8001a72:	024a      	lsls	r2, r1, #9
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a84:	f7fe fbee 	bl	8000264 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a90:	e058      	b.n	8001b44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a92:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aa2:	623b      	str	r3, [r7, #32]
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001aac:	4642      	mov	r2, r8
 8001aae:	464b      	mov	r3, r9
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	0159      	lsls	r1, r3, #5
 8001aba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001abe:	0150      	lsls	r0, r2, #5
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4641      	mov	r1, r8
 8001ac6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001aca:	4649      	mov	r1, r9
 8001acc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001adc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ae0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ae4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ae8:	eb63 050b 	sbc.w	r5, r3, fp
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	00eb      	lsls	r3, r5, #3
 8001af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001afa:	00e2      	lsls	r2, r4, #3
 8001afc:	4614      	mov	r4, r2
 8001afe:	461d      	mov	r5, r3
 8001b00:	4643      	mov	r3, r8
 8001b02:	18e3      	adds	r3, r4, r3
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	464b      	mov	r3, r9
 8001b08:	eb45 0303 	adc.w	r3, r5, r3
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	028b      	lsls	r3, r1, #10
 8001b1e:	4621      	mov	r1, r4
 8001b20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b24:	4621      	mov	r1, r4
 8001b26:	028a      	lsls	r2, r1, #10
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	61fa      	str	r2, [r7, #28]
 8001b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b38:	f7fe fb94 	bl	8000264 <__aeabi_uldivmod>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4613      	mov	r3, r2
 8001b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b5e:	e002      	b.n	8001b66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3750      	adds	r7, #80	@ 0x50
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	00f42400 	.word	0x00f42400
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000

08001b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	4903      	ldr	r1, [pc, #12]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	5ccb      	ldrb	r3, [r1, r3]
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	080077a0 	.word	0x080077a0

08001bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc4:	f7ff ffdc 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	0b5b      	lsrs	r3, r3, #13
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	4903      	ldr	r1, [pc, #12]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	080077a0 	.word	0x080077a0

08001be8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <HAL_RCC_GetClockConfig+0x60>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0207 	and.w	r2, r3, #7
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	601a      	str	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fed4 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3304      	adds	r3, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f000 fa7e 	bl	800218c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e04e      	b.n	8001da2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a23      	ldr	r2, [pc, #140]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d022      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2e:	d01d      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d018      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001db8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1c      	ldr	r2, [pc, #112]	@ (8001dbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00e      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d009      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a19      	ldr	r2, [pc, #100]	@ (8001dc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x80>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a18      	ldr	r2, [pc, #96]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d111      	bne.n	8001d90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d010      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	e007      	b.n	8001da0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40010000 	.word	0x40010000
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	40000c00 	.word	0x40000c00
 8001dc0:	40010400 	.word	0x40010400
 8001dc4:	40014000 	.word	0x40014000
 8001dc8:	40001800 	.word	0x40001800

08001dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d020      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01b      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0202 	mvn.w	r2, #2
 8001e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f999 	bl	800214e <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f98b 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f99c 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0204 	mvn.w	r2, #4
 8001e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2202      	movs	r2, #2
 8001e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f973 	bl	800214e <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f965 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f976 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0208 	mvn.w	r2, #8
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f94d 	bl	800214e <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f93f 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f950 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0210 	mvn.w	r2, #16
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f927 	bl	800214e <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f919 	bl	800213a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f92a 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00c      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0201 	mvn.w	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fd00 	bl	8000938 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00c      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 fae4 	bl	8002524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00c      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8fb 	bl	8002176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0220 	mvn.w	r2, #32
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 fab6 	bl	8002510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e0b4      	b.n	8002132 <HAL_TIM_ConfigClockSource+0x186>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002000:	d03e      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0xd4>
 8002002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002006:	f200 8087 	bhi.w	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 800200a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800200e:	f000 8086 	beq.w	800211e <HAL_TIM_ConfigClockSource+0x172>
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002016:	d87f      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002018:	2b70      	cmp	r3, #112	@ 0x70
 800201a:	d01a      	beq.n	8002052 <HAL_TIM_ConfigClockSource+0xa6>
 800201c:	2b70      	cmp	r3, #112	@ 0x70
 800201e:	d87b      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002020:	2b60      	cmp	r3, #96	@ 0x60
 8002022:	d050      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0x11a>
 8002024:	2b60      	cmp	r3, #96	@ 0x60
 8002026:	d877      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002028:	2b50      	cmp	r3, #80	@ 0x50
 800202a:	d03c      	beq.n	80020a6 <HAL_TIM_ConfigClockSource+0xfa>
 800202c:	2b50      	cmp	r3, #80	@ 0x50
 800202e:	d873      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002030:	2b40      	cmp	r3, #64	@ 0x40
 8002032:	d058      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0x13a>
 8002034:	2b40      	cmp	r3, #64	@ 0x40
 8002036:	d86f      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002038:	2b30      	cmp	r3, #48	@ 0x30
 800203a:	d064      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x15a>
 800203c:	2b30      	cmp	r3, #48	@ 0x30
 800203e:	d86b      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002040:	2b20      	cmp	r3, #32
 8002042:	d060      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x15a>
 8002044:	2b20      	cmp	r3, #32
 8002046:	d867      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05c      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x15a>
 800204c:	2b10      	cmp	r3, #16
 800204e:	d05a      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	e062      	b.n	8002118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002062:	f000 f9b9 	bl	80023d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	609a      	str	r2, [r3, #8]
      break;
 800207e:	e04f      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002090:	f000 f9a2 	bl	80023d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020a2:	609a      	str	r2, [r3, #8]
      break;
 80020a4:	e03c      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b2:	461a      	mov	r2, r3
 80020b4:	f000 f916 	bl	80022e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2150      	movs	r1, #80	@ 0x50
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f96f 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80020c4:	e02c      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d2:	461a      	mov	r2, r3
 80020d4:	f000 f935 	bl	8002342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2160      	movs	r1, #96	@ 0x60
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f95f 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 80020e4:	e01c      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	461a      	mov	r2, r3
 80020f4:	f000 f8f6 	bl	80022e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2140      	movs	r1, #64	@ 0x40
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f94f 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002104:	e00c      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	4610      	mov	r0, r2
 8002112:	f000 f946 	bl	80023a2 <TIM_ITRx_SetConfig>
      break;
 8002116:	e003      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
      break;
 800211c:	e000      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800211e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002130:	7bfb      	ldrb	r3, [r7, #15]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a46      	ldr	r2, [pc, #280]	@ (80022b8 <TIM_Base_SetConfig+0x12c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d013      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021aa:	d00f      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a43      	ldr	r2, [pc, #268]	@ (80022bc <TIM_Base_SetConfig+0x130>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00b      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a42      	ldr	r2, [pc, #264]	@ (80022c0 <TIM_Base_SetConfig+0x134>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d007      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a41      	ldr	r2, [pc, #260]	@ (80022c4 <TIM_Base_SetConfig+0x138>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d003      	beq.n	80021cc <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <TIM_Base_SetConfig+0x13c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d108      	bne.n	80021de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a35      	ldr	r2, [pc, #212]	@ (80022b8 <TIM_Base_SetConfig+0x12c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ec:	d027      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a32      	ldr	r2, [pc, #200]	@ (80022bc <TIM_Base_SetConfig+0x130>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d023      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a31      	ldr	r2, [pc, #196]	@ (80022c0 <TIM_Base_SetConfig+0x134>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d01f      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a30      	ldr	r2, [pc, #192]	@ (80022c4 <TIM_Base_SetConfig+0x138>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d01b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <TIM_Base_SetConfig+0x13c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d017      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2e      	ldr	r2, [pc, #184]	@ (80022cc <TIM_Base_SetConfig+0x140>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <TIM_Base_SetConfig+0x144>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00f      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2c      	ldr	r2, [pc, #176]	@ (80022d4 <TIM_Base_SetConfig+0x148>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <TIM_Base_SetConfig+0x14c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2a      	ldr	r2, [pc, #168]	@ (80022dc <TIM_Base_SetConfig+0x150>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <TIM_Base_SetConfig+0x154>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d108      	bne.n	8002250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a10      	ldr	r2, [pc, #64]	@ (80022b8 <TIM_Base_SetConfig+0x12c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d003      	beq.n	8002284 <TIM_Base_SetConfig+0xf8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a12      	ldr	r2, [pc, #72]	@ (80022c8 <TIM_Base_SetConfig+0x13c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d103      	bne.n	800228c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f023 0201 	bic.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
  }
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40010400 	.word	0x40010400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40014400 	.word	0x40014400
 80022d4:	40014800 	.word	0x40014800
 80022d8:	40001800 	.word	0x40001800
 80022dc:	40001c00 	.word	0x40001c00
 80022e0:	40002000 	.word	0x40002000

080022e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f023 0201 	bic.w	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800230e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f023 030a 	bic.w	r3, r3, #10
 8002320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	621a      	str	r2, [r3, #32]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002342:	b480      	push	{r7}
 8002344:	b087      	sub	sp, #28
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f023 0210 	bic.w	r2, r3, #16
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800236c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	031b      	lsls	r3, r3, #12
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800237e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	621a      	str	r2, [r3, #32]
}
 8002396:	bf00      	nop
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f043 0307 	orr.w	r3, r3, #7
 80023c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	021a      	lsls	r2, r3, #8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	609a      	str	r2, [r3, #8]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800242c:	2302      	movs	r3, #2
 800242e:	e05a      	b.n	80024e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a21      	ldr	r2, [pc, #132]	@ (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d022      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800247c:	d01d      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1d      	ldr	r2, [pc, #116]	@ (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d018      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1b      	ldr	r2, [pc, #108]	@ (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00e      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d009      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d004      	beq.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a15      	ldr	r2, [pc, #84]	@ (800250c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d10c      	bne.n	80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40010400 	.word	0x40010400
 8002508:	40014000 	.word	0x40014000
 800250c:	40001800 	.word	0x40001800

08002510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e042      	b.n	80025d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fa86 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2224      	movs	r2, #36	@ 0x24
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800257a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f973 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d175      	bne.n	80026e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Transmit+0x2c>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e06e      	b.n	80026e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2221      	movs	r2, #33	@ 0x21
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002616:	f7fe fb91 	bl	8000d3c <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	88fa      	ldrh	r2, [r7, #6]
 8002626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002630:	d108      	bne.n	8002644 <HAL_UART_Transmit+0x6c>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e003      	b.n	800264c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800264c:	e02e      	b.n	80026ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2200      	movs	r2, #0
 8002656:	2180      	movs	r1, #128	@ 0x80
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f848 	bl	80026ee <UART_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e03a      	b.n	80026e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10b      	bne.n	800268e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	3302      	adds	r3, #2
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	e007      	b.n	800269e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3301      	adds	r3, #1
 800269c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1cb      	bne.n	800264e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2200      	movs	r2, #0
 80026be:	2140      	movs	r1, #64	@ 0x40
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f814 	bl	80026ee <UART_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fe:	e03b      	b.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d037      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002708:	f7fe fb18 	bl	8000d3c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	6a3a      	ldr	r2, [r7, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	d302      	bcc.n	800271e <UART_WaitOnFlagUntilTimeout+0x30>
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e03a      	b.n	8002798 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b80      	cmp	r3, #128	@ 0x80
 8002734:	d020      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b40      	cmp	r3, #64	@ 0x40
 800273a:	d01d      	beq.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d116      	bne.n	8002778 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f81d 	bl	80027a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2208      	movs	r2, #8
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00f      	b.n	8002798 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	429a      	cmp	r2, r3
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	429a      	cmp	r2, r3
 8002794:	d0b4      	beq.n	8002700 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b095      	sub	sp, #84	@ 0x54
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80027ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	e853 3f00 	ldrex	r3, [r3]
 80027ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3314      	adds	r3, #20
 80027fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e5      	bne.n	80027dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	2b01      	cmp	r3, #1
 8002816:	d119      	bne.n	800284c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	60bb      	str	r3, [r7, #8]
   return(result);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f023 0310 	bic.w	r3, r3, #16
 800282e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	330c      	adds	r3, #12
 8002836:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002838:	61ba      	str	r2, [r7, #24]
 800283a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283c:	6979      	ldr	r1, [r7, #20]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	e841 2300 	strex	r3, r2, [r1]
 8002844:	613b      	str	r3, [r7, #16]
   return(result);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1e5      	bne.n	8002818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800285a:	bf00      	nop
 800285c:	3754      	adds	r7, #84	@ 0x54
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b0c0      	sub	sp, #256	@ 0x100
 800286e:	af00      	add	r7, sp, #0
 8002870:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	ea40 0301 	orr.w	r3, r0, r1
 8002890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028c0:	f021 010c 	bic.w	r1, r1, #12
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	6999      	ldr	r1, [r3, #24]
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	ea40 0301 	orr.w	r3, r0, r1
 80028ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b34 <UART_SetConfig+0x2cc>)
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d005      	beq.n	8002908 <UART_SetConfig+0xa0>
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8d      	ldr	r3, [pc, #564]	@ (8002b38 <UART_SetConfig+0x2d0>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d104      	bne.n	8002912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002908:	f7ff f95a 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 800290c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002910:	e003      	b.n	800291a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002912:	f7ff f941 	bl	8001b98 <HAL_RCC_GetPCLK1Freq>
 8002916:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002924:	f040 810c 	bne.w	8002b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002932:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002942:	415b      	adcs	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800294a:	4621      	mov	r1, r4
 800294c:	eb12 0801 	adds.w	r8, r2, r1
 8002950:	4629      	mov	r1, r5
 8002952:	eb43 0901 	adc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800298e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002996:	460b      	mov	r3, r1
 8002998:	18db      	adds	r3, r3, r3
 800299a:	653b      	str	r3, [r7, #80]	@ 0x50
 800299c:	4613      	mov	r3, r2
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80029a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029ac:	f7fd fc5a 	bl	8000264 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b61      	ldr	r3, [pc, #388]	@ (8002b3c <UART_SetConfig+0x2d4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029d8:	415b      	adcs	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029e0:	4641      	mov	r1, r8
 80029e2:	eb12 0a01 	adds.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0b01 	adc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a00:	4692      	mov	sl, r2
 8002a02:	469b      	mov	fp, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	eb4b 0303 	adc.w	r3, fp, r3
 8002a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a42:	f7fd fc0f 	bl	8000264 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002b3c <UART_SetConfig+0x2d4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	@ 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a62:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <UART_SetConfig+0x2d4>)
 8002a64:	fba3 2302 	umull	r2, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a70:	441c      	add	r4, r3
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac8:	464b      	mov	r3, r9
 8002aca:	460a      	mov	r2, r1
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ae8:	460b      	mov	r3, r1
 8002aea:	18db      	adds	r3, r3, r3
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aee:	4613      	mov	r3, r2
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002afe:	f7fd fbb1 	bl	8000264 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4b0d      	ldr	r3, [pc, #52]	@ (8002b3c <UART_SetConfig+0x2d4>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	@ 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	@ 0x32
 8002b1a:	4a08      	ldr	r2, [pc, #32]	@ (8002b3c <UART_SetConfig+0x2d4>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4422      	add	r2, r4
 8002b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b30:	e106      	b.n	8002d40 <UART_SetConfig+0x4d8>
 8002b32:	bf00      	nop
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	6239      	str	r1, [r7, #32]
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b62:	4641      	mov	r1, r8
 8002b64:	1854      	adds	r4, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b88:	464b      	mov	r3, r9
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bae:	4629      	mov	r1, r5
 8002bb0:	008b      	lsls	r3, r1, #2
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb8:	4621      	mov	r1, r4
 8002bba:	008a      	lsls	r2, r1, #2
 8002bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bc0:	f7fd fb50 	bl	8000264 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b60      	ldr	r3, [pc, #384]	@ (8002d4c <UART_SetConfig+0x4e4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	61b9      	str	r1, [r7, #24]
 8002bec:	415b      	adcs	r3, r3
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6139      	str	r1, [r7, #16]
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	008b      	lsls	r3, r1, #2
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c56:	4641      	mov	r1, r8
 8002c58:	008a      	lsls	r2, r1, #2
 8002c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c5e:	f7fd fb01 	bl	8000264 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	4b38      	ldr	r3, [pc, #224]	@ (8002d4c <UART_SetConfig+0x4e4>)
 8002c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2264      	movs	r2, #100	@ 0x64
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	1acb      	subs	r3, r1, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	3332      	adds	r3, #50	@ 0x32
 8002c7c:	4a33      	ldr	r2, [pc, #204]	@ (8002d4c <UART_SetConfig+0x4e4>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c88:	441c      	add	r4, r3
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c92:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c94:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c98:	4642      	mov	r2, r8
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	1891      	adds	r1, r2, r2
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	415b      	adcs	r3, r3
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca8:	4641      	mov	r1, r8
 8002caa:	1851      	adds	r1, r2, r1
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	4649      	mov	r1, r9
 8002cb0:	414b      	adcs	r3, r1
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	00cb      	lsls	r3, r1, #3
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cca:	4651      	mov	r1, sl
 8002ccc:	00ca      	lsls	r2, r1, #3
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cda:	464b      	mov	r3, r9
 8002cdc:	460a      	mov	r2, r1
 8002cde:	eb42 0303 	adc.w	r3, r2, r3
 8002ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cee:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	008b      	lsls	r3, r1, #2
 8002d00:	4641      	mov	r1, r8
 8002d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d06:	4641      	mov	r1, r8
 8002d08:	008a      	lsls	r2, r1, #2
 8002d0a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d0e:	f7fd faa9 	bl	8000264 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <UART_SetConfig+0x4e4>)
 8002d18:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	2164      	movs	r1, #100	@ 0x64
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	3332      	adds	r3, #50	@ 0x32
 8002d2a:	4a08      	ldr	r2, [pc, #32]	@ (8002d4c <UART_SetConfig+0x4e4>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4422      	add	r2, r4
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d46:	46bd      	mov	sp, r7
 8002d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f103 0208 	add.w	r2, r3, #8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 0208 	add.w	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002d84:	f240 1019 	movw	r0, #281	@ 0x119
 8002d88:	f003 ffd2 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002da2:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002da6:	f003 ffc3 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d103      	bne.n	8002dd2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e00c      	b.n	8002dec <vListInsert+0x3a>
        *   6) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e002      	b.n	8002de0 <vListInsert+0x2e>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d2f6      	bcs.n	8002dda <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002e18:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002e1c:	f003 ff88 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6892      	ldr	r2, [r2, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d103      	bne.n	8002e5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f240 101d 	movw	r0, #285	@ 0x11d
 8002e76:	f003 ff97 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002e92:	2301      	movs	r3, #1
 8002e94:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002eb2:	bf00      	nop
 8002eb4:	bf00      	nop
 8002eb6:	e7fd      	b.n	8002eb4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d05d      	beq.n	8002f7a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d059      	beq.n	8002f7a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ece:	2100      	movs	r1, #0
 8002ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d000      	beq.n	8002eda <xQueueGenericReset+0x52>
 8002ed8:	2101      	movs	r1, #1
 8002eda:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d14c      	bne.n	8002f7a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002ee0:	f002 fad0 	bl	8005484 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	6939      	ldr	r1, [r7, #16]
 8002eee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	441a      	add	r2, r3
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2200      	movs	r2, #0
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	3b01      	subs	r3, #1
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	441a      	add	r2, r3
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	22ff      	movs	r2, #255	@ 0xff
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	22ff      	movs	r2, #255	@ 0xff
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d114      	bne.n	8002f60 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01a      	beq.n	8002f74 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3310      	adds	r3, #16
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fa2a 	bl	800439c <xTaskRemoveFromEventList>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <xQueueGenericReset+0x128>)
 8002f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	e009      	b.n	8002f74 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	3310      	adds	r3, #16
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fef3 	bl	8002d50 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	3324      	adds	r3, #36	@ 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff feee 	bl	8002d50 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002f74:	f002 fab8 	bl	80054e8 <vPortExitCritical>
 8002f78:	e001      	b.n	8002f7e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xQueueGenericReset+0x114>
    __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	60bb      	str	r3, [r7, #8]
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	2096      	movs	r0, #150	@ 0x96
 8002fa2:	f003 ff01 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002fa6:	697b      	ldr	r3, [r7, #20]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	@ 0x28
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02e      	beq.n	800302a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fcc:	2100      	movs	r1, #0
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d000      	beq.n	8002fdc <xQueueGenericCreate+0x28>
 8002fda:	2101      	movs	r1, #1
 8002fdc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d123      	bne.n	800302a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002fea:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002fee:	d81c      	bhi.n	800302a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3350      	adds	r3, #80	@ 0x50
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fb6e 	bl	80056e0 <pvPortMalloc>
 8003004:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01d      	beq.n	8003048 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3350      	adds	r3, #80	@ 0x50
 8003014:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003016:	79fa      	ldrb	r2, [r7, #7]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f81e 	bl	8003064 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003028:	e00e      	b.n	8003048 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <xQueueGenericCreate+0x94>
    __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	613b      	str	r3, [r7, #16]
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 f846 	bl	80070dc <SEGGER_SYSVIEW_ShrinkId>
 8003050:	4603      	mov	r3, r0
 8003052:	4619      	mov	r1, r3
 8003054:	2098      	movs	r0, #152	@ 0x98
 8003056:	f003 fea7 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800305a:	69fb      	ldr	r3, [r7, #28]
    }
 800305c:	4618      	mov	r0, r3
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e002      	b.n	8003086 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003092:	2101      	movs	r1, #1
 8003094:	69b8      	ldr	r0, [r7, #24]
 8003096:	f7ff fef7 	bl	8002e88 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b090      	sub	sp, #64	@ 0x40
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	63bb      	str	r3, [r7, #56]	@ 0x38
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <xQueueGiveFromISR+0x2c>
    __asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00b      	beq.n	80030f6 <xQueueGiveFromISR+0x4c>
    __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	623b      	str	r3, [r7, #32]
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	e7fd      	b.n	80030f2 <xQueueGiveFromISR+0x48>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <xQueueGiveFromISR+0x5c>
 80030fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <xQueueGiveFromISR+0x60>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueGiveFromISR+0x62>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <xQueueGiveFromISR+0x7e>
    __asm volatile
 8003110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	61fb      	str	r3, [r7, #28]
}
 8003122:	bf00      	nop
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <xQueueGiveFromISR+0x7a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003128:	f002 fa98 	bl	800565c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800312c:	f3ef 8211 	mrs	r2, BASEPRI
 8003130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	61ba      	str	r2, [r7, #24]
 8003142:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8003144:	69bb      	ldr	r3, [r7, #24]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8003146:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800314e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003154:	429a      	cmp	r2, r3
 8003156:	d243      	bcs.n	80031e0 <xQueueGiveFromISR+0x136>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800315e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003168:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800316a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d112      	bne.n	800319a <xQueueGiveFromISR+0xf0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02e      	beq.n	80031da <xQueueGiveFromISR+0x130>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317e:	3324      	adds	r3, #36	@ 0x24
 8003180:	4618      	mov	r0, r3
 8003182:	f001 f90b 	bl	800439c <xTaskRemoveFromEventList>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d026      	beq.n	80031da <xQueueGiveFromISR+0x130>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d023      	beq.n	80031da <xQueueGiveFromISR+0x130>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	e01f      	b.n	80031da <xQueueGiveFromISR+0x130>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800319a:	f000 fef1 	bl	8003f80 <uxTaskGetNumberOfTasks>
 800319e:	62b8      	str	r0, [r7, #40]	@ 0x28
 80031a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80031a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d917      	bls.n	80031da <xQueueGiveFromISR+0x130>
 80031aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80031ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80031b0:	d10b      	bne.n	80031ca <xQueueGiveFromISR+0x120>
    __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	613b      	str	r3, [r7, #16]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <xQueueGiveFromISR+0x11c>
 80031ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031ce:	3301      	adds	r3, #1
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80031da:	2301      	movs	r3, #1
 80031dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031de:	e001      	b.n	80031e4 <xQueueGiveFromISR+0x13a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80031ee:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGiveFromISR( xReturn );
 80031f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f2:	4619      	mov	r1, r3
 80031f4:	20a3      	movs	r0, #163	@ 0xa3
 80031f6:	f003 fdd7 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80031fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3740      	adds	r7, #64	@ 0x40
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08c      	sub	sp, #48	@ 0x30
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <xQueueReceive+0x32>
    __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	623b      	str	r3, [r7, #32]
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	e7fd      	b.n	8003232 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d103      	bne.n	8003244 <xQueueReceive+0x40>
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <xQueueReceive+0x44>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <xQueueReceive+0x46>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <xQueueReceive+0x62>
    __asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61fb      	str	r3, [r7, #28]
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003266:	f001 fabb 	bl	80047e0 <xTaskGetSchedulerState>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <xQueueReceive+0x72>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <xQueueReceive+0x76>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <xQueueReceive+0x78>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <xQueueReceive+0x94>
    __asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61bb      	str	r3, [r7, #24]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003298:	f002 f8f4 	bl	8005484 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d023      	beq.n	80032f0 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ac:	f000 f9bc 	bl	8003628 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00f      	beq.n	80032e0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	3310      	adds	r3, #16
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 f869 	bl	800439c <xTaskRemoveFromEventList>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80032d0:	4b42      	ldr	r3, [pc, #264]	@ (80033dc <xQueueReceive+0x1d8>)
 80032d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80032e0:	f002 f902 	bl	80054e8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80032e4:	2101      	movs	r1, #1
 80032e6:	20a4      	movs	r0, #164	@ 0xa4
 80032e8:	f003 fd5e 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e071      	b.n	80033d4 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d107      	bne.n	8003306 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032f6:	f002 f8f7 	bl	80054e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80032fa:	2100      	movs	r1, #0
 80032fc:	20a4      	movs	r0, #164	@ 0xa4
 80032fe:	f003 fd53 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 8003302:	2300      	movs	r3, #0
 8003304:	e066      	b.n	80033d4 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	4618      	mov	r0, r3
 8003312:	f001 f923 	bl	800455c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003316:	2301      	movs	r3, #1
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800331a:	f002 f8e5 	bl	80054e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800331e:	f000 fce7 	bl	8003cf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003322:	f002 f8af 	bl	8005484 <vPortEnterCritical>
 8003326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d103      	bne.n	800333c <xQueueReceive+0x138>
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003342:	b25b      	sxtb	r3, r3
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d103      	bne.n	8003352 <xQueueReceive+0x14e>
 800334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003352:	f002 f8c9 	bl	80054e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003356:	1d3a      	adds	r2, r7, #4
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f001 f914 	bl	800458c <xTaskCheckForTimeOut>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d123      	bne.n	80033b2 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800336a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800336c:	f000 f9d4 	bl	8003718 <prvIsQueueEmpty>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d017      	beq.n	80033a6 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003378:	3324      	adds	r3, #36	@ 0x24
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f000 ff9a 	bl	80042b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003386:	f000 f975 	bl	8003674 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800338a:	f000 fcbf 	bl	8003d0c <xTaskResumeAll>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d181      	bne.n	8003298 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <xQueueReceive+0x1d8>)
 8003396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	e778      	b.n	8003298 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80033a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a8:	f000 f964 	bl	8003674 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033ac:	f000 fcae 	bl	8003d0c <xTaskResumeAll>
 80033b0:	e772      	b.n	8003298 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80033b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b4:	f000 f95e 	bl	8003674 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033b8:	f000 fca8 	bl	8003d0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033be:	f000 f9ab 	bl	8003718 <prvIsQueueEmpty>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f43f af67 	beq.w	8003298 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80033ca:	2100      	movs	r1, #0
 80033cc:	20a4      	movs	r0, #164	@ 0xa4
 80033ce:	f003 fceb 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80033d2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	@ 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	@ 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <xQueueSemaphoreTake+0x34>
    __asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	61bb      	str	r3, [r7, #24]
}
 800340e:	bf00      	nop
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <xQueueSemaphoreTake+0x54>
    __asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	617b      	str	r3, [r7, #20]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003434:	f001 f9d4 	bl	80047e0 <xTaskGetSchedulerState>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <xQueueSemaphoreTake+0x64>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueSemaphoreTake+0x68>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueSemaphoreTake+0x6a>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <xQueueSemaphoreTake+0x86>
    __asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	613b      	str	r3, [r7, #16]
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	e7fd      	b.n	8003462 <xQueueSemaphoreTake+0x82>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003466:	f002 f80d 	bl	8005484 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d028      	beq.n	80034c8 <xQueueSemaphoreTake+0xe8>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <xQueueSemaphoreTake+0xb0>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003486:	f001 fb3b 	bl	8004b00 <pvTaskIncrementMutexHeldCount>
 800348a:	4602      	mov	r2, r0
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00f      	beq.n	80034b8 <xQueueSemaphoreTake+0xd8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	3310      	adds	r3, #16
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ff7d 	bl	800439c <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <xQueueSemaphoreTake+0xd8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034a8:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <xQueueSemaphoreTake+0x214>)
 80034aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80034b8:	f002 f816 	bl	80054e8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );
 80034bc:	2101      	movs	r1, #1
 80034be:	20a5      	movs	r0, #165	@ 0xa5
 80034c0:	f003 fc72 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e091      	b.n	80035ec <xQueueSemaphoreTake+0x20c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d107      	bne.n	80034de <xQueueSemaphoreTake+0xfe>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80034ce:	f002 f80b 	bl	80054e8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 80034d2:	2100      	movs	r1, #0
 80034d4:	20a5      	movs	r0, #165	@ 0xa5
 80034d6:	f003 fc67 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80034da:	2300      	movs	r3, #0
 80034dc:	e086      	b.n	80035ec <xQueueSemaphoreTake+0x20c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <xQueueSemaphoreTake+0x112>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80034e4:	f107 0308 	add.w	r3, r7, #8
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 f837 	bl	800455c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80034ee:	2301      	movs	r3, #1
 80034f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80034f2:	f001 fff9 	bl	80054e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80034f6:	f000 fbfb 	bl	8003cf0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80034fa:	f001 ffc3 	bl	8005484 <vPortEnterCritical>
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350a:	d103      	bne.n	8003514 <xQueueSemaphoreTake+0x134>
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800351a:	b25b      	sxtb	r3, r3
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d103      	bne.n	800352a <xQueueSemaphoreTake+0x14a>
 8003522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800352a:	f001 ffdd 	bl	80054e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800352e:	463a      	mov	r2, r7
 8003530:	f107 0308 	add.w	r3, r7, #8
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f001 f828 	bl	800458c <xTaskCheckForTimeOut>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d132      	bne.n	80035a8 <xQueueSemaphoreTake+0x1c8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003544:	f000 f8e8 	bl	8003718 <prvIsQueueEmpty>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d026      	beq.n	800359c <xQueueSemaphoreTake+0x1bc>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <xQueueSemaphoreTake+0x18a>
                    {
                        taskENTER_CRITICAL();
 8003556:	f001 ff95 	bl	8005484 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f001 f960 	bl	8004824 <xTaskPriorityInherit>
 8003564:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8003566:	f001 ffbf 	bl	80054e8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	3324      	adds	r3, #36	@ 0x24
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fea0 	bl	80042b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003578:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800357a:	f000 f87b 	bl	8003674 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800357e:	f000 fbc5 	bl	8003d0c <xTaskResumeAll>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af6e 	bne.w	8003466 <xQueueSemaphoreTake+0x86>
                {
                    taskYIELD_WITHIN_API();
 800358a:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <xQueueSemaphoreTake+0x214>)
 800358c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	e764      	b.n	8003466 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800359c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800359e:	f000 f869 	bl	8003674 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80035a2:	f000 fbb3 	bl	8003d0c <xTaskResumeAll>
 80035a6:	e75e      	b.n	8003466 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80035a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035aa:	f000 f863 	bl	8003674 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80035ae:	f000 fbad 	bl	8003d0c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035b4:	f000 f8b0 	bl	8003718 <prvIsQueueEmpty>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f43f af53 	beq.w	8003466 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <xQueueSemaphoreTake+0x202>
                    {
                        taskENTER_CRITICAL();
 80035c6:	f001 ff5d 	bl	8005484 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035cc:	f000 f814 	bl	80035f8 <prvGetDisinheritPriorityAfterTimeout>
 80035d0:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	69f9      	ldr	r1, [r7, #28]
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 f9cd 	bl	8004978 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80035de:	f001 ff83 	bl	80054e8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );
 80035e2:	2100      	movs	r1, #0
 80035e4:	20a5      	movs	r0, #165	@ 0xa5
 80035e6:	f003 fbdf 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80035ea:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3730      	adds	r7, #48	@ 0x30
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	e000ed04 	.word	0xe000ed04

080035f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1c3 0305 	rsb	r3, r3, #5
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e001      	b.n	800361a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800361a:	68fb      	ldr	r3, [r7, #12]
    }
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	441a      	add	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d303      	bcc.n	800365c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003664:	461a      	mov	r2, r3
 8003666:	6838      	ldr	r0, [r7, #0]
 8003668:	f003 ffdc 	bl	8007624 <memcpy>
    }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800367c:	f001 ff02 	bl	8005484 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003686:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003688:	e011      	b.n	80036ae <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3324      	adds	r3, #36	@ 0x24
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fe80 	bl	800439c <xTaskRemoveFromEventList>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80036a2:	f000 ffdf 	bl	8004664 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80036ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	dce9      	bgt.n	800368a <prvUnlockQueue+0x16>
 80036b6:	e000      	b.n	80036ba <prvUnlockQueue+0x46>
                    break;
 80036b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	22ff      	movs	r2, #255	@ 0xff
 80036be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80036c2:	f001 ff11 	bl	80054e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80036c6:	f001 fedd 	bl	8005484 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d2:	e011      	b.n	80036f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d012      	beq.n	8003702 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3310      	adds	r3, #16
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fe5b 	bl	800439c <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80036ec:	f000 ffba 	bl	8004664 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80036f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	dce9      	bgt.n	80036d4 <prvUnlockQueue+0x60>
 8003700:	e000      	b.n	8003704 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003702:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	22ff      	movs	r2, #255	@ 0xff
 8003708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800370c:	f001 feec 	bl	80054e8 <vPortExitCritical>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003720:	f001 feb0 	bl	8005484 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800372c:	2301      	movs	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e001      	b.n	8003736 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003736:	f001 fed7 	bl	80054e8 <vPortExitCritical>

    return xReturn;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d024      	beq.n	80037c0 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e01e      	b.n	80037ba <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800377c:	4a18      	ldr	r2, [pc, #96]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	d105      	bne.n	8003798 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4a13      	ldr	r2, [pc, #76]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 8003792:	4413      	add	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
                    break;
 8003796:	e013      	b.n	80037c0 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <vQueueAddToRegistry+0x70>
 800379e:	4a10      	ldr	r2, [pc, #64]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d104      	bne.n	80037b4 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4a0c      	ldr	r2, [pc, #48]	@ (80037e0 <vQueueAddToRegistry+0x9c>)
 80037b0:	4413      	add	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3301      	adds	r3, #1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d9dd      	bls.n	800377c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d005      	beq.n	80037d2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80037d2:	20b6      	movs	r0, #182	@ 0xb6
 80037d4:	f003 faac 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80037d8:	bf00      	nop
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000110 	.word	0x20000110

080037e4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80037f4:	f001 fe46 	bl	8005484 <vPortEnterCritical>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037fe:	b25b      	sxtb	r3, r3
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d103      	bne.n	800380e <vQueueWaitForMessageRestricted+0x2a>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003814:	b25b      	sxtb	r3, r3
 8003816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381a:	d103      	bne.n	8003824 <vQueueWaitForMessageRestricted+0x40>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003824:	f001 fe60 	bl	80054e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3324      	adds	r3, #36	@ 0x24
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68b9      	ldr	r1, [r7, #8]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fd65 	bl	8004308 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f7ff ff18 	bl	8003674 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8003844:	20b9      	movs	r0, #185	@ 0xb9
 8003846:	f003 fa73 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	@ 0x28
 8003856:	af04      	add	r7, sp, #16
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f001 ff3b 	bl	80056e0 <pvPortMalloc>
 800386a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003872:	2058      	movs	r0, #88	@ 0x58
 8003874:	f001 ff34 	bl	80056e0 <pvPortMalloc>
 8003878:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003880:	2258      	movs	r2, #88	@ 0x58
 8003882:	2100      	movs	r1, #0
 8003884:	6978      	ldr	r0, [r7, #20]
 8003886:	f003 fea0 	bl	80075ca <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003890:	e005      	b.n	800389e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003892:	6938      	ldr	r0, [r7, #16]
 8003894:	f002 f856 	bl	8005944 <vPortFree>
 8003898:	e001      	b.n	800389e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038a4:	2300      	movs	r3, #0
 80038a6:	9303      	str	r3, [sp, #12]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9302      	str	r3, [sp, #8]
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 f82d 	bl	800391a <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80038c0:	697b      	ldr	r3, [r7, #20]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff ffb3 	bl	8003852 <prvCreateTask>
 80038ec:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80038f4:	6938      	ldr	r0, [r7, #16]
 80038f6:	f000 f8a1 	bl	8003a3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e002      	b.n	8003906 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
 8003904:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4619      	mov	r1, r3
 800390a:	20c2      	movs	r0, #194	@ 0xc2
 800390c:	f003 fa4c 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003910:	697b      	ldr	r3, [r7, #20]
    }
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
 8003926:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	21a5      	movs	r1, #165	@ 0xa5
 8003934:	f003 fe49 	bl	80075ca <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8003938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003942:	3b01      	subs	r3, #1
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	f023 0307 	bic.w	r3, r3, #7
 8003950:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	617b      	str	r3, [r7, #20]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01e      	beq.n	80039b8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
 800397e:	e012      	b.n	80039a6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	7819      	ldrb	r1, [r3, #0]
 8003988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	3334      	adds	r3, #52	@ 0x34
 8003990:	460a      	mov	r2, r1
 8003992:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d9e9      	bls.n	8003980 <prvInitialiseNewTask+0x66>
 80039ac:	e000      	b.n	80039b0 <prvInitialiseNewTask+0x96>
            {
                break;
 80039ae:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80039b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d90b      	bls.n	80039d6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	613b      	str	r3, [r7, #16]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d901      	bls.n	80039e0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80039dc:	2304      	movs	r3, #4
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80039e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039ea:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff f9cf 	bl	8002d94 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f8:	3318      	adds	r3, #24
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f9ca 	bl	8002d94 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a04:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	f1c3 0205 	rsb	r2, r3, #5
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a14:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68f9      	ldr	r1, [r7, #12]
 8003a1a:	69b8      	ldr	r0, [r7, #24]
 8003a1c:	f001 fbb4 	bl	8005188 <pxPortInitialiseStack>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a32:	bf00      	nop
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8003a3c:	b5b0      	push	{r4, r5, r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af02      	add	r7, sp, #8
 8003a42:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8003a44:	f001 fd1e 	bl	8005484 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a50:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003a52:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8003a5a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <prvAddNewTaskToReadyList+0x150>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8003a68:	f000 fe20 	bl	80046ac <prvInitialiseTaskLists>
 8003a6c:	e00d      	b.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b49      	ldr	r3, [pc, #292]	@ (8003b94 <prvAddNewTaskToReadyList+0x158>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003a84:	4a42      	ldr	r2, [pc, #264]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003a8a:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a41      	ldr	r2, [pc, #260]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a92:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a94:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <prvAddNewTaskToReadyList+0x15c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d016      	beq.n	8003ad0 <prvAddNewTaskToReadyList+0x94>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 f9f3 	bl	8006e90 <SEGGER_SYSVIEW_OnTaskCreate>
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	461d      	mov	r5, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	1ae3      	subs	r3, r4, r3
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	462b      	mov	r3, r5
 8003acc:	f003 fce4 	bl	8007498 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 fa60 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	2201      	movs	r2, #1
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b9c <prvAddNewTaskToReadyList+0x160>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b9c <prvAddNewTaskToReadyList+0x160>)
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aee:	492c      	ldr	r1, [pc, #176]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	3304      	adds	r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	3204      	adds	r2, #4
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b2e:	441a      	add	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	4919      	ldr	r1, [pc, #100]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	4814      	ldr	r0, [pc, #80]	@ (8003ba0 <prvAddNewTaskToReadyList+0x164>)
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4403      	add	r3, r0
 8003b58:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003b5a:	f001 fcc5 	bl	80054e8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <prvAddNewTaskToReadyList+0x158>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8003b66:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <prvAddNewTaskToReadyList+0x154>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d207      	bcs.n	8003b84 <prvAddNewTaskToReadyList+0x148>
 8003b74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba4 <prvAddNewTaskToReadyList+0x168>)
 8003b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8c:	20000228 	.word	0x20000228
 8003b90:	20000150 	.word	0x20000150
 8003b94:	20000234 	.word	0x20000234
 8003b98:	20000244 	.word	0x20000244
 8003b9c:	20000230 	.word	0x20000230
 8003ba0:	20000154 	.word	0x20000154
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	e011      	b.n	8003be0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c30 <prvCreateIdleTasks+0x88>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	7819      	ldrb	r1, [r3, #0]
 8003bc4:	1d3a      	adds	r2, r7, #4
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4413      	add	r3, r2
 8003bca:	460a      	mov	r2, r1
 8003bcc:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003bce:	1d3a      	adds	r2, r7, #4
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d006      	beq.n	8003be8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b09      	cmp	r3, #9
 8003be4:	ddea      	ble.n	8003bbc <prvCreateIdleTasks+0x14>
 8003be6:	e000      	b.n	8003bea <prvCreateIdleTasks+0x42>
        {
            break;
 8003be8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e015      	b.n	8003c1c <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <prvCreateIdleTasks+0x8c>)
 8003bf2:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c38 <prvCreateIdleTasks+0x90>)
 8003bfa:	4413      	add	r3, r2
 8003bfc:	1d39      	adds	r1, r7, #4
 8003bfe:	9301      	str	r3, [sp, #4]
 8003c00:	2300      	movs	r3, #0
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	2300      	movs	r3, #0
 8003c06:	2282      	movs	r2, #130	@ 0x82
 8003c08:	6938      	ldr	r0, [r7, #16]
 8003c0a:	f7ff fe5e 	bl	80038ca <xTaskCreate>
 8003c0e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dde6      	ble.n	8003bf0 <prvCreateIdleTasks+0x48>
 8003c22:	e000      	b.n	8003c26 <prvCreateIdleTasks+0x7e>
        {
            break;
 8003c24:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003c26:	69fb      	ldr	r3, [r7, #28]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	080076c8 	.word	0x080076c8
 8003c34:	0800467d 	.word	0x0800467d
 8003c38:	2000024c 	.word	0x2000024c

08003c3c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003c42:	f7ff ffb1 	bl	8003ba8 <prvCreateIdleTasks>
 8003c46:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003c4e:	f001 f803 	bl	8004c58 <xTimerCreateTimerTask>
 8003c52:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d124      	bne.n	8003ca4 <vTaskStartScheduler+0x68>
    __asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	60bb      	str	r3, [r7, #8]
}
 8003c6c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <vTaskStartScheduler+0x9c>)
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c76:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <vTaskStartScheduler+0xa0>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ce0 <vTaskStartScheduler+0xa4>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003c82:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <vTaskStartScheduler+0xa8>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <vTaskStartScheduler+0xac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d102      	bne.n	8003c94 <vTaskStartScheduler+0x58>
 8003c8e:	f003 f8e3 	bl	8006e58 <SEGGER_SYSVIEW_OnIdle>
 8003c92:	e004      	b.n	8003c9e <vTaskStartScheduler+0x62>
 8003c94:	4b14      	ldr	r3, [pc, #80]	@ (8003ce8 <vTaskStartScheduler+0xac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 f93b 	bl	8006f14 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003c9e:	f001 fb01 	bl	80052a4 <xPortStartScheduler>
 8003ca2:	e00f      	b.n	8003cc4 <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d10b      	bne.n	8003cc4 <vTaskStartScheduler+0x88>
    __asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	607b      	str	r3, [r7, #4]
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <vTaskStartScheduler+0xb0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003cc8:	20cd      	movs	r0, #205	@ 0xcd
 8003cca:	f003 f831 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003cce:	bf00      	nop
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000248 	.word	0x20000248
 8003cdc:	20000234 	.word	0x20000234
 8003ce0:	2000022c 	.word	0x2000022c
 8003ce4:	2000024c 	.word	0x2000024c
 8003ce8:	20000150 	.word	0x20000150
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003cf4:	4b04      	ldr	r3, [pc, #16]	@ (8003d08 <vTaskSuspendAll+0x18>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	4a03      	ldr	r2, [pc, #12]	@ (8003d08 <vTaskSuspendAll+0x18>)
 8003cfc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003cfe:	20cf      	movs	r0, #207	@ 0xcf
 8003d00:	f003 f816 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000250 	.word	0x20000250

08003d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003d1a:	f001 fbb3 	bl	8005484 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003d22:	4b7a      	ldr	r3, [pc, #488]	@ (8003f0c <xTaskResumeAll+0x200>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <xTaskResumeAll+0x36>
    __asm volatile
 8003d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2e:	f383 8811 	msr	BASEPRI, r3
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	603b      	str	r3, [r7, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	e7fd      	b.n	8003d3e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003d42:	4b72      	ldr	r3, [pc, #456]	@ (8003f0c <xTaskResumeAll+0x200>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	4a70      	ldr	r2, [pc, #448]	@ (8003f0c <xTaskResumeAll+0x200>)
 8003d4a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003f0c <xTaskResumeAll+0x200>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 80ce 	bne.w	8003ef2 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d56:	4b6e      	ldr	r3, [pc, #440]	@ (8003f10 <xTaskResumeAll+0x204>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80c9 	beq.w	8003ef2 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d60:	e092      	b.n	8003e88 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d62:	4b6c      	ldr	r3, [pc, #432]	@ (8003f14 <xTaskResumeAll+0x208>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	69fa      	ldr	r2, [r7, #28]
 8003d76:	6a12      	ldr	r2, [r2, #32]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	69d2      	ldr	r2, [r2, #28]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	3318      	adds	r3, #24
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d103      	bne.n	8003d98 <xTaskResumeAll+0x8c>
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1e5a      	subs	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	69fa      	ldr	r2, [r7, #28]
 8003db4:	68d2      	ldr	r2, [r2, #12]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	69fa      	ldr	r2, [r7, #28]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d103      	bne.n	8003dd6 <xTaskResumeAll+0xca>
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	615a      	str	r2, [r3, #20]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f003 f8d5 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df2:	2201      	movs	r2, #1
 8003df4:	409a      	lsls	r2, r3
 8003df6:	4b48      	ldr	r3, [pc, #288]	@ (8003f18 <xTaskResumeAll+0x20c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	4a46      	ldr	r2, [pc, #280]	@ (8003f18 <xTaskResumeAll+0x20c>)
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e04:	4945      	ldr	r1, [pc, #276]	@ (8003f1c <xTaskResumeAll+0x210>)
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3304      	adds	r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	3204      	adds	r2, #4
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	1d1a      	adds	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4a36      	ldr	r2, [pc, #216]	@ (8003f1c <xTaskResumeAll+0x210>)
 8003e44:	441a      	add	r2, r3
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	615a      	str	r2, [r3, #20]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	4933      	ldr	r1, [pc, #204]	@ (8003f1c <xTaskResumeAll+0x210>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e60:	1c59      	adds	r1, r3, #1
 8003e62:	482e      	ldr	r0, [pc, #184]	@ (8003f1c <xTaskResumeAll+0x210>)
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4403      	add	r3, r0
 8003e6e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e74:	4b2a      	ldr	r3, [pc, #168]	@ (8003f20 <xTaskResumeAll+0x214>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d904      	bls.n	8003e88 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003e7e:	4a29      	ldr	r2, [pc, #164]	@ (8003f24 <xTaskResumeAll+0x218>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2101      	movs	r1, #1
 8003e84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e88:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <xTaskResumeAll+0x208>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f af68 	bne.w	8003d62 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003e98:	f000 fc86 	bl	80047a8 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e9c:	4b22      	ldr	r3, [pc, #136]	@ (8003f28 <xTaskResumeAll+0x21c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003ea8:	f000 f878 	bl	8003f9c <xTaskIncrementTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <xTaskResumeAll+0x218>)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ef      	bne.n	8003ea8 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003ec8:	4b17      	ldr	r3, [pc, #92]	@ (8003f28 <xTaskResumeAll+0x21c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003ece:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <xTaskResumeAll+0x218>)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003ede:	4b10      	ldr	r3, [pc, #64]	@ (8003f20 <xTaskResumeAll+0x214>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <xTaskResumeAll+0x220>)
 8003ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ef2:	f001 faf9 	bl	80054e8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	20d0      	movs	r0, #208	@ 0xd0
 8003efc:	f002 ff54 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003f00:	69bb      	ldr	r3, [r7, #24]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000250 	.word	0x20000250
 8003f10:	20000228 	.word	0x20000228
 8003f14:	200001e8 	.word	0x200001e8
 8003f18:	20000230 	.word	0x20000230
 8003f1c:	20000154 	.word	0x20000154
 8003f20:	20000150 	.word	0x20000150
 8003f24:	2000023c 	.word	0x2000023c
 8003f28:	20000238 	.word	0x20000238
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <xTaskGetTickCount+0x20>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	20d1      	movs	r0, #209	@ 0xd1
 8003f40:	f002 ff32 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003f44:	687b      	ldr	r3, [r7, #4]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	2000022c 	.word	0x2000022c

08003f54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f5a:	f001 fb7f 	bl	800565c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <xTaskGetTickCountFromISR+0x28>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003f68:	6839      	ldr	r1, [r7, #0]
 8003f6a:	20d2      	movs	r0, #210	@ 0xd2
 8003f6c:	f002 ff1c 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003f70:	683b      	ldr	r3, [r7, #0]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000022c 	.word	0x2000022c

08003f80 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <uxTaskGetNumberOfTasks+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	20d3      	movs	r0, #211	@ 0xd3
 8003f8c:	f002 ff0c 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8003f90:	4b01      	ldr	r3, [pc, #4]	@ (8003f98 <uxTaskGetNumberOfTasks+0x18>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000228 	.word	0x20000228

08003f9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003fa6:	4b83      	ldr	r3, [pc, #524]	@ (80041b4 <xTaskIncrementTick+0x218>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 80f3 	bne.w	8004196 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb0:	4b81      	ldr	r3, [pc, #516]	@ (80041b8 <xTaskIncrementTick+0x21c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fb8:	4a7f      	ldr	r2, [pc, #508]	@ (80041b8 <xTaskIncrementTick+0x21c>)
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d121      	bne.n	8004008 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fc4:	4b7d      	ldr	r3, [pc, #500]	@ (80041bc <xTaskIncrementTick+0x220>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <xTaskIncrementTick+0x4a>
    __asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	607b      	str	r3, [r7, #4]
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <xTaskIncrementTick+0x46>
 8003fe6:	4b75      	ldr	r3, [pc, #468]	@ (80041bc <xTaskIncrementTick+0x220>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	4b74      	ldr	r3, [pc, #464]	@ (80041c0 <xTaskIncrementTick+0x224>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a72      	ldr	r2, [pc, #456]	@ (80041bc <xTaskIncrementTick+0x220>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	4a72      	ldr	r2, [pc, #456]	@ (80041c0 <xTaskIncrementTick+0x224>)
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <xTaskIncrementTick+0x228>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a70      	ldr	r2, [pc, #448]	@ (80041c4 <xTaskIncrementTick+0x228>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	f000 fbd0 	bl	80047a8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004008:	4b6f      	ldr	r3, [pc, #444]	@ (80041c8 <xTaskIncrementTick+0x22c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	429a      	cmp	r2, r3
 8004010:	f0c0 80ac 	bcc.w	800416c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004014:	4b69      	ldr	r3, [pc, #420]	@ (80041bc <xTaskIncrementTick+0x220>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d104      	bne.n	8004028 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800401e:	4b6a      	ldr	r3, [pc, #424]	@ (80041c8 <xTaskIncrementTick+0x22c>)
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	601a      	str	r2, [r3, #0]
                    break;
 8004026:	e0a1      	b.n	800416c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004028:	4b64      	ldr	r3, [pc, #400]	@ (80041bc <xTaskIncrementTick+0x220>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	d203      	bcs.n	8004048 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004040:	4a61      	ldr	r2, [pc, #388]	@ (80041c8 <xTaskIncrementTick+0x22c>)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	6013      	str	r3, [r2, #0]
                        break;
 8004046:	e091      	b.n	800416c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	6892      	ldr	r2, [r2, #8]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3304      	adds	r3, #4
 800406a:	429a      	cmp	r2, r3
 800406c:	d103      	bne.n	8004076 <xTaskIncrementTick+0xda>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01e      	beq.n	80040cc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	6a12      	ldr	r2, [r2, #32]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	69d2      	ldr	r2, [r2, #28]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3318      	adds	r3, #24
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d103      	bne.n	80040bc <xTaskIncrementTick+0x120>
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6a1a      	ldr	r2, [r3, #32]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	605a      	str	r2, [r3, #4]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1e5a      	subs	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 ff62 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	2201      	movs	r2, #1
 80040da:	409a      	lsls	r2, r3
 80040dc:	4b3b      	ldr	r3, [pc, #236]	@ (80041cc <xTaskIncrementTick+0x230>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	4a3a      	ldr	r2, [pc, #232]	@ (80041cc <xTaskIncrementTick+0x230>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ea:	4939      	ldr	r1, [pc, #228]	@ (80041d0 <xTaskIncrementTick+0x234>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3304      	adds	r3, #4
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	3204      	adds	r2, #4
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	1d1a      	adds	r2, r3, #4
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4a29      	ldr	r2, [pc, #164]	@ (80041d0 <xTaskIncrementTick+0x234>)
 800412a:	441a      	add	r2, r3
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	615a      	str	r2, [r3, #20]
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004134:	4926      	ldr	r1, [pc, #152]	@ (80041d0 <xTaskIncrementTick+0x234>)
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004146:	1c59      	adds	r1, r3, #1
 8004148:	4821      	ldr	r0, [pc, #132]	@ (80041d0 <xTaskIncrementTick+0x234>)
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4403      	add	r3, r0
 8004154:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415a:	4b1e      	ldr	r3, [pc, #120]	@ (80041d4 <xTaskIncrementTick+0x238>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	429a      	cmp	r2, r3
 8004162:	f67f af57 	bls.w	8004014 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8004166:	2301      	movs	r3, #1
 8004168:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800416a:	e753      	b.n	8004014 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <xTaskIncrementTick+0x238>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004172:	4917      	ldr	r1, [pc, #92]	@ (80041d0 <xTaskIncrementTick+0x234>)
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d901      	bls.n	8004188 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8004184:	2301      	movs	r3, #1
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <xTaskIncrementTick+0x23c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	627b      	str	r3, [r7, #36]	@ 0x24
 8004194:	e004      	b.n	80041a0 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004196:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <xTaskIncrementTick+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <xTaskIncrementTick+0x240>)
 800419e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	4619      	mov	r1, r3
 80041a4:	20db      	movs	r0, #219	@ 0xdb
 80041a6:	f002 fdff 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	@ 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000250 	.word	0x20000250
 80041b8:	2000022c 	.word	0x2000022c
 80041bc:	200001e0 	.word	0x200001e0
 80041c0:	200001e4 	.word	0x200001e4
 80041c4:	20000240 	.word	0x20000240
 80041c8:	20000248 	.word	0x20000248
 80041cc:	20000230 	.word	0x20000230
 80041d0:	20000154 	.word	0x20000154
 80041d4:	20000150 	.word	0x20000150
 80041d8:	2000023c 	.word	0x2000023c
 80041dc:	20000238 	.word	0x20000238

080041e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80041e6:	4b2e      	ldr	r3, [pc, #184]	@ (80042a0 <vTaskSwitchContext+0xc0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80041ee:	4b2d      	ldr	r3, [pc, #180]	@ (80042a4 <vTaskSwitchContext+0xc4>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80041f4:	e04f      	b.n	8004296 <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 80041f6:	4b2b      	ldr	r3, [pc, #172]	@ (80042a4 <vTaskSwitchContext+0xc4>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80041fc:	4b2a      	ldr	r3, [pc, #168]	@ (80042a8 <vTaskSwitchContext+0xc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	f1c3 031f 	rsb	r3, r3, #31
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	4926      	ldr	r1, [pc, #152]	@ (80042ac <vTaskSwitchContext+0xcc>)
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <vTaskSwitchContext+0x5e>
    __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	607b      	str	r3, [r7, #4]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <vTaskSwitchContext+0x5a>
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4a18      	ldr	r2, [pc, #96]	@ (80042ac <vTaskSwitchContext+0xcc>)
 800424a:	4413      	add	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3308      	adds	r3, #8
 8004260:	429a      	cmp	r2, r3
 8004262:	d103      	bne.n	800426c <vTaskSwitchContext+0x8c>
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	4a0f      	ldr	r2, [pc, #60]	@ (80042b0 <vTaskSwitchContext+0xd0>)
 8004274:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8004276:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <vTaskSwitchContext+0xd4>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <vTaskSwitchContext+0xd0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d102      	bne.n	8004288 <vTaskSwitchContext+0xa8>
 8004282:	f002 fde9 	bl	8006e58 <SEGGER_SYSVIEW_OnIdle>
 8004286:	e004      	b.n	8004292 <vTaskSwitchContext+0xb2>
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <vTaskSwitchContext+0xd0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f002 fe41 	bl	8006f14 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004292:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <vTaskSwitchContext+0xd0>)
 8004294:	681b      	ldr	r3, [r3, #0]
    }
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000250 	.word	0x20000250
 80042a4:	2000023c 	.word	0x2000023c
 80042a8:	20000230 	.word	0x20000230
 80042ac:	20000154 	.word	0x20000154
 80042b0:	20000150 	.word	0x20000150
 80042b4:	2000024c 	.word	0x2000024c

080042b8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e0:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <vTaskPlaceOnEventList+0x4c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3318      	adds	r3, #24
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7fe fd62 	bl	8002db2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ee:	2101      	movs	r1, #1
 80042f0:	6838      	ldr	r0, [r7, #0]
 80042f2:	f000 fc23 	bl	8004b3c <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80042f6:	20e1      	movs	r0, #225	@ 0xe1
 80042f8:	f002 fd1a 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000150 	.word	0x20000150

08004308 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	613b      	str	r3, [r7, #16]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	4b17      	ldr	r3, [pc, #92]	@ (8004398 <vTaskPlaceOnEventListRestricted+0x90>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	61da      	str	r2, [r3, #28]
 8004340:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <vTaskPlaceOnEventListRestricted+0x90>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	6892      	ldr	r2, [r2, #8]
 8004348:	621a      	str	r2, [r3, #32]
 800434a:	4b13      	ldr	r3, [pc, #76]	@ (8004398 <vTaskPlaceOnEventListRestricted+0x90>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	3218      	adds	r2, #24
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <vTaskPlaceOnEventListRestricted+0x90>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f103 0218 	add.w	r2, r3, #24
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	609a      	str	r2, [r3, #8]
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <vTaskPlaceOnEventListRestricted+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	629a      	str	r2, [r3, #40]	@ 0x28
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	f000 fbda 	bl	8004b3c <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004388:	20e3      	movs	r0, #227	@ 0xe3
 800438a:	f002 fcd1 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800438e:	bf00      	nop
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000150 	.word	0x20000150

0800439c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60fb      	str	r3, [r7, #12]
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	e7fd      	b.n	80043c6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	6a12      	ldr	r2, [r2, #32]
 80043d8:	609a      	str	r2, [r3, #8]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	6a3a      	ldr	r2, [r7, #32]
 80043e0:	69d2      	ldr	r2, [r2, #28]
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	3318      	adds	r3, #24
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d103      	bne.n	80043f8 <xTaskRemoveFromEventList+0x5c>
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	6a1a      	ldr	r2, [r3, #32]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	2200      	movs	r2, #0
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	1e5a      	subs	r2, r3, #1
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004408:	4b4e      	ldr	r3, [pc, #312]	@ (8004544 <xTaskRemoveFromEventList+0x1a8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d164      	bne.n	80044da <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	68d2      	ldr	r2, [r2, #12]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	3304      	adds	r3, #4
 8004432:	429a      	cmp	r2, r3
 8004434:	d103      	bne.n	800443e <xTaskRemoveFromEventList+0xa2>
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	2200      	movs	r2, #0
 8004442:	615a      	str	r2, [r3, #20]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	1e5a      	subs	r2, r3, #1
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	4618      	mov	r0, r3
 8004452:	f002 fda1 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	4b3a      	ldr	r3, [pc, #232]	@ (8004548 <xTaskRemoveFromEventList+0x1ac>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	4a38      	ldr	r2, [pc, #224]	@ (8004548 <xTaskRemoveFromEventList+0x1ac>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446c:	4937      	ldr	r1, [pc, #220]	@ (800454c <xTaskRemoveFromEventList+0x1b0>)
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3304      	adds	r3, #4
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	3204      	adds	r2, #4
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4a28      	ldr	r2, [pc, #160]	@ (800454c <xTaskRemoveFromEventList+0x1b0>)
 80044ac:	441a      	add	r2, r3
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	615a      	str	r2, [r3, #20]
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	4925      	ldr	r1, [pc, #148]	@ (800454c <xTaskRemoveFromEventList+0x1b0>)
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	4820      	ldr	r0, [pc, #128]	@ (800454c <xTaskRemoveFromEventList+0x1b0>)
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4403      	add	r3, r0
 80044d6:	6019      	str	r1, [r3, #0]
 80044d8:	e01b      	b.n	8004512 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <xTaskRemoveFromEventList+0x1b4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	61da      	str	r2, [r3, #28]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	621a      	str	r2, [r3, #32]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	6a3a      	ldr	r2, [r7, #32]
 80044f4:	3218      	adds	r2, #24
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	f103 0218 	add.w	r2, r3, #24
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	609a      	str	r2, [r3, #8]
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	4a12      	ldr	r2, [pc, #72]	@ (8004550 <xTaskRemoveFromEventList+0x1b4>)
 8004506:	629a      	str	r2, [r3, #40]	@ 0x28
 8004508:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <xTaskRemoveFromEventList+0x1b4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3301      	adds	r3, #1
 800450e:	4a10      	ldr	r2, [pc, #64]	@ (8004550 <xTaskRemoveFromEventList+0x1b4>)
 8004510:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004516:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <xTaskRemoveFromEventList+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d905      	bls.n	800452c <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <xTaskRemoveFromEventList+0x1bc>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e001      	b.n	8004530 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 800452c:	2300      	movs	r3, #0
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	4619      	mov	r1, r3
 8004534:	20e4      	movs	r0, #228	@ 0xe4
 8004536:	f002 fc37 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800453c:	4618      	mov	r0, r3
 800453e:	3728      	adds	r7, #40	@ 0x28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000250 	.word	0x20000250
 8004548:	20000230 	.word	0x20000230
 800454c:	20000154 	.word	0x20000154
 8004550:	200001e8 	.word	0x200001e8
 8004554:	20000150 	.word	0x20000150
 8004558:	2000023c 	.word	0x2000023c

0800455c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004564:	4b07      	ldr	r3, [pc, #28]	@ (8004584 <vTaskInternalSetTimeOutState+0x28>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <vTaskInternalSetTimeOutState+0x2c>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004574:	20e7      	movs	r0, #231	@ 0xe7
 8004576:	f002 fbdb 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000240 	.word	0x20000240
 8004588:	2000022c 	.word	0x2000022c

0800458c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	613b      	str	r3, [r7, #16]
}
 80045ae:	bf00      	nop
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	60fb      	str	r3, [r7, #12]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80045d2:	f000 ff57 	bl	8005484 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <xTaskCheckForTimeOut+0xd0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d102      	bne.n	80045f6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e026      	b.n	8004644 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <xTaskCheckForTimeOut+0xd4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d00a      	beq.n	8004618 <xTaskCheckForTimeOut+0x8c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d305      	bcc.n	8004618 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	e015      	b.n	8004644 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	429a      	cmp	r2, r3
 8004620:	d20b      	bcs.n	800463a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	1ad2      	subs	r2, r2, r3
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7ff ff94 	bl	800455c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	e004      	b.n	8004644 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004644:	f000 ff50 	bl	80054e8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4619      	mov	r1, r3
 800464c:	20e8      	movs	r0, #232	@ 0xe8
 800464e:	f002 fbab 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	2000022c 	.word	0x2000022c
 8004660:	20000240 	.word	0x20000240

08004664 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004668:	4b03      	ldr	r3, [pc, #12]	@ (8004678 <vTaskMissedYield+0x14>)
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800466e:	20e9      	movs	r0, #233	@ 0xe9
 8004670:	f002 fb5e 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004674:	bf00      	nop
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000023c 	.word	0x2000023c

0800467c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004684:	f000 f852 	bl	800472c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004688:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <prvIdleTask+0x28>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d9f9      	bls.n	8004684 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004690:	4b05      	ldr	r3, [pc, #20]	@ (80046a8 <prvIdleTask+0x2c>)
 8004692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80046a0:	e7f0      	b.n	8004684 <prvIdleTask+0x8>
 80046a2:	bf00      	nop
 80046a4:	20000154 	.word	0x20000154
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
 80046b6:	e00c      	b.n	80046d2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4a12      	ldr	r2, [pc, #72]	@ (800470c <prvInitialiseTaskLists+0x60>)
 80046c4:	4413      	add	r3, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fb42 	bl	8002d50 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3301      	adds	r3, #1
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b04      	cmp	r3, #4
 80046d6:	d9ef      	bls.n	80046b8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80046d8:	480d      	ldr	r0, [pc, #52]	@ (8004710 <prvInitialiseTaskLists+0x64>)
 80046da:	f7fe fb39 	bl	8002d50 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80046de:	480d      	ldr	r0, [pc, #52]	@ (8004714 <prvInitialiseTaskLists+0x68>)
 80046e0:	f7fe fb36 	bl	8002d50 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80046e4:	480c      	ldr	r0, [pc, #48]	@ (8004718 <prvInitialiseTaskLists+0x6c>)
 80046e6:	f7fe fb33 	bl	8002d50 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80046ea:	480c      	ldr	r0, [pc, #48]	@ (800471c <prvInitialiseTaskLists+0x70>)
 80046ec:	f7fe fb30 	bl	8002d50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80046f0:	480b      	ldr	r0, [pc, #44]	@ (8004720 <prvInitialiseTaskLists+0x74>)
 80046f2:	f7fe fb2d 	bl	8002d50 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <prvInitialiseTaskLists+0x78>)
 80046f8:	4a05      	ldr	r2, [pc, #20]	@ (8004710 <prvInitialiseTaskLists+0x64>)
 80046fa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <prvInitialiseTaskLists+0x7c>)
 80046fe:	4a05      	ldr	r2, [pc, #20]	@ (8004714 <prvInitialiseTaskLists+0x68>)
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000154 	.word	0x20000154
 8004710:	200001b8 	.word	0x200001b8
 8004714:	200001cc 	.word	0x200001cc
 8004718:	200001e8 	.word	0x200001e8
 800471c:	200001fc 	.word	0x200001fc
 8004720:	20000214 	.word	0x20000214
 8004724:	200001e0 	.word	0x200001e0
 8004728:	200001e4 	.word	0x200001e4

0800472c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004732:	e019      	b.n	8004768 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004734:	f000 fea6 	bl	8005484 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004738:	4b10      	ldr	r3, [pc, #64]	@ (800477c <prvCheckTasksWaitingTermination+0x50>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe fb6f 	bl	8002e28 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800474a:	4b0d      	ldr	r3, [pc, #52]	@ (8004780 <prvCheckTasksWaitingTermination+0x54>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3b01      	subs	r3, #1
 8004750:	4a0b      	ldr	r2, [pc, #44]	@ (8004780 <prvCheckTasksWaitingTermination+0x54>)
 8004752:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004754:	4b0b      	ldr	r3, [pc, #44]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3b01      	subs	r3, #1
 800475a:	4a0a      	ldr	r2, [pc, #40]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800475c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800475e:	f000 fec3 	bl	80054e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f810 	bl	8004788 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <prvCheckTasksWaitingTermination+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e1      	bne.n	8004734 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	200001fc 	.word	0x200001fc
 8004780:	20000228 	.word	0x20000228
 8004784:	20000210 	.word	0x20000210

08004788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	4618      	mov	r0, r3
 8004796:	f001 f8d5 	bl	8005944 <vPortFree>
            vPortFree( pxTCB );
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f001 f8d2 	bl	8005944 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ac:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <prvResetNextTaskUnblockTime+0x30>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80047b6:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <prvResetNextTaskUnblockTime+0x34>)
 80047b8:	f04f 32ff 	mov.w	r2, #4294967295
 80047bc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80047be:	e005      	b.n	80047cc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047c0:	4b05      	ldr	r3, [pc, #20]	@ (80047d8 <prvResetNextTaskUnblockTime+0x30>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a04      	ldr	r2, [pc, #16]	@ (80047dc <prvResetNextTaskUnblockTime+0x34>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	200001e0 	.word	0x200001e0
 80047dc:	20000248 	.word	0x20000248

080047e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80047e6:	4b0d      	ldr	r3, [pc, #52]	@ (800481c <xTaskGetSchedulerState+0x3c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80047ee:	2301      	movs	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	e008      	b.n	8004806 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80047f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004820 <xTaskGetSchedulerState+0x40>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80047fc:	2302      	movs	r3, #2
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e001      	b.n	8004806 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4619      	mov	r1, r3
 800480a:	20f5      	movs	r0, #245	@ 0xf5
 800480c:	f002 facc 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004810:	687b      	ldr	r3, [r7, #4]
    }
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000234 	.word	0x20000234
 8004820:	20000250 	.word	0x20000250

08004824 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 808d 	beq.w	8004956 <xTaskPriorityInherit+0x132>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4b4a      	ldr	r3, [pc, #296]	@ (800496c <xTaskPriorityInherit+0x148>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	429a      	cmp	r2, r3
 8004848:	d27c      	bcs.n	8004944 <xTaskPriorityInherit+0x120>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	db06      	blt.n	8004860 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8004852:	4b46      	ldr	r3, [pc, #280]	@ (800496c <xTaskPriorityInherit+0x148>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	f1c3 0205 	rsb	r2, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6959      	ldr	r1, [r3, #20]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4a3f      	ldr	r2, [pc, #252]	@ (8004970 <xTaskPriorityInherit+0x14c>)
 8004872:	4413      	add	r3, r2
 8004874:	4299      	cmp	r1, r3
 8004876:	d15d      	bne.n	8004934 <xTaskPriorityInherit+0x110>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fad3 	bl	8002e28 <uxListRemove>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	2201      	movs	r2, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	4b37      	ldr	r3, [pc, #220]	@ (8004974 <xTaskPriorityInherit+0x150>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4013      	ands	r3, r2
 800489a:	4a36      	ldr	r2, [pc, #216]	@ (8004974 <xTaskPriorityInherit+0x150>)
 800489c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800489e:	4b33      	ldr	r3, [pc, #204]	@ (800496c <xTaskPriorityInherit+0x148>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f002 fb74 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	2201      	movs	r2, #1
 80048b6:	409a      	lsls	r2, r3
 80048b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004974 <xTaskPriorityInherit+0x150>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4313      	orrs	r3, r2
 80048be:	4a2d      	ldr	r2, [pc, #180]	@ (8004974 <xTaskPriorityInherit+0x150>)
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c6:	492a      	ldr	r1, [pc, #168]	@ (8004970 <xTaskPriorityInherit+0x14c>)
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3304      	adds	r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	3204      	adds	r2, #4
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1d1a      	adds	r2, r3, #4
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4a1a      	ldr	r2, [pc, #104]	@ (8004970 <xTaskPriorityInherit+0x14c>)
 8004906:	441a      	add	r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	615a      	str	r2, [r3, #20]
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004910:	4917      	ldr	r1, [pc, #92]	@ (8004970 <xTaskPriorityInherit+0x14c>)
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004922:	1c59      	adds	r1, r3, #1
 8004924:	4812      	ldr	r0, [pc, #72]	@ (8004970 <xTaskPriorityInherit+0x14c>)
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4403      	add	r3, r0
 8004930:	6019      	str	r1, [r3, #0]
 8004932:	e004      	b.n	800493e <xTaskPriorityInherit+0x11a>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004934:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <xTaskPriorityInherit+0x148>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e008      	b.n	8004956 <xTaskPriorityInherit+0x132>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004948:	4b08      	ldr	r3, [pc, #32]	@ (800496c <xTaskPriorityInherit+0x148>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	429a      	cmp	r2, r3
 8004950:	d201      	bcs.n	8004956 <xTaskPriorityInherit+0x132>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4619      	mov	r1, r3
 800495a:	20f6      	movs	r0, #246	@ 0xf6
 800495c:	f002 fa24 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
    }
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000150 	.word	0x20000150
 8004970:	20000154 	.word	0x20000154
 8004974:	20000230 	.word	0x20000230

08004978 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 80aa 	beq.w	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    __asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	613b      	str	r3, [r7, #16]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d902      	bls.n	80049c2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c0:	e002      	b.n	80049c8 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f000 8089 	beq.w	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	429a      	cmp	r2, r3
 80049dc:	f040 8083 	bne.w	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80049e0:	4b44      	ldr	r3, [pc, #272]	@ (8004af4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a3a      	ldr	r2, [r7, #32]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d10b      	bne.n	8004a02 <vTaskPriorityDisinheritAfterTimeout+0x8a>
    __asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db04      	blt.n	8004a20 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	f1c3 0205 	rsb	r2, r3, #5
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	6959      	ldr	r1, [r3, #20]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4a32      	ldr	r2, [pc, #200]	@ (8004af8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004a30:	4413      	add	r3, r2
 8004a32:	4299      	cmp	r1, r3
 8004a34:	d157      	bne.n	8004ae6 <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe f9f4 	bl	8002e28 <uxListRemove>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	43da      	mvns	r2, r3
 8004a52:	4b2a      	ldr	r3, [pc, #168]	@ (8004afc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4013      	ands	r3, r2
 8004a58:	4a28      	ldr	r2, [pc, #160]	@ (8004afc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004a5a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f002 fa9a 	bl	8006f98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a68:	2201      	movs	r2, #1
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <vTaskPriorityDisinheritAfterTimeout+0x184>)
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7a:	491f      	ldr	r1, [pc, #124]	@ (8004af8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	3304      	adds	r3, #4
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	609a      	str	r2, [r3, #8]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	3204      	adds	r2, #4
 8004aa2:	605a      	str	r2, [r3, #4]
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8004af8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004aba:	441a      	add	r2, r3
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	615a      	str	r2, [r3, #20]
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	490c      	ldr	r1, [pc, #48]	@ (8004af8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ad6:	1c59      	adds	r1, r3, #1
 8004ad8:	4807      	ldr	r0, [pc, #28]	@ (8004af8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4403      	add	r3, r0
 8004ae4:	6019      	str	r1, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
 8004ae6:	20f8      	movs	r0, #248	@ 0xf8
 8004ae8:	f002 f922 	bl	8006d30 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8004aec:	bf00      	nop
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000150 	.word	0x20000150
 8004af8:	20000154 	.word	0x20000154
 8004afc:	20000230 	.word	0x20000230

08004b00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004b06:	4b0c      	ldr	r3, [pc, #48]	@ (8004b38 <pvTaskIncrementMutexHeldCount+0x38>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f002 fadc 	bl	80070dc <SEGGER_SYSVIEW_ShrinkId>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4619      	mov	r1, r3
 8004b28:	20fe      	movs	r0, #254	@ 0xfe
 8004b2a:	f002 f93d 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxTCB;
 8004b2e:	687b      	ldr	r3, [r7, #4]
    }
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000150 	.word	0x20000150

08004b3c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004b46:	4b3d      	ldr	r3, [pc, #244]	@ (8004c3c <prvAddCurrentTaskToDelayedList+0x100>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c40 <prvAddCurrentTaskToDelayedList+0x104>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004b52:	4b3c      	ldr	r3, [pc, #240]	@ (8004c44 <prvAddCurrentTaskToDelayedList+0x108>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b58:	4b3b      	ldr	r3, [pc, #236]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe f962 	bl	8002e28 <uxListRemove>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004b6a:	4b37      	ldr	r3, [pc, #220]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b70:	2201      	movs	r2, #1
 8004b72:	fa02 f303 	lsl.w	r3, r2, r3
 8004b76:	43da      	mvns	r2, r3
 8004b78:	4b34      	ldr	r3, [pc, #208]	@ (8004c4c <prvAddCurrentTaskToDelayedList+0x110>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	4a33      	ldr	r2, [pc, #204]	@ (8004c4c <prvAddCurrentTaskToDelayedList+0x110>)
 8004b80:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d124      	bne.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x98>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d021      	beq.n	8004bd4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b90:	4b2f      	ldr	r3, [pc, #188]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0x114>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	4b2c      	ldr	r3, [pc, #176]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	4b27      	ldr	r3, [pc, #156]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	3204      	adds	r2, #4
 8004bb2:	605a      	str	r2, [r3, #4]
 8004bb4:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	1d1a      	adds	r2, r3, #4
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]
 8004bbe:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a23      	ldr	r2, [pc, #140]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0x114>)
 8004bc4:	615a      	str	r2, [r3, #20]
 8004bc6:	4b22      	ldr	r3, [pc, #136]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0x114>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	4a20      	ldr	r2, [pc, #128]	@ (8004c50 <prvAddCurrentTaskToDelayedList+0x114>)
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004bd2:	e02e      	b.n	8004c32 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d20d      	bcs.n	8004c08 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004bec:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f002 fa12 	bl	800701c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004bf8:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f7fe f8d6 	bl	8002db2 <vListInsert>
}
 8004c06:	e014      	b.n	8004c32 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8004c08:	4b0f      	ldr	r3, [pc, #60]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 fa04 	bl	800701c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <prvAddCurrentTaskToDelayedList+0x10c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	69b8      	ldr	r0, [r7, #24]
 8004c1e:	f7fe f8c8 	bl	8002db2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvAddCurrentTaskToDelayedList+0x118>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d202      	bcs.n	8004c32 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8004c2c:	4a09      	ldr	r2, [pc, #36]	@ (8004c54 <prvAddCurrentTaskToDelayedList+0x118>)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6013      	str	r3, [r2, #0]
}
 8004c32:	bf00      	nop
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2000022c 	.word	0x2000022c
 8004c40:	200001e0 	.word	0x200001e0
 8004c44:	200001e4 	.word	0x200001e4
 8004c48:	20000150 	.word	0x20000150
 8004c4c:	20000230 	.word	0x20000230
 8004c50:	20000214 	.word	0x20000214
 8004c54:	20000248 	.word	0x20000248

08004c58 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004c62:	f000 fa5b 	bl	800511c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004c66:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <xTimerCreateTimerTask+0x64>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <xTimerCreateTimerTask+0x68>)
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	2302      	movs	r3, #2
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2300      	movs	r3, #0
 8004c78:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004c7c:	4911      	ldr	r1, [pc, #68]	@ (8004cc4 <xTimerCreateTimerTask+0x6c>)
 8004c7e:	4812      	ldr	r0, [pc, #72]	@ (8004cc8 <xTimerCreateTimerTask+0x70>)
 8004c80:	f7fe fe23 	bl	80038ca <xTaskCreate>
 8004c84:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	603b      	str	r3, [r7, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004cac:	f002 f87c 	bl	8006da8 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004cb0:	687b      	ldr	r3, [r7, #4]
    }
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000284 	.word	0x20000284
 8004cc0:	20000288 	.word	0x20000288
 8004cc4:	080076d0 	.word	0x080076d0
 8004cc8:	08004d71 	.word	0x08004d71

08004ccc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cd8:	e008      	b.n	8004cec <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	18d1      	adds	r1, r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f8df 	bl	8004ebc <prvInsertTimerInActiveList>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ea      	bne.n	8004cda <prvReloadTimer+0xe>
        }
    }
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <prvProcessExpiredTimer+0x5c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe f87d 	bl	8002e28 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff ffc3 	bl	8004ccc <prvReloadTimer>
 8004d46:	e008      	b.n	8004d5a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	4798      	blx	r3
    }
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2000027c 	.word	0x2000027c

08004d70 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d78:	f107 0308 	add.w	r3, r7, #8
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f859 	bl	8004e34 <prvGetNextExpireTime>
 8004d82:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4619      	mov	r1, r3
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f805 	bl	8004d98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004d8e:	f000 f8d7 	bl	8004f40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d92:	bf00      	nop
 8004d94:	e7f0      	b.n	8004d78 <prvTimerTask+0x8>
	...

08004d98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004da2:	f7fe ffa5 	bl	8003cf0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f866 	bl	8004e7c <prvSampleTimeNow>
 8004db0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d130      	bne.n	8004e1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d806      	bhi.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004dc6:	f7fe ffa1 	bl	8003d0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff9f 	bl	8004d10 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004dd2:	e024      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dda:	4b13      	ldr	r3, [pc, #76]	@ (8004e28 <prvProcessTimerOrBlockTask+0x90>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <prvProcessTimerOrBlockTask+0x50>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <prvProcessTimerOrBlockTask+0x52>
 8004de8:	2300      	movs	r3, #0
 8004dea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dec:	4b0f      	ldr	r3, [pc, #60]	@ (8004e2c <prvProcessTimerOrBlockTask+0x94>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f7fe fcf3 	bl	80037e4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004dfe:	f7fe ff85 	bl	8003d0c <xTaskResumeAll>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004e08:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <prvProcessTimerOrBlockTask+0x98>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
    }
 8004e18:	e001      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004e1a:	f7fe ff77 	bl	8003d0c <xTaskResumeAll>
    }
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000280 	.word	0x20000280
 8004e2c:	20000284 	.word	0x20000284
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <prvGetNextExpireTime+0x44>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <prvGetNextExpireTime+0x16>
 8004e46:	2201      	movs	r2, #1
 8004e48:	e000      	b.n	8004e4c <prvGetNextExpireTime+0x18>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e58:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <prvGetNextExpireTime+0x44>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e001      	b.n	8004e68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004e68:	68fb      	ldr	r3, [r7, #12]
    }
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	2000027c 	.word	0x2000027c

08004e7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004e84:	f7ff f854 	bl	8003f30 <xTaskGetTickCount>
 8004e88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <prvSampleTimeNow+0x3c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d205      	bcs.n	8004ea0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004e94:	f000 f91c 	bl	80050d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <prvSampleTimeNow+0x3c>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004eac:	68fb      	ldr	r3, [r7, #12]
    }
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	2000028c 	.word	0x2000028c

08004ebc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d812      	bhi.n	8004f08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e01b      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <prvInsertTimerInActiveList+0x7c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fd ff56 	bl	8002db2 <vListInsert>
 8004f06:	e012      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d206      	bcs.n	8004f1e <prvInsertTimerInActiveList+0x62>
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e007      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f1e:	4b07      	ldr	r3, [pc, #28]	@ (8004f3c <prvInsertTimerInActiveList+0x80>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fd ff42 	bl	8002db2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004f2e:	697b      	ldr	r3, [r7, #20]
    }
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000280 	.word	0x20000280
 8004f3c:	2000027c 	.word	0x2000027c

08004f40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004f52:	e0a9      	b.n	80050a8 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f2c0 80a6 	blt.w	80050a8 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd ff5b 	bl	8002e28 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f72:	1d3b      	adds	r3, r7, #4
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff ff81 	bl	8004e7c <prvSampleTimeNow>
 8004f7a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	f200 808e 	bhi.w	80050a2 <prvProcessReceivedCommands+0x162>
 8004f86:	a201      	add	r2, pc, #4	@ (adr r2, 8004f8c <prvProcessReceivedCommands+0x4c>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08004fb1 	.word	0x08004fb1
 8004f90:	08004fb1 	.word	0x08004fb1
 8004f94:	08005019 	.word	0x08005019
 8004f98:	0800502d 	.word	0x0800502d
 8004f9c:	08005079 	.word	0x08005079
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fb1 	.word	0x08004fb1
 8004fa8:	08005019 	.word	0x08005019
 8004fac:	0800502d 	.word	0x0800502d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	18d1      	adds	r1, r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	69f8      	ldr	r0, [r7, #28]
 8004fd0:	f7ff ff74 	bl	8004ebc <prvInsertTimerInActiveList>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d065      	beq.n	80050a6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d009      	beq.n	8004ffc <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	4413      	add	r3, r2
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	69f8      	ldr	r0, [r7, #28]
 8004ff6:	f7ff fe69 	bl	8004ccc <prvReloadTimer>
 8004ffa:	e008      	b.n	800500e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005002:	f023 0301 	bic.w	r3, r3, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	69f8      	ldr	r0, [r7, #28]
 8005014:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005016:	e046      	b.n	80050a6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800501e:	f023 0301 	bic.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800502a:	e03d      	b.n	80050a8 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005032:	f043 0301 	orr.w	r3, r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <prvProcessReceivedCommands+0x124>
    __asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	617b      	str	r3, [r7, #20]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	18d1      	adds	r1, r2, r3
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	69f8      	ldr	r0, [r7, #28]
 8005072:	f7ff ff23 	bl	8004ebc <prvInsertTimerInActiveList>
                        break;
 8005076:	e017      	b.n	80050a8 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8005086:	69f8      	ldr	r0, [r7, #28]
 8005088:	f000 fc5c 	bl	8005944 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800508c:	e00c      	b.n	80050a8 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	b2da      	uxtb	r2, r3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80050a0:	e002      	b.n	80050a8 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <prvProcessReceivedCommands+0x168>
                        break;
 80050a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80050a8:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <prvProcessReceivedCommands+0x18c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f107 0108 	add.w	r1, r7, #8
 80050b0:	2200      	movs	r2, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe f8a6 	bl	8003204 <xQueueReceive>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f47f af4a 	bne.w	8004f54 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000284 	.word	0x20000284

080050d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050d6:	e009      	b.n	80050ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80050e2:	f04f 31ff 	mov.w	r1, #4294967295
 80050e6:	6838      	ldr	r0, [r7, #0]
 80050e8:	f7ff fe12 	bl	8004d10 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f0      	bne.n	80050d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80050f6:	4b07      	ldr	r3, [pc, #28]	@ (8005114 <prvSwitchTimerLists+0x44>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <prvSwitchTimerLists+0x48>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a04      	ldr	r2, [pc, #16]	@ (8005114 <prvSwitchTimerLists+0x44>)
 8005102:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005104:	4a04      	ldr	r2, [pc, #16]	@ (8005118 <prvSwitchTimerLists+0x48>)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6013      	str	r3, [r2, #0]
    }
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	2000027c 	.word	0x2000027c
 8005118:	20000280 	.word	0x20000280

0800511c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005120:	f000 f9b0 	bl	8005484 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005124:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11d      	bne.n	8005168 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800512c:	4811      	ldr	r0, [pc, #68]	@ (8005174 <prvCheckForValidListAndQueue+0x58>)
 800512e:	f7fd fe0f 	bl	8002d50 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005132:	4811      	ldr	r0, [pc, #68]	@ (8005178 <prvCheckForValidListAndQueue+0x5c>)
 8005134:	f7fd fe0c 	bl	8002d50 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005138:	4b10      	ldr	r3, [pc, #64]	@ (800517c <prvCheckForValidListAndQueue+0x60>)
 800513a:	4a0e      	ldr	r2, [pc, #56]	@ (8005174 <prvCheckForValidListAndQueue+0x58>)
 800513c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <prvCheckForValidListAndQueue+0x64>)
 8005140:	4a0d      	ldr	r2, [pc, #52]	@ (8005178 <prvCheckForValidListAndQueue+0x5c>)
 8005142:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8005144:	2200      	movs	r2, #0
 8005146:	210c      	movs	r1, #12
 8005148:	200a      	movs	r0, #10
 800514a:	f7fd ff33 	bl	8002fb4 <xQueueGenericCreate>
 800514e:	4603      	mov	r3, r0
 8005150:	4a07      	ldr	r2, [pc, #28]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005152:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800515c:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <prvCheckForValidListAndQueue+0x54>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4908      	ldr	r1, [pc, #32]	@ (8005184 <prvCheckForValidListAndQueue+0x68>)
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe faee 	bl	8003744 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005168:	f000 f9be 	bl	80054e8 <vPortExitCritical>
    }
 800516c:	bf00      	nop
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000284 	.word	0x20000284
 8005174:	20000254 	.word	0x20000254
 8005178:	20000268 	.word	0x20000268
 800517c:	2000027c 	.word	0x2000027c
 8005180:	20000280 	.word	0x20000280
 8005184:	080076d8 	.word	0x080076d8

08005188 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b04      	subs	r3, #4
 8005198:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80051b8:	4a0c      	ldr	r2, [pc, #48]	@ (80051ec <pxPortInitialiseStack+0x64>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b14      	subs	r3, #20
 80051c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f06f 0202 	mvn.w	r2, #2
 80051d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3b20      	subs	r3, #32
 80051dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	080051f1 	.word	0x080051f1

080051f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80051fa:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <prvTaskExitError+0x58>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005202:	d00b      	beq.n	800521c <prvTaskExitError+0x2c>
    __asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	bf00      	nop
 800521a:	e7fd      	b.n	8005218 <prvTaskExitError+0x28>
    __asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60bb      	str	r3, [r7, #8]
}
 800522e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005230:	bf00      	nop
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0fc      	beq.n	8005232 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000010 	.word	0x20000010
 800524c:	00000000 	.word	0x00000000

08005250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <pxCurrentTCBConst2>)
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	6808      	ldr	r0, [r1, #0]
 8005256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	f380 8809 	msr	PSP, r0
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8811 	msr	BASEPRI, r0
 800526a:	4770      	bx	lr
 800526c:	f3af 8000 	nop.w

08005270 <pxCurrentTCBConst2>:
 8005270:	20000150 	.word	0x20000150
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005278:	4808      	ldr	r0, [pc, #32]	@ (800529c <prvPortStartFirstTask+0x24>)
 800527a:	6800      	ldr	r0, [r0, #0]
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f380 8808 	msr	MSP, r0
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f380 8814 	msr	CONTROL, r0
 800528a:	b662      	cpsie	i
 800528c:	b661      	cpsie	f
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	df00      	svc	0
 8005298:	bf00      	nop
 800529a:	0000      	.short	0x0000
 800529c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80052a0:	bf00      	nop
 80052a2:	bf00      	nop

080052a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	@ 0x30
 80052a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052aa:	4b69      	ldr	r3, [pc, #420]	@ (8005450 <xPortStartScheduler+0x1ac>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a69      	ldr	r2, [pc, #420]	@ (8005454 <xPortStartScheduler+0x1b0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10b      	bne.n	80052cc <xPortStartScheduler+0x28>
    __asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052cc:	4b60      	ldr	r3, [pc, #384]	@ (8005450 <xPortStartScheduler+0x1ac>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a61      	ldr	r2, [pc, #388]	@ (8005458 <xPortStartScheduler+0x1b4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10b      	bne.n	80052ee <xPortStartScheduler+0x4a>
    __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	623b      	str	r3, [r7, #32]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80052ee:	4b5b      	ldr	r3, [pc, #364]	@ (800545c <xPortStartScheduler+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	332c      	adds	r3, #44	@ 0x2c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a59      	ldr	r2, [pc, #356]	@ (8005460 <xPortStartScheduler+0x1bc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00b      	beq.n	8005318 <xPortStartScheduler+0x74>
    __asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	61fb      	str	r3, [r7, #28]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	3338      	adds	r3, #56	@ 0x38
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a51      	ldr	r2, [pc, #324]	@ (8005464 <xPortStartScheduler+0x1c0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <xPortStartScheduler+0x98>
    __asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61bb      	str	r3, [r7, #24]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005340:	4b49      	ldr	r3, [pc, #292]	@ (8005468 <xPortStartScheduler+0x1c4>)
 8005342:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	22ff      	movs	r2, #255	@ 0xff
 8005350:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005362:	b2da      	uxtb	r2, r3
 8005364:	4b41      	ldr	r3, [pc, #260]	@ (800546c <xPortStartScheduler+0x1c8>)
 8005366:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005368:	4b40      	ldr	r3, [pc, #256]	@ (800546c <xPortStartScheduler+0x1c8>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <xPortStartScheduler+0xe4>
    __asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	617b      	str	r3, [r7, #20]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005392:	2b00      	cmp	r3, #0
 8005394:	d013      	beq.n	80053be <xPortStartScheduler+0x11a>
    __asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	613b      	str	r3, [r7, #16]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	d0f1      	beq.n	80053ae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d103      	bne.n	80053d8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e004      	b.n	80053e2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f1c3 0307 	rsb	r3, r3, #7
 80053de:	4a24      	ldr	r2, [pc, #144]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053e0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053e2:	4b23      	ldr	r3, [pc, #140]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	4a21      	ldr	r2, [pc, #132]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053ea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053ec:	4b20      	ldr	r3, [pc, #128]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <xPortStartScheduler+0x1cc>)
 80053f6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005400:	4b1c      	ldr	r3, [pc, #112]	@ (8005474 <xPortStartScheduler+0x1d0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <xPortStartScheduler+0x1d0>)
 8005406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800540c:	4b19      	ldr	r3, [pc, #100]	@ (8005474 <xPortStartScheduler+0x1d0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a18      	ldr	r2, [pc, #96]	@ (8005474 <xPortStartScheduler+0x1d0>)
 8005412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005416:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8005418:	4b17      	ldr	r3, [pc, #92]	@ (8005478 <xPortStartScheduler+0x1d4>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800541e:	f000 f8ed 	bl	80055fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005422:	4b16      	ldr	r3, [pc, #88]	@ (800547c <xPortStartScheduler+0x1d8>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005428:	f000 f90c 	bl	8005644 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800542c:	4b14      	ldr	r3, [pc, #80]	@ (8005480 <xPortStartScheduler+0x1dc>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a13      	ldr	r2, [pc, #76]	@ (8005480 <xPortStartScheduler+0x1dc>)
 8005432:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005436:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005438:	f7ff ff1e 	bl	8005278 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800543c:	f7fe fed0 	bl	80041e0 <vTaskSwitchContext>
    prvTaskExitError();
 8005440:	f7ff fed6 	bl	80051f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3730      	adds	r7, #48	@ 0x30
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000ed00 	.word	0xe000ed00
 8005454:	410fc271 	.word	0x410fc271
 8005458:	410fc270 	.word	0x410fc270
 800545c:	e000ed08 	.word	0xe000ed08
 8005460:	08005251 	.word	0x08005251
 8005464:	08005541 	.word	0x08005541
 8005468:	e000e400 	.word	0xe000e400
 800546c:	20000290 	.word	0x20000290
 8005470:	20000294 	.word	0x20000294
 8005474:	e000ed20 	.word	0xe000ed20
 8005478:	e000ed1c 	.word	0xe000ed1c
 800547c:	20000010 	.word	0x20000010
 8005480:	e000ef34 	.word	0xe000ef34

08005484 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
    __asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
}
 800549c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800549e:	4b10      	ldr	r3, [pc, #64]	@ (80054e0 <vPortEnterCritical+0x5c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3301      	adds	r3, #1
 80054a4:	4a0e      	ldr	r2, [pc, #56]	@ (80054e0 <vPortEnterCritical+0x5c>)
 80054a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80054a8:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <vPortEnterCritical+0x5c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d110      	bne.n	80054d2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <vPortEnterCritical+0x60>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <vPortEnterCritical+0x4e>
    __asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	603b      	str	r3, [r7, #0]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <vPortEnterCritical+0x4a>
    }
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000010 	.word	0x20000010
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <vPortExitCritical+0x50>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10b      	bne.n	800550e <vPortExitCritical+0x26>
    __asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	607b      	str	r3, [r7, #4]
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	e7fd      	b.n	800550a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <vPortExitCritical+0x50>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3b01      	subs	r3, #1
 8005514:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <vPortExitCritical+0x50>)
 8005516:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <vPortExitCritical+0x50>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <vPortExitCritical+0x44>
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
    __asm volatile
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f383 8811 	msr	BASEPRI, r3
}
 800552a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20000010 	.word	0x20000010
 800553c:	00000000 	.word	0x00000000

08005540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005540:	f3ef 8009 	mrs	r0, PSP
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	4b15      	ldr	r3, [pc, #84]	@ (80055a0 <pxCurrentTCBConst>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	f01e 0f10 	tst.w	lr, #16
 8005550:	bf08      	it	eq
 8005552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555a:	6010      	str	r0, [r2, #0]
 800555c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005564:	f380 8811 	msr	BASEPRI, r0
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f7fe fe36 	bl	80041e0 <vTaskSwitchContext>
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f380 8811 	msr	BASEPRI, r0
 800557c:	bc09      	pop	{r0, r3}
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	6808      	ldr	r0, [r1, #0]
 8005582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005586:	f01e 0f10 	tst.w	lr, #16
 800558a:	bf08      	it	eq
 800558c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005590:	f380 8809 	msr	PSP, r0
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	f3af 8000 	nop.w

080055a0 <pxCurrentTCBConst>:
 80055a0:	20000150 	.word	0x20000150
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop

080055a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
    __asm volatile
 80055ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	607b      	str	r3, [r7, #4]
}
 80055c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80055c2:	f001 fb3b 	bl	8006c3c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80055c6:	f7fe fce9 	bl	8003f9c <xTaskIncrementTick>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80055d0:	f001 fb92 	bl	8006cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055d4:	4b08      	ldr	r3, [pc, #32]	@ (80055f8 <SysTick_Handler+0x50>)
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	e001      	b.n	80055e2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80055de:	f001 fb6f 	bl	8006cc0 <SEGGER_SYSVIEW_RecordExitISR>
 80055e2:	2300      	movs	r3, #0
 80055e4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	f383 8811 	msr	BASEPRI, r3
}
 80055ec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005600:	4b0b      	ldr	r3, [pc, #44]	@ (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005606:	4b0b      	ldr	r3, [pc, #44]	@ (8005634 <vPortSetupTimerInterrupt+0x38>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800560c:	4b0a      	ldr	r3, [pc, #40]	@ (8005638 <vPortSetupTimerInterrupt+0x3c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0a      	ldr	r2, [pc, #40]	@ (800563c <vPortSetupTimerInterrupt+0x40>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	099b      	lsrs	r3, r3, #6
 8005618:	4a09      	ldr	r2, [pc, #36]	@ (8005640 <vPortSetupTimerInterrupt+0x44>)
 800561a:	3b01      	subs	r3, #1
 800561c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800561e:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <vPortSetupTimerInterrupt+0x34>)
 8005620:	2207      	movs	r2, #7
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000e010 	.word	0xe000e010
 8005634:	e000e018 	.word	0xe000e018
 8005638:	20000000 	.word	0x20000000
 800563c:	10624dd3 	.word	0x10624dd3
 8005640:	e000e014 	.word	0xe000e014

08005644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005654 <vPortEnableVFP+0x10>
 8005648:	6801      	ldr	r1, [r0, #0]
 800564a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800564e:	6001      	str	r1, [r0, #0]
 8005650:	4770      	bx	lr
 8005652:	0000      	.short	0x0000
 8005654:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop

0800565c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005662:	f3ef 8305 	mrs	r3, IPSR
 8005666:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d915      	bls.n	800569a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <vPortValidateInterruptPriority+0x74>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4413      	add	r3, r2
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005678:	4b16      	ldr	r3, [pc, #88]	@ (80056d4 <vPortValidateInterruptPriority+0x78>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	7afa      	ldrb	r2, [r7, #11]
 800567e:	429a      	cmp	r2, r3
 8005680:	d20b      	bcs.n	800569a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800569a:	4b0f      	ldr	r3, [pc, #60]	@ (80056d8 <vPortValidateInterruptPriority+0x7c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <vPortValidateInterruptPriority+0x80>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90b      	bls.n	80056c2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	603b      	str	r3, [r7, #0]
}
 80056bc:	bf00      	nop
 80056be:	bf00      	nop
 80056c0:	e7fd      	b.n	80056be <vPortValidateInterruptPriority+0x62>
    }
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	e000e3f0 	.word	0xe000e3f0
 80056d4:	20000290 	.word	0x20000290
 80056d8:	e000ed0c 	.word	0xe000ed0c
 80056dc:	20000294 	.word	0x20000294

080056e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08e      	sub	sp, #56	@ 0x38
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d022      	beq.n	8005738 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80056f2:	2308      	movs	r3, #8
 80056f4:	43db      	mvns	r3, r3
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d81b      	bhi.n	8005734 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80056fc:	2208      	movs	r2, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	2b00      	cmp	r3, #0
 800570c:	d014      	beq.n	8005738 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	f1c3 0308 	rsb	r3, r3, #8
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	43db      	mvns	r3, r3
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d804      	bhi.n	800572e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	4413      	add	r3, r2
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	e004      	b.n	8005738 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	e001      	b.n	8005738 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005738:	f7fe fada 	bl	8003cf0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800573c:	4b7a      	ldr	r3, [pc, #488]	@ (8005928 <pvPortMalloc+0x248>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8005744:	f000 f978 	bl	8005a38 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f2c0 80d3 	blt.w	80058f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 80cf 	beq.w	80058f6 <pvPortMalloc+0x216>
 8005758:	4b74      	ldr	r3, [pc, #464]	@ (800592c <pvPortMalloc+0x24c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	f200 80c9 	bhi.w	80058f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005764:	4b72      	ldr	r3, [pc, #456]	@ (8005930 <pvPortMalloc+0x250>)
 8005766:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005768:	4b71      	ldr	r3, [pc, #452]	@ (8005930 <pvPortMalloc+0x250>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800576e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005770:	4a70      	ldr	r2, [pc, #448]	@ (8005934 <pvPortMalloc+0x254>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d305      	bcc.n	8005782 <pvPortMalloc+0xa2>
 8005776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005778:	4a6f      	ldr	r2, [pc, #444]	@ (8005938 <pvPortMalloc+0x258>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d801      	bhi.n	8005782 <pvPortMalloc+0xa2>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <pvPortMalloc+0xa4>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d129      	bne.n	80057dc <pvPortMalloc+0xfc>
    __asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	623b      	str	r3, [r7, #32]
}
 800579a:	bf00      	nop
 800579c:	bf00      	nop
 800579e:	e7fd      	b.n	800579c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80057aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ac:	4a61      	ldr	r2, [pc, #388]	@ (8005934 <pvPortMalloc+0x254>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d305      	bcc.n	80057be <pvPortMalloc+0xde>
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	4a60      	ldr	r2, [pc, #384]	@ (8005938 <pvPortMalloc+0x258>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d801      	bhi.n	80057be <pvPortMalloc+0xde>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <pvPortMalloc+0xe0>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10b      	bne.n	80057dc <pvPortMalloc+0xfc>
    __asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	61fb      	str	r3, [r7, #28]
}
 80057d6:	bf00      	nop
 80057d8:	bf00      	nop
 80057da:	e7fd      	b.n	80057d8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d903      	bls.n	80057ee <pvPortMalloc+0x10e>
 80057e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1d8      	bne.n	80057a0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80057ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005928 <pvPortMalloc+0x248>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d07e      	beq.n	80058f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2208      	movs	r2, #8
 80057fe:	4413      	add	r3, r2
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	4a4b      	ldr	r2, [pc, #300]	@ (8005934 <pvPortMalloc+0x254>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d305      	bcc.n	8005816 <pvPortMalloc+0x136>
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580c:	4a4a      	ldr	r2, [pc, #296]	@ (8005938 <pvPortMalloc+0x258>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d801      	bhi.n	8005816 <pvPortMalloc+0x136>
 8005812:	2301      	movs	r3, #1
 8005814:	e000      	b.n	8005818 <pvPortMalloc+0x138>
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <pvPortMalloc+0x154>
    __asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	61bb      	str	r3, [r7, #24]
}
 800582e:	bf00      	nop
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d90b      	bls.n	800585e <pvPortMalloc+0x17e>
    __asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	617b      	str	r3, [r7, #20]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800585e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	2308      	movs	r3, #8
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	429a      	cmp	r2, r3
 800586c:	d924      	bls.n	80058b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800586e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <pvPortMalloc+0x1b8>
    __asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	613b      	str	r3, [r7, #16]
}
 8005892:	bf00      	nop
 8005894:	bf00      	nop
 8005896:	e7fd      	b.n	8005894 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80058a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b8:	4b1c      	ldr	r3, [pc, #112]	@ (800592c <pvPortMalloc+0x24c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <pvPortMalloc+0x24c>)
 80058c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c6:	4b19      	ldr	r3, [pc, #100]	@ (800592c <pvPortMalloc+0x24c>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	4b1c      	ldr	r3, [pc, #112]	@ (800593c <pvPortMalloc+0x25c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d203      	bcs.n	80058da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058d2:	4b16      	ldr	r3, [pc, #88]	@ (800592c <pvPortMalloc+0x24c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a19      	ldr	r2, [pc, #100]	@ (800593c <pvPortMalloc+0x25c>)
 80058d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058ec:	4b14      	ldr	r3, [pc, #80]	@ (8005940 <pvPortMalloc+0x260>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a13      	ldr	r2, [pc, #76]	@ (8005940 <pvPortMalloc+0x260>)
 80058f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058f6:	f7fe fa09 	bl	8003d0c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <pvPortMalloc+0x23c>
    __asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <pvPortMalloc+0x238>
    return pvReturn;
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800591e:	4618      	mov	r0, r3
 8005920:	3738      	adds	r7, #56	@ 0x38
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20012ea0 	.word	0x20012ea0
 800592c:	20012ea4 	.word	0x20012ea4
 8005930:	20012e98 	.word	0x20012e98
 8005934:	20000298 	.word	0x20000298
 8005938:	20012e97 	.word	0x20012e97
 800593c:	20012ea8 	.word	0x20012ea8
 8005940:	20012eac 	.word	0x20012eac

08005944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d064      	beq.n	8005a20 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005956:	2308      	movs	r3, #8
 8005958:	425b      	negs	r3, r3
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4a30      	ldr	r2, [pc, #192]	@ (8005a28 <vPortFree+0xe4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d305      	bcc.n	8005978 <vPortFree+0x34>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	4a2f      	ldr	r2, [pc, #188]	@ (8005a2c <vPortFree+0xe8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d801      	bhi.n	8005978 <vPortFree+0x34>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <vPortFree+0x36>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <vPortFree+0x52>
    __asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	617b      	str	r3, [r7, #20]
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	db0b      	blt.n	80059b6 <vPortFree+0x72>
    __asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	613b      	str	r3, [r7, #16]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <vPortFree+0x92>
    __asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	0fdb      	lsrs	r3, r3, #31
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01c      	beq.n	8005a20 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d118      	bne.n	8005a20 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80059fa:	f7fe f979 	bl	8003cf0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <vPortFree+0xec>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4413      	add	r3, r2
 8005a08:	4a09      	ldr	r2, [pc, #36]	@ (8005a30 <vPortFree+0xec>)
 8005a0a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a0c:	69b8      	ldr	r0, [r7, #24]
 8005a0e:	f000 f86d 	bl	8005aec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a12:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <vPortFree+0xf0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3301      	adds	r3, #1
 8005a18:	4a06      	ldr	r2, [pc, #24]	@ (8005a34 <vPortFree+0xf0>)
 8005a1a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a1c:	f7fe f976 	bl	8003d0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a20:	bf00      	nop
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000298 	.word	0x20000298
 8005a2c:	20012e97 	.word	0x20012e97
 8005a30:	20012ea4 	.word	0x20012ea4
 8005a34:	20012eb0 	.word	0x20012eb0

08005a38 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a3e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005a42:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005a44:	4b24      	ldr	r3, [pc, #144]	@ (8005ad8 <prvHeapInit+0xa0>)
 8005a46:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3307      	adds	r3, #7
 8005a56:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f023 0307 	bic.w	r3, r3, #7
 8005a5e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad8 <prvHeapInit+0xa0>)
 8005a68:	4413      	add	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005adc <prvHeapInit+0xa4>)
 8005a70:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a72:	4b1a      	ldr	r3, [pc, #104]	@ (8005adc <prvHeapInit+0xa4>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005a80:	2208      	movs	r2, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f023 0307 	bic.w	r3, r3, #7
 8005a8e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a13      	ldr	r2, [pc, #76]	@ (8005ae0 <prvHeapInit+0xa8>)
 8005a94:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a96:	4b12      	ldr	r3, [pc, #72]	@ (8005ae0 <prvHeapInit+0xa8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005a9e:	4b10      	ldr	r3, [pc, #64]	@ (8005ae0 <prvHeapInit+0xa8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	1ad2      	subs	r2, r2, r3
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <prvHeapInit+0xa8>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	4a08      	ldr	r2, [pc, #32]	@ (8005ae4 <prvHeapInit+0xac>)
 8005ac2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a07      	ldr	r2, [pc, #28]	@ (8005ae8 <prvHeapInit+0xb0>)
 8005aca:	6013      	str	r3, [r2, #0]
}
 8005acc:	bf00      	nop
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000298 	.word	0x20000298
 8005adc:	20012e98 	.word	0x20012e98
 8005ae0:	20012ea0 	.word	0x20012ea0
 8005ae4:	20012ea8 	.word	0x20012ea8
 8005ae8:	20012ea4 	.word	0x20012ea4

08005aec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005af4:	4b36      	ldr	r3, [pc, #216]	@ (8005bd0 <prvInsertBlockIntoFreeList+0xe4>)
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e002      	b.n	8005b00 <prvInsertBlockIntoFreeList+0x14>
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d8f7      	bhi.n	8005afa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4a30      	ldr	r2, [pc, #192]	@ (8005bd0 <prvInsertBlockIntoFreeList+0xe4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd4 <prvInsertBlockIntoFreeList+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d305      	bcc.n	8005b26 <prvInsertBlockIntoFreeList+0x3a>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005bd8 <prvInsertBlockIntoFreeList+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d801      	bhi.n	8005b26 <prvInsertBlockIntoFreeList+0x3a>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e000      	b.n	8005b28 <prvInsertBlockIntoFreeList+0x3c>
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d108      	bne.n	8005b68 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	441a      	add	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	441a      	add	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d118      	bne.n	8005bae <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	4b16      	ldr	r3, [pc, #88]	@ (8005bdc <prvInsertBlockIntoFreeList+0xf0>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d00d      	beq.n	8005ba4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e008      	b.n	8005bb6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <prvInsertBlockIntoFreeList+0xf0>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	e003      	b.n	8005bb6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d002      	beq.n	8005bc4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20012e98 	.word	0x20012e98
 8005bd4:	20000298 	.word	0x20000298
 8005bd8:	20012e97 	.word	0x20012e97
 8005bdc:	20012ea0 	.word	0x20012ea0

08005be0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005be4:	4803      	ldr	r0, [pc, #12]	@ (8005bf4 <_cbSendSystemDesc+0x14>)
 8005be6:	f000 ffd3 	bl	8006b90 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005bea:	4803      	ldr	r0, [pc, #12]	@ (8005bf8 <_cbSendSystemDesc+0x18>)
 8005bec:	f000 ffd0 	bl	8006b90 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	080076e0 	.word	0x080076e0
 8005bf8:	0800770c 	.word	0x0800770c

08005bfc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <SEGGER_SYSVIEW_Conf+0x20>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <SEGGER_SYSVIEW_Conf+0x20>)
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <SEGGER_SYSVIEW_Conf+0x24>)
 8005c0a:	4a06      	ldr	r2, [pc, #24]	@ (8005c24 <SEGGER_SYSVIEW_Conf+0x28>)
 8005c0c:	f000 fc46 	bl	800649c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005c10:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8005c14:	f000 fc86 	bl	8006524 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005c18:	bf00      	nop
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20000000 	.word	0x20000000
 8005c20:	08005be1 	.word	0x08005be1
 8005c24:	080077c8 	.word	0x080077c8

08005c28 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005c2e:	4b26      	ldr	r3, [pc, #152]	@ (8005cc8 <_DoInit+0xa0>)
 8005c30:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005c32:	22a8      	movs	r2, #168	@ 0xa8
 8005c34:	2100      	movs	r1, #0
 8005c36:	6838      	ldr	r0, [r7, #0]
 8005c38:	f001 fcc7 	bl	80075ca <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2203      	movs	r2, #3
 8005c40:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2203      	movs	r2, #3
 8005c46:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	4a20      	ldr	r2, [pc, #128]	@ (8005ccc <_DoInit+0xa4>)
 8005c4c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	4a1f      	ldr	r2, [pc, #124]	@ (8005cd0 <_DoInit+0xa8>)
 8005c52:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c5a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2200      	movs	r2, #0
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	4a16      	ldr	r2, [pc, #88]	@ (8005ccc <_DoInit+0xa4>)
 8005c72:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4a17      	ldr	r2, [pc, #92]	@ (8005cd4 <_DoInit+0xac>)
 8005c78:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2210      	movs	r2, #16
 8005c7e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2200      	movs	r2, #0
 8005c84:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005c92:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
 8005c9a:	e00c      	b.n	8005cb6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1c3 030f 	rsb	r3, r3, #15
 8005ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd8 <_DoInit+0xb0>)
 8005ca4:	5cd1      	ldrb	r1, [r2, r3]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	460a      	mov	r2, r1
 8005cae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b0f      	cmp	r3, #15
 8005cba:	d9ef      	bls.n	8005c9c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005cbc:	f3bf 8f5f 	dmb	sy
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20012eb4 	.word	0x20012eb4
 8005ccc:	0800771c 	.word	0x0800771c
 8005cd0:	20012f5c 	.word	0x20012f5c
 8005cd4:	2001335c 	.word	0x2001335c
 8005cd8:	080077a8 	.word	0x080077a8

08005cdc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08c      	sub	sp, #48	@ 0x30
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8005de4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b53      	cmp	r3, #83	@ 0x53
 8005cf4:	d001      	beq.n	8005cfa <SEGGER_RTT_ReadNoLock+0x1e>
 8005cf6:	f7ff ff97 	bl	8005c28 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	3360      	adds	r3, #96	@ 0x60
 8005d06:	4a37      	ldr	r2, [pc, #220]	@ (8005de4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d92b      	bls.n	8005d80 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4293      	cmp	r3, r2
 8005d38:	bf28      	it	cs
 8005d3a:	4613      	movcs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	4413      	add	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	6939      	ldr	r1, [r7, #16]
 8005d4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d4e:	f001 fc69 	bl	8007624 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	4413      	add	r3, r2
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4413      	add	r3, r2
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d101      	bne.n	8005d80 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	bf28      	it	cs
 8005d90:	4613      	movcs	r3, r2
 8005d92:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d019      	beq.n	8005dce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da0:	4413      	add	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6939      	ldr	r1, [r7, #16]
 8005da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005daa:	f001 fc3b 	bl	8007624 <memcpy>
    NumBytesRead += NumBytesRem;
 8005dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	4413      	add	r3, r2
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4413      	add	r3, r2
 8005dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4413      	add	r3, r2
 8005dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dd8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3730      	adds	r7, #48	@ 0x30
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20012eb4 	.word	0x20012eb4

08005de8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005df6:	4b3d      	ldr	r3, [pc, #244]	@ (8005eec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b53      	cmp	r3, #83	@ 0x53
 8005e02:	d001      	beq.n	8005e08 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005e04:	f7ff ff10 	bl	8005c28 <_DoInit>
  SEGGER_RTT_LOCK();
 8005e08:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0c:	f04f 0120 	mov.w	r1, #32
 8005e10:	f381 8811 	msr	BASEPRI, r1
 8005e14:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e16:	4b35      	ldr	r3, [pc, #212]	@ (8005eec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005e18:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005e1e:	6939      	ldr	r1, [r7, #16]
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	440b      	add	r3, r1
 8005e2e:	3304      	adds	r3, #4
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	dbeb      	blt.n	8005e1e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e46:	e000      	b.n	8005e4a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e48:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	da3f      	bge.n	8005ed4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e54:	6939      	ldr	r1, [r7, #16]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	4413      	add	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	440b      	add	r3, r1
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e68:	6939      	ldr	r1, [r7, #16]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	4613      	mov	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	4413      	add	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	440b      	add	r3, r1
 8005e78:	3304      	adds	r3, #4
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e7e:	6939      	ldr	r1, [r7, #16]
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	4613      	mov	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3320      	adds	r3, #32
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	4613      	mov	r3, r2
 8005e98:	005b      	lsls	r3, r3, #1
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3328      	adds	r3, #40	@ 0x28
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005ea6:	6939      	ldr	r1, [r7, #16]
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	3324      	adds	r3, #36	@ 0x24
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005eba:	6939      	ldr	r1, [r7, #16]
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	332c      	adds	r3, #44	@ 0x2c
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ece:	f3bf 8f5f 	dmb	sy
 8005ed2:	e002      	b.n	8005eda <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20012eb4 	.word	0x20012eb4

08005ef0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	@ 0x28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005efe:	4b21      	ldr	r3, [pc, #132]	@ (8005f84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b53      	cmp	r3, #83	@ 0x53
 8005f0a:	d001      	beq.n	8005f10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005f0c:	f7ff fe8c 	bl	8005c28 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005f10:	4b1c      	ldr	r3, [pc, #112]	@ (8005f84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005f12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d82c      	bhi.n	8005f74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f1e:	f04f 0120 	mov.w	r1, #32
 8005f22:	f381 8811 	msr	BASEPRI, r1
 8005f26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	4413      	add	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	3360      	adds	r3, #96	@ 0x60
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f72:	e002      	b.n	8005f7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005f74:	f04f 33ff 	mov.w	r3, #4294967295
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3728      	adds	r7, #40	@ 0x28
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20012eb4 	.word	0x20012eb4

08005f88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1c5a      	adds	r2, r3, #1
 8005f9c:	60fa      	str	r2, [r7, #12]
 8005f9e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b80      	cmp	r3, #128	@ 0x80
 8005fa4:	d90a      	bls.n	8005fbc <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005faa:	e007      	b.n	8005fbc <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	1c53      	adds	r3, r2, #1
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	60f9      	str	r1, [r7, #12]
 8005fb8:	7812      	ldrb	r2, [r2, #0]
 8005fba:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	1e5a      	subs	r2, r3, #1
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <_EncodeStr+0x46>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1ee      	bne.n	8005fac <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3307      	adds	r3, #7
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006006:	4b34      	ldr	r3, [pc, #208]	@ (80060d8 <_HandleIncomingPacket+0xd8>)
 8006008:	7e1b      	ldrb	r3, [r3, #24]
 800600a:	4618      	mov	r0, r3
 800600c:	1cfb      	adds	r3, r7, #3
 800600e:	2201      	movs	r2, #1
 8006010:	4619      	mov	r1, r3
 8006012:	f7ff fe63 	bl	8005cdc <SEGGER_RTT_ReadNoLock>
 8006016:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d057      	beq.n	80060ce <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	2b80      	cmp	r3, #128	@ 0x80
 8006022:	d031      	beq.n	8006088 <_HandleIncomingPacket+0x88>
 8006024:	2b80      	cmp	r3, #128	@ 0x80
 8006026:	dc40      	bgt.n	80060aa <_HandleIncomingPacket+0xaa>
 8006028:	2b07      	cmp	r3, #7
 800602a:	dc15      	bgt.n	8006058 <_HandleIncomingPacket+0x58>
 800602c:	2b00      	cmp	r3, #0
 800602e:	dd3c      	ble.n	80060aa <_HandleIncomingPacket+0xaa>
 8006030:	3b01      	subs	r3, #1
 8006032:	2b06      	cmp	r3, #6
 8006034:	d839      	bhi.n	80060aa <_HandleIncomingPacket+0xaa>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <_HandleIncomingPacket+0x3c>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	0800605f 	.word	0x0800605f
 8006040:	08006065 	.word	0x08006065
 8006044:	0800606b 	.word	0x0800606b
 8006048:	08006071 	.word	0x08006071
 800604c:	08006077 	.word	0x08006077
 8006050:	0800607d 	.word	0x0800607d
 8006054:	08006083 	.word	0x08006083
 8006058:	2b7f      	cmp	r3, #127	@ 0x7f
 800605a:	d033      	beq.n	80060c4 <_HandleIncomingPacket+0xc4>
 800605c:	e025      	b.n	80060aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800605e:	f000 fb25 	bl	80066ac <SEGGER_SYSVIEW_Start>
      break;
 8006062:	e034      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006064:	f000 fbdc 	bl	8006820 <SEGGER_SYSVIEW_Stop>
      break;
 8006068:	e031      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800606a:	f000 fdb5 	bl	8006bd8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800606e:	e02e      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006070:	f000 fd7a 	bl	8006b68 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006074:	e02b      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006076:	f000 fbf9 	bl	800686c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800607a:	e028      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800607c:	f001 f8e6 	bl	800724c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006080:	e025      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006082:	f001 f8c5 	bl	8007210 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006086:	e022      	b.n	80060ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006088:	4b13      	ldr	r3, [pc, #76]	@ (80060d8 <_HandleIncomingPacket+0xd8>)
 800608a:	7e1b      	ldrb	r3, [r3, #24]
 800608c:	4618      	mov	r0, r3
 800608e:	1cfb      	adds	r3, r7, #3
 8006090:	2201      	movs	r2, #1
 8006092:	4619      	mov	r1, r3
 8006094:	f7ff fe22 	bl	8005cdc <SEGGER_RTT_ReadNoLock>
 8006098:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f82a 	bl	80070fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80060a8:	e00e      	b.n	80060c8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80060aa:	78fb      	ldrb	r3, [r7, #3]
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	da0c      	bge.n	80060cc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80060b2:	4b09      	ldr	r3, [pc, #36]	@ (80060d8 <_HandleIncomingPacket+0xd8>)
 80060b4:	7e1b      	ldrb	r3, [r3, #24]
 80060b6:	4618      	mov	r0, r3
 80060b8:	1cfb      	adds	r3, r7, #3
 80060ba:	2201      	movs	r2, #1
 80060bc:	4619      	mov	r1, r3
 80060be:	f7ff fe0d 	bl	8005cdc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060c2:	e003      	b.n	80060cc <_HandleIncomingPacket+0xcc>
      break;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <_HandleIncomingPacket+0xce>
      break;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <_HandleIncomingPacket+0xce>
      break;
 80060cc:	bf00      	nop
    }
  }
}
 80060ce:	bf00      	nop
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20019774 	.word	0x20019774

080060dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08c      	sub	sp, #48	@ 0x30
 80060e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80060e2:	2301      	movs	r3, #1
 80060e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060e6:	1d3b      	adds	r3, r7, #4
 80060e8:	3301      	adds	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060f0:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f6:	e00b      	b.n	8006110 <_TrySendOverflowPacket+0x34>
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	1c59      	adds	r1, r3, #1
 8006100:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006102:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b7f      	cmp	r3, #127	@ 0x7f
 8006114:	d8f0      	bhi.n	80060f8 <_TrySendOverflowPacket+0x1c>
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800611c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006126:	4b25      	ldr	r3, [pc, #148]	@ (80061bc <_TrySendOverflowPacket+0xe0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800612c:	4b22      	ldr	r3, [pc, #136]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	623b      	str	r3, [r7, #32]
 800613e:	e00b      	b.n	8006158 <_TrySendOverflowPacket+0x7c>
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	6279      	str	r1, [r7, #36]	@ 0x24
 800614a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	09db      	lsrs	r3, r3, #7
 8006156:	623b      	str	r3, [r7, #32]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	2b7f      	cmp	r3, #127	@ 0x7f
 800615c:	d8f0      	bhi.n	8006140 <_TrySendOverflowPacket+0x64>
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	627a      	str	r2, [r7, #36]	@ 0x24
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	701a      	strb	r2, [r3, #0]
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800616e:	4b12      	ldr	r3, [pc, #72]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 8006170:	785b      	ldrb	r3, [r3, #1]
 8006172:	4618      	mov	r0, r3
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	461a      	mov	r2, r3
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	4619      	mov	r1, r3
 8006180:	f7fa f826 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006184:	4603      	mov	r3, r0
 8006186:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800618e:	4a0a      	ldr	r2, [pc, #40]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006194:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	3b01      	subs	r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	4b06      	ldr	r3, [pc, #24]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e004      	b.n	80061ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80061a2:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a03      	ldr	r2, [pc, #12]	@ (80061b8 <_TrySendOverflowPacket+0xdc>)
 80061aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80061ac:	693b      	ldr	r3, [r7, #16]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	@ 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20019774 	.word	0x20019774
 80061bc:	e0001004 	.word	0xe0001004

080061c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	@ 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061cc:	4b98      	ldr	r3, [pc, #608]	@ (8006430 <_SendPacket+0x270>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d010      	beq.n	80061f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061d4:	4b96      	ldr	r3, [pc, #600]	@ (8006430 <_SendPacket+0x270>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 812d 	beq.w	8006438 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061de:	4b94      	ldr	r3, [pc, #592]	@ (8006430 <_SendPacket+0x270>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d109      	bne.n	80061fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061e6:	f7ff ff79 	bl	80060dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061ea:	4b91      	ldr	r3, [pc, #580]	@ (8006430 <_SendPacket+0x270>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f040 8124 	bne.w	800643c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80061f4:	e001      	b.n	80061fa <_SendPacket+0x3a>
    goto Send;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <_SendPacket+0x3c>
Send:
 80061fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b1f      	cmp	r3, #31
 8006200:	d809      	bhi.n	8006216 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006202:	4b8b      	ldr	r3, [pc, #556]	@ (8006430 <_SendPacket+0x270>)
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 8115 	bne.w	8006440 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b17      	cmp	r3, #23
 800621a:	d807      	bhi.n	800622c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e0c4      	b.n	80063b6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b7f      	cmp	r3, #127	@ 0x7f
 8006238:	d912      	bls.n	8006260 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	09da      	lsrs	r2, r3, #7
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b01      	subs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	3a01      	subs	r2, #1
 8006252:	60fa      	str	r2, [r7, #12]
 8006254:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e006      	b.n	800626e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b7e      	cmp	r3, #126	@ 0x7e
 8006272:	d807      	bhi.n	8006284 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b01      	subs	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e098      	b.n	80063b6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800628a:	d212      	bcs.n	80062b2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	09da      	lsrs	r2, r3, #7
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3b01      	subs	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	3a01      	subs	r2, #1
 80062a4:	60fa      	str	r2, [r7, #12]
 80062a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	e081      	b.n	80063b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b8:	d21d      	bcs.n	80062f6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0b9a      	lsrs	r2, r3, #14
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	3a01      	subs	r2, #1
 80062d4:	60fa      	str	r2, [r7, #12]
 80062d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062da:	b2da      	uxtb	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	3a01      	subs	r2, #1
 80062e8:	60fa      	str	r2, [r7, #12]
 80062ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e05f      	b.n	80063b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062fc:	d228      	bcs.n	8006350 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	0d5a      	lsrs	r2, r3, #21
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3b01      	subs	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	0b9b      	lsrs	r3, r3, #14
 8006312:	b2db      	uxtb	r3, r3
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	3a01      	subs	r2, #1
 8006318:	60fa      	str	r2, [r7, #12]
 800631a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	b2db      	uxtb	r3, r3
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	3a01      	subs	r2, #1
 800632e:	60fa      	str	r2, [r7, #12]
 8006330:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006334:	b2da      	uxtb	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	3a01      	subs	r2, #1
 8006342:	60fa      	str	r2, [r7, #12]
 8006344:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e032      	b.n	80063b6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0f1a      	lsrs	r2, r3, #28
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3b01      	subs	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	b2d2      	uxtb	r2, r2
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0d5b      	lsrs	r3, r3, #21
 8006364:	b2db      	uxtb	r3, r3
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	3a01      	subs	r2, #1
 800636a:	60fa      	str	r2, [r7, #12]
 800636c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0b9b      	lsrs	r3, r3, #14
 800637a:	b2db      	uxtb	r3, r3
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	3a01      	subs	r2, #1
 8006380:	60fa      	str	r2, [r7, #12]
 8006382:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	09db      	lsrs	r3, r3, #7
 8006390:	b2db      	uxtb	r3, r3
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	3a01      	subs	r2, #1
 8006396:	60fa      	str	r2, [r7, #12]
 8006398:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	3a01      	subs	r2, #1
 80063aa:	60fa      	str	r2, [r7, #12]
 80063ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006434 <_SendPacket+0x274>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006430 <_SendPacket+0x270>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	623b      	str	r3, [r7, #32]
 80063ce:	e00b      	b.n	80063e8 <_SendPacket+0x228>
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	1c59      	adds	r1, r3, #1
 80063d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80063da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	09db      	lsrs	r3, r3, #7
 80063e6:	623b      	str	r3, [r7, #32]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ec:	d8f0      	bhi.n	80063d0 <_SendPacket+0x210>
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063f4:	6a3a      	ldr	r2, [r7, #32]
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <_SendPacket+0x270>)
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	4618      	mov	r0, r3
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	461a      	mov	r2, r3
 800640c:	68f9      	ldr	r1, [r7, #12]
 800640e:	f7f9 fedf 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006412:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800641a:	4a05      	ldr	r2, [pc, #20]	@ (8006430 <_SendPacket+0x270>)
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	60d3      	str	r3, [r2, #12]
 8006420:	e00f      	b.n	8006442 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006422:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <_SendPacket+0x270>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	3301      	adds	r3, #1
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4b01      	ldr	r3, [pc, #4]	@ (8006430 <_SendPacket+0x270>)
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e008      	b.n	8006442 <_SendPacket+0x282>
 8006430:	20019774 	.word	0x20019774
 8006434:	e0001004 	.word	0xe0001004
    goto SendDone;
 8006438:	bf00      	nop
 800643a:	e002      	b.n	8006442 <_SendPacket+0x282>
      goto SendDone;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <_SendPacket+0x282>
      goto SendDone;
 8006440:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006442:	4b14      	ldr	r3, [pc, #80]	@ (8006494 <_SendPacket+0x2d4>)
 8006444:	7e1b      	ldrb	r3, [r3, #24]
 8006446:	4619      	mov	r1, r3
 8006448:	4a13      	ldr	r2, [pc, #76]	@ (8006498 <_SendPacket+0x2d8>)
 800644a:	460b      	mov	r3, r1
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	440b      	add	r3, r1
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4413      	add	r3, r2
 8006454:	336c      	adds	r3, #108	@ 0x6c
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	4b0e      	ldr	r3, [pc, #56]	@ (8006494 <_SendPacket+0x2d4>)
 800645a:	7e1b      	ldrb	r3, [r3, #24]
 800645c:	4618      	mov	r0, r3
 800645e:	490e      	ldr	r1, [pc, #56]	@ (8006498 <_SendPacket+0x2d8>)
 8006460:	4603      	mov	r3, r0
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	4403      	add	r3, r0
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	440b      	add	r3, r1
 800646a:	3370      	adds	r3, #112	@ 0x70
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d00b      	beq.n	800648a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006472:	4b08      	ldr	r3, [pc, #32]	@ (8006494 <_SendPacket+0x2d4>)
 8006474:	789b      	ldrb	r3, [r3, #2]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d107      	bne.n	800648a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800647a:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <_SendPacket+0x2d4>)
 800647c:	2201      	movs	r2, #1
 800647e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006480:	f7ff fdbe 	bl	8006000 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006484:	4b03      	ldr	r3, [pc, #12]	@ (8006494 <_SendPacket+0x2d4>)
 8006486:	2200      	movs	r2, #0
 8006488:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800648a:	bf00      	nop
 800648c:	3728      	adds	r7, #40	@ 0x28
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20019774 	.word	0x20019774
 8006498:	20012eb4 	.word	0x20012eb4

0800649c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064aa:	2300      	movs	r3, #0
 80064ac:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80064b0:	4917      	ldr	r1, [pc, #92]	@ (8006510 <SEGGER_SYSVIEW_Init+0x74>)
 80064b2:	4818      	ldr	r0, [pc, #96]	@ (8006514 <SEGGER_SYSVIEW_Init+0x78>)
 80064b4:	f7ff fc98 	bl	8005de8 <SEGGER_RTT_AllocUpBuffer>
 80064b8:	4603      	mov	r3, r0
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	4b16      	ldr	r3, [pc, #88]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064c0:	4b15      	ldr	r3, [pc, #84]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064c2:	785a      	ldrb	r2, [r3, #1]
 80064c4:	4b14      	ldr	r3, [pc, #80]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064c8:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ca:	7e1b      	ldrb	r3, [r3, #24]
 80064cc:	4618      	mov	r0, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	2308      	movs	r3, #8
 80064d4:	4a11      	ldr	r2, [pc, #68]	@ (800651c <SEGGER_SYSVIEW_Init+0x80>)
 80064d6:	490f      	ldr	r1, [pc, #60]	@ (8006514 <SEGGER_SYSVIEW_Init+0x78>)
 80064d8:	f7ff fd0a 	bl	8005ef0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80064dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006520 <SEGGER_SYSVIEW_Init+0x84>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a0c      	ldr	r2, [pc, #48]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80064ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80064f0:	4a09      	ldr	r2, [pc, #36]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80064f6:	4a08      	ldr	r2, [pc, #32]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80064fc:	4a06      	ldr	r2, [pc, #24]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006502:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <SEGGER_SYSVIEW_Init+0x7c>)
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	2001336c 	.word	0x2001336c
 8006514:	08007730 	.word	0x08007730
 8006518:	20019774 	.word	0x20019774
 800651c:	2001976c 	.word	0x2001976c
 8006520:	e0001004 	.word	0xe0001004

08006524 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800652c:	4a04      	ldr	r2, [pc, #16]	@ (8006540 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6113      	str	r3, [r2, #16]
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20019774 	.word	0x20019774

08006544 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800654c:	f3ef 8311 	mrs	r3, BASEPRI
 8006550:	f04f 0120 	mov.w	r1, #32
 8006554:	f381 8811 	msr	BASEPRI, r1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	4808      	ldr	r0, [pc, #32]	@ (800657c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800655c:	f7ff fd44 	bl	8005fe8 <_PreparePacket>
 8006560:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68b8      	ldr	r0, [r7, #8]
 8006568:	f7ff fe2a 	bl	80061c0 <_SendPacket>
  RECORD_END();
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f383 8811 	msr	BASEPRI, r3
}
 8006572:	bf00      	nop
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200197a4 	.word	0x200197a4

08006580 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800658a:	f3ef 8311 	mrs	r3, BASEPRI
 800658e:	f04f 0120 	mov.w	r1, #32
 8006592:	f381 8811 	msr	BASEPRI, r1
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	4816      	ldr	r0, [pc, #88]	@ (80065f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800659a:	f7ff fd25 	bl	8005fe8 <_PreparePacket>
 800659e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	e00b      	b.n	80065c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	61f9      	str	r1, [r7, #28]
 80065b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	61bb      	str	r3, [r7, #24]
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ca:	d8f0      	bhi.n	80065ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	61fa      	str	r2, [r7, #28]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	6938      	ldr	r0, [r7, #16]
 80065e2:	f7ff fded 	bl	80061c0 <_SendPacket>
  RECORD_END();
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f383 8811 	msr	BASEPRI, r3
}
 80065ec:	bf00      	nop
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	200197a4 	.word	0x200197a4

080065f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08c      	sub	sp, #48	@ 0x30
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006604:	f3ef 8311 	mrs	r3, BASEPRI
 8006608:	f04f 0120 	mov.w	r1, #32
 800660c:	f381 8811 	msr	BASEPRI, r1
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	4825      	ldr	r0, [pc, #148]	@ (80066a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006614:	f7ff fce8 	bl	8005fe8 <_PreparePacket>
 8006618:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006626:	e00b      	b.n	8006640 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662e:	1c59      	adds	r1, r3, #1
 8006630:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006632:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	09db      	lsrs	r3, r3, #7
 800663e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	2b7f      	cmp	r3, #127	@ 0x7f
 8006644:	d8f0      	bhi.n	8006628 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800664c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	6279      	str	r1, [r7, #36]	@ 0x24
 800666a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b7f      	cmp	r3, #127	@ 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	627a      	str	r2, [r7, #36]	@ 0x24
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6979      	ldr	r1, [r7, #20]
 8006692:	69b8      	ldr	r0, [r7, #24]
 8006694:	f7ff fd94 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f383 8811 	msr	BASEPRI, r3
}
 800669e:	bf00      	nop
 80066a0:	3730      	adds	r7, #48	@ 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200197a4 	.word	0x200197a4

080066ac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	@ 0x30
 80066b0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066b2:	4b58      	ldr	r3, [pc, #352]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 80066b4:	2201      	movs	r2, #1
 80066b6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066b8:	f3ef 8311 	mrs	r3, BASEPRI
 80066bc:	f04f 0120 	mov.w	r1, #32
 80066c0:	f381 8811 	msr	BASEPRI, r1
 80066c4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066c6:	4b53      	ldr	r3, [pc, #332]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	220a      	movs	r2, #10
 80066cc:	4952      	ldr	r1, [pc, #328]	@ (8006818 <SEGGER_SYSVIEW_Start+0x16c>)
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7f9 fd7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066da:	200a      	movs	r0, #10
 80066dc:	f7ff ff32 	bl	8006544 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066e0:	f3ef 8311 	mrs	r3, BASEPRI
 80066e4:	f04f 0120 	mov.w	r1, #32
 80066e8:	f381 8811 	msr	BASEPRI, r1
 80066ec:	60bb      	str	r3, [r7, #8]
 80066ee:	484b      	ldr	r0, [pc, #300]	@ (800681c <SEGGER_SYSVIEW_Start+0x170>)
 80066f0:	f7ff fc7a 	bl	8005fe8 <_PreparePacket>
 80066f4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066fe:	4b45      	ldr	r3, [pc, #276]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006704:	e00b      	b.n	800671e <SEGGER_SYSVIEW_Start+0x72>
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	b2da      	uxtb	r2, r3
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	1c59      	adds	r1, r3, #1
 800670e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006710:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
 8006718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671a:	09db      	lsrs	r3, r3, #7
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006720:	2b7f      	cmp	r3, #127	@ 0x7f
 8006722:	d8f0      	bhi.n	8006706 <SEGGER_SYSVIEW_Start+0x5a>
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800672a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	627b      	str	r3, [r7, #36]	@ 0x24
 8006738:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_Start+0xac>
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6279      	str	r1, [r7, #36]	@ 0x24
 800674a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	623b      	str	r3, [r7, #32]
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	2b7f      	cmp	r3, #127	@ 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_Start+0x94>
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	627a      	str	r2, [r7, #36]	@ 0x24
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	4b28      	ldr	r3, [pc, #160]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e00b      	b.n	8006792 <SEGGER_SYSVIEW_Start+0xe6>
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	1c59      	adds	r1, r3, #1
 8006782:	61f9      	str	r1, [r7, #28]
 8006784:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	09db      	lsrs	r3, r3, #7
 8006790:	61bb      	str	r3, [r7, #24]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	2b7f      	cmp	r3, #127	@ 0x7f
 8006796:	d8f0      	bhi.n	800677a <SEGGER_SYSVIEW_Start+0xce>
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	61fa      	str	r2, [r7, #28]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e00b      	b.n	80067ca <SEGGER_SYSVIEW_Start+0x11e>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	1c59      	adds	r1, r3, #1
 80067ba:	6179      	str	r1, [r7, #20]
 80067bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	09db      	lsrs	r3, r3, #7
 80067c8:	613b      	str	r3, [r7, #16]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ce:	d8f0      	bhi.n	80067b2 <SEGGER_SYSVIEW_Start+0x106>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	617a      	str	r2, [r7, #20]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067e0:	2218      	movs	r2, #24
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fceb 	bl	80061c0 <_SendPacket>
      RECORD_END();
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067f0:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80067f8:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <SEGGER_SYSVIEW_Start+0x168>)
 80067fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80067fe:	f000 f9eb 	bl	8006bd8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006802:	f000 f9b1 	bl	8006b68 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006806:	f000 fd21 	bl	800724c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800680a:	bf00      	nop
 800680c:	3730      	adds	r7, #48	@ 0x30
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20019774 	.word	0x20019774
 8006818:	080077bc 	.word	0x080077bc
 800681c:	200197a4 	.word	0x200197a4

08006820 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	f04f 0120 	mov.w	r1, #32
 800682e:	f381 8811 	msr	BASEPRI, r1
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	480b      	ldr	r0, [pc, #44]	@ (8006864 <SEGGER_SYSVIEW_Stop+0x44>)
 8006836:	f7ff fbd7 	bl	8005fe8 <_PreparePacket>
 800683a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800683c:	4b0a      	ldr	r3, [pc, #40]	@ (8006868 <SEGGER_SYSVIEW_Stop+0x48>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006844:	220b      	movs	r2, #11
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6838      	ldr	r0, [r7, #0]
 800684a:	f7ff fcb9 	bl	80061c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800684e:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <SEGGER_SYSVIEW_Stop+0x48>)
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f383 8811 	msr	BASEPRI, r3
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	200197a4 	.word	0x200197a4
 8006868:	20019774 	.word	0x20019774

0800686c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	@ 0x30
 8006870:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006872:	f3ef 8311 	mrs	r3, BASEPRI
 8006876:	f04f 0120 	mov.w	r1, #32
 800687a:	f381 8811 	msr	BASEPRI, r1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	4845      	ldr	r0, [pc, #276]	@ (8006998 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006882:	f7ff fbb1 	bl	8005fe8 <_PreparePacket>
 8006886:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006890:	4b42      	ldr	r3, [pc, #264]	@ (800699c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ca:	4b34      	ldr	r3, [pc, #208]	@ (800699c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	e00b      	b.n	80068ea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	6279      	str	r1, [r7, #36]	@ 0x24
 80068dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	623b      	str	r3, [r7, #32]
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80068ee:	d8f0      	bhi.n	80068d2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	4b25      	ldr	r3, [pc, #148]	@ (800699c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e00b      	b.n	8006924 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	b2da      	uxtb	r2, r3
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	61f9      	str	r1, [r7, #28]
 8006916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	61bb      	str	r3, [r7, #24]
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b7f      	cmp	r3, #127	@ 0x7f
 8006928:	d8f0      	bhi.n	800690c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	61fa      	str	r2, [r7, #28]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	617b      	str	r3, [r7, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e00b      	b.n	800695c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	b2da      	uxtb	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	6179      	str	r1, [r7, #20]
 800694e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	09db      	lsrs	r3, r3, #7
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006960:	d8f0      	bhi.n	8006944 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	617a      	str	r2, [r7, #20]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006972:	2218      	movs	r2, #24
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	68b8      	ldr	r0, [r7, #8]
 8006978:	f7ff fc22 	bl	80061c0 <_SendPacket>
  RECORD_END();
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006982:	4b06      	ldr	r3, [pc, #24]	@ (800699c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800698a:	4b04      	ldr	r3, [pc, #16]	@ (800699c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	4798      	blx	r3
  }
}
 8006990:	bf00      	nop
 8006992:	3730      	adds	r7, #48	@ 0x30
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200197a4 	.word	0x200197a4
 800699c:	20019774 	.word	0x20019774

080069a0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b092      	sub	sp, #72	@ 0x48
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069a8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ac:	f04f 0120 	mov.w	r1, #32
 80069b0:	f381 8811 	msr	BASEPRI, r1
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	486a      	ldr	r0, [pc, #424]	@ (8006b60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069b8:	f7ff fb16 	bl	8005fe8 <_PreparePacket>
 80069bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b66      	ldr	r3, [pc, #408]	@ (8006b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069d2:	e00b      	b.n	80069ec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	6479      	str	r1, [r7, #68]	@ 0x44
 80069de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069e8:	09db      	lsrs	r3, r3, #7
 80069ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80069f0:	d8f0      	bhi.n	80069d4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80069f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80069f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a0c:	e00b      	b.n	8006a26 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a14:	1c59      	adds	r1, r3, #1
 8006a16:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a22:	09db      	lsrs	r3, r3, #7
 8006a24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a2a:	d8f0      	bhi.n	8006a0e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	4619      	mov	r1, r3
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fa9f 	bl	8005f88 <_EncodeStr>
 8006a4a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a4c:	2209      	movs	r2, #9
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	6938      	ldr	r0, [r7, #16]
 8006a52:	f7ff fbb5 	bl	80061c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	4b40      	ldr	r3, [pc, #256]	@ (8006b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a6a:	e00b      	b.n	8006a84 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a88:	d8f0      	bhi.n	8006a6c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa4:	e00b      	b.n	8006abe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ab0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	09db      	lsrs	r3, r3, #7
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac2:	d8f0      	bhi.n	8006aa6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	623b      	str	r3, [r7, #32]
 8006ade:	e00b      	b.n	8006af8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	1c59      	adds	r1, r3, #1
 8006ae8:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	09db      	lsrs	r3, r3, #7
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006afc:	d8f0      	bhi.n	8006ae0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e00b      	b.n	8006b30 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	1c59      	adds	r1, r3, #1
 8006b20:	61f9      	str	r1, [r7, #28]
 8006b22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	09db      	lsrs	r3, r3, #7
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b34:	d8f0      	bhi.n	8006b18 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	61fa      	str	r2, [r7, #28]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b46:	2215      	movs	r2, #21
 8006b48:	68f9      	ldr	r1, [r7, #12]
 8006b4a:	6938      	ldr	r0, [r7, #16]
 8006b4c:	f7ff fb38 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f383 8811 	msr	BASEPRI, r3
}
 8006b56:	bf00      	nop
 8006b58:	3748      	adds	r7, #72	@ 0x48
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	200197a4 	.word	0x200197a4
 8006b64:	20019774 	.word	0x20019774

08006b68 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b7e:	4b03      	ldr	r3, [pc, #12]	@ (8006b8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4798      	blx	r3
  }
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20019774 	.word	0x20019774

08006b90 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b98:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9c:	f04f 0120 	mov.w	r1, #32
 8006ba0:	f381 8811 	msr	BASEPRI, r1
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	480b      	ldr	r0, [pc, #44]	@ (8006bd4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ba8:	f7ff fa1e 	bl	8005fe8 <_PreparePacket>
 8006bac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bae:	2280      	movs	r2, #128	@ 0x80
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	6938      	ldr	r0, [r7, #16]
 8006bb4:	f7ff f9e8 	bl	8005f88 <_EncodeStr>
 8006bb8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006bba:	220e      	movs	r2, #14
 8006bbc:	68f9      	ldr	r1, [r7, #12]
 8006bbe:	6938      	ldr	r0, [r7, #16]
 8006bc0:	f7ff fafe 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f383 8811 	msr	BASEPRI, r3
}
 8006bca:	bf00      	nop
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200197a4 	.word	0x200197a4

08006bd8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006bd8:	b590      	push	{r4, r7, lr}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006bde:	4b15      	ldr	r3, [pc, #84]	@ (8006c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01a      	beq.n	8006c1c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006be6:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d015      	beq.n	8006c1c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006bf0:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4798      	blx	r3
 8006bf8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006bfc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	f04f 0300 	mov.w	r3, #0
 8006c0a:	000a      	movs	r2, r1
 8006c0c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c0e:	4613      	mov	r3, r2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4621      	mov	r1, r4
 8006c14:	200d      	movs	r0, #13
 8006c16:	f7ff fcef 	bl	80065f8 <SEGGER_SYSVIEW_RecordU32x2>
 8006c1a:	e006      	b.n	8006c2a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c1c:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4619      	mov	r1, r3
 8006c22:	200c      	movs	r0, #12
 8006c24:	f7ff fcac 	bl	8006580 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20019774 	.word	0x20019774
 8006c38:	e0001004 	.word	0xe0001004

08006c3c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c42:	f3ef 8311 	mrs	r3, BASEPRI
 8006c46:	f04f 0120 	mov.w	r1, #32
 8006c4a:	f381 8811 	msr	BASEPRI, r1
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	4819      	ldr	r0, [pc, #100]	@ (8006cb8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c52:	f7ff f9c9 	bl	8005fe8 <_PreparePacket>
 8006c56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c5c:	4b17      	ldr	r3, [pc, #92]	@ (8006cbc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c64:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	617b      	str	r3, [r7, #20]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	e00b      	b.n	8006c88 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1c59      	adds	r1, r3, #1
 8006c78:	6179      	str	r1, [r7, #20]
 8006c7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	09db      	lsrs	r3, r3, #7
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c8c:	d8f0      	bhi.n	8006c70 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	617a      	str	r2, [r7, #20]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	68b8      	ldr	r0, [r7, #8]
 8006ca4:	f7ff fa8c 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f383 8811 	msr	BASEPRI, r3
}
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200197a4 	.word	0x200197a4
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cca:	f04f 0120 	mov.w	r1, #32
 8006cce:	f381 8811 	msr	BASEPRI, r1
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	4807      	ldr	r0, [pc, #28]	@ (8006cf4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006cd6:	f7ff f987 	bl	8005fe8 <_PreparePacket>
 8006cda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006cdc:	2203      	movs	r2, #3
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6838      	ldr	r0, [r7, #0]
 8006ce2:	f7ff fa6d 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f383 8811 	msr	BASEPRI, r3
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200197a4 	.word	0x200197a4

08006cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006d02:	f04f 0120 	mov.w	r1, #32
 8006d06:	f381 8811 	msr	BASEPRI, r1
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	4807      	ldr	r0, [pc, #28]	@ (8006d2c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d0e:	f7ff f96b 	bl	8005fe8 <_PreparePacket>
 8006d12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d14:	2212      	movs	r2, #18
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	f7ff fa51 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f383 8811 	msr	BASEPRI, r3
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	200197a4 	.word	0x200197a4

08006d30 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d38:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3c:	f04f 0120 	mov.w	r1, #32
 8006d40:	f381 8811 	msr	BASEPRI, r1
 8006d44:	617b      	str	r3, [r7, #20]
 8006d46:	4817      	ldr	r0, [pc, #92]	@ (8006da4 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006d48:	f7ff f94e 	bl	8005fe8 <_PreparePacket>
 8006d4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e00b      	b.n	8006d74 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	61f9      	str	r1, [r7, #28]
 8006d66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d78:	d8f0      	bhi.n	8006d5c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	61fa      	str	r2, [r7, #28]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006d8a:	221c      	movs	r2, #28
 8006d8c:	68f9      	ldr	r1, [r7, #12]
 8006d8e:	6938      	ldr	r0, [r7, #16]
 8006d90:	f7ff fa16 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f383 8811 	msr	BASEPRI, r3
}
 8006d9a:	bf00      	nop
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	200197a4 	.word	0x200197a4

08006da8 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	@ 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006db2:	f3ef 8311 	mrs	r3, BASEPRI
 8006db6:	f04f 0120 	mov.w	r1, #32
 8006dba:	f381 8811 	msr	BASEPRI, r1
 8006dbe:	617b      	str	r3, [r7, #20]
 8006dc0:	4824      	ldr	r0, [pc, #144]	@ (8006e54 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006dc2:	f7ff f911 	bl	8005fe8 <_PreparePacket>
 8006dc6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	623b      	str	r3, [r7, #32]
 8006dd4:	e00b      	b.n	8006dee <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	1c59      	adds	r1, r3, #1
 8006dde:	6279      	str	r1, [r7, #36]	@ 0x24
 8006de0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006df2:	d8f0      	bhi.n	8006dd6 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dfa:	6a3a      	ldr	r2, [r7, #32]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	61fb      	str	r3, [r7, #28]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	e00b      	b.n	8006e26 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	61f9      	str	r1, [r7, #28]
 8006e18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e2a:	d8f0      	bhi.n	8006e0e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	61fa      	str	r2, [r7, #28]
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006e3c:	221c      	movs	r2, #28
 8006e3e:	68f9      	ldr	r1, [r7, #12]
 8006e40:	6938      	ldr	r0, [r7, #16]
 8006e42:	f7ff f9bd 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f383 8811 	msr	BASEPRI, r3
}
 8006e4c:	bf00      	nop
 8006e4e:	3728      	adds	r7, #40	@ 0x28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200197a4 	.word	0x200197a4

08006e58 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e62:	f04f 0120 	mov.w	r1, #32
 8006e66:	f381 8811 	msr	BASEPRI, r1
 8006e6a:	607b      	str	r3, [r7, #4]
 8006e6c:	4807      	ldr	r0, [pc, #28]	@ (8006e8c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e6e:	f7ff f8bb 	bl	8005fe8 <_PreparePacket>
 8006e72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e74:	2211      	movs	r2, #17
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6838      	ldr	r0, [r7, #0]
 8006e7a:	f7ff f9a1 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f383 8811 	msr	BASEPRI, r3
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200197a4 	.word	0x200197a4

08006e90 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e98:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9c:	f04f 0120 	mov.w	r1, #32
 8006ea0:	f381 8811 	msr	BASEPRI, r1
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	4819      	ldr	r0, [pc, #100]	@ (8006f0c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ea8:	f7ff f89e 	bl	8005fe8 <_PreparePacket>
 8006eac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eb2:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	61bb      	str	r3, [r7, #24]
 8006ec4:	e00b      	b.n	8006ede <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	61f9      	str	r1, [r7, #28]
 8006ed0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	09db      	lsrs	r3, r3, #7
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ee2:	d8f0      	bhi.n	8006ec6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	61fa      	str	r2, [r7, #28]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	b2d2      	uxtb	r2, r2
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	68f9      	ldr	r1, [r7, #12]
 8006ef8:	6938      	ldr	r0, [r7, #16]
 8006efa:	f7ff f961 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f383 8811 	msr	BASEPRI, r3
}
 8006f04:	bf00      	nop
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	200197a4 	.word	0x200197a4
 8006f10:	20019774 	.word	0x20019774

08006f14 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f20:	f04f 0120 	mov.w	r1, #32
 8006f24:	f381 8811 	msr	BASEPRI, r1
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	4819      	ldr	r0, [pc, #100]	@ (8006f90 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f2c:	f7ff f85c 	bl	8005fe8 <_PreparePacket>
 8006f30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f36:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	61bb      	str	r3, [r7, #24]
 8006f48:	e00b      	b.n	8006f62 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	61f9      	str	r1, [r7, #28]
 8006f54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f66:	d8f0      	bhi.n	8006f4a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	61fa      	str	r2, [r7, #28]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f78:	2204      	movs	r2, #4
 8006f7a:	68f9      	ldr	r1, [r7, #12]
 8006f7c:	6938      	ldr	r0, [r7, #16]
 8006f7e:	f7ff f91f 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f383 8811 	msr	BASEPRI, r3
}
 8006f88:	bf00      	nop
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	200197a4 	.word	0x200197a4
 8006f94:	20019774 	.word	0x20019774

08006f98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b088      	sub	sp, #32
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8006fa4:	f04f 0120 	mov.w	r1, #32
 8006fa8:	f381 8811 	msr	BASEPRI, r1
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	4819      	ldr	r0, [pc, #100]	@ (8007014 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fb0:	f7ff f81a 	bl	8005fe8 <_PreparePacket>
 8006fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006fba:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	e00b      	b.n	8006fe6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	61f9      	str	r1, [r7, #28]
 8006fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	09db      	lsrs	r3, r3, #7
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fea:	d8f0      	bhi.n	8006fce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	1c5a      	adds	r2, r3, #1
 8006ff0:	61fa      	str	r2, [r7, #28]
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ffc:	2206      	movs	r2, #6
 8006ffe:	68f9      	ldr	r1, [r7, #12]
 8007000:	6938      	ldr	r0, [r7, #16]
 8007002:	f7ff f8dd 	bl	80061c0 <_SendPacket>
  RECORD_END();
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f383 8811 	msr	BASEPRI, r3
}
 800700c:	bf00      	nop
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	200197a4 	.word	0x200197a4
 8007018:	20019774 	.word	0x20019774

0800701c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	@ 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007026:	f3ef 8311 	mrs	r3, BASEPRI
 800702a:	f04f 0120 	mov.w	r1, #32
 800702e:	f381 8811 	msr	BASEPRI, r1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	4827      	ldr	r0, [pc, #156]	@ (80070d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007036:	f7fe ffd7 	bl	8005fe8 <_PreparePacket>
 800703a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007040:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	627b      	str	r3, [r7, #36]	@ 0x24
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	623b      	str	r3, [r7, #32]
 8007052:	e00b      	b.n	800706c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705a:	1c59      	adds	r1, r3, #1
 800705c:	6279      	str	r1, [r7, #36]	@ 0x24
 800705e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	09db      	lsrs	r3, r3, #7
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007070:	d8f0      	bhi.n	8007054 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	627a      	str	r2, [r7, #36]	@ 0x24
 8007078:	6a3a      	ldr	r2, [r7, #32]
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	61fb      	str	r3, [r7, #28]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	e00b      	b.n	80070a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	61f9      	str	r1, [r7, #28]
 8007096:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	61bb      	str	r3, [r7, #24]
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80070a8:	d8f0      	bhi.n	800708c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	61fa      	str	r2, [r7, #28]
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070ba:	2207      	movs	r2, #7
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7ff f87e 	bl	80061c0 <_SendPacket>
  RECORD_END();
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f383 8811 	msr	BASEPRI, r3
}
 80070ca:	bf00      	nop
 80070cc:	3728      	adds	r7, #40	@ 0x28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200197a4 	.word	0x200197a4
 80070d8:	20019774 	.word	0x20019774

080070dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	1ad3      	subs	r3, r2, r3
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	20019774 	.word	0x20019774

080070fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	@ 0x30
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007106:	4b40      	ldr	r3, [pc, #256]	@ (8007208 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d077      	beq.n	80071fe <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800710e:	4b3e      	ldr	r3, [pc, #248]	@ (8007208 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007114:	2300      	movs	r3, #0
 8007116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007118:	e008      	b.n	800712c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	3301      	adds	r3, #1
 800712a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007130:	429a      	cmp	r2, r3
 8007132:	d3f2      	bcc.n	800711a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007134:	e000      	b.n	8007138 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007136:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713a:	2b00      	cmp	r3, #0
 800713c:	d055      	beq.n	80071ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800713e:	f3ef 8311 	mrs	r3, BASEPRI
 8007142:	f04f 0120 	mov.w	r1, #32
 8007146:	f381 8811 	msr	BASEPRI, r1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	482f      	ldr	r0, [pc, #188]	@ (800720c <SEGGER_SYSVIEW_SendModule+0x110>)
 800714e:	f7fe ff4b 	bl	8005fe8 <_PreparePacket>
 8007152:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	627b      	str	r3, [r7, #36]	@ 0x24
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	623b      	str	r3, [r7, #32]
 8007160:	e00b      	b.n	800717a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	1c59      	adds	r1, r3, #1
 800716a:	6279      	str	r1, [r7, #36]	@ 0x24
 800716c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	09db      	lsrs	r3, r3, #7
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	2b7f      	cmp	r3, #127	@ 0x7f
 800717e:	d8f0      	bhi.n	8007162 <SEGGER_SYSVIEW_SendModule+0x66>
 8007180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	627a      	str	r2, [r7, #36]	@ 0x24
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
 800718c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e00b      	b.n	80071b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	1c59      	adds	r1, r3, #1
 80071a4:	61f9      	str	r1, [r7, #28]
 80071a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	09db      	lsrs	r3, r3, #7
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80071b8:	d8f0      	bhi.n	800719c <SEGGER_SYSVIEW_SendModule+0xa0>
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	61fa      	str	r2, [r7, #28]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2280      	movs	r2, #128	@ 0x80
 80071d0:	4619      	mov	r1, r3
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7fe fed8 	bl	8005f88 <_EncodeStr>
 80071d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80071da:	2216      	movs	r2, #22
 80071dc:	68f9      	ldr	r1, [r7, #12]
 80071de:	6938      	ldr	r0, [r7, #16]
 80071e0:	f7fe ffee 	bl	80061c0 <_SendPacket>
      RECORD_END();
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80071ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d006      	beq.n	80071fe <SEGGER_SYSVIEW_SendModule+0x102>
 80071f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4798      	blx	r3
    }
  }
}
 80071fe:	bf00      	nop
 8007200:	3730      	adds	r7, #48	@ 0x30
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	2001979c 	.word	0x2001979c
 800720c:	200197a4 	.word	0x200197a4

08007210 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007216:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00f      	beq.n	800723e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800721e:	4b0a      	ldr	r3, [pc, #40]	@ (8007248 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f2      	bne.n	8007224 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	2001979c 	.word	0x2001979c

0800724c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007252:	f3ef 8311 	mrs	r3, BASEPRI
 8007256:	f04f 0120 	mov.w	r1, #32
 800725a:	f381 8811 	msr	BASEPRI, r1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	4817      	ldr	r0, [pc, #92]	@ (80072c0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007262:	f7fe fec1 	bl	8005fe8 <_PreparePacket>
 8007266:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	4b14      	ldr	r3, [pc, #80]	@ (80072c4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	e00b      	b.n	8007290 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	b2da      	uxtb	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	1c59      	adds	r1, r3, #1
 8007280:	6179      	str	r1, [r7, #20]
 8007282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	09db      	lsrs	r3, r3, #7
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	2b7f      	cmp	r3, #127	@ 0x7f
 8007294:	d8f0      	bhi.n	8007278 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	617a      	str	r2, [r7, #20]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	701a      	strb	r2, [r3, #0]
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072a6:	221b      	movs	r2, #27
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	68b8      	ldr	r0, [r7, #8]
 80072ac:	f7fe ff88 	bl	80061c0 <_SendPacket>
  RECORD_END();
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f383 8811 	msr	BASEPRI, r3
}
 80072b6:	bf00      	nop
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	200197a4 	.word	0x200197a4
 80072c4:	200197a0 	.word	0x200197a0

080072c8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	@ 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072d0:	f3ef 8311 	mrs	r3, BASEPRI
 80072d4:	f04f 0120 	mov.w	r1, #32
 80072d8:	f381 8811 	msr	BASEPRI, r1
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	4827      	ldr	r0, [pc, #156]	@ (800737c <SEGGER_SYSVIEW_Warn+0xb4>)
 80072e0:	f7fe fe82 	bl	8005fe8 <_PreparePacket>
 80072e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072e6:	2280      	movs	r2, #128	@ 0x80
 80072e8:	6879      	ldr	r1, [r7, #4]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7fe fe4c 	bl	8005f88 <_EncodeStr>
 80072f0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f6:	2301      	movs	r3, #1
 80072f8:	623b      	str	r3, [r7, #32]
 80072fa:	e00b      	b.n	8007314 <SEGGER_SYSVIEW_Warn+0x4c>
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	1c59      	adds	r1, r3, #1
 8007304:	6279      	str	r1, [r7, #36]	@ 0x24
 8007306:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800730a:	b2d2      	uxtb	r2, r2
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	09db      	lsrs	r3, r3, #7
 8007312:	623b      	str	r3, [r7, #32]
 8007314:	6a3b      	ldr	r3, [r7, #32]
 8007316:	2b7f      	cmp	r3, #127	@ 0x7f
 8007318:	d8f0      	bhi.n	80072fc <SEGGER_SYSVIEW_Warn+0x34>
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007320:	6a3a      	ldr	r2, [r7, #32]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	2300      	movs	r3, #0
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	e00b      	b.n	800734c <SEGGER_SYSVIEW_Warn+0x84>
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	61f9      	str	r1, [r7, #28]
 800733e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	09db      	lsrs	r3, r3, #7
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007350:	d8f0      	bhi.n	8007334 <SEGGER_SYSVIEW_Warn+0x6c>
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	61fa      	str	r2, [r7, #28]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007362:	221a      	movs	r2, #26
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	6938      	ldr	r0, [r7, #16]
 8007368:	f7fe ff2a 	bl	80061c0 <_SendPacket>
  RECORD_END();
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f383 8811 	msr	BASEPRI, r3
}
 8007372:	bf00      	nop
 8007374:	3728      	adds	r7, #40	@ 0x28
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200197a4 	.word	0x200197a4

08007380 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007382:	b085      	sub	sp, #20
 8007384:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
 800738a:	e033      	b.n	80073f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800738c:	491e      	ldr	r1, [pc, #120]	@ (8007408 <_cbSendTaskList+0x88>)
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	491a      	ldr	r1, [pc, #104]	@ (8007408 <_cbSendTaskList+0x88>)
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	440b      	add	r3, r1
 80073aa:	3304      	adds	r3, #4
 80073ac:	6819      	ldr	r1, [r3, #0]
 80073ae:	4c16      	ldr	r4, [pc, #88]	@ (8007408 <_cbSendTaskList+0x88>)
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4423      	add	r3, r4
 80073bc:	3308      	adds	r3, #8
 80073be:	681c      	ldr	r4, [r3, #0]
 80073c0:	4d11      	ldr	r5, [pc, #68]	@ (8007408 <_cbSendTaskList+0x88>)
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	442b      	add	r3, r5
 80073ce:	330c      	adds	r3, #12
 80073d0:	681d      	ldr	r5, [r3, #0]
 80073d2:	4e0d      	ldr	r6, [pc, #52]	@ (8007408 <_cbSendTaskList+0x88>)
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4613      	mov	r3, r2
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4433      	add	r3, r6
 80073e0:	3310      	adds	r3, #16
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	462b      	mov	r3, r5
 80073e8:	4622      	mov	r2, r4
 80073ea:	f000 f8bd 	bl	8007568 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3301      	adds	r3, #1
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <_cbSendTaskList+0x8c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d3c6      	bcc.n	800738c <_cbSendTaskList+0xc>
  }
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007408:	20019888 	.word	0x20019888
 800740c:	20019928 	.word	0x20019928

08007410 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007418:	f7fc fd9c 	bl	8003f54 <xTaskGetTickCountFromISR>
 800741c:	4603      	mov	r3, r0
 800741e:	2200      	movs	r2, #0
 8007420:	469a      	mov	sl, r3
 8007422:	4693      	mov	fp, r2
 8007424:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	f04f 0a00 	mov.w	sl, #0
 8007434:	f04f 0b00 	mov.w	fp, #0
 8007438:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800743c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007440:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007444:	4652      	mov	r2, sl
 8007446:	465b      	mov	r3, fp
 8007448:	1a14      	subs	r4, r2, r0
 800744a:	eb63 0501 	sbc.w	r5, r3, r1
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	00ab      	lsls	r3, r5, #2
 8007458:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800745c:	00a2      	lsls	r2, r4, #2
 800745e:	4614      	mov	r4, r2
 8007460:	461d      	mov	r5, r3
 8007462:	eb14 0800 	adds.w	r8, r4, r0
 8007466:	eb45 0901 	adc.w	r9, r5, r1
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800747e:	4690      	mov	r8, r2
 8007480:	4699      	mov	r9, r3
 8007482:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8007486:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800748a:	4610      	mov	r0, r2
 800748c:	4619      	mov	r1, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007498 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80074a6:	2205      	movs	r2, #5
 80074a8:	492b      	ldr	r1, [pc, #172]	@ (8007558 <SYSVIEW_AddTask+0xc0>)
 80074aa:	68b8      	ldr	r0, [r7, #8]
 80074ac:	f000 f87d 	bl	80075aa <memcmp>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d04b      	beq.n	800754e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80074b6:	4b29      	ldr	r3, [pc, #164]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b07      	cmp	r3, #7
 80074bc:	d903      	bls.n	80074c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80074be:	4828      	ldr	r0, [pc, #160]	@ (8007560 <SYSVIEW_AddTask+0xc8>)
 80074c0:	f7ff ff02 	bl	80072c8 <SEGGER_SYSVIEW_Warn>
    return;
 80074c4:	e044      	b.n	8007550 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80074c6:	4b25      	ldr	r3, [pc, #148]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4926      	ldr	r1, [pc, #152]	@ (8007564 <SYSVIEW_AddTask+0xcc>)
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80074da:	4b20      	ldr	r3, [pc, #128]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4921      	ldr	r1, [pc, #132]	@ (8007564 <SYSVIEW_AddTask+0xcc>)
 80074e0:	4613      	mov	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	440b      	add	r3, r1
 80074ea:	3304      	adds	r3, #4
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80074f0:	4b1a      	ldr	r3, [pc, #104]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	491b      	ldr	r1, [pc, #108]	@ (8007564 <SYSVIEW_AddTask+0xcc>)
 80074f6:	4613      	mov	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	3308      	adds	r3, #8
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007506:	4b15      	ldr	r3, [pc, #84]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4916      	ldr	r1, [pc, #88]	@ (8007564 <SYSVIEW_AddTask+0xcc>)
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	330c      	adds	r3, #12
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800751c:	4b0f      	ldr	r3, [pc, #60]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4910      	ldr	r1, [pc, #64]	@ (8007564 <SYSVIEW_AddTask+0xcc>)
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	3310      	adds	r3, #16
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007532:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	4a08      	ldr	r2, [pc, #32]	@ (800755c <SYSVIEW_AddTask+0xc4>)
 800753a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f80e 	bl	8007568 <SYSVIEW_SendTaskInfo>
 800754c:	e000      	b.n	8007550 <SYSVIEW_AddTask+0xb8>
    return;
 800754e:	bf00      	nop

}
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	08007738 	.word	0x08007738
 800755c:	20019928 	.word	0x20019928
 8007560:	08007740 	.word	0x08007740
 8007564:	20019888 	.word	0x20019888

08007568 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	@ 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007576:	f107 0314 	add.w	r3, r7, #20
 800757a:	2214      	movs	r2, #20
 800757c:	2100      	movs	r1, #0
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f823 	bl	80075ca <memset>
  TaskInfo.TaskID     = TaskID;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007598:	f107 0314 	add.w	r3, r7, #20
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff f9ff 	bl	80069a0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80075a2:	bf00      	nop
 80075a4:	3728      	adds	r7, #40	@ 0x28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <memcmp>:
 80075aa:	b510      	push	{r4, lr}
 80075ac:	3901      	subs	r1, #1
 80075ae:	4402      	add	r2, r0
 80075b0:	4290      	cmp	r0, r2
 80075b2:	d101      	bne.n	80075b8 <memcmp+0xe>
 80075b4:	2000      	movs	r0, #0
 80075b6:	e005      	b.n	80075c4 <memcmp+0x1a>
 80075b8:	7803      	ldrb	r3, [r0, #0]
 80075ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075be:	42a3      	cmp	r3, r4
 80075c0:	d001      	beq.n	80075c6 <memcmp+0x1c>
 80075c2:	1b18      	subs	r0, r3, r4
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	3001      	adds	r0, #1
 80075c8:	e7f2      	b.n	80075b0 <memcmp+0x6>

080075ca <memset>:
 80075ca:	4402      	add	r2, r0
 80075cc:	4603      	mov	r3, r0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d100      	bne.n	80075d4 <memset+0xa>
 80075d2:	4770      	bx	lr
 80075d4:	f803 1b01 	strb.w	r1, [r3], #1
 80075d8:	e7f9      	b.n	80075ce <memset+0x4>
	...

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	@ (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	@ (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007620 <__libc_init_array+0x44>)
 80075f0:	f000 f826 	bl	8007640 <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	080077d8 	.word	0x080077d8
 8007618:	080077d8 	.word	0x080077d8
 800761c:	080077d8 	.word	0x080077d8
 8007620:	080077dc 	.word	0x080077dc

08007624 <memcpy>:
 8007624:	440a      	add	r2, r1
 8007626:	4291      	cmp	r1, r2
 8007628:	f100 33ff 	add.w	r3, r0, #4294967295
 800762c:	d100      	bne.n	8007630 <memcpy+0xc>
 800762e:	4770      	bx	lr
 8007630:	b510      	push	{r4, lr}
 8007632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763a:	4291      	cmp	r1, r2
 800763c:	d1f9      	bne.n	8007632 <memcpy+0xe>
 800763e:	bd10      	pop	{r4, pc}

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr
